%META:TOPICINFO{author="ForrestChristian" date="1187725952" format="1.1" version="1.13"}%
%META:TOPICPARENT{name="WebHome"}%
<style type="text/css">
  pre.code { border-style: solid; border-color: black; border-width: thin; background-color: #eeeeee; color: blue }
  pre.command { color: blue }
  span.comment { color: red; font-weight: bold }
  span.command { font-family: courier; color: blue }
  span.code-snippet { font-family: courier; color: blue; background-color: #eeeeee }
  span.env-var { font-family: courier; font-size: larger }
  span.filename { font-family: courier; font-style: italic; font-weight: bold; padding-right: 0.7em }
  span.arg { font-family: courier; font-style: italic; padding-right: 0.7em }
  span.paren01 { font-weight: 500; color: #d03000 }
  span.paren02 { font-weight: 500; color: #30d000 }
  span.paren03 { font-weight: 600; color: #d03010 }
  span.paren04 { font-weight: 600; color: #30d010 }
  span.paren05 { font-weight: 700; color: #d03020 }
  span.paren06 { font-weight: 700; color: #30d020 }
  span.paren07 { font-weight: 800; color: #d03030 }
  span.paren08 { font-weight: 800; color: #30d030 }
  span.paren09 { font-weight: 900; color: #d03040 }
  span.paren10 { font-weight: 900; color: #30d040 }
  span.hash-key { font-weight: bold; color: #555555  }
  span.hash-value { font-weight: bold; color: #007722 }
</style>

---+ An extensible VO-centric Site Test package.

<!-- Set location of auxiliary web pages.
   * Set UserSupportAux = http://user-support.opensciencegrid.org/
   * Set VOTestWWW = %UserSupportAux%osg-vo-tests/
   * Set VOTestVersion = 0.10
-->

%TOC%

<hr />

---++ Overview

This package is an attempt to allow <em>application owners</em> (by which I mean people responsible for running an application on OSG) to characterize OSG sites from the point of view of being able to run your application. Questions can be asked of each site in multiple ways, for instance:

   * Command line, eg: <pre class="command">ping <span class="arg">my-ce.my-domain</span></pre>

   * Fork job, eg: <pre class="command">globus-job-run <span class="arg">my-ce.my-domain</span> /usr/bin/printenv</pre>

   * Batch job via !CondorG.

   * !ReSS, the <strong>Re</strong>source <strong>S</strong>election <strong>S</strong>ystem.

   * VORS, the <strong>VO</strong> <strong>R</strong>esource <strong>S</strong>elector.

The results are presented primarily in the form of an HTML table with results columns (possibly multiple columns per test), with a link to more detailed information for the test.

In addition, the summary results are available in =.CSV= format for machine readability; a true XML format may be forthcoming if there is enough demand.

Please see my [[%ATTACHURL%/2007_07_26_Discovering_site_env.ppt][presentation at the OSG Users' Meeting at FNAL 2007/07/26-27]].

---++ Requirements

Any UNIX-like system with Perl and enough of an OSG client to be able to find <span class="command">condor_submit</span>, <span class="command">condor_status</span>, <span class="command">globus-job-run</span>, <span class="command">voms-proxy-init</span> and <span class="command">voms-proxy-info</span>.

---++ Source

The source is available as a tar-file: <span class="filename">[[%VOTestWWW%/osg-vo-tests-%VOTestVersion%.tar.bz2][osg-vo-tests-%VOTestVersion%.tar.bz2]]</span>. You will probably wish to customize modules yourself; please inherit where possible rather than cut-and-paste, since there could be several updates to the package, certainly in the early stages. You may wish to take advantage of the package's ability to be configured to find modules and scripts in other directories to separate your code from the package's code for ease of updating.

---++ Installation

   * Expand the tar file.

   * Add <span class="filename">osg-vo-tests-<span class="arg">&lt;version&gt;</span>/bin</span> to your <span class="env-var">PATH</span>, or link <span class="filename">osg-vo-tests-<span class="arg">&lt;version&gt;</span>/bin/gridSiteTest</span> to somewhere that is in <span class="env-var">PATH</span>.

   * If you intend to run the tests with a common subset of options, you may wish to set up a shell alias or function. A future version may support an options file if there is demand.

---++ Getting Started

---+++ Pre-requisites

   * Make sure you are able to obtain a VOMS-proxy.

---+++ Running the basic test set

<dl><dt><span class="command">gridSiteTest -V <span class="arg">myvo:/myvo</span></span></dt>
<dd>
<ul>
  <li>Screen output (where FQAN = <span class="arg">fermilab:/fermilab</span>)</li>
  <li>Summary page</li>
</ul>
</dd>
</dl>

---+++ Exploring and tweaking the output

   * Click on a test result in the !ReSS results group column: you will be taken to the test details.
   * Pick an interesting GLUE Schema item from the details.
   * Make a copy of <span class="filename">control/default-tests.dat</span>.
   * Edit the copy to make the specification for the !ReSS test read: <pre class="code">
<span class="paren01">{</span> <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::ReSS"</span>,
  <span class="hash-key">results</span> => <span class="paren02">[</span> <span class="paren03">{</span> <span class="hash-key">"default-results"</span> => <span class="hash-value">1</span> <span class="paren03">}</span>,
               <span class="paren03">{</span> <span class="hash-key">"attribute-name"</span> => <span class="hash-value">"my-favorite-GLUE-schema-entry"</span>,
                 <span class="hash-key">"column-title"</span> => <span class="hash-value">"My Name"</span> <span class="paren03">}</span>
             <span class="paren02">]</span>
<span class="paren01">}</span>,</pre>
   * Re-run the tests: <span class="command">gridSiteTest -V <span class="arg">myvo:/myvo</span></span>

----++ More details

----+++ Invoking the test program

   * See the automatically-generated [[%VOTestWWW%gridSiteTest.html][usage documentation]] for <span class="command">gridSiteTest</span> for full details of all options

----+++ General test configuration details

   * The test configuration file is in the format of a Perl hash:<pre class="code">
<span class="paren01">(</span> <span class="comment"># Hash open</span>
  <span class="paren02">{</span> <span class="comment"># Anonymous hash representing a single test</span>
%STARTSECTION{ "ex-ping" }%    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::Ping"</span> <span class="comment"># Test Module (no other configuration)</span> %ENDSECTION{ "ex-ping"}%
  <span class="paren02">}</span>, <span class="comment"># Close test hash; comma separates test specs</span>
  <span class="paren02">{</span> <span class="comment"># New test spec</span>
%STARTSECTION{ "ex-VORS" }%    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::VORS"</span>,
    <span class="comment"># Module-specific attributes (see detailed docs for each module)</span>
    <span class="hash-key">attributes</span> => <span class="paren03">{</span> <span class="hash-key">results</span> => <span class="paren04">[</span> <span class="comment"># An array of hashes specifying the results</span>
                                 <span class="paren05">{</span> <span class="hash-key">"default-results"</span> => <span class="hash-value">1</span> <span class="paren05">}</span>, <span class="comment"># Produce the default set, and add ...</span>
                                 <span class="paren05">{</span> <span class="comment"># Specify an extra result column</span>
                                   <span class="hash-key">"column-title"</span> => <span class="hash-value">"Sponsoring VO(s)"</span>, <span class="comment"># Column title</span>
                                   <span class="hash-key">"attribute-name"</span> => <span class="hash-value">"sponsor_vo"</span> <span class="comment"># Column contents</span>
                                 <span class="paren05">}</span> <span class="comment"># Close column spec</span>
                               <span class="paren04">]</span> <span class="comment"># Close results array</span>
                  <span class="paren03">}</span> <span class="comment"># Close attributes hash</span> %ENDSECTION{ "ex-VORS"}%
  <span class="paren02">}</span>, <span class="comment"># Close test hash</span>
  <span class="paren02">{</span> <span class="comment"># New test spec</span>
    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::CondorGTest"</span>,
    <span class="hash-key">args</span> => <span class="hash-value"><span class="paren03">[</span> "Job JDL test" <span class="paren03">]</span></span>, <span class="comment"># Test description</span>
    <span class="hash-key">attributes</span> => <span class="comment"># Module-specific attributes</span>
    <span class="paren03">{</span> <span class="hash-key">jdl</span> => <span class="hash-value">&lt;&lt;'EOF' <span class="comment">JDL for condor_submit of batch job</span>
transfer_executable = false
executable = /usr/bin/id
EOF</span>
      ,
      <span class="hash-key">results</span> =>  <span class="paren04">[</span> <span class="paren05">{</span> <span class="hash-key">"column-title"</span> => <span class="hash-value">"User"</span>, <span class="comment"># Mapped user</span>
                      <span class="hash-key">"detail-key"</span> => <span class="hash-value">'Condor output file'</span>, <span class="comment"># Detail field to match</span>
                      <span class="hash-key">"match-operator"</span> => <span class="hash-value">'=~'</span>, <span class="comment"># Match operator</span>
                      <span class="hash-key">"match-regex"</span> => <span class="hash-value">'m!uid=\d+\(([^\)]+)!'</span>, <span class="comment"># Match expression</span>
                      <span class="hash-key">"match-value"</span> => <span class="hash-value">'$1'</span> <span class="comment"># Desired result</span>
                    <span class="paren05">}</span>, <span class="comment"># Close column spec</span>
                    <span class="paren05">{</span> <span class="hash-key">"column-title"</span> => <span class="hash-value">"Group"</span>, <span class="comment"># Mapped group</span>
                      <span class="hash-key">"detail-key"</span> => <span class="hash-value">'Condor output file'</span>, <span class="comment"># Detail field to match</span>
                      <span class="hash-key">"match-operator"</span> => <span class="hash-value">'=~'</span>, <span class="comment"># Match operator</span>
                      <span class="hash-key">"match-regex"</span> => <span class="hash-value">'m!gid=\d+\(([^\)]+)!'</span>, <span class="comment"># Match expression</span>
                      <span class="hash-key">"match-value"</span> => <span class="hash-value">'$1'</span> <span class="comment"># Desired result</span>
                    <span class="paren05">}</span> <span class="comment"># Close column spec</span>
                  <span class="paren04">]</span> <span class="comment"># Close results array</span>
    <span class="paren03">}</span> <span class="comment"># Close attributes hash</span>
  <span class="paren02">}</span> <span class="comment"># Close test hash</span>
<span class="paren01">)</span> <span class="comment"># Hash close</span>
</pre>

---+++ Options common to all modules.

   * The <span class="hash-key">args</span> specification for a test is an array of options to send to the particular module's constructor (<span class="code-snippet">new</span> function). What those options mean is defined by that module.
   * The <span class="hash-key">attributes</span> specification contains general and test-specific keys which alter module behavior. One such key that is recognized by all modules is <span class="hash-key">results</span>, which is used to specify results columns where that is appropriate for the module. This key points to an anonymous array of hashes describing results columns. Unless overridden by modules, the hash looks like this: <pre class="code"><span class="paren01">{</span>
 <span class="hash-key">"column-title"</span> => <span class="hash-value"><span class="arg">"My Column Title"</span></span>, <span class="comment"># Column title</span>
 <span class="hash-key">"detail-key"</span> => <span class="hash-value"><span class="arg">'output'</span></span>, <span class="comment"># Detail field to match</span>
 <span class="hash-key">"match-operator"</span> => <span class="hash-value"><span class="arg">'=~'</span></span>, <span class="comment"># Match operator</span>
 <span class="hash-key">"match-regex"</span> => <span class="hash-value"><span class="arg">'/blah/'</span></span>, <span class="comment"># Match expression</span>
 <span class="hash-key">"match-value"</span> => <span class="hash-value"><span class="arg">'$1'</span></span> <span class="comment"># Desired result</span>
<span class="paren01">}</span></pre>

---+++ Packaged test modules

---++++ Ping

   * This is a standalone module with no options.
   * Invoke it to check a gatekeeper is alive. First it sends an ICMP ping; if this fails, it tries a <span class="command">globusrun -r -a</span>. Of course, the latter will fail even if the gatekeeper is up if the tester's VO is not supported.
   * Example control script: <pre class="code">  <span class="paren02">{</span>
    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::Ping"</span> <span class="comment"># Test Module (no other configuration)</span>
  <span class="paren02">}</span></pre>
   * Example results file.

---++++ VORS

   * Configurable: various VORS attributes can be selected as results columns displayed in the summary.
   * Default set of information can be overridden or extended.
   * Example control script:<pre class="code">%INCLUDE{"OsgVoSiteTests" section="ex-VORS"}%</pre>

---++++ !ReSS
---++++ Command

---++++ Command

---++++ !ForkCommand

---+++++!! Environment

---+++++!! !CEGridFtpCheck

---+++++!! !CEGUMSDetector

---++++ !CondorGTest


-- Main.ChrisGreen - 10 Aug 2007

%META:FILEATTACHMENT{name="2007_07_26_Discovering_site_env.ppt" attachment="2007_07_26_Discovering_site_env.ppt" attr="" comment="Presentation of the OSG VO site test kit given at the OSG Users' Meeting, FNAL 2007/07/26-27." date="1186775886" path="2007_07_26_Discovering_site_env.ppt" size="127488" stream="2007_07_26_Discovering_site_env.ppt" user="Main.ChrisGreen" version="1"}%
