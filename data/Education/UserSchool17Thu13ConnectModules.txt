%META:TOPICINFO{author="BalamuruganDesinghu" date="1500510990" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="UserSchool17Materials"}%
---+ Thursday Exercise 1.3: Try an OSG Connect Software Module
%TOC%

In this exercise, you'll use a software package called GROMACS that was already installed on OASIS.  GROMACS is a molecular dynamics simulation program.

---++ Setup
   * Make sure you are logged into =user-training.osgconnect.net= (the OSG Connect submit server for this workshop).
---++ Practice Loading the GROMACS Module on OSG Connect submit host 

Before proceeding, make sure to read over the OSG Connect help desk guide on [[https://support.opensciencegrid.org/support/solutions/articles/5000634394-accessing-software-using-distributed-environment-modules][Accessing Software using Distributed Environment Modules]].

1. Run the =module avail= command to see available modules and determine which =gromacs= version will be the default (designated by a =(D)=).

2. Before loading the =gromacs= module, check your "PATH" variable with:


<pre class="screen">
%UCL_PROMPT_SHORT% <strong>echo $PATH</strong>
</pre>

3. Now load the =gromacs= module, which will give you the default version, and check your list of modules:

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>module load gromacs</strong>
%UCL_PROMPT_SHORT% <strong>module list</strong>
</pre>

4. Recheck your "PATH" variable. What has changed? Is the default version of =gromacs= visible?

5. When you're done, unload the module and check that you no longer have the module loaded:


<pre class="screen">
%UCL_PROMPT_SHORT% <strong>module unload gromacs</strong>
%UCL_PROMPT_SHORT% <strong>module list</strong>
%UCL_PROMPT_SHORT% <strong>echo $PATH</strong>
</pre>


---++ Submit a job that uses GROMACS from OASIS

Now let us see how to do a job submission on the OSG that uses GROMACS on OASIS (you don't have to transfer GROMACS source or the binary along with the job). 

We will get the example files using the =tutorial= command.
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>tutorial gromacs</strong>
</pre>

This creates a directory =tutorial-quickstart=. Go inside the directory and see what is inside.
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cd tutorial-gromacs</strong>
%UCL_PROMPT_SHORT% <strong>ls -F </strong>
</pre>

You will see the following files:
<pre class="file">
1cta_nvt.tpr  Figs/  gromacs_job.sh  gromacs_job.submit  README.md
</pre>


Take a look at the job description file
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cat gromacs_job.submit </strong>
</pre>

The modules are loaded in the wrapper script before executing the actual job. In this example, gromacs is loaded before running the actual simulation.
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cat gromacs_job.sh</strong>
</pre>

The following requirement is added to find a machine that has the modules:
<pre class="screen">
requirements = HAS_MODULES == True
</pre>

Check the job description file.
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cat gromacs_job.submit </strong>
</pre>

Let's submit the job.
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit gromacs_job.submit </strong>
</pre>

After the simulation is completed, you will see the output files (including gro, cpt and trr files) from GROMACS in your work directory.
