%META:TOPICINFO{author="ChristinaKoch" date="1469139676" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="UserSchool16Materials"}%
---+ Thursday Exercise 4.1: Large Input Data

In this exercise, we will run a multimedia program that converts and manipulates video files. In particular, we want to convert a \
larger (almost GB-sized) =.mp4= files to something that's more easy to share (10s - 100s of MB).  This exercise should take 20-25 minutes.

---++ Motivation

The size of our input data is going to be the limiting factor when submitting these jobs.  \
We could use a proxy (like Squid or StashCache), but what if our =.mp4= files were even larger than what these proxies could \
handle?  Another alternative for handling large input and output files, especially if they are unique to each job, is a local \
shared filesystem.  This is a filesystem that all (or most) of the execute servers can access, so data stored there can be delivered \
to the job from that directory instead of as a transfer or download.  

In our case here, the =.mp4= files are specific to each job and are too large to be handled using file transfer.  Neither can they be \
split up.  We'll need to use a local filesystem.  

Ultimately we'll want to create a submit file for several jobs (one for each =mp4=), but to start with, we'll run one job to \
make sure that everything works.  

---++ Data and Software

First, we'll start copying the movie files into our Gluster directory.  Type in: 
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cp /mnt/gluster/ckoch5/video/*mp4 /mnt/gluster/username</strong>
</pre>
Replace =username= with *your* username on =learn.chtc.wisc.edu=.  

While the files are copying, we'll learn about the program we'll be using, =ffmpeg=.  It's a multi-purpose media tool \
that we'll be using to convert video formats.  The basic command looks like this: \
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>./ffmpeg -i input.mp4 output.mp4</strong>
</pre>

In order to resize our files, we're going to manually set the video bitrate, so that the resulting file is small enough.  
<pre class="screen">
%UCL_PROMPT_SHORT% <strong> ./ffmpeg -i input.mp4 -b:v 400k output.mp4</strong>
</pre>

To get the =ffmpeg= program do the following: 
   1. We'll be downloading the pre-built static binary from this page: http://johnvansickle.com/ffmpeg/ \
Look for the =x86_64= build.  \
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz</strong>
</pre>
   1. Once the binary is downloaded, un-tar it, and then copy the main =ffmpeg= program into your current directory: \
<pre class="screen"> 
%UCL_PROMPT_SHORT% <strong>tar -xf ffmpeg-release-64bit-static.tar.xz</strong>
%UCL_PROMPT_SHORT% <strong>cp ffmpeg-3.1.1-64bit-static/ffmpeg ./</strong>
</pre>

---++ Script

Now we want to write a script that uses =ffmpeg= to convert an =mp4= file to a smaller format.  We're going to start \
with the smallest file as a test - that way if anything goes wrong, it will be less of an issue.  Our script will need to _copy_ \
that movie file from our Gluster directory to the job's current working directory, _run_ the appropriate =ffmpeg= command, \
and then _remove_ the original movie file so that it doesn't get transferred back to the submit server.  This last step is \
particularly important, as otherwise you will have large files transferring into the submit server and filling up your home directory space.

   1. Look at the video in your Gluster directory, using =ls -lh=.  Which is the smallest?  
   1. Create a file called =run_ffmpeg.sh=, that does the steps described above, using the file you found in the previous step.  That script should look something like this: \
<pre class="file">
#!/bin/bash

cp /mnt/gluster/username/PBS_blah ./
./ffmpeg -i input.mp4 -b:v 400k output.mp4
rm PBS_blah
</pre>

---++ Submit File

Create a submit file for this job, based on other submit files from the school.  
   1. Important considerations: 
   1. Memory, disk
   1. Important!  Don't list the name of the =mp4= in =transfer_input_files=.  Our job will be interacting with the input \
PDF files solely from within the script we wrote above.  
   1. Add a line to the file that ensures your job will land on computers that have access to Gluster: \
<pre class="file">
requirements = (Target.HasGluster == true)
</pre>


---++ Follow-Up Challenge

We wrote the name of the =.mov= file into our =run_ffmpeg.sh= executable script.  How can you change: 
   1. the script
   2. the submit file
To submit a job for each of the =.mov= files in our Gluster directory?  
