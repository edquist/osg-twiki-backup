%META:TOPICINFO{author="ChristinaKoch" date="1469195060" format="1.1" version="1.4"}%
%META:TOPICPARENT{name="UserSchool16Materials"}%
---+ Thursday Exercise 4.1: Large Input Data

In this exercise, we will run a multimedia program that converts and manipulates video files. In particular, we want to convert large \
=.mov= files to smaller (10-100s of MB) =mp4= files.  This exercise should take 25-30 minutes.

---++ Background

The size of our input data is going to be the limiting factor when submitting these jobs.  \
In previous exercises ([[UserSchool16Thu31BlastProxy][Exercise 3.1 Using Squid]] and [[UserSchool16Thurs32BlastStash][Exercise 3.2 Using Stash]]) \
 we've practiced using a \
proxy to stage our data, but sometimes even a proxy isn't even enough to deliver files.  Proxies also can't handle large output.  In these cases \ 
another alternative for handling large files (both input and output), especially if they are unique to each job, is a local \
shared filesystem.  This is a filesystem that all (or most) of the execute servers can access, so data stored there can be delivered \
to the job from that directory instead of as a transfer or download.  

For this example, the =.mov= files are specific to each job and are too large to be handled using file transfer, so we'll be using \
a shared filesystem local to CHTC.  The name of our shared filesystem is Gluster and user directories are found as sub-directories \
of the path =/mnt/gluster=.  This is just one example of what it can look like to use a shared filesystem.  If you are running \
jobs at your own institution, the shared filesystem and how to access it may be different . 

---++ Accessing the Filesystem

Because our shared filesystem is only available on the local CHTC HTCondor pool, you'll need to log into our local submit server, =learn.chtc.wisc.edu=.  

Once you've logged in, navigate to your Gluster directory.  It should be at the location =/mnt/gluster/username=.  

---++ Data and Software

We'll start by copying the source movie files into our Gluster directory.  They are located in =/mnt/gluster/ckoch5/video= and have a =.mp4= extension.  
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cp /mnt/gluster/ckoch5/video/*mp4 /mnt/gluster/username</strong>
</pre>
Replace =username= with *your* username on =learn.chtc.wisc.edu=.  

There are 3 files, so this command may take a few minutes.  

While the files are copying, let's learn about the program we'll be using, =ffmpeg=.  It's a multi-purpose media tool \
that we'll be using to convert video formats.  The basic command to convert a file looks like this: \
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>./ffmpeg -i input.mov output.mp4</strong>
</pre>

In order to resize our files, we're going to manually set the video bitrate and resize the frames, so that the resulting file is smaller.  
<pre class="screen">
%UCL_PROMPT_SHORT% <strong> ./ffmpeg -i input.mp4 -b:v 400k -s 640x360 output.mp4</strong>
</pre>

To get the =ffmpeg= program do the following: 
   1. Go back to your home directory on =learn.chtc.wisc.edu= (the =cd= command will get you there), create a directory for this exercise and move into it.  
   1. We'll be downloading the =ffmpeg= pre-built static binary from this page: http://johnvansickle.com/ffmpeg/. \
Look for the =x86_64= build.  \
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz</strong>
</pre>
   1. Once the binary is downloaded, un-tar it, and then copy the main =ffmpeg= program into your current directory: \
<pre class="screen"> 
%UCL_PROMPT_SHORT% <strong>tar -xf ffmpeg-release-64bit-static.tar.xz</strong>
%UCL_PROMPT_SHORT% <strong>cp ffmpeg-3.1.1-64bit-static/ffmpeg ./</strong>
</pre>

---++ Script

We want to write a script that uses =ffmpeg= to convert a =.mov= file to a smaller format.  Our script will need to _copy_ \
that movie file from our Gluster directory to the job's current working directory, _run_ the appropriate =ffmpeg= command, \
and then _remove_ the original movie file so that it doesn't get transferred back to the submit server.  This last step is \
particularly important, as otherwise you will have large files transferring into the submit server and filling up your home directory space.

   1. We're going to start with the smallest file as a test - that way if anything goes wrong, it will be less of an issue.  \
Look at the videos in your Gluster directory, using =ls -lh=.  Which is the smallest?  
   1. Create a file called =run_ffmpeg.sh=, that does the steps described above.  Use the name of the smallest =.mov= file \
in the =ffmpeg= command.  Once you've written your script, check it against the example below: \
<pre class="file">
#!/bin/bash

cp /mnt/gluster/username/input.mov ./
./ffmpeg -i input.mov -b:v 400k output.mp4
rm input.mov
</pre>

Ultimately we'll want to submit several jobs (one for each =.mov= file), but to start with, we'll run one job to \
make sure that everything works.  

---++ Submit File

Create a submit file for this job, based on other submit files from the school.  Things to consider: 
   1. We'll be copying the video file into the job's working directory, so make sure to request enough disk space.  
   1. *Important!*  Don't list the name of the =.mov= in =transfer_input_files=.  Our job will be interacting with the input \
=.mov= files solely from within the script we wrote above.  
   1. Add a line to the file (before the final queue statement) that ensures your job will land on computers that have access to Gluster: \
<pre class="file">
requirements = (Target.HasGluster == true)
</pre>



---++ Follow-Up

We wrote the name of the =.mov= file into our =run_ffmpeg.sh= executable script.  How can you change: 
   1. the script
   2. the submit file
To submit a job for each of the =.mov= files in our Gluster directory?  Once you've thought about it, check your reasoning against \
the instructions below.  



---++ Bonus

If you wanted to set a different bitrate and size for each original movie, how could you modify: 
   1. =list.txt=
   2. =run_ffmpeg.sh=
   3. Your submit file
to do so?  