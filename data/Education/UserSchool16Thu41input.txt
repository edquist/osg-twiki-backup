%META:TOPICINFO{author="ChristinaKoch" date="1468878689" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="UserSchool16Materials"}%
---+ Thursday Exercise 4.1: Large Input Data

In this exercise, we will run a job that runs an Optical Character Recognition (OCR) program on a scanned pdf file and \
returns the scanned text as a plain text file, essentially converting a large PDF file into a smaller text file.  This exercise should take 20-25 minutes.

---++ Background

Several journals have been scanned and saved as PDF files.  It's our job to convert each one to a plain text file \
using the OCR program =name of program=.  To convert one file looks like this: 
<pre class="screen">
$ ocr_prog input output
</pre>

As we've been discussing all day, the size of our input data is going to be the limiting factor when submitting these jobs.  \
We could use a proxy (like Squid or StashCache), but what if our PDF files were even larger than what these proxies could \
handle?  One more alternative for handling large input and output files, especially if they are unique to each job, is a local \
shared filesystem.  This is a filesystem that all (or most) of the execute servers can access, so data stored there can be delivered \
to the job from that directory instead of as a transfer or download.  

In our case here, the PDF files are specific to each job and are too large to be handled using file transfer.  Neither can they be \
split up.  We'll need to use a local filesystem.  

Ultimately we'll want to create a submit file for several jobs (one for each PDF), but to start with, we'll run one job to \
make sure that everything works.  

---++ Data and Software

First, we'll get our data and make sure 

   1. Because we need to run on the local pool, log into =learn.chtc.wisc.edu=
   1. Move to your Gluster directory.  It will use the same username as your home directory: \
<pre class="screen">
$ cd /mnt/gluster/username
</pre> \
   Check and see if there are any files in the directory.  It should be empty!  
   1. Download the input data files: \
<pre class="screen">
$ cd /mnt/gluster/username
</pre>
   1. Untar and look at them
   1. Move back to your home directory and copy the software to your homedir.  

---++ Submit File

   1. Create a submit file for this job, based on other submit files from the school.  
   1. Important considerations: 
      1. Memory, disk
      1. Important!  Don't list the name of the PDF in =transfer_input_files=.  Our job will be interacting with the input \
PDF files solely from within the job's executable.  
   1. Add a line to the file that ensures your job will land on computers that have access to Gluster: 
<pre class="file">
requirements = (Target.HasGluster == true)
</pre>

---++ Script

This is the most important piece of our job submission!  This is how our job will interact with the files in Gluster.  

   1. Create a file called =run_ocr.sh=
   1. This file needs to do the following: 
      - copy our input file from Gluster
      - run the OCR program
      - then, most importantly, it needs to remove the input file when the job completes

Once your script is complete, submit the job.  

---++ Follow-Up Challenge

We wrote the name of the PDF file into our =run_ocr.sh= executable script.  How can you change: 
   1. the script
   2. the submit file
To submit a job for each of the PDF files in our Gluster directory?  
