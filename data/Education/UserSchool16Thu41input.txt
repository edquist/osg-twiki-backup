%META:TOPICINFO{author="ChristinaKoch" date="1469127349" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="UserSchool16Materials"}%
---+ Thursday Exercise 4.1: Large Input Data

In this exercise, we will run a multimedia program that converts and manipulates video files. In particular, we want to convert a \
larger (almost GB-sized) =.mp4= files to something that's more easy to share (10s - 100s of MB).  This exercise should take 20-25 minutes.

---++ Motivation

The size of our input data is going to be the limiting factor when submitting these jobs.  \
We could use a proxy (like Squid or StashCache), but what if our =.mp4= files were even larger than what these proxies could \
handle?  Another alternative for handling large input and output files, especially if they are unique to each job, is a local \
shared filesystem.  This is a filesystem that all (or most) of the execute servers can access, so data stored there can be delivered \
to the job from that directory instead of as a transfer or download.  

In our case here, the =.mp4= files are specific to each job and are too large to be handled using file transfer.  Neither can they be \
split up.  We'll need to use a local filesystem.  

Ultimately we'll want to create a submit file for several jobs (one for each =mp4=), but to start with, we'll run one job to \
make sure that everything works.  

---++ Data and Software

First, we'll start copying the movie files into our Gluster directory.  Type in: 
<pre class="screen">
$ <strong>cp /mnt/gluster/ckoch5/video /mnt/gluster/username</strong>
</pre>
Replacing =username= with *your* username on =learn.chtc.wisc.edu=.  

While the files are copying, learn about the program we'll be using, =ffmpeg=: 


To get =ffmpeg= do the following: 
   1. We'll be downloading the pre-built static binary from this page: http://johnvansickle.com/ffmpeg/ \
Look for the =x86_64= build.  
<pre class="screen">
$ <strong>wget http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz</strong>
</pre>
   1. Once the binary is downloaded, un-tar it, and then copy the main =ffmpeg= program into your current directory: 
<pre class="screen">
$ <strong>tar -xz /ffmpeg-release-64bit-static.tar.xz</strong>
$ <strong>cp ffmpeg-3.1.1-64bit-static/ffmpeg ./</strong>
</pre>

---++ Script

Now we want to write a script that uses =ffmpeg= to convert an =mp4= file to a smaller format.  We're going to start \
with the smallest file as a test - that way if anything goes wrong, it will be less of an issue.  Our script will need to copy \
that movie file from our Gluster directory to the job's current working directory, run the appropriate =ffmpeg= command, \
and then remove the original movie file so that it doesn't get transferred back to the submit server.  This last step is \
particularly important, as otherwise you will have large files transferring into the submit server and filling up your home directory space.

   1. Create a file called =run_ffmpeg.sh=, that does the steps outlined above.  
   1. Look at the video in your Gluster directory, using =ls -lh=.  Which is the smallest?  Use that filename in your script.  

Once your script is complete, submit the job.  

---++ Submit File

   1. Create a submit file for this job, based on other submit files from the school.  
   1. Important considerations: 
      1. Memory, disk
      1. Important!  Don't list the name of the PDF in =transfer_input_files=.  Our job will be interacting with the input \
PDF files solely from within the job's executable.  
   1. Add a line to the file that ensures your job will land on computers that have access to Gluster: 
<pre class="file">
requirements = (Target.HasGluster == true)
</pre>


---++ Follow-Up Challenge

We wrote the name of the PDF file into our =run_ocr.sh= executable script.  How can you change: 
   1. the script
   2. the submit file
To submit a job for each of the PDF files in our Gluster directory?  
