%META:TOPICINFO{author="BrianBockelman" date="1278707318" format="1.1" version="1.1"}%
%META:TOPICPARENT{name="MaterialsOSS2010"}%

---+ Using BLAST for OSG Summer School 2010

---+ Introduction and Science Background

We will be using a popular biology tool, BLAST, for the "science demo" in the OSG Summer School 2010.  We are not biologists, but will explain what BLAST is to the best of our ability and how we will be using it in our grid school.

BLAST is a tool to query protein and DNA "databases".  These databases are large collections of DNA or protein sequences and their associated headers.  BLAST uses the binary format of the data, but there is also a human-friendly format called "FASTA".

Here is what a sample yeast protein looks like in FASTA format

<verbatim>
>gi|6319430|ref|NP_009512.1| proteasome subunit; Pre7p
MATIASEYSSEASNTPIEHQFNPYGDNGGTILGIAGEDFAVLAGDTRNITDYSINSRYEPKVFDCGDNIVMSANGFAADG
DALVKRFKNSVKWYHFDHNDKKLSINSAARNIQHLLYGKRFFPYYVHTIIAGLDEDGKGAVYSFDPVGSYEREQCRAGGA
AASLIMPFLDNQVNFKNQYEPGTNGKVKKPLKYLSVEEVIKLVRDSFTSATERHIQVGDGLEILIVTKDGVRKEFYELKR
D
</verbatim>

Here is what the first few lines of a yeast chromosome looks like:
<verbatim>
>gi|6322236|ref|NC_001142.1| Saccharomyces cerevisiae chromosome X, complete chromosome sequence
CCCACACACACACCACACCCACACCCACACACACCACACCCACACACCACACCCACACCAACTCTCTCTCATCTACCTTT
ACTCGCGCTGTCACACCTTACCCGGCTTTCTGACCGAAATTAAAAAAAATGAAAATGAAATCCTGTTCTTTAGCCCTACA
ACACTTTTACATAGCCCTAAATAGCCCTAAATAGCCCTCATTTACGTCTCCTCCAAGCCCTATTGACTCTTACCCGGAGT
TTCAGCTAAAAGCTATACTTACTACCTTTATTTTATGTTTACTTTTTATAGACTGTCTTTTCATCCTACTCCTTCGCACT
TGTCTCTCGCTACTGCCGTGCAACAAACACTAAATCAAAACAGTAAAATACTACATCAAAACGCATATTCCCTAGAAAAA
AATTTTCTTACAATATACTATACTACACAATACATAATCAGTGACTTTCGTAACAACAATTTCCTTCACTCTCCAACTTC
</verbatim>

Chromosomes are very large, and the whole one isn't given here.

A database is a collection of either proteins or DNA sequences.  Large biological databases are maintained by large biological labs (NCBI keeps many copies of these databases in BLAST format available for download).

A common workflow in bioinformatics is to have a large number of different queries to run against a database.  A query is simply a DNA or protein sequence.  The BLAST algorithm does alignments between the query and the database entries.  It does not look at exact matches, but looks for partial alignments, insertions of characters, and deletions of characters.

---+ Installing BLAST

We have packaged a version of BLAST using the OSG packaging tool, pacman.  First, source your current VDT directory:

<verbatim class="screen">
source /opt/osg/osg-1.2/setup.sh
</verbatim>

This should bring the command line =pacman= tool into your environment.  To download and install the software into your home directory, do this:
<verbatim class="screen">
[bbockelm@osg-edu ~]$ cd $HOME
[bbockelm@osg-edu ~]$ mkdir blast
[bbockelm@osg-edu ~]$ cd blast
[bbockelm@osg-edu blast]$ pacman -allow trust-all-caches -get http://t2.unl.edu/store/cache:blast
Beginning VDT prerequisite checking script vdt-common/vdt-prereq-check...

All prerequisite checks are satisfied.
[bbockelm@osg-edu blast]$ echo $?                         
0
</verbatim>

You should now have the =blastp= command-line tool in your environment.  Verify this by doing the following:

<verbatim class="screen">
[bbockelm@osg-edu blast]$ source $HOME/blast/setup.sh
[bbockelm@osg-edu blast]$ blastp -help
USAGE
  blastp [-h] [-help] [-import_search_strategy filename]
    [-export_search_strategy filename] [-task task_name] [-db database_name]
    [-dbsize num_letters] [-gilist filename] [-negative_gilist filename]
    [-entrez_query entrez_query] [-db_soft_mask filtering_algorithm]
    [-subject subject_input_file] [-subject_loc range] [-query input_file]
    [-out output_file] [-evalue evalue] [-word_size int_value]
    [-gapopen open_penalty] [-gapextend extend_penalty]
    [-xdrop_ungap float_value] [-xdrop_gap float_value]
    [-xdrop_gap_final float_value] [-searchsp int_value] [-seg SEG_options]
    [-soft_masking soft_masking] [-matrix matrix_name]
    [-threshold float_value] [-culling_limit int_value]
    [-best_hit_overhang float_value] [-best_hit_score_edge float_value]
    [-window_size int_value] [-lcase_masking] [-query_loc range]
    [-parse_deflines] [-outfmt format] [-show_gis]
    [-num_descriptions int_value] [-num_alignments int_value] [-html]
    [-max_target_seqs num_sequences] [-num_threads int_value] [-ungapped]
    [-remote] [-comp_based_stats compo] [-use_sw_tback] [-version]

DESCRIPTION
   Protein-Protein BLAST 2.2.23+

(remainder of screen output skipped)
</verbatim>

---+ Blast Databases and Queries

Look at the contents of the directory ~bbockelm/blast_dbs.  It should look somewhat like this:

<verbatim class="screen">
[bbockelm@osg-edu blast_dbs]$ ls -lh ~bbockelm/blast_dbs/
total 188M
-rw-rw-r--  1 bbockelm bbockelm 8.2M Jul  9 13:48 drosoph.aa
-rw-rw-r--  1 bbockelm bbockelm 1.7M Jul  9 13:48 drosoph.aa.phr
-rw-rw-r--  1 bbockelm bbockelm 113K Jul  9 13:48 drosoph.aa.pin
-rw-rw-r--  1 bbockelm bbockelm 112K Jul  9 13:48 drosoph.aa.pnd
-rw-rw-r--  1 bbockelm bbockelm  492 Jul  9 13:48 drosoph.aa.pni
-rw-rw-r--  1 bbockelm bbockelm 427K Jul  9 13:48 drosoph.aa.psd
-rw-rw-r--  1 bbockelm bbockelm 9.8K Jul  9 13:48 drosoph.aa.psi
-rw-rw-r--  1 bbockelm bbockelm 6.9M Jul  9 13:48 drosoph.aa.psq
-rw-rw-r--  1 bbockelm bbockelm 119M Jul  9 13:54 drosoph.nt
-rw-rw-r--  1 bbockelm bbockelm 187K Jul  9 13:54 drosoph.nt.nhr
-rw-rw-r--  1 bbockelm bbockelm  14K Jul  9 13:54 drosoph.nt.nin
-rw-rw-r--  1 bbockelm bbockelm 9.2K Jul  9 13:54 drosoph.nt.nnd
-rw-rw-r--  1 bbockelm bbockelm   84 Jul  9 13:54 drosoph.nt.nni
-rw-rw-r--  1 bbockelm bbockelm  33K Jul  9 13:54 drosoph.nt.nsd
-rw-rw-r--  1 bbockelm bbockelm  822 Jul  9 13:54 drosoph.nt.nsi
-rw-rw-r--  1 bbockelm bbockelm  30M Jul  9 13:54 drosoph.nt.nsq
-rw-rw-r--  1 bbockelm bbockelm 3.3M Jul  9 13:37 yeast.aa
-rw-rw-r--  1 bbockelm bbockelm 611K Jul  9 13:37 yeast.aa.phr
-rw-rw-r--  1 bbockelm bbockelm  50K Jul  9 13:37 yeast.aa.pin
-rw-rw-r--  1 bbockelm bbockelm  50K Jul  9 13:37 yeast.aa.pnd
-rw-rw-r--  1 bbockelm bbockelm  244 Jul  9 13:37 yeast.aa.pni
-rw-rw-r--  1 bbockelm bbockelm 195K Jul  9 13:37 yeast.aa.psd
-rw-rw-r--  1 bbockelm bbockelm 4.5K Jul  9 13:37 yeast.aa.psi
-rw-rw-r--  1 bbockelm bbockelm 2.9M Jul  9 13:37 yeast.aa.psq
-rw-rw-r--  1 bbockelm bbockelm  12M Jul  9 13:37 yeast.nt
-rw-rw-r--  1 bbockelm bbockelm 2.3K Jul  9 13:37 yeast.nt.nhr
-rw-rw-r--  1 bbockelm bbockelm  280 Jul  9 13:37 yeast.nt.nin
-rw-rw-r--  1 bbockelm bbockelm  136 Jul  9 13:37 yeast.nt.nnd
-rw-rw-r--  1 bbockelm bbockelm   52 Jul  9 13:37 yeast.nt.nni
-rw-rw-r--  1 bbockelm bbockelm  456 Jul  9 13:37 yeast.nt.nsd
-rw-rw-r--  1 bbockelm bbockelm   64 Jul  9 13:37 yeast.nt.nsi
-rw-rw-r--  1 bbockelm bbockelm 2.9M Jul  9 13:37 yeast.nt.nsq
</verbatim>

Each common prefix, such as yeast or drosoph, represent a different set of data; in this case, the yeast bacteria and fruit fly genome.  The .aa.* set of files represent proteins while .nt.* represents DNA sequences.  The remaining files with suffixes (for proteins phr, pin, pnd, pni, psd, psi, psq; for DNA, nhr, nin, nnd, nni, nsd, nsi, nsq) are the binary encodings of the databases.  The files without any suffixes (drosoph.aa, drosoph.nt, yeast.aa, yeast.nt) are the human-readable encodings.

Open the human-readable database yeast.aa; you will find it is just a list of DNA sequences like the one above.  Copy out an arbitrary line of data; we will use this subsequence to perform a query.  All queries have two parts: the header line, prefixed with ">", and the data.  The data is all data until the end of the file or the next ">" character.  Here's an example:

<verbatim>
>Brian's first query!
MPVSDSGFDNSSKTMKDDTIPTEDYEEITKESEMGDATKITSKIDANVIEKKDTDSENNITIAQDDEKVSWLQRVVEFFE
</verbatim>

Save this into a file named =query.fasta=.  Congratulations, you've just created your first FASTA query!

---+ Running BLAST
