%META:TOPICINFO{author="ChristinaKoch" date="1469226959" format="1.1" version="1.1"}%
%META:TOPICPARENT{name="UserSchool16Materials"}%
---+ Thursday Exercise 4.1: Large Input Data

In this exercise, we will run a multimedia program that converts and manipulates video files. In particular, we want to convert large \
=.mov= files to smaller (10-100s of MB) =mp4= files.  This exercise should take 25-30 minutes.

---++ Background

INTRO 

---++ Data and Software

We'll start by moving our source movie files into Stash, so that they'll be available to our jobs when they run out on OSG.  

Log into =osg-learn.chtc.wisc.edu=.  The video files are currently stored on the squid proxy from the first exericse this afternoon.  To place them in Stash, run \
the following command: 
<pre class="screen">
%UCL_PROMPT_SHORT% scp /squid/osgschool16/*.mov username@login01.osgconnect.net:/stash/user/username/public
</pre>
Where "username" is your OSG Connect username.  

There are 3 files, so this command may take a few minutes.  

While the files are copying, let's learn about the program we'll be using, =ffmpeg=.  It's a multi-purpose media tool \
that we'll be using to convert video formats.  The basic command to convert a file looks like this: \
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>./ffmpeg -i input.mov output.mp4</strong>
</pre>

In order to resize our files, we're going to manually set the video bitrate and resize the frames, so that the resulting file is smaller.  
<pre class="screen">
%UCL_PROMPT_SHORT% <strong> ./ffmpeg -i input.mp4 -b:v 400k -s 640x360 output.mp4</strong>
</pre>

To get the =ffmpeg= program do the following: 
   1. Still on =osg-learn.chtc.wisc.edu=, create a directory for this exercise and move into it.  
   1. We'll be downloading the =ffmpeg= pre-built static binary from this page: http://johnvansickle.com/ffmpeg/. \
Look for the =x86_64= build.  \
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz</strong>
</pre>
   1. Once the binary is downloaded, un-tar it, and then copy the main =ffmpeg= program into your current directory: \
<pre class="screen"> 
%UCL_PROMPT_SHORT% <strong>tar -xf ffmpeg-release-64bit-static.tar.xz</strong>
%UCL_PROMPT_SHORT% <strong>cp ffmpeg-3.1.1-64bit-static/ffmpeg ./</strong>
</pre>

---++ Script

We want to write a script that uses =ffmpeg= to convert a =.mov= file to a smaller format.  Our script will need to _copy_ \
that movie file from Stash to the job's current working directory, _run_ the appropriate =ffmpeg= command, \
and then _remove_ the original movie file so that it doesn't get transferred back to the submit server.  This last step is \
particularly important, as otherwise you will have large files transferring into the submit server and filling up your home directory space.

   1. We're going to start with the smallest file as a test - that way if anything goes wrong, it will be less of an issue.  \
Look at the videos in your Gluster directory, using =ls -lh=.  Which is the smallest?  FIX ME 
   1. Create a file called =run_ffmpeg.sh=, that does the steps described above.  Use the name of the smallest =.mov= file \
in the =ffmpeg= command.  Once you've written your script, check it against the example below: \
<pre class="file">
#!/bin/bash

cp /mnt/gluster/username/input.mov ./
./ffmpeg -i input.mov -b:v 400k -s 640x360 output.mp4
rm input.mov
</pre>

Ultimately we'll want to submit several jobs (one for each =.mov= file), but to start with, we'll run one job to \
make sure that everything works.  

---++ Submit File

Create a submit file for this job, based on other submit files from the school.  Things to consider: 
   1. We'll be copying the video file into the job's working directory, so make sure to request enough disk space.  
   1. *Important!*  Don't list the name of the =.mov= in =transfer_input_files=.  Our job will be interacting with the input \
=.mov= files solely from within the script we wrote above.  
   1. Add a line to the file (before the final queue statement) that ensures your job will land on computers that have access to Gluster: \
<pre class="file">
requirements = (Target.HasGluster == true)
</pre>

---++ Initial Job

With everyone in place, submit the job.  Once it finishes, we should check to make sure everything ran as expected: 
   1. Check the directory where you submitted the job.  Did the output =.mp4= file return?
   1. Also in the directory where you submitted the job - did the original =.mov= file return here accidentally?
   1. Check file sizes.  How big is the returned =.mp4= file? How does that compare to the original =.mov= input?  

If your job successfully returned the converted =.mp4= file and *not* the =.mov= file to the submit server, and the =.mp4= 
file was appropriately scaled down, then we can go ahead and convert all of our files.  

---++ Multiple jobs

We wrote the name of the =.mov= file into our =run_ffmpeg.sh= executable script.  To submit a set of jobs for all of our =.mov= \
files, what will we need to change in: 
   1. the script? 
   2. the submit file?
Once you've thought about it, check your reasoning against \
the instructions below.  

---+++ Add an argument to your script

   1. Look at your =run_ffmpeg.sh= script.  What values will change for every job?  
   1. The input file will change with every job - and don't forget that the output file will too!  Let's make them both into arguments.  \ 
To add arguments to a bash script, we use the notation =$1= for the first argument (our input file) and =$2= for the second argument (our output file name).  \ 
The final script should look like this: \
<pre class="file">
#!/bin/bash

cp /mnt/gluster/username/$1 ./
./ffmpeg -i $1 -b:v 400k -s 640x360 $2
rm $1
</pre> \
Note that we use the input file name multiple times in our script, so we'll have to use =$1= multiple times as well.  

---+++ Modify your submit file

   1. We now need to tell each job what arguments to use.  We will do this by adding an arguments line to our submit file.  Because we'll only have \
the input file name, we'll use the input file name with the =mp4= extension as the output argument.  That should look like this: \
<pre class="file">
arguments = $(infile) $(infile).mp4
</pre>
   2. To set these arguments, we will use the =queue .. from= syntax that we learned on [[UserSchool16Mon26QueueFrom][Monday]]. To \
do so, we need to create a list of our input files.  We can do this by moving to our Gluster directory, running an =ls= command \
that redirects our list of =.mov= files into a list, and then copy that list back to the submit server.  Altogether, that will look like this: 
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cd /mnt/gluster/username</strong>
%UCL_PROMPT_SHORT% <strong>ls *.mov > list.txt</strong>
%UCL_PROMPT_SHORT% <strong>mv list.txt /home/username/movie_dir</strong>
%UCL_PROMPT_SHORT% <strong>cd</strong>
</pre>
   3. In our submit file, we can then change our queue statement to: \
<pre class="file">
queue infile from list.txt
</pre>

Once you've made these changes, try submitting all the jobs!  

---++ Bonus

If you wanted to set a different output file, bitrate and/or size for each original movie, how could you modify: 
   1. =list.txt=
   2. =run_ffmpeg.sh=
   3. Your submit file
to do so?  


%TWISTY{
showlink="Show hint"
hidelink="Hide hint"
mode="div"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
Here's the changes you can make to the various files: 
   1. =list.txt= \
<pre class="file">
ducks.MOV ducks.mp4 500k 1280x720
teaching.MOV teaching.mp4 400k 320x180
test_open_terminal.mov terminal.mp4 600k 640x360
</pre>
   2. Submit file\
<pre class="file">
arguments = $(infile) $(outfile) $(bitrate) $(size)

queue infile,outfile,bitrate,size from list.txt
</pre>
   3. =run_ffmpeg.sh=\
<pre class="file">
#!/bin/bash

cp /mnt/gluster/username/$1 ./
./ffmpeg -i $1 -b:v $3 -s $4 $2
rm $1
</pre>
%ENDTWISTY%