%META:TOPICINFO{author="LaurenMichael" date="1469145482" format="1.1" version="1.2"}%
%META:TOPICPARENT{name="UserSchool16Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Thursday Exercise 2.3: Splitting Large Input for Better Throughput
%TOC%

The objective of this exercise is to prepare for blasting a much larger input query file by splitting the input for greater throughput and lower memory and disk requirements. Splitting the input will also mean that we don't have to rely on additional large-data measures for the input query files.

---++ Setup

   * Make sure you are still logged into =osg-learn.chtc.wisc.edu=
   * Make sure you are in the directory named =thur-blast-data=.

---++ Obtain the large input

We've previously used =blastx= to analyze a relatively small input file of test data, =mouse.fa=, but let's imagine that you now need to blast a much larger dataset for your research. This dataset can be downloaded with the following command:

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget http://proxy.chtc.wisc.edu/SQUID/osgschool16/mouse_rna.tar.gz</strong>
</pre>

After un-tar'ing the file, you should be able to confirm that it's size is roughly 100 MB. Not only is this a bit large for file transfer, but it would take hours to complete a single =blastx= analysis for it. Also, the single output file would be huge. Compare for yourself to the time and output file size for the mouse.fa input file, according to your test job in the last exercise.

---++ Splitting the Input File

For =blast=, it's scientifically valid to split up the input query file, analyze the pieces, and then put the results back together at the end! Because it's commonly used software, there are also tools for splitting up the data into smaller files. One of these is called "genome tools" (http://genometools.org/), and you can download a package of precompiled binaries (just like blast!) using the following command:

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget http://genometools.org/pub/binary_distributions/gt-1.5.9-Linux_x86_64-64bit-complete.tar.gz</strong>
</pre>

Un-tar the gt package, then run it's sequence file splitter as follows, splitting your mouse_rna.fa file into 1-MB pieces:

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>gt-1.5.8-Linux_x86_64-64bit-complete/bin/gt splitfasta -targetsize 1 mouse_rna.fa</strong>
</pre>

You'll notice that the result is a set of 100 files, all about the size of 1 MB, and numbered 1 through 100.


---++ Submit a new test job

Edit your submit and executable files, accordingl

---+ EVERYTHING BELOW NEEDS TO BE ADDED TO STILL!!

We now have our program (the pre-compiled =blastx= binary) and our input files, so all that 
remains is to create the submit file.  A typical =blastx= command looks something like this: 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>blastx -db database -query input_file -out results.txt</strong>
</pre>

   1.  Copy the submit file from the last exercise into your current directory.  
   2. Think about which lines you will need to change or add to your submit file in order to submit \
the job successfully. In particular: 
      * What is the executable?
      * How can you indicate the entire command line sequence above?  
      * Which files need to be transferred in addition to the executable?  
      * Does this job require a certain type of operating system?  
\
   3. Try to answer these questions and modify your submit file appropriately.  
   4. Once you have done all you can, check your submit file against the lines below, which contain the necessary changes \
to run this particular job.  
      * The executable is =blastx=, which is located in the =bin= directory of our downloaded BLAST \
directory.  We need to use the =arguments= line in the submit file to express the rest of the \
command. \
\
<pre class="file">
executable = ncbi-blast-2.4.0+/bin/blastx
arguments = "-db pdbaa -query mouse.fa -out results.txt"
</pre>\

      * The BLAST program requires our input file and database, so they must be transferred with =transfer_input_files=. \
\
<pre class="file">
transfer_input_files = pdbaa/, mouse.fa
</pre>\
*Note* : It is important to include the =/= after =pdbaa=.  Including the =/= means that Condor will transfer the database files inside the =pdbaa/= directory into the job's working directory, which is what we want for this example. The =pdbaa= directory, itself, will not be transferred.
      * Because we downloaded a Linux-specific binary, we need to request machines that are running Linux.  \
\
<pre class="file">
requirements = (OpSys == "LINUX")
</pre>\
   5. Submit the blast job using =condor_submit=.  Once the job starts, it should run in just a few minutes and produce a file called =results.txt=. 




-- Main.LaurenMichael - 18 Jul 2016