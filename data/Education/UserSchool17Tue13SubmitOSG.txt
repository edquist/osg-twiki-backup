%META:TOPICINFO{author="BrianLin" date="1500069264" format="1.1" reprev="1.4" version="1.4"}%
%META:TOPICPARENT{name="UserSchool17Tue12LoginScp"}%
---+ Tuesday Exercise 1.3: Running jobs in the OSG

The goal of this exercise is to have your jobs running on the OSG and map their geographical locations. 

---++ Where in the world are my jobs? (Part 2)

In this version of the geolocating exercise, you will be submitting jobs to the OSG from =osg-learn.chtc.wisc.edu= and hopefully getting back much more interesting results! Due to some differences between the machines in the OSG and our local cluster here at UW-Madison, you will be using a slightly different payload and then performing the geolocation on the results from the submit host.

*NOTE:* We are bending a rule about running jobs locally on the submit host because this host is a closed environment only utilized by the class and this exercise is designed for low load. Normally you should NOT run jobs on your submit host.

---+++ Hostname fetching code

The following Python script finds the !ClassAd of the machine it's running on and finds a network identity that can be used to perform lookups:

<pre class="file">
#!/bin/env python

import re
import os
import socket

machine_ad_file_name = os.getenv('_CONDOR_MACHINE_AD')
try:
    machine_ad_file = open(machine_ad_file_name, 'r')
    machine_ad = machine_ad_file.read()
    machine_ad_file.close()
except TypeError:
    print socket.getfqdn()
    exit(1)

try:
    print re.search(r'GLIDEIN_Gatekeeper = "(.*):\d*/jobmanager-\w*"', machine_ad, re.MULTILINE).group(1)
except AttributeError:
    try:
        print re.search(r'GLIDEIN_Gatekeeper = "(\S+) \S+:9619"', machine_ad, re.MULTILINE).group(1)
    except AttributeError:
        exit(1)
</pre>

---+++ Gathering network information from the OSG

Now to create submit files and that will run in the OSG!

   1. If not already logged in, =ssh= into =osg-learn.chtc.wisc.edu=
   1. Make a new directory for this exercise, =tuesday-1.3= and change into it
   1. Save the above Python script to a file and call it =ce_hostname.py=
   1. Create a submit file that runs =ce_hostname.py= 100 times and uses the $(Process) macro to write different =output= and =error= files
   1. Submit your file and wait for the results

---+++ Geolocating machines in the OSG

You will be re-using the Python script from the the last exercise to perform the geolocation except instead of submitting it as a job, you will run it manually. Copy it over from =learn.chtc.wisc.edu= using =scp= with the following command:

   1. Log into =learn.chtc.wisc.edu=
   1. Copy the file over to =osg-learn.chtc.wisc.edu=: \
<pre class='screen'>
%UCL_PROMPT_SHORT% <strong>scp tuesday-1.1/location.py osg-learn.chtc.wisc.edu:tuesday-1.3/</strong>
</pre>

=location.py= takes your list of output files as its arguments, so the easiest way to run it against your output files is to use the =*= wildcard from last exercise. If your output files are named =ce_hostname-0.out...ce_hostname-99.out=, your command would look like:

<pre class='screen'>
%UCL_PROMPT_SHORT% <strong>./location.py ce_hostname-*.out</strong>
</pre>

---++ Mapping your jobs

As before, you will be using http://www.mapcustomizer.com/ from =osg-learn.chtc.wisc.edu= to visualize where your jobs have landed in the OSG. Copy and paste the results from the Python script into the bulk creation text box at the bottom of the screen. Where did your jobs end up?

---++ Bonus Challenge: Running it all as a DAG

Yesterday, you learned about DAGs. You could make this exercise into a simple, linear DAG with the hostname fetching submit file followed by a locally running (Hint: use =scheduler= universe) job that runs the geolocation code. 

The =*= wildcard doesn't work in the arguments of a submit file so how will you specify the arguments of the geolocation code, =location.py=? 

---++ Next exercise

Once completed, move onto the next exercise: [[UserSchool17Tue14RemoteOldJobs][Running older jobs remotely]]
