%META:TOPICINFO{author="BrianBockelman" date="1308947920" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="OSGSS2011Materials"}%
---+ Introduction

In Exercise set 2, we improved the scalability of our BLAST runs by first staging the data to an OSG SE.  This achieved our goals, but required substantial manual work to move the data across the grid.

In this set of exercises, we will try a different approach: caching.  We will stage the data to one HTTP server, and rely on the site's HTTP caches to bring the data closer to the running job, and provide scalability.

---+ Customize this document

<!-- OSG Summer School 2011 Defaults
   * Local VO= %URLPARAM{"INPUT_VO" encode="quote" default="osgedu"}%
   * Local UCL_HOST = %URLPARAM{"INPUT_HOST" encode="quote" default="vdt-itb"}%
   * Local UCL_USER = %URLPARAM{"INPUT_USER" encode="quote" default="user"}%
   * Local UCL_DOMAIN = %URLPARAM{"INPUT_DOMAIN" encode="quote" default="cs.wisc.edu"}%
   * Local UCL_CWD= %URLPARAM{"INPUT_CWD" encode="quote" default="~/osg_school/dm_part_3"}%
   * Local EXPORT_DIR=%URLPARAM{"INPUT_EXPORT_DIR" encode="quote" default="/opt/workshop/dm_exercises/part3"}%
   * Local SOURCE_HOST=%URLPARAM{"INPUT_SOURCE_HOST" encode="quote" default="vdt-itb.cs.wisc.edu"}%
   * Local SOURCE_ROOT=%URLPARAM{"INPUT_SOURCE_ROOT" encode="quote" default="dm_exercises_part3"}%
   * Local SOURCE_URL=http://%SOURCE_HOST%/%SOURCE_ROOT%/%UCL_USER%
   * Local PROXY_ENDPOINT=%URLPARAM{"INPUT_PROXY_ENDPOINT" encode="quote" default="osg-edu-se.cs.wisc.edu"}%
   * Local VDT_LOCATION=/opt/osg-client
-->

%ICON{"warning"}% %RED% Please change your user name and click on the Customize button!%ENDCOLOR%
<form action="%SCRIPTURLPATH{"view"}%/%WEB%/%TOPIC%">
<table>
  <tr>
    <td>
      VO
    </td>
    <td>
      <input size=100 type="text" name="INPUT_VO" value="%VO%"/>
    </td>
  <tr>
    <td>
      Host Name
    </td>
    <td>
      <input size=100 type="text" name="INPUT_HOST" value="%UCL_HOST%"/>
    </td>
  </tr>
  <tr>
    <td>
      Domain Name
    </td>
    <td>
      <input size=100 type="text" name="INPUT_DOMAIN" value="%UCL_DOMAIN%"/>
    </td>
  </tr>
  <tr>
    <td>
      Login Name
    </td>
    <td>
      <input size=100 type="text" name="INPUT_USER" value="%UCL_USER%"/>
    </td>
  </tr>
    <td>
      Exercise Path
    </td>
    <td>
      <input size=100 type="text" name="INPUT_CWD" value="%UCL_CWD%"/>
    </td>
  </tr>
  <tr>
    <td>
      Source HTTP Server hostname
    </td>
    <td>
      <input size=100 type="text" name="INPUT_SOURCE_HOST value="%SOURCE_HOST%"/>
    </td>
  </tr>
  <tr>
    <td>
      Source HTTP Server URL prefix
    </td>
    <td>
      <input size=100 type="text" name="INPUT_SOURCE_ROOT" value="%SOURCE_ROOT%"/>
    </td>
  </tr>
  <tr>
    <td>
      Test HTTP Proxy Endpoint
    </td>
    <td>
      <input size=100 type="text" name="INPUT_PROXY_ENDPOINT" value="%PROXY_ENDPOINT%"/>
    </td>
  </tr>
  <tr>
    <td>
     &nbsp;
     <input type="submit" class="twikiSubmit" value="Customize" />
    </td>
  </tr>
</table>
</form>

---+ Exercises

---++ Prerequisite 

   * Login on submission node <pre class="screen">
ssh %UCL_USER%@%UCL_HOST%.%UCL_DOMAIN%
</pre>
   * Initialize the OSG client environment <pre class="screen">
source %VDT_LOCATION%/setup.sh
</pre>
   * Obtain proxy certificate, if you have not done so already <pre class="screen">
voms-proxy-init -voms %VO%:/%VO%
</pre>
   * Make a working directory for this exercise<pre class="screen">
cd
mkdir -p %UCL_CWD%
cd %UCL_CWD%
</pre>

---++ Using an HTTP Proxy

To successfully use a HTTP cache, three things need to be done:
   1 A file must be uploaded to a source HTTP site (this is known as "staging")
   1 The location of the cache must be known
   1 The file must be downloaded by an HTTP client using cache-friendly headers.

We will do these in this exercise, then we will return to the previous BLAST example.

---+++ Staging Files

In the simplest setup, a web server can export a directory on the file system.  To make a file accessible, you simply need to know the directory name and copy the file into it.

For this tutorial, we run the Apache web server and have the directory ==%EXPORT_DIR%/%UCL_USER%== exported to the URL ==%SOURCE_URL%==.  First, create your ==%UCL_USER%== directory in %EXPORT_DIR%:
<pre class="screen">
mkdir -p %EXPORT_DIR%/%UCL_USER%
</pre>

Then, write a simple file into this directory:
<pre class="screen">
[%UCL_USER%@%UCL_HOST% ~]$ mkdir -p %EXPORT_DIR%/%UCL_USER%
[%UCL_USER%@%UCL_HOST% ~]$ echo 'Hello world!' > %EXPORT_DIR%/%UCL_USER%/hello_world.txt
</pre>

Now, redirect your browser to [[%SOURCE_URL%/hello_world.txt][%SOURCE_URL%/hello_world.txt]]; you should see the text =Hello world!=.

---+++ Finding and using an HTTP proxy

There are three ways to determine an HTTP proxy:
   1 (Linux standard)
   1 (OSG-specific) On a worker node, the HTTP proxy will be set in ==$OSG_SQUID_LOCATION==.  If there is no proxy available, ==$OSG_SQUID_LOCATION== will be unset or set to ==UNAVAILABLE==.
   1 

---++ Caching and BLAST
