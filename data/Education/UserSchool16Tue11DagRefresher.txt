%META:TOPICINFO{author="BrianLin" date="1468006732" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="UserSchool16Materials"}%
---+ Tuesday Exercise 1.1: Refresher &ndash; Submitting Multiple Jobs

The goal of this exercise is to map the physical locations of some worker nodes in our local cluster. To do this, you will write a simple submit file that will queue multiple jobs and then manually collate the results.

---++ Where in the world are my jobs?

To find the physical location of the computers your jobs our running on, you will use a method called _geolocation_. Geolocation uses a registry to match computer’s network address to an approximate location.

---+++ Geolocation code

Below is a Python script that geolocates the machine that it is running on, returning [[https://en.wikipedia.org/wiki/Geographic_coordinate_system][latitude and longitude coordinates]]. It is not important to understand how the script works.

<pre class="file">
#!/bin/env python

import sys
import socket
import urllib2
import json
import time

hostnames = set()

if len(sys.argv) == 1:
    hostnames.add(socket.getfqdn())    
else:
    for filename in sys.argv[1:]:
        try:
            with open(filename, 'r') as f:
                hostnames.add(f.read().strip())
        except IOError:
            pass

for host in hostnames: 
    try:
        ipaddr = socket.gethostbyname(host)
        for i in range(1,4):
            try:
                response = urllib2.urlopen('http://www.freegeoip.net/json/' + ipaddr).read()
                json_response = json.loads(response)
                print "%s,%s" % (json_response['latitude'], json_response['longitude'])
                break
            except urllib2.HTTPError:
                time.sleep(3**i)
                pass
    except socket.gaierror:
        pass
</pre>

---+++ Geolocating several machines

Now, let’s try to use this Python script and remember some basic HTCondor ideas from yesterday!

   1. Log on to =osg-ss-submit=
   1. Create and change into a new folder for this exercise, for example =tuesday-1.1=
   1. Save the Python script above as a file named =location.py=
   1. As always, ensure that your script has the proper permissions (hint: try running it from the command line)
   1. Create a submit file that runs =location.py= ten times and uses the =$(Process)= macro to write different =output=, =error=, and =log= files. Try to do this step without looking at materials from yesterday. But if you are stuck, see [[UserSchool15Mon25QueueN][yesterday’s exercise 2.5]].
   1. Submit your jobs and wait for the results

---+++ Collating your results

Now that you have your results, it's time to summarize them. Rather than inspecting each output file individually, you can use the =cat= command to print the results from all of your output files at once. If all of your output files have the format =location-#.out= (e.g., =location-10.out=), your command will look something like this:

<pre class="screen">
%UCL_PROMPT_SHORT% cat location-*.out
</pre>

The =*= is a wildcard so the above cat command runs on all files that start with =location-= and end in =.out=. Additionally, you can use =cat= in tandem with the =sort= and =uniq= commands to print only the unique results:

<pre class="screen">
%UCL_PROMPT_SHORT% cat location-*.out | sort | uniq
</pre>

---++ Mapping your results

To visualize the locations of the machines that your jobs ran on, you will be using http://www.mapcustomizer.com/. Copy and paste the collated results into the text box that pops up when clicking on the 'Bulk Entry' button on the right-hand side. Are the results what you expected?
