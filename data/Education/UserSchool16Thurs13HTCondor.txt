%META:TOPICINFO{author="LaurenMichael" date="1467843470" format="1.1" version="1.3"}%
%META:TOPICPARENT{name="UserSchool16Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ !!HTCondor File Transfer
%TOC%

The objective of this exercise is to refresh yourself on the basic techniques for transferring data on OSG.

Recall that OSG does not have a shared filesystem! With that in mind, we'll show how to transfer input data for a sample application. 

We'll also look at how compression and archival can be used to effectively transfer files.

---++ Setup

<center>
<img src="%ATTACHURLPATH%/data_tranfer_1.jpg " alt="data_tranfer_1.jpg " width='400' height='150'/>
</center>

In the exercise we'll use the same Blast that we used previously.  We'll write a job that transfers the required Blast files (as you discovered in [[UserSchool16Thurs11][Exercise 1.1]]) from the submit host to the worker node via the HTCondor file transfer mechanism.

In a previous [[UserSchool16Thurs11][exercise]], you discovered all of the files required for Blast to run.  Now we are going to make an HTCondor submit file to run blast on a remote worker node.

---++ Create and submit the job

We've started a submit script for you below, but you will need to fill out the =transfer_input_files= section. For ==blastx== to successfully run, you'll need all of the input files.

*HINT*: =transfer_input_files= accepts a comma separated list of files.

<pre class="file">
universe = vanilla
executable = blastx
arguments = -db pbdaa -query mouse.fa
transfer_input_files = 
output = job.out
error = job.error
log = job.log
queue
</pre>

Once you have finished creating the submit file, go ahead and submit the job.
<pre class="screen">
%UCL_PROMPT_SHORT% condor_submit blast_run.submit
</pre>

The job should take a minute or two to complete. Once finished, look at the job output (in our case, =job.out=).  Is it the expected output?  Does it look the same as if you ran blast on your own?  

---++ Compressed input files

Sometimes when you have a lot of input files it makes more sense to compress them before sending them with a job. For this exercise, we want to compress our blast input files and send them to the remote worker node. 

For this part of the exercise, you will need to:

   1. Compress the input files using the =tar= command, as you did in exercise [[UserSchool16Thurs12rsync][1.2]]
   1. Modify =transfer_input_files= in the file =blast_run.submit= to transfer your compressed file
   1. Create a wrapper script which will decompress the input files, then run blast.

*HINT*: Here's a pattern for the =tar= command:
<pre class="screen">
%UCL_PROMPT_SHORT% tar -cvzf [compressed filename] [list of files]
</pre>

Replace =-c= with =-x= to decompress.

The wrapper script should uncompress the files, then run blast as usual.  Create a new file, called ==blast_wrapper.sh==
<pre class="file">
#!/bin/sh

tar xvzf %RED%[compressed filename]%ENDCOLOR%

exec ./blastn "$@"
</pre>

The submit file will need to be updated to be the executable, rather than blast itself.

<pre class="file">
universe = vanilla
executable = blast_wrapper.sh
arguments = -db pdbaa -query mouse.fa
transfer_input_files = 
output  = job.out
error = job.error
log = job.log
queue
</pre>

Submit the job.  Does it work as expected?

Run a ==du -sh== on the directory with this job's input.  Did it decrease the size of the input data compared to the first exercise in [[UserSchool16Thurs11][1.1]]


-- Main.DerekWeitzel - 06 Jul 2016

%META:FILEATTACHMENT{name="data_tranfer_1.jpg" attachment="data_tranfer_1.jpg" attr="" comment="" date="1467820213" path="data_tranfer_1.jpg" size="24319" stream="data_tranfer_1.jpg" tmpFilename="/usr/tmp/CGItemp60091" user="DerekWeitzel" version="1"}%
%META:TOPICMOVED{by="DerekWeitzel" date="1467832365" from="Education.UserSchool16Thurs12HTCondor" to="Education.UserSchool16Thurs13HTCondor"}%
