%META:TOPICINFO{author="BalamuruganDesinghu" date="1437679447" format="1.1" version="1.2"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>


---+ Thursday  Exercise 2: Spliting  database 
In this example, we touch the basics of handling large input data using blast sequence similarity search. Blast search against a large sequence data base is a challenging task. Because analysis of large database may require large memory. In this example, we split the reference database into chunks and perform the blast search. 

---++ Data chunks and workflow
The database is a large file,  ~20 GB in size. It is split into 18 chunks. You could check the files
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>ls /stash/public/blast/database/nt.5-30-2014/*.gz   </strong>
</pre> 
<pre class="file">
nt.00.tar.gz, nt.01.tar.gz, nt.02.tar.gz ... # the split data chunks in compressed format
</pre>

Each chunk is less than 1 GB in is size. We want to perform analysis on these smaller chunks.  Our task is to create 18 independent jobs.  Tell condor to transfer the data chunk from the public directory to worker machine.  In each job wrapper script, uncompress the data chunk before the job execution.  For convenience, we utilize bash script to generate job files. First we work out  an example and then you hack this workflow and run a query on your own. 

---++ Get the example files
Create a BlastSplitSearch directory on the OSG submit node, and download the required files.
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget http://stash.osgconnect.net/+dbala/Storage/MultiInputsMultiJobs-blastn/BlastSplitCT.tar.gz  </strong>
%UCL_PROMPT_SHORT% <strong>tar -xzf  BlastSplitCT.tar.gz  </strong>
%UCL_PROMPT_SHORT% <strong>cd  BlastSplitCT  </strong>
%UCL_PROMPT_SHORT% <strong> ls  </strong>
</pre>
<pre class="file">
generate_job_files.bash   # Helper script to set up the job based on the files in the StartUpFiles directory
StartUpFiles/  # Contains input files and scripts for the job
</pre>

Here, generate_job_files.bash is an helper script that sets up the job. To see how it works, type
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>  chmod +x generate_job_files.bash  </strong>
%UCL_PROMPT_SHORT% <strong> ./generate_job_files.bash  </strong>
</pre>
would produce the following output on the screen

..........
To submit all condor jobs 
cd JobDirectory 
./jobsubmit.bash 
..........

The helper script ==generate_job_files.bash== creates ==JobDirectory==. Inside the JobDirectory, we see the following list of files
<pre class="file">
blast_00.submit, blast_01.submit, ...   # 18 job script files for 18 data chunks
</pre>




-- Main.BalamuruganDesinghu - 23 Jul 2015