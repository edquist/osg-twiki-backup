%META:TOPICINFO{author="SuchandraThapa" date="1438102187" format="1.1" reprev="1.6" version="1.6"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

----+  Using HTCondor to get job output

%TOC%

---++ Goals

   * After running jobs, ideally you'd like to get the results back; this tutorial will cover how to do this using HTCondor.
   * In this tutorial we will learn how to specify output files to HTCondor and have HTCondor transfer files for each job.

---++ Transferring output  using HTCondor
You've seen HTCondor's file transfer mechanisms being used to transfer input data in the previous exercises, we'll now look at using the HTCondor file transfer mechanism to get output back from your jobs.  By default, if you set =should_transfer_files= to  =YES= in your HTCondor submit file, HTCondor will transfer all the files in the job sandbox back to the submit node.  However, you may not want to transfer all the files back, or to rename files as they get transferred back.  This exercise will go through how to specify files that HTCondor should transfer back.  

Before, we start, there's a little background that needs to be covered.  As the lecture mentioned, jobs running on OSG have a variable called =OSG_WN_TMP= defined in the environment.  This variable points to the location of a scratch directory that your jobs can use as a working area.  This area is usually on a storage system with higher I/O performance although it's typical local to just the compute node and frequently gets wiped after jobs finish.  Typically, it's advantageous to have your job use this space to store temporary files, intermediate results, and to generate final outputs before copying the outputs back to the submit node.

Finally, let's move on to the exercise:
   1. First log in to the OSG Connect submit node (login.osgconnect.net)
   2. Create a directory for this tutorial : \
\
<pre class="screen">
%UCL_PROMPT_SHORT% mkdir output_tutorial
%UCL_PROMPT_SHORT% cd output_tutorial
</pre>
   3. Create a file job.sh with the following: \
\
<pre class="file">
#!/bin/bash
mkdir $OSG_WN_TMP/$1/output_directory1
mkdir $OSG_WN_TMP/$1/output_directory2
echo "output1" >  $OSG_WN_TMP/$1/output_directory1/output_file1
echo "dummy" >  $OSG_WN_TMP/$1/output_directory1/intermediate_output
echo "output2" >  $OSG_WN_TMP/$1/output_directory2/output_file2
echo "dummy" >  $OSG_WN_TMP/$1/output_directory2/intermediate_output_test
sleep 60
cp -a $OSG_WN_TMP/$1/ .
</pre>
    4. Make the file executable: \
\
<pre class="screen">
%UCL_PROMPT_SHORT% chmod 755 job.sh
</pre>
   5. Create a submit file (=output.submit=) with the following: \
\
<pre class="file">
output        = job.out.$(Process)
error         = job.error.$(Process)
log           = job.log.$(Process)

universe = vanilla
executable = job.sh
transfer_output_files = $(Cluster)/output_directory1/output_file1, $(Cluster)/output_directory2/output_file2
arguments = $(Cluster)
queue 1
</pre>
   5. Submit the job: \
\
<pre class="screen">
%UCL_PROMPT_SHORT% condor_submit output.submit
</pre>
   6. When the job is done, you should see =output_file1= and =output_files2= in your submit directory containing the strings =output1= or =output2=
   7.  One thing to note is that when you specify files use transfer_output_file, HTCondor will only transfer the files that you specify instead of transferring all the files in the job sandbox by default. Also the files are copied directly to the submit directory and the directory structure from the job sandbox is not preserved. 

As an exercise, try modifying the submit file to also transfer the intermediate outputs (=intermediate_output= and =intermediate_output_test=) as well.


---++ Further information
   * [[http://research.cs.wisc.edu/htcondor/manual/v8.2/2_5Submitting_Job.html#SECTION00354200000000000000][Specifying files to transfer]]


-- Main.BalamuruganDesinghu - 24 Jul 2015
