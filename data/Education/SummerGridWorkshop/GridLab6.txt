%META:TOPICINFO{author="LaukikChitnis" date="1151512482" format="1.0" version="1.12"}%
%META:TOPICPARENT{name="SummerGridSyllabus2006"}%
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
<title>Exercises for Lecture 7 - Building, Packaging and Running Applications
on a real Grid</title>
<meta http-equiv="Content-Type" content=" text/html; charset=iso-8859-1">
<!-- style sheet developed by Alain Roy -->
<style type="text/css"><!--
body {
	background-color: white;
	color: black;
}
pre {
	margin-left: 1em;
	padding: 0.5em;
	background-color: #f0f0f0;
	border: 1px solid black;
}
h1 {
	text-align: center;
}
h2 {
	padding-top: 0.5em;
	margin-top: 4em;
	border-top: 2px solid black;
}
h3 {
	padding-top: 0.5em;
	margin-top: 4em;
	border-top: 1px solid #AAAAAA;
}
userinput {
	color: green;
}
userchange {
	color: blue;
}
--></style>
</head>

<body bgcolor="ffffff">
<h1>
Exercises for Lecture 7 - Building, Packaging and Running Applications
on a real Grid</h1>
<!--
The handout is also available online at <A HREF="http://www.cise.ufl.edu/~lchitnis/grid/summer-grid/Exercises5.htm">http://www.cise.ufl.edu/~lchitnis/grid/summer-grid/Exercises5.htm</A>.
-->

<h2>Objectives</h2>
<ul>
<li>Write and Gridify an application
<li>Access OSG/TeraGrid and run simple applications
<li>Monitor the status of grid sites
<li>Understand the issues involved in distributing an application
<li>Package the application
</ul>

<h2>Table of Contents</h2>
<ul>
<li><a href="#write">Writing the Application</a>
<li><a href="#gridify">Gridifying the Application</a>
	<ul>
	<li><a href="#run">Running a job on OSG/TeraGrid sites under OSGEDU VO</a>
	</ul>
<li><a href="#condor-g">Using Condor-G to submit jobs</a>
	<ul>
	<li><a href="#ajob">Submit a single job</a>
	<li><a href="#multiple">Submit multiple jobs to multiple sites</a>

	</ul>
<li><a href="#together">Putting it all together</a> 
<li><a href="#packaging">Packaging your appliction</a>
	<ul>
	<li><a href="#download">Download and Install Pacman</a>
	<li><a href="#caches">Pacman Caches</a>
	</ul>
<li><a href="#ref">References</a>

</ul>


<h2>Conventions</h2>

In this exercise, 

<pre>
<userinput>The code that you can directly key in will appear in this color</userinput>
</pre>

<pre>
<userchange>The code that you can need to change before typing in will appear in this color</userchange>
</pre>

<pre>
The probable response from the system appears in this color
</pre>



<a name="write"></a>
<h2>Writing the application</h2>
<ul>
	 <li>Write a simple application to find whether a number is a prime or not.
	 Sample code is available at <a href="http://www.cise.ufl.edu/~lchitnis/grid/summer-grid/prime.c.html">http://www.cise.ufl.edu/~lchitnis/grid/summer-grid/prime.c.html</a>. The program takes three inputs:
	<ol>
		<li>The Number in question
		<li>Starting factor (&gt;1)
		<li>Ending factor 
	</ol>

and outputs YES if the number is a prime and NO if it is not.

<li>Login to <code>gridlab1.phys.utb.edu</code>. 
<pre>
[johndoe@trainingXX ~]$ <userinput>ssh gridlab1.phys.utb.edu</userinput>
[johndoe@gridlab1 ~]$ 
</pre>



<li>Write (read 'copy-paste') the program and save it as "<code>prime.c</code>" . Compile and execute it locally (on the laptop / gridlab machine)

<pre>
[johndoe@gridlab1 ~]<userinput>gcc -w -o prime prime.c</userinput>
.
(you may ignore any compilation warnings for now as long as there are no errors)
.
[johndoe@gridlab1 ~]<userinput>./prime 1000 2 1000</userinput>
</pre>
You should see the following output
<pre>
NO
</pre>
</ul>

<a name="gridify"></a>
<h2>Gridifying the application</h2>
We know that it takes long time to divide the number with all the factors.
So, we will distribute the application to various sites. Each site will 
divide the number with different range of factors. This is equivalent to running
<pre>
./prime 1000 2 250
./prime 1000 251 500
./prime 1000 501 750
./prime 1000 751 1000
</pre>
on a single machine. A negative answer from any of the sites indicates that a factor other than 1 and the number itself exists and hence it is NOT a prime number.


<a name="run"></a>
<h3>Running a job on !TeraGrid/OSG sites</h3>
<ul>
<!--	 <li>If you didn't follow the instructions for 'preparing to run on Grid3'
	 yesterday, please do so. The instructions are at <a href="http://www-unix.mcs.anl.gov/~wilde/summer-grid/Exercises/7_prep_Exercise.v2.htm">http://www-unix.mcs.anl.gov/~wilde/summer-grid/Exercises/7_prep_Exercise.v2.htm</a>
	 <li>Login to <code>terminable.uchicago.edu</code> or <code>evitable.uchicago.edu</code>. You do not have to enter a password
-->
<!--
	 <li>Copy your credentials to <code>evitable.uchicago.edu</code>. You might have to enter a passphrase. The passphrase is the same as your training account usernames (e.g. training24)
<pre>
<b>
[johndoe@gridlab1 ~]$ scp -r ~/.globus/ evitable.uchicago.edu:~/
Enter passphrase for key '/home/trainingXX/.ssh/id_dsa': 
[johndoe@gridlab1 ~]$ </b> 
	 </pre>
	 

	 <li>Login to <code>evitable.uchicago.edu</code> from another terminal. You might have to enter a passphrase. The passphrase is the same as your training account usernames (e.g. training24)

<pre>
<b>
[johndoe@trainingXX ~]$ ssh gridlab1.phys.utb.edu
[johndoe@gridlab1 ~]$ ssh evitable.uchicago.edu
Enter passphrase for key '/home/trainingXX/.ssh/id_dsa': 
[johndoe@evitable ~]$ </b> 
	 </pre>
	 

	 <li> Verify that you have the .pem files in the right place on this machine and have "proper" permissions (Lecture 2). 

-->
<ul>
	 <li>Check your proxy. Make sure it is valid for more than 3 hours.
<pre>
[johndoe@gridlab1 ~]$ <userinput>grid-proxy-info </userinput>
</pre>

	 <li>Initialize your proxy (if it is not initialized or is about to expire)
<pre>
[johndoe@gridlab1 ~]$ <userinput>grid-proxy-init -cert ~/.globus/usercert.pem -key ~/.globus/userkey.pem </userinput>
Your identity: /DC=org/DC=doegrids/OU=People/CN=John Doe 876747
Enter GRID pass phrase for this identity:
Creating proxy ....................................................... Done
Your proxy is valid until: Mon Jul 11 01:00:53 2005
</pre>

<li>To find a site on OSG:

<a href="http://www.ivdgl.org/gridcat/home/">GridCat</a> (Grid Catalog) is one of the monitoring tools available that can be used to get a good view of your Grid. For instance, to get a summary of the sites that are in the OSG-ITB VO, you can visit <A HREF="http://osg-itb.ivdgl.org/gridcat/index.php?site_name=osgitb">this page</A>
<p>
<img src="gridcat.png">
<p>

<b>NOTE:</b>You are authorized to use only the sites under the OSGEDU vo. The various OSG-ITB sites that are expected to have your DNs populated in their gridmap-files are:

<pre>
  UFlorida-EO			  (url:ufgrid05.phys.ufl.edu, $app:/raid/raid4/eo/app)  (verified!)
  CIT_ITB_1				 (url:citgrid3.cacr.caltech.edu, $app:/raid1/OSG_APP)  (verified!)
  FIUPG	(OSG PROD site) (url:fiupg.ampath.net, $app:/share/apps)				  (verified!)
  FNAL_FERMIGRID_TEST	(url:fgtest1.fnal.gov, $app: /usr/local/app)  (verified!)

</pre>

A simple way to verify if you are infact authenticated to use a site is to use <code>globusrun</code> as follows:

<pre>
[johndoe@gridlab1 ~]$ <userinput>globusrun –a –r ufgrid05.phys.ufl.edu/jobmanager-fork</userinput>
GRAM Authentication test successful
</pre>


For this exercise, you can also use the following !TeraGrid sites:
<pre>
tg-login.sdsc.teragrid.org
tg-login.ncsa.teragrid.org
</pre>

<li>Let's test a site
<pre>
[johndoe@gridlab1 ~]$ <userinput>globus-job-run ufgrid05.phys.ufl.edu /bin/date</userinput>
Sun Jul 10 23:25:25 CDT 2005
</pre>

<li>Copy your application to the site. <b><font color="red">Wait !</font></b> You don't know where to copy the files. Is there any temporary directory available? But, how do you find it?

<ol>

<li> If you plan to use any of the OSG-ITB sites, and you are authorized to do so (GRAM Authentication test successful), go to the <a href="http://osg-itb.ivdgl.org/gridcat/index.php?site_name=osgitb">GridCat</a>
page again. (If you're testing on FIU-PG, go [[http://osg-cat.grid.iu.edu/][here]] to access the production !GridCat instance). Choose 'Grid Environment' instead of 'Summary' in the drop down
table. Look for the APP variable. This is going to be your APPDIR. This is the place where you should copy
your applications (ofcourse after making a separate directory. You dont want your application to be messed up by other students, do you?).

<li>If you plan to use the !TeraGrid sites, you need to know $TG_CLUSTER_SCRATCH. The string to which this variable is mapped onto on the remote site is the directory where you can temporarily "stage" your application (your APPDIR). You can use <A HREF="http://www.teragrid.org/userinfo/jobs/environment.php">this page</A> to look up the correct $ variable that you need. In your case, its going to be the $TG_CLUSTER_SCRATCH variable. To look up the value of this $ variable, we are going to "peek in" into the remote site using <code>gsissh</code>. gsissh basically uses your grid proxy to authenticate you into a remote grid site.

<pre>
[johndoe@gridlab1 ~]$ <font color=green>gsissh tg-login.ncsa.teragrid.org</font>
.
.
Directory: /home/ac/train33
Tue Jun 27 17:48:22 CDT 2006
train33@tg-login1.ncsa> <font color=green>/usr/bin/env | grep "TG_CLUSTER_SCRATCH"</font>
TG_CLUSTER_SCRATCH=/scratch/train33
train33@tg-login1.ncsa> <font color=green>exit</font>
</pre>

Use this TG_CLUSTER_SCRATCH as the APPDIR for the following part of the exercise for this grid site. You need to do this for each of the TeraGrid site that you plan to do.

<!-- A small test script has been copied in the ncsa and sdsc TG sites which can enable you to peek into the remote site and see this variable. 

<pre>
globus-job-run TG-SITE /tmp/getenv
</pre>
-->
<b>Note:</b>If the TG_CLUSTER_SCRATCH var is not defined (blank), <b>STOP!</b> Ask your TAs for further instructions!
</ol>

<li> Now you can go ahead and 
	<ol>
	<li>create your workspace (in the APPDIR), 
	<li>"stage-in" your application (globus-url-copy)
	<li>execute your application
	</ol>

<pre>
(replace SITE, APPDIR, YOURUSERNAME appropriately)

[johndoe@gridlab1 ~]$ <userchange>globus-job-run SITE /bin/mkdir APPDIR/YOURUSERNAME</userchange>
[johndoe@gridlab1 ~]$ <userchange>globus-url-copy file://`pwd`/prime gsiftp://SITE/APPDIR/YOURUSERNAME/prime</userchange>
[johndoe@gridlab1 ~]$ <userchange>globus-job-run SITE /bin/chmod +x APPDIR/YOURUSERNAME/prime</userchange>
[johndoe@gridlab1 ~]$ <userchange>globus-job-run SITE APPDIR/YOURUSERNAME/prime 200 2 200</userchange>
NO

</pre>


<li>Make the application distributed. Write a small program that calculates
the number of jobs required and divides them equally among the three sites. <font color="green"> Extra Credit! </font>

<pre>
root = <font color="#2e8b57"><b>int</b></font>(sqrt(num));
inc = <font color="#ff00ff">10</font>;
njobs = <font color="#2e8b57"><b>int</b></font>((root - <font color="#ff00ff">2</font>)/inc) + <font color="#ff00ff">1</font>;

start = <font color="#ff00ff">2</font>;


<font color="#853e26"><b>for</b></font>(i = <font color="#ff00ff">0</font>;i &lt; njobs; ++i) {
		  end = start + inc;
		  <font color="#5151fb">/*</font><font color="#5151fb"> choose a site </font><font color="#5151fb">*/</font>
		  <font color="#5151fb">/*</font><font color="#5151fb"> run the job on the site with globus-job-run with appropriate</font>
<font color="#5151fb">			  arguments </font>

<font color="#5151fb">			  globus-job-run $site $num $start $end</font>
<font color="#5151fb">			  </font><font color="#5151fb">*/</font>
		  start = end + <font color="#ff00ff">1</font>;
}
</pre>

You may want to try this out later if it is taking too much time. Go on ahead and complete the easy parts first! <br>

</ul>

<a name="condor-g" />
<h2>Using Condor-G to submit jobs to OSG/TeraGrid</h2>
By now, you should have faimiliarity with Condor tools. Condor-G
allows one to use Condor tools to submit jobs to Globus resources.
You can think of it as a sophisticated <code>globus-job-run</code>. One
of the useful features is the ability to submit and monitor multiple jobs
to grid resources.

<a name="ajob" />
<h3>Submitting a single job using Condor-G</h3>
In the Condor world, one has to write a submission file that describes
the application your are submitting. A sample submission file is below.
<pre>
<font color="#5151fb">########################################
#							  
#  A sample condor submission file
#													 
########################################</font>
													  
executable =  prime
universe = <b>vanilla</b>

output  = prime.out					 
error	= prime.error				 
log	  = prime.log  
arguments = 107 2 107

queue
</pre>
Note the universe variable. If the universe used is vanilla, the job is infact executed on the submitting site itself. The condor on <b>gridlab1.phys.utb.edu</b> IS configured to run jobs locally. <br><br>
To submit jobs to a remote resource, the universe should be set to <b>grid</b>. Let's see a submission file for the grid universe.

<pre>
<font color="#5151fb">########################################
#							  
#  A sample Condor-G submission file
#													 
########################################</font>

executable = <b>APPDIR/YOURUSERNAME/prime</b>

transfer_executable = false
universe		 = <b>grid</b>
grid_resource = <b>gt2 SITE/jobmanager</b>
log				= prime.log
arguments		= 100 2 100
output = prime.out

queue
</pre>
Submit your prime application using this submission file to a site. You can
monitor your application using <code>condor_q</code>

<pre>
[johndoe@gridlab1 ~]$ <userinput>condor_submit example.sub</userinput>
Submitting job(s).
Logging submit event(s).
1 job(s) submitted to cluster 33.

[johndoe@gridlab1 ~]$ <userinput>condor_q</userinput>

-- Submitter: gridlab1.phys.utb.edu : &lt;206.76.233.104:36236&gt; : gridlab1.phys.utb.edu
 ID		OWNER				SUBMITTED	  RUN_TIME ST PRI SIZE CMD					
	9.0	training24		7/10 23:39	0+00:00:00 I  0	0.0  prime				 

1 jobs; 1 idle, 0 running, 0 held

</pre>

<b>TIP:</b> If condor_q lists too many entries, you can use the job-id XXX to refer yo your job. This is the cluster number from "1 job(s) submitted to cluster XXX." kind of message returned by <code>condor_submit</code>. Now you can just do <code>condor_q XXX</code>. You can also try using <code>condor_q trainXX</code> to enlist jobs submitted by user trainXX.


You can try various options like <code>-long</code> and <code>-globus</code>
with <code>condor_q</code> to see more details.


<p>
Now, check the output file <code>prime.out</code>.

<a name="multiple" />
<h3>Submitting multiple jobs to multiple sites using Condor-G</h3>

There are various ways of doing this. We can

<ul>
	<li>Write multiple submission files and changes attributes
	manually or using a script - <b>Clumsy and Difficult to Manage</b>
	<li>Write a single common submission file and dynamically change
	only the attributes that need to be changed
</ul>

First, we have to identify the attributes that need to be changed for
different instantiations of the application. Those are

<ul>
	<li>range of divisors
	<li>site names
	<li>application directories
	<li>output file names
</ul>

So, how do we do this? By passing parameters to <code>condor_submit</code>
<pre>
condor_submit -a "arguments = $num $start $end" 
	 -a "grid_resource = gt2 $site/jobmanager" ...
</pre>

The strings that you specify with <code>-a</code> option get added to
the submission file you specify.

<p>
Write a common submission file and submit three instantiations of your
prime application to three sites. Note that you have to use different
output file names for each instantiation. 
<ul>
	 <li>Create a submission file named <code>example.sub</code> with following contents
	 <pre>
####################
#
# Submission file for prime number finder
#
####################

transfer_executable = false
universe		 = grid
log				= prime.log
queue
</pre>
	 Note that we are not specifying the site and arguments.
	 <li>Create a directory for the output files
	<pre>
	[johndoe@gridlab1 dprime]$ <userinput>mkdir output</userinput>

	 </pre>
	 <li>Submit a job using the submission file by passing arguments to 
	 <code>condor_submit</code>
	 <pre>
[johndoe@gridlab1 dprime]$ <userchange>condor_submit -a "arguments = 1000 2 1000" -a 
"output = output/1.out" -a "grid_resource = gt2 ufgrid05.phys.ufl.edu/jobmanager" 
-a "executable = APPDIR/YOURUSERNAME/prime" example.sub</userchange>
	 </pre>
	 <li>Submit multiple jobs to multiple sites. Note that you have to copy
	 your executables to the site, if it doesn't have it already. Use GridCat
	 to find the APP variables.
</ul>

<h3>Inspecting the output</h3>

A simple grep through all your output files should tell whether the number
is a prime or not.
<pre>
<b>grep NO output/*</b>
</pre>


<h3>Clean-up</h3>

If you no longer plan to use the executable you (globus-url-)copied to the remote-site(s), please go ahead and clean up your workspace(s):

<pre>
[johndoe@gridlab1 dprime]$ <userchange>globus-job-run SITE /bin/rm -rf APPDIR/YOURUSERNAME</userchange>
</pre>

<a name="together" />
	 <h3>Putting it all together (Optional)</h3>
	 Write a script to submit jobs to multiple sites automatically. 
	 I have created a small application package that has
all the required tools. It contains
<ul>
	<li>A Makefile to compile your application
	<li>A script for distributing the jobs
	<pre>

[johndoe@gridlab1 ~]$ ./script.pl
Usage: ./script.pl &lt;task number&gt;
	 1 - Make dir
	2 - Copy exes
	3 - Run prime jobs
	 4 - Grep output
	 5 - Remove dir
	</pre>
	 <li>A Condor-G submission file
</ul>

The package can be downloaded from
<a href="http://www.cise.ufl.edu/~lchitnis/grid/summer-grid/dprime.tar.gz">http://www.cise.ufl.edu/~lchitnis/grid/summer-grid/dprime.tar.gz</a>. You can
modify the script to fit your needs.

<br>
<font color="red">Note:</font> You need to tailor some variables in the file script.pl

<ol>
	 <li> Change the value of the $me variable to your username <font color="red">"MUST DO"</font>
	 <li> You may change the number you want to test for primality ($num variable) (not mandatory)
</ol>
 
<a name="packaging" />
<h2>Packaging your application</h2>
We will use <a href="http://physics.bu.edu/pacman/">pacman</a>(Package
Manager) for this part of the exercise. It's a handy packaging tool
that has many useful features including fetching, installing and updating
software packages with simple commands.


<a name="download" />
<h3>Download and Install Pacman</h3>
<pre>
[johndoe@gridlab1 ~]$ <userinput>wget http://physics.bu.edu/pacman/sample_cache/tarballs/pacman-latest.tar.gz</userinput>
--13:51:27--  http://physics.bu.edu/pacman/sample_cache/tarballs/pacman-latest.tar.gz
			  =&gt; `pacman-latest.tar.gz'
Resolving physics.bu.edu... done.
Connecting to physics.bu.edu[128.197.41.42]:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 77,154 [application/x-gzip]
																										  
100%[====================================&gt;] 77,154		 159.97K/s	 ETA 00:00
																										  
13:51:28 (159.97 KB/s) - `pacman-latest.tar.gz' saved [77154/77154]

[johndoe@gridlab1 ~]$ <userinput>tar zxvf pacman-latest.tar.gz</userinput>
pacman-3.18.4/
pacman-3.18.4/caches_starter
pacman-3.18.4/CVS/
pacman-3.18.4/CVS/Entries
pacman-3.18.4/CVS/Repository
pacman-3.18.4/CVS/Root
pacman-3.18.4/doc/
.
.
.

[johndoe@gridlab1 pacman-3.18.4]$ <userinput>cd pacman-3.18.4/</userinput>
[johndoe@gridlab1 pacman-3.18.4]$ <userinput>export PATH=`pwd`/bin:${PATH}</userinput>

[johndoe@gridlab1 pacman-3.18.4]$ <userinput>source setup.sh</userinput>
[johndoe@gridlab1 ~]$ <userinput>pacman -version</userinput>
Pacman version:  3.18.4
Python version:  2.2.2 (#1, Feb 24 2003, 19:13:11) 
[GCC 3.2.2 20030222 (Red Hat Linux 3.2.2-4)]
Your platform [RedHat-9] satisfies { *, linux, Linux, linux-redhat-8, linux-redhat-9, redhat, Redhat, RedHat, RedHat-6, Redhat-6, RedHat-7, Redhat-7, RedHat-8, Redhat-8, RedHat-9, Redhat-9, unix, Unix }

</pre>

After these steps, pacman is ready to use. You can download the whole
VDT package with a single command
<pre>
pacman -get VDT:VDT (it takes a long time to install VDT, DO 
			  NOT start the installation now)
</pre>

<a name="caches" />
<h3>Pacman caches</h3>
<p>
From pacman documentation

<p>
<i>
A Pacman cache is a just a URL or location in a local file system containing 
files with the .pacman extension. Each such file defines how a package is 
fetched, installed and set up</i>
<p>
An example pacman file
<pre>
description = 'Text Editor'
url = 'http://www.nedit.org/'
download = {'*': 'nedit-5.1.1-linux-glibc.tar.gz' }
paths = [['PATH','']]
</pre> 
<p>
In this part of the exercise, we will create a localcache and package our
application with pacman. Then, we will install the application in a seperate
directory using this cache.
<p>
Create a directory for the cache and temporary directory for installing
your dprime application.
<pre>
[johndoe@gridlab1 ~]$ <userinput>mkdir localcache</userinput>
[johndoe@gridlab1 ~]$ <userinput>mkdir installs</userinput>
</pre>

<p>
Create a directory for your application and copy prime.c to the directory
<pre>
[johndoe@gridlab1 ~] <userinput>mkdir dprime</userinput>
[johndoe@gridlab1 ~] <userinput>cp prime.c dprime</userinput>
</pre>
<p>
Create a Makefile in the application directory to compile your application. You can use the following Makefile. Copy it to the dprime directory.
<pre>
CC=gcc
EXES=prime
all: $(EXES)

prime: prime.c
	gcc -w -o $@ $&lt;

clean:
	rm -f $(EXES)
</pre>
tar, gzip the files and copy the zipped file to localcache directory
<pre>
[johndoe@gridlab1 ~]$ <userinput>tar zcvf dprime.tar.gz dprime/prime.c dprime/Makefile</userinput>

[johndoe@gridlab1 ~]$ <userinput>mv dprime.tar.gz localcache/</userinput>
[johndoe@gridlab1 ~]$ <userinput>cd localcache</userinput>
[johndoe@gridlab1 localcache]$ 
</pre>
<p>
Create a file named dprime.pacman in the localcache directory
<pre>
# Descprtion of the package
description = 'Prime Number Finder'
# What to download?
download	 = {'unix' : 'dprime.tar.gz'}
# How to install
install	  = {'*':['make']}
</pre>
Go to installs directory and run pacman
<pre>
[johndoe@gridlab1 localcache]$ <userinput>cd ../installs</userinput>
[johndoe@gridlab1 installs]$ <userinput>pacman -get ../localcache:dprime</userinput>

Do you want to add [../localcache] to [trusted.caches]? (y or n): y
Package [dprime] found in [../localcache]...
Downloading [dprime.tar.gz] from [localcache]...
Untarring [dprime.tar.gz]...
gcc -o prime prime.c 

</pre>
<!--
You can look the information about the packages using the following command
<pre>
<b>[johndoe@gridlab1 installs]$ pacman -info</b>
</pre>
<img src="pacman-info.png" />
<p>
-->

You can make changes to the dprime.pacman file (may be you can just change the description) and update the software with
<pre>
[johndoe@gridlab1 installs]$ <userinput>pacman -update-check</userinput>
Package [dprime] found in [../localcache]...
Update of [../localcache:dprime] found...

[johndoe@gridlab1 installs]$ <userinput>pacman -l</userinput>
[*] dprime, in cache [/home/training24/test-lab6/installs] ==> UPDATE AVAILABLE 

[johndoe@gridlab1 installs]$ <userinput>pacman -d src ups 0 -l</userinput>
.
.
[johndoe@gridlab1 installs]$ <userinput>pacman -update</userinput>

</pre>

<a name="ref" />
<h2>References</h2>
<ul>
	<li>Prime number <a href="http://www.utm.edu/research/primes/">info</a>.
	<li><a href="http://www.ivdgl.org/gridcat/home/">GridCat</a>
	 <!--	<li><a href="http://monalisa.cacr.caltech.edu">MonALISA</a> -->
	<li><a href="http://www.cs.wisc.edu/condor/manual/v6.6.5/index.html">Condor Manual</a>
	<li><a href="http://physics.bu.edu/pacman/htmls">Pacman Documentation</a>
</ul>

<h2>Credits</h2>
<ul>
	 <li>Exercises : <a href="http://www.cise.ufl.edu/~lchitnis">Laukik Chitnis</a>
	 <li>Powerpoint presentation : <a href="http://www.phys.ufl.edu/~jorge">Jorge L. Rodriguez</a>
	 <li>The entire staff of Grid Summer Workshop 2006 for getting the infrastructure up.
</ul>

</body>

