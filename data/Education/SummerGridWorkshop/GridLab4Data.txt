%META:TOPICINFO{author="BenClifford" date="1151084979" format="1.0" version="1.7"}%
%META:TOPICPARENT{name="SummerGridSyllabus2006"}%
---+Exercises for Lecture 4:  Grid Data Management

%TOC%


---++Getting set up

Check that you have a valid proxy.

<pre>
gridlab$ grid-proxy-init
Your identity: /C=US/O=Globus Alliance/OU=User/CN=10bd8f410f6.5f0086b4
Enter GRID pass phrase for this identity:
Creating proxy ................................................ Done
Your proxy is valid until: Thu Jun 22 22:15:25 2006
</pre>

Now, make a working directory for this exercise. For the rest of this exercise, all your work should be done in there.

<pre>
gridlab$ mkdir dataex
gridlab$ cd dataex
</pre>

Next create some files of different sizes, to use for exercises. Each file should have a unique name, so use your name or something similar below. Change to your home directory and do the following:

<pre> 
dd if=/dev/zero of=./smallfileYOURNAME bs=1M count=10
dd if=/dev/zero of=./mediumfileYOURNAME bs=1M count=50
dd if=/dev/zero of=./largefileYOURNAME bs=1M count=200
$ ls -sh
total 261M
201M largefile-benc	51M mediumfile-benc	11M smallfile-benc
</pre>


---++Moving files with GridFTP

---+++A Simple Transfer

Use globus-url-copy to move your small file from your home directory on gridlab1 to your home directory on one of the other gridlab machines (you have a choice of gridlab2, gridlab3 or gridlab4):

<pre> 
$ globus-url-copy file:///home/benc/dataex/smallfile-benc gsiftp://gridlab2.phys.utb.edu/home/benc/ex1
echo $?
0
</pre>

The echo $? checks to see what the return value was for the previous command. If you see a zero (0) then globus-url-copy succeeded; a different number indicates a problem.


---+++Measuring transfer speed
See how fast the file transfer is happening by using the -vb flag. Since this is a transfer over a local network that should probably not be too busy it should be fairly quick:

<pre>
$ globus-url-copy -vb file:///home/benc/dataex/largefile-benc gsiftp://gridlab2.phys.utb.edu/home/benc/ex1
Source: file:///home/benc/dataex/
Dest:	gsiftp://gridlab2.phys.utb.edu/home/benc/
  largefile-benc  ->  ex1
	 207618048 bytes			8.81 MB/sec avg			9.09 MB/sec inst
</pre>

---+++Transfers to a remote site
Now try transferring a file to a remote site. Use the small file, because you will be sharing the off-island link with everyone else.

<pre>
gridlab$ globus-url-copy -vb file:///home/benc/dataex/smallfile-benc gsiftp://skynet-login.isi.edu/pvfs2/benc/ex1
Source: file:///home/benc/dataex/smallfile
Dest:	gsiftp://skynet-login.isi.edu/pvfs2/benc/
  largefile-benc  ->  ex1
	 208666624 bytes			1.41 MB/sec avg			1.43 MB/sec inst
</pre>

You will probably find that the transfer rate is much lower than when copying to local machines.


---++URL formats

We've seen two kind of URLs so far.

	* <code>file:///home/benc/dataex/largefile</code> - this refers to a file called <code>largefile</code> on the local file system, in directory <code>/home/benc/dataex/</code>.

	* <code>gsiftp://skynet-login.isi.edu/pvfs2/benc/</code> - this refers to a directory accessible via gsiftp on the host called <code>skynet-login.isi.edu</code> in directory <code>/pvfs2/benc</code>.


---++Parallel streams


Trying using 4 parallel data streams by adding the -p flag with an argument of 4: 


<pre>
globus-url-copy -p 4 -vb file:///home/benc/dataex/smallfile-benc gsiftp://skynet-login.isi.edu/pvfs2/benc/ex1
</pre>

Experiment with transferring different file sizes and numbers of parallel streams, to both local and remote sites.

---+++Third party transfers
Next try a third-party transfer. You do this by specifying two gsiftp: URLs instead of one gsiftp: and one file: URL.

globus-url-copy will control the transfers but data will *not* pass through. Instead, it will go directly between the source and destination machines.

Transfer a file between two remote sites, and see if it is faster than if you had transferred it to gridlab1 and then back out again.

Try to make up the command line for this yourself.

---++Reliable File Transfer (RFT)

Next we'll use RFT, the reliable transfer service, to transfer a block of files between two sites.

First, we need to create a transfer job file, which lists some RFT parameters and then all of the files to transfer. You can get an example from gridlab1:~benc/rft.xfr. Read through this and change the URLs at the end to copy your files.

This example lists three transfers. largefile will be transfered three times, once to gridlab2, once to gridlab3, once to gridlab4.

You can launch it as follows. The client will periodically output transfer status. You can watch jobs move from the pending state, to the Active state and then to the Finished state.

<pre>
$ rft -h gridlab1.phys.utb.edu -f ./rft.xfr 
Number of transfers in this request: 3
Subscribed for overall status
Termination time to set: 60 minutes

 Overall status of transfer:
Finished/Active/Failed/Retrying/Pending
0/1/0/0/2

 Overall status of transfer:
Finished/Active/Failed/Retrying/Pending
1/0/0/0/2

 Overall status of transfer:
Finished/Active/Failed/Retrying/Pending
1/1/0/0/1

 Overall status of transfer:
Finished/Active/Failed/Retrying/Pending
2/0/0/0/1

 Overall status of transfer:
Finished/Active/Failed/Retrying/Pending
2/1/0/0/0

 Overall status of transfer:
Finished/Active/Failed/Retrying/Pending
3/0/0/0/0
All Transfers are completed
</pre> 

The transfer file has a number of options, documented in-line. You can experiment changing them. Interesting ones to try:
	* Add more URLs to transfer
	* Transfer between two remote sites
	* Use parallel streams
	* Increase the transfer concurrency

In particular you should check that you understand the difference between parallel streams (the number of streams used when transferring one file) and concurrency (the number of files that can be transferred at once).

---++Finding replicas with RLS

The above sections have dealt with moving data around, and always made the assumption that you knew where the files you wanted were located.

Next we will deal with the Replica Location Service, RLS.

---+++Check that we can connect to an RLS server.

<pre>
$ globus-rls-admin -p rls://gridlab1.phys.utb.edu
ping rls://gridlab1.phys.utb.edu: 0 seconds
</pre>

---+++Querying an RLS server

First perform a simple query for an example logical filename that has been placed in the RLS by the instructors:

<pre>
$ globus-rls-cli rls://gridlab1.phys.utb.edu
rls> query lrc lfn example
  example: gsiftp://gridlab1.phys.utb.edu/scratch/example
  example: gsiftp://gridlab3.phys.utb.edu/scratch/example
</pre>

This queries for a logical filename <code>example</code>. The results show that this file can be retrieved via either of two URLs (one in scratch space on gridlab1, and one in scratch space on gridlab3).

Now try querying for logical filename <code>another-example</code>.

---+++Adding mappings to the RLS

You can also publish your own logical filename into the RLS, with mappings to physical files, using the <code>create</code> command:

<pre>
rls> create
Incomplete command: create <lfn> <pfn>

rls> create benc-first-lfn gsiftp://home/benc/dataex/largefile-benc
</pre>

This creates an LFN called <code>benc-first-lfn</code> and then adds a mapping to <code>gsiftp://home/benc/dataex/largefile-benc</code>.

<pre>
rls> query lrc lfn benc-first-lfn
  benc-first-lfn: gsiftp://home/benc/dataex/largefile-benc
</pre>

Now copy largefile to another place (on another gridlab machine or on one of the remote sites), and
register it into the RLS, with the same LFN. You will need to use the <code>add</code> command instead of the <code>create</code> command, because the LFN already exists and you just need to add a new mapping.

Get a neighbour to query the RLS for your logical filename, and see that the mappings you have made are public for everyone to see.

---+++Multiple RLS servers

---++++Other LRCs

So far, you have only been using the RLS server on gridlab1. There are servers running on all four of the gridlab machines.

Use globus-rls-admin to ping the other three gridlab servers and check that they are online.

Then, connect to one of the other servers using globus-rls-cli and query for the <code>example</code> LFN that we used above. You should see that there are some other locations from which you can get the example file.

Try adding your own LFN into one of the other servers.

---++++RLIs

So far, you have interacted with the Local Replica Catalog on each installation. This is where LFNs and mappings are created.

RLS has another component, called a Replica Location Index. This gathers information from several LRCs, so that you can find LFN mappings from all of those LRCs in one place.

There is an RLI on gridlab1 that gathers information from all four gridlab LRCs.

You can query it like this:
<pre>
rls> query rli lfn example
rls> query rli lfn example
  example: rls://gridlab1.phys.utb.edu:39281
</pre>

What comes back from the RLI is *not* a list of physical files. Instead, it is a list of LRCs that have some information about the requested LFN.

To find all the replicas, you need to query all of the listed LRCs. In the above case, only gridlab1 is listed, so you only need to make a <code>query lrc</code> request against that one server.




---+++RLS server statistics

Next use the -S flag to check the status/statistics of each of the two servers. You should see output similar to that below: 


<pre>
globus-rls-admin -S rls://gk1
Version:	 2.1.5
Uptime:	  00:28:15
LRC stats
  update method: lfnlist
  update method: bloomfilter
  updates bloomfilter: rls://gk2.phys.utb.edu:39281 last 06/21/04 22:44:45
  lfnlist update interval: 86400
  bloomfilter update interval: 900
  numlfn: 1
  numpfn: 1
  nummap: 1
RLI stats
  updated by: rls://gk2.phys.utb.edu:39281 last 06/21/04 22:44:35
  updated via bloomfilters
globus-rls-admin -S rls://gk2
Version:	 2.1.5
Uptime:	  00:32:33
LRC stats
  update method: lfnlist
  update method: bloomfilter
  updates bloomfilter: rls://gk1.phys.utb.edu:39281 last 06/21/04 22:44:40
  lfnlist update interval: 86400
  bloomfilter update interval: 900
  numlfn: 2
  numpfn: 2
  nummap: 2
RLI stats
  updated by: rls://gk1.phys.utb.edu:39281 last 06/21/04 22:44:49
  updated via bloomfilters
</pre>


---+++Treasure hunt
There are three files with logical filename treasure1, treasure2 and treasure3 stored on the grid. Use RLS to find them and RFT to move them into your home directory.



---+stop reading now. exercise over.
what follows is working notes for benc.

---+++A verbose transfer
Next examine the communication that takes place more closely by adding the -dbg flag. Look in detail at what the client sends to the server and how the server responds. It should look similar to what you see below: 

<pre>
globus-url-copy -dbg file:/home/YourHomeDirectory/smallfileKORANDAYOURNAME gsiftp://gk1/tmp/smallfileYOURNAME
debug: starting to put gsiftp://gk1/tmp/smallfileKORANDA
debug: connecting to gsiftp://gk1/tmp/smallfileKORANDA
debug: response from gsiftp://gk1/tmp/smallfileKORANDA:
220 gk1.phys.utb.edu GridFTP Server 1.12 GSSAPI type Globus/GSI wu-2.6.2 (gcc32dbg, 1069715860-42) ready.
 
debug: authenticating with gsiftp://gk1/tmp/smallfileKORANDA
debug: response from gsiftp://gk1/tmp/smallfileKORANDA:
230 User skoranda logged in.
 
debug: sending command:
FEAT
 
debug: response from gsiftp://gk1/tmp/smallfileKORANDA:
211-Extensions supported:
 REST STREAM
 ESTO
 ERET
 MDTM
 SIZE
 PARALLEL
 DCAU
211 END
 
debug: sending command:
TYPE I
debug: response from gsiftp://gk1/tmp/smallfileKORANDA:
200 Type set to I.
 
debug: sending command:
PBSZ 16384
 
debug: response from gsiftp://gk1/tmp/smallfileKORANDA:
200 PBSZ=16384
 
debug: sending command:
PASV
 
debug: response from gsiftp://gk1/tmp/smallfileKORANDA:
227 Entering Passive Mode (10,10,0,2,168,57)
 
debug: sending command:
STOR /tmp/smallfileKORANDA
 
debug: response from gsiftp://gk1/tmp/smallfileKORANDA:
150 Opening BINARY mode data connection.
 
debug: data callback, no error, buffer 0x402d1008, length 1048576, offset=0, eof=false
debug: data callback, no error, buffer 0x403d2008, length 1048576, offset=1048576, eof=false
debug: data callback, no error, buffer 0x404d3008, length 1048576, offset=2097152, eof=false
debug: data callback, no error, buffer 0x402d1008, length 1048576, offset=3145728, eof=false
debug: data callback, no error, buffer 0x403d2008, length 1048576, offset=4194304, eof=false
debug: data callback, no error, buffer 0x404d3008, length 1048576, offset=5242880, eof=false
debug: data callback, no error, buffer 0x402d1008, length 1048576, offset=6291456, eof=false
debug: data callback, no error, buffer 0x403d2008, length 1048576, offset=7340032, eof=false
debug: data callback, no error, buffer 0x404d3008, length 1048576, offset=8388608, eof=false
debug: data callback, no error, buffer 0x402d1008, length 1048576, offset=9437184, eof=false
debug: data callback, no error, buffer 0x403d2008, length 0, offset=10485760, eof=true
debug: response from gsiftp://gk1/tmp/smallfileKORANDA:
226 Transfer complete.
 
debug: operation complete
</pre>

