%META:TOPICINFO{author="ChristinaKoch" date="1437404895" format="1.1" reprev="1.5" version="1.5"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.1: Compiling programs for portability

compiling, blah blah blah.  (will add tomorrow)

---++ Our software example

For this compiling example, we will use a script written in C.  C code depends 
on libraries and therefore will benefit from being statically compiled. 

Our C code prints 7 rows of Pascal's triangle.  
Copy and paste the following code 
into a file named =pascal.c=.  

<pre class="file">
#include &ltstdio.h&gt
 
long factorial(int);
 
int main()
{
   int i, n, c;
   n=7;
   for (i = 0; i < n; i++){
      for (c = 0; c <= (n - i - 2); c++)
         printf(" ");
      for (c = 0 ; c <= i; c++)
         printf("%ld ",factorial(i)/(factorial(c)*factorial(i-c)));
      printf("\n");
   }
   return 0;
}

long factorial(int n)
{
   int c;
   long result = 1;
   for (c = 1; c <= n; c++)
         result = result*c;
   return result;
}
</pre>

---++ Compiling

In order to use this code in a job, we will first need to statically compile the code.  Recall the 
slide from the lecture - where _can_ we compile and where _should_ we compile?  In particular: 

   * where is the compiler available? 
   * how computationally intensive will this compilation be?  

Think about these questions before moving on.  Where do you think we should compile?  

Most linux servers (including our submit node) have the =gcc= (GNU compiler collection) installed, so 
we already have a compiler on the submit node.  Furthermore, this is a simple piece of C code, so the compilation will not be computationally 
intensive.  

Thus, we should be able to compile directly on the submit node.  The command to compile is: 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>gcc -static pascal.c -o pascal</strong>
</pre>

Note that we have added the =-static= option to make sure that the compiled binary include the necessary libraries
in the compiled binary.  This will allow the code to run on any Linux machine, no matter where those 
libraries are located.  

---++ Submit the job

Once our code is compiled, we can use it to submit a job.  Find a submit file from earlier in the week.  
Copy it to the directory with our =pascal= code and modify it so that it runs our compiled binary.  

Submit the job using =condor_submit=.  

Once the job has run and left the queue, you should be able to see the results (seven rows of 
Pascal's triangle) in the =.out= file created by the job.  
