%META:TOPICINFO{author="CraigPrescott" date="1172188993" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="Sandbox.TierThreePrerequisiteDocument"}%
-- Main.CraigPrescott - 22 Feb 2007
---++Introduction
---+++UID/GID
---++Downloading Torque
---++Installing Torque
---++ Installing Torque on the Compute Nodes
PBS_DAEMON="/usr/sbin/pbs_server -h <hostname> -S <hostname> -M <hostname>"
where <hostname> is the same hostname you used when you created the server instance.  Once this is done, you can restart the <code>pbs_server</code> from the <code>init.d</code> script:

<verbatim>
/etc/init.d/pbs_server restart
</verbatim>
d189 2
where <code>&lt;hostname&gt;</code> is the same hostname you used when you created the server instance.

We can now configure the server.  This is done with the <code>qmgr</code> command.  If <code>qmgr</code> is executed without any options, it will put you in an interactive shell from which you can just type in PBS commands.  But you can also feed commands to <code>qmgr</code> with the <code>-c</code> option.  Let's turn on scheduling, create a routing queue and an execution queue, and take care of some defaults:

<verbatim>
qmgr -c 'set server scheduling=true'
qmgr -c 'create queue defaultq'
qmgr -c 'set queue defaultq queue_type = route'
qmgr -c 'create queue batchq'
qmgr -c 'set queue batchq queue_type = execution'
qmgr -c 'set queue defaultq started = true'
qmgr -c 'set queue defaultq route_destinations = batchq'
qmgr -c 'set queue batchq queue_type = execution'
qmgr -c 'set queue defaultq enabled = true'
qmgr -c 'set server resources_default.nodes = 1
qmgr -c 'set queue batchq started = true'
qmgr -c 'set queue batchq enabled = true'
qmgr -c 'set server resources_default.nodes = 1'


where <code>&lt;hostname&gt;</code> is the same hostname you used for the <code>pbs_server</code> setup.  This is a dirty trick.  But the fact is that the built-in Torque scheduler will only listen on the interface that corresponds to the output of <code>gethostname</code>, so the gloves may have to come off.
/etc/init.d/pbs_mom start
</verbatim>
qmgr -c 'create node <fqdn> np=<ncpus>' 
set server node_check_rate = 150
The <code>qstat</code> command is used to display queue and job status.  By itself, if will print out the list of jobs that are in the queue, and their status.  <code>qstat</code> has a number of interesting options - see <code>man qstat</code> for more info.  Since we don't have any jobs running yet, <code>qstat</code> won't show us anything too interesting.
---+++ Submitting a Job

You use the <code>qsub</code> command to submit the job to the batch system; just give qsub the name of your job script, like so:

<verbatim>
---+++ Querying a Job
---++ Final Words

Hopefully this note will help you get your Torque batch system up and running, and give you a bit of familiarity with the typical procedures and tools available.  If you have further questions, I highly recommend to look at the Admin Manual and numerous man pages included with the Torque packages, and to consult the <code>torqueuser</code> mailing list (archives at http://www.supercluster.org/pipermail/torqueusers/).  Torque is highly configurable; in this short tutorial, we have only done enough to get you started.  While what we've done so far may be perfectly adequate for many environments, you should be aware that configuration options exist to add user and group ACLs, resource attributes handy for heterogenous environments, optimizations for job output relay, multiple execution queues with their own scheduling priorities, considerations for running parallel jobs, dropping in of powerful third party schedulers such as Maui, etcetera.  Good luck!

%META:TOPICMOVED{by="CraigPrescott" date="1172188993" from="Education.PBSSetup" to="Education.PbsSetup"}%
