%META:TOPICINFO{author="DavidChampion" date="1438120922" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
---+ !!Tuesday Exercise 4.1: OSG Connect
%TOC% 

For exercises we'll point you to the official tutorials, since these have been developed specifically with OSG Connect in mind.

---++ Background
For this exercise, we thought it might be interesting to analyze a set of images from the University of Chicago Photographic Archive (http://photoarchive.lib.uchicago.edu/). Our motivation is that it's a common claim that older photographs look much darker than recent ones. With our job, we'll analyze the luminance of photographs in the archive and compare that to the date of the photograph. 

---++ Signing up for OSG Connect
Hopefully you've already signed up for OSG Connect, if not please visit this page: http://osgconnect.net/signup

Once you've signed up, SSH to =username@login.osgconnect.net= with the username and password you created. 

---++ Getting started
We've conveniently made the tutorial data and software available to you by simply typing =tutorial photodemo=. It should create a directory with the necessary files at =~/tutorial-photodemo=.

The input dataset is a file called =manifest.txt=. This file contains a list of JPEG images stored on our Stash server and the date of each image.

The =luminance2= python script does most of the heavy lifting for us here. Since we want to use Python 2.7, we will be loading Python from the OSG Distributed Environment Modules and use a Python sandboxing tool called VirtualEnv.

---+++ Creating the Python sandbox
We've provided a script that will create a Python sandbox with the necessary dependencies already installed. It's not too important to understand how the sandbox works -- just know that it will be compressed and sent with the job.

To create the sandbox, run:
<pre class="screen">
%UCL_PROMPT_SHORT% ./create_pillow.bash
</pre>

Once complete, you should see a new file called =pillow.tar= in your tutorial directory.

---+++ Creating the job wrapper
In order the run the =luminance2= program, we need to create a wrapper script that does the following:
   1. Load the Python module
   1. Unpack the =pillow.tar= Python environment
   1. Run =virtualenv pillow=
   1. Activate the environment with:
    =source pillow/bin/activate= 
   1. Finally, run the =luminance2= program like so:
    =python luminance2 "$@"=

Try creating this wrapper. If you get stuck, you can refer to the file =run.sh= where we've done this for you. 

---+++ Create the submit file
For this exercise, we want to analyze about 5500 photos. However, each photo takes a very short amount of time to analyze, and creating 5500 jobs for this task would be excessive. To reduce overhead, we would like to analyze about 200 photos per job. To do this, run =mksubmit=:

<pre class="screen">
%UCL_PROMPT_SHORT% ./mksubmit > luminance.sub
</pre>

Otherwise, If you are comfortable with your scripting skills, you can try creating your own script that generates a submit file to do this. The =luminance2= program takes parameters of the form =results-$i.json $i $chunk= where =$i= is the starting point for the chunk, and =$chunk= is the number of photos that you want to analyze per job. Here's a sample of what the final result should contain:

<pre class="file">
Transfer_Output_Files = results-0.json
Arguments = results-0.json 0 200
Queue 1

Transfer_Output_Files = results-200.json
Arguments = results-200.json 200 200
Queue 1

Transfer_Output_Files = results-400.json
Arguments = results-400.json 400 200
Queue 1

[...and so on]
</pre>

Once you have created the submit file, go ahead and submit it:
<pre class="screen">
%UCL_PROMPT_SHORT% condor_submit luminance.sub
</pre>

---+++ Post-job Analysis
After a few minutes, you should see a bunch of JSON files appear. We can make a HTML plot of our results with the =aggregate.sh= script:
<pre class="screen">
%UCL_PROMPT_SHORT% ./aggregate.sh >$HOME/stash/public/scatter.html
</pre>

You can view the results at http://stash.osgconnect.net/+your_username/scatter.html 

Compare to: http://stash.osgconnect.net/+lincolnb/scatter.html

---++ Run under Connect Client

Try to adapt a regular condor workflow to run under Connect Client.  The client is already installed on =osg-ss-submit.chtc.wisc.edu=. You will simply need to:

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>module load connect-client</strong>
%UCL_PROMPT_SHORT% <strong>connect setup <em>your-osg-connect-username</em></strong>
%UCL_PROMPT_SHORT% <strong>connect test</strong>
%UCL_PROMPT_SHORT% <strong>tutorial quickstart</strong>
%UCL_PROMPT_SHORT% <strong>cd tutorial-quickstart</strong>
%UCL_PROMPT_SHORT% <strong>connect submit tutorial01.sub</strong>
%UCL_PROMPT_SHORT% <strong>connect watch</strong>
....
%UCL_PROMPT_SHORT% <strong>connect pull</strong>
</pre>


-- Main.DavidChampion - 28 Jul 2015
