%META:TOPICINFO{author="ChristinaKoch" date="1437082917" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.5: Python installation

One way to port python: install with every job and then run script.  

Repeat of GROMACS exercise

---++ Python script

To run python, we need a script.  On (which submit node) create a file named =fibonacci.py=

<pre class="file">
import sys

# recursive fibonacci function
def add_fib(fi,fj):
    if fi == 0:
        return 0
    elif fi == 1:
        return 1
    else:
	return add_fib(fi-1,fi-2) + add_fib(fj-1, fj-2)

# command line argument to set which number you want
n = int(sys.argv[1])
assert n > 0, "Invalid value for n"

# print value
print "The", str(n)+"th", "fibonacci number is", add_fib(n-1,n-2)
</pre>

---++ Wrapper script

To run python, write wrapper script, like GROMACS example.  Need to install 
python locally, add to path (or reference installation), run script.  Download and untar python 
to submit node: 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz</strong>
%UCL_PROMPT_SHORT% <strong>tar xzf Python-2.7.10.tgz</strong>
</pre>

Check how to install.  Look at README.  
Main steps will be 
<pre class="file">
./configure
make
make install
</pre>

Like gromacs, need to figure out how to install locally.  Try using =--help= with configure.  
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>./configure --help</strong>
</pre>

Scan through options - different installation directory uses the =--prefix= argument to =configure=.  We can reuse the 
trick from the GROMACS example of using =$(pwd)= as part of our argument in order to set the path correctly.  

All that figured, we can write the first part of our script, named =run_fib.sh=

<pre class="file">
#!/bin/bash

# extract source
tar xzf Python-2.7.10.tgz
# cd into directory
cd Python-2.7.10
# run installation steps, with prefix!  
./configure --prefix=$(pwd)/..
make
make install
# return to working directory
cd ..
</pre>

This is the first main step.  Once python is installed, the main python interpreter is probably in a directory called =bin= in the 
working directory.  We can access the interpreter in two ways: 

1. Add it to our system PATH
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>export PATH=$(pwd)/bin:$PATH</strong>
%UCL_PROMPT_SHORT% <strong>python script.py</strong>
</pre>

2. reference the interpreter directly
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>bin/python script.py</strong>
</pre>

Choose whichever method you prefer, and add it to your =run_fib.sh= script, using it to run the =fibonacci.py= code.  

---++ Submit file

Make copy of previous wrapper submit file (=gromacs.submit=), named =python.submit=.  Which lines to change?  

* executable =run_fib.sh=
* transfer_input_files =fibonacci.py=, python source

think about how much space you need!  

submit job

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit matlab.submit</strong>
</pre>

---++ Bonus

* If you have a simple python script without any special libraries try running it.  What do you need to change?

* Experiment with installing additional modules locally

* Change installation structure to install to =python= subdirectory
