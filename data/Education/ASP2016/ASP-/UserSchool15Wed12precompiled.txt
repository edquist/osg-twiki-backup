%META:TOPICINFO{author="ChristinaKoch" date="1436894304" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.2: Using a pre-compiled binary

For our first exercise, we will be using the software portability scenario where there 
is a single static binary that has been pre-compiled.  This is the case for several 
scientific softwares; we will be using the BLAST sequencing tool as our example.  

---++ Download the software

How do you find software online?  Try searching for "BLAST software download".    
Hopefully one of the top hits will be this page: 

http://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE_TYPE=BlastDocs&DOC_TYPE=Download

which in turn, has links to the BLAST downloads page: 

ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/

Based on our operating system, we want to use the pre-built linux binary, which is
labelled with the x64-linux suffix.  Download the tar.gz file using =wget= and then 
untar the file. 

<pre class="screen">
%UCL_PROMPT_SHORT% wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.2.31+-x64-linux.tar.gz
%UCL_PROMPT_SHORT% tar xzf ncbi-blast-2.2.31+-x64-linux.tar.gz
</pre>

We'll be using the =blastx= binary, located in the =bin= directory.  

---++ Copy the input files

To run blast, we'll need an input fasta file and reference database.  For 
this example, we'll use the "pdbaa" database, which contains sequences 
for the protein structure from the Protein Data Bank.  

~~~
wget ftp://ftp.ncbi.nlm.nih.gov/blast/db/pdbaa.tar.gz # download db
mkdir pdbaa # create a directory for the untarred database
tar xzf pdbaa.tar.gz --directory pdbaa # extract db into directory
~~~

For our example fasta file, download and unzip the `est_mouse` file.  For the 
purposes of this example, we don't need the whole file, so we'll extract the 
first few reads to a new file.  

<!-- common place for fasta --> 

~~~
wget ftp://ftp.ncbi.nlm.nih.gov/blast/db/FASTA/est_mouse.gz # download fasta file
gunzip est_mouse.gz # extract fasta file
head -39 est_mouse > mouse.fa # create shorter fasta for test purposes
~~~

---++ Fill out submit file

Create a file called =blast.submit= with the following lines: 

<pre class="file">
universe = vanilla
log = blast_$(Cluster)_$(Process).log
error = blast_ $(Cluster)_$(Process).err
output = blast_$(Cluster)_$(Process).out

executable = 
arguments = 

should_transfer_files = YES
when_to_transfer_output = ON_EXIT
transfer_input_files = 

request_cpus = 1
request_memory = 4GB
request_disk = 2GB

queue 1
</pre>

The executable will be the precompiled binary, =blastx= in the =bin= directory.  A simple blastx command
on the command line looks like this: 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>blastx –db database –query fasta_file –out results.txt</strong>
</pre>

So we should fill out the submit file as follows:

<pre class="file">
executable = ncbi-blast-2.2.31+/bin/blastx
arguments = "–db pdbaa –query mouse.fa –out results.txt"
</pre>

The BLAST job will also need our FASTA input file and protein database
so these files should be transferred using the =transfer_input_files= line: 

<pre class="file">
transfer_input_files = pdbaa/, mouse.fa
</pre>

---++ Submit the job

Submit the blast job using `condor_submit`.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit blast.submit</strong>
</pre>

The job should run in just a few minutes.  
