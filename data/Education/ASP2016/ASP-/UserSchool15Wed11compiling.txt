%META:TOPICINFO{author="ChristinaKoch" date="1437167985" format="1.1" reprev="1.4" version="1.4"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.1: Compiling programs for portability

compiling, blah blah blah.  (will add tomorrow)

---++ Our software example

For our example, we will use a script written in =c=, as =c= code frequently depends 
on libraries and therefore will benefit from being statically compiled.  

While logged into the OSG submit node, create a directory named =c= and move into it.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>mkdir c</strong>
%UCL_PROMPT_SHORT% <strong>cd c</strong>
</pre>

Our =c= code is going to be a program that prints 7 rows of Pascal's triangle.  
Copy and paste the following code 
into a file named =pascal.c=.  

<pre class="file">
#include &ltstdio.h&gt
 
long factorial(int);
 
int main()
{
   int i, n, c;
   n=7;
   for (i = 0; i < n; i++){
      for (c = 0; c <= (n - i - 2); c++)
         printf(" ");
      for (c = 0 ; c <= i; c++)
         printf("%ld ",factorial(i)/(factorial(c)*factorial(i-c)));
      printf("\n");
   }
   return 0;
}

long factorial(int n)
{
   int c;
   long result = 1;
   for (c = 1; c <= n; c++)
         result = result*c;
   return result;
}
</pre>

---++ Compiling

In order to submit this job, we will first need to statically compile our piece of C code.  
Most linux servers have the =gcc= (GNU compiler collection) installed, so we will be 
able to compile our c code right on the submit node.  

Note that this is a simple piece of =c= code, so the compilation will not be computationally 
intensive.  Other, more complicated programs may require more resources to compile, and 
should not be compiled on the submit node.  If you're unsure whether it's okay to compile 
your code, a good rule of thumb is time to compile.  If a program can be compiled in less than a minute, it can 
probably be compiled on a submit node.  If it takes longer to compile, it should be compiled on a different 
machine.  

This compilation will be fast, so we can go ahead and compile on the submit node.  The command to compile is: 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>gcc -static pascal.c -o pascal</strong>
</pre>

Note that we have added the =-static= option to ensure that the compiled binary includes the necessary libraries
instead of being dynamically linked.  This will allow the code to run on any Linux machine, no matter where those 
libraries are located.  

---++ Submit file

Once our code is compiled, it is straightforward to submit a job.  Our compiled code will be the =executable= 
listed in the submit file.  Copy and paste the following lines into a file named =pascal.submit=.  

<pre class="file">
universe = vanilla
executable = pascal

output = pascal.out
error = pascal.err
log = pascal.log

should_transfer_files = YES
when_to_transfer_output = ON_EXIT

queue
</pre>

Submit the job using =condor_submit=

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit pascal.submit</strong>
</pre>

Once the job has left the queue, you should be able to see the results (seven rows of 
Pascal's triangle) in the =pascal.out= file.  
