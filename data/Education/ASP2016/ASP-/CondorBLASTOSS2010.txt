%META:TOPICINFO{author="AlainRoy" date="1279126091" format="1.1" version="1.3"}%
%META:TOPICPARENT{name="CondorExercisesOSS2010"}%
---+ Running a real science example: BLAST

For our final example, we're going to run a real scientific application, BLAST. 

[[http://blast.ncbi.nlm.nih.gov/Blast.cgi][BLAST homepage]]<br>
[[http://en.wikipedia.org/wiki/BLAST][BLAST Wikipedia entry]]

I'll be honest with you. This tutorial is being written by a computer scientist (Alain Roy), not a biologist, so my understanding of BLAST is weak. Yet I think it's both illustrative and entertaining to run real science code instead of just toy examples. So let's work through it together. 

---++ What is BLAST?

The BLAST web site says:

<div style="margin-left: 1em; margin-right: 1em; background-color: #ffff66; border: 1px solid black; padding: 0.5em;">
The Basic Local Alignment Search Tool (BLAST) finds regions of local similarity between sequences. The program compares nucleotide or protein sequences to sequence databases and calculates the statistical significance of matches. BLAST can be used to infer functional and evolutionary relationships between sequences as well as help identify members of gene families. 
</div>

I'll try to interpret that for you. BLAST is a pretty cool tool, particularly now that scientists have found lots of DNA and protein sequences. Let's imagine that you're a biologist, and you're curious about some gene. You've located this gene in a yeast, and you want to know if it's in a fly. Good question. Well, biologists have nifty ways of writing down gene and protein sequences--you've probably seen the 4-letters used to represent nucleotides in DNA: GCTA. You can also have sequences of amino acids that make up proteins. If you have a transcription for a gene in yeast and you have the entire genome for the fly, you could just search. It's like searching for a string in a text file. Of course, it's more complicated than that. For one thing, biologists wonder if there is a _similar_ sequence in the fly, not just an identical sequence. After all, things change. So BLAST is a tool for doing that.

Beyond this basic explanation, I can't tell you a whole lot more about it, because it gets a lot more complex than that. If you're curious, check out the links above. Here's a short quote from Wiki

---++ Deployment and execution of BLAST

Recall the discussion about deploying applications and data when we [[CondorROSS2010][introduced R]]. The question was: should we deploy the application and data ourselves, or should we let a sysadmin do it? For R, we chose to deploy it ourselves, which was reasonable. For BLAST, we decided to pre-deploy it for you. We could have had you deploy it, but BLAST is a bit larger (the application is more than 300MB, and the databases are pretty large too), and rather complex. So to run BLAST, you just need to be able to submit a simple script to Condor that will run BLAST, which is already pre-deployed.

Note that BLAST is pre-deployed in our cluster, but it's not accessible from =vdt-itb=. It's only available from the worker nodes. We're not trying to make things hard for you, there were just some technical complications. 

To run BLAST, if you're comfortable with writing shell scripts, I'd like you try to write a shell script to invoke it yourself. If you're not comfortable, you can look at mine below. 

BLAST itself is located in =/nfs/osg-app/osgedu/blast/= <br>
We have a few BLAST databases, located in =/nfs/osg-data/osgedu/blast_dbs=.

To run BLAST, you need to do three things from your script:

   1. Set up your environment, by sourcing =/nfs/osg-app/osgedu/blast/setup.sh 
   1. Run blast (executable name is =blastp= with two parameters
      1. -db /full/path/to/database.aa (where "database" is yeast or drosoph)
      1. -query /full/path/to/some/query/file (I'll give you some queries, don't worry)
   1. Redirect standard output into a file, so you conveniently name the output of your program. 

So an example invocation of blast (step 2) might be:
<pre style="margin-left:4em" class="screen">
blastp -db /nfs/osg-data/osgedu/blast_dbs/yeast.aa -query query1
</pre>

Here is my script, if you need to see it: %TWISTY{
showlink="Click here to just take Alain's run-blast script..."
hidelink="Hide Alain's run-blast script..."
}%

<pre style="margin-left:4em" class="screen">
#!/bin/sh

if [ $# -ne 3 ]; then
    echo "Usage: run-blash <db> <query> <output>"
    exit 1
fi


appdir=/nfs/osg-app/osgedu/blast/
dbdir=/nfs/osg-data/osgedu/blast_dbs

# Get our environment set up
. $appdir/setup.sh 

# Run the query
blastp -db $dbdir/$1 -query $2  > $3
</pre>
%ENDTWISTY%

---++ First job: run a sample query

A query looks like the following, which you can put into a file named query1

<pre style="margin-left:4em" class="screen">
>Simple yeast query
MPVSDSGFDNSSKTMKDDTIPTEDYEEITKESEMGDATKITSKIDANVIEKKDTDSENNITIAQDDEKVSWLQRVVEFFE
</pre>

There are two things there: the name of the query, and the stuff to search for. This particular query is looking for a sequences of amino acids in proteins. (That's why there are more than four letters, like the familiar nucleotides in DNA.) If you're curious what the letters mean, you can [[http://en.wikipedia.org/wiki/FASTA_format#Sequence_representation][read about it in Wikipedia]].

OK, your first task is to run a Condor job to execute that query against the =yeast.aa= database. The job itself should execute quickly (about a second, once the job starts running). 

The output will look something like this, but longer. (I chopped it short.)

<pre style="margin-left:4em" class="screen">
BLASTP 2.2.23+

Reference: Stephen F. Altschul, Thomas L. Madden, Alejandro A.
Schaffer, Jinghui Zhang, Zheng Zhang, Webb Miller, and David J.
Lipman (1997), "Gapped BLAST and PSI-BLAST: a new generation of
protein database search programs", Nucleic Acids Res. 25:3389-3402.

Reference for composition-based statistics: Alejandro A. Schaffer,
L. Aravind, Thomas L. Madden, Sergei Shavirin, John L. Spouge, Yuri
I. Wolf, Eugene V. Koonin, and Stephen F. Altschul (2001),
"Improving the accuracy of PSI-BLAST protein database searches with
composition-based statistics and other refinements", Nucleic Acids
Res. 29:2994-3005.

Database: yeast.aa
           6,298 sequences; 2,974,038 total letters

Query=  Simple yeast query
Length=80
                                                                      Score     E
Sequences producing significant alignments:                          (Bits)  Value

ref|NP_009511.1|  uridine permease; Fui1p                              170    4e-44
ref|NP_012677.1|  dolichyl phosphate-D-mannose:protein O-D-mannos...  23.9    4.6  
ref|NP_015305.1|  Smt3-processing enzyme; Ulp1p                       23.9    4.8  
ref|NP_011691.1|  Squalene monooxygenase; Erg1p                       23.9    5.1  
ref|NP_009545.1|  putative repressor protein homologous to yeast ...  23.1    7.3  

>ref|NP_009511.1| uridine permease; Fui1p
Length=639

 Score =  170 bits (430),  Expect = 4e-44, Method: Composition-based stats.
%RED% Identities = 80/80 (100%), Positives = 80/80 (100%), Gaps = 0/80 (0%)%ENDCOLOR%
</pre>

See that 100% positives? You got a perfect match. No surprise--I copied that sequence right out of the database. 

---++ On your own

---+++ A small change
   * Change the query by swapping the last two letters. (It will end in EF instead of FE). How does it change the results?

---+++ A different database
   * Run the same query, but against the =nr= database. You should notice that instead of being a very fast query (less than a second), it should take a few minutes. The nr database is a collection of protein sequence databases and it's quite large. A larger database means a longer run time. You should have similar results  to the earlier query because the yeast protein sequences are also in the nr database. 

---+++ A larger set of queries

We have ten query files for you. Run them as 10 jobs in a single DAG. Can you get the results?

... Something about collating the results, provide collation script ...