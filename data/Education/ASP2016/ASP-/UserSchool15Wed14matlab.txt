%META:TOPICINFO{author="ChristinaKoch" date="1437680783" format="1.1" reprev="1.5" version="1.5"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.4: Matlab

The goal of this exercise is to compile Matlab code and run it.  This exercise will draw on the idea of writing a wrapper script to install and run code, first introduced in [[UserSchool15Wed13wrapper][Exercise 1.3]] and should take 25-30 minutes. 

---++ Background

Matlab is licensed; however, unlike most licensed software, it has the ability to be compiled and the compiled code can be run without a license.  We will be compiling Matlab =.m= files into a binary file and running that binary using a set of files called the Matlab runtime. 

---++ Matlab Code

   1. Log in to the CHTC submit node (=osg-ss-submit.chtc.wisc.edu=).  
   1. Create a directory for this exercise and =cd= into it . 
   2. Copy the following code into a file called =spline.m= \
\
<pre class="file">
pp =[zeros(1,7); 5.4, 3, 6.9, 2.75, 2.5, .5, 5];
alpha = 2*pi/3; ca = cos(alpha); sa = sin(alpha); c = [ca sa;-sa ca];
d = [0 0 .05 -.05;1 -1 .98 .98]; d = [d c*d];
yin = rscvn([pp(:,[7,1:3]),c*pp(:,3:4),pp(:,3)], d(:,[1 2 1 4 7 5 1]));
fnplt(yin), hold on, fnplt(fncmb(yin,c)), fnplt(fncmb(yin,c'))
yang = rscvn([pp(:,6),-pp(:,6),pp(:,5),c*pp(:,4)],[d(:,[2 1 1]),c(:,2)]);
fnplt(yang), fnplt(fncmb(yang,c)), fnplt(fncmb(yang,c'))
axis([-7.2 7.2 -7.2 7.2]), axis equal, axis off, hold off
print('medallion','-dpng')
</pre>\

---++ Compiling Matlab

The first step in making Matlab portable is compiling our Matlab script.  To compile this code, we need to access the machines with the Matlab compiler installed.  For this exercise, we will use the compilers installed on special CHTC build machines.  In the CHTC pool, you can't use =ssh= to directly connect to these machines. Instead, you must submit an interactive job (like in Exercise 1.3) that specifically requests these build machines.  

   1.  Create a file called =compile.submit= with the lines below: \
\
<pre class="file">
universe = vanilla

output = compile.out
error = compile.err
log = compile.log

+IsBuildJob = true
requirements = (OpSysAndVer =?= "SL6") && ( IsBuildSlot == true )

should_transfer_files = YES
when_to_transfer_output = ON_EXIT

transfer_input_files = spline.m

queue
</pre>\

   1. You can initiate the interactive job by using =condor_submit= 's =-i= option.  Enter the following command: \
\
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit -i compile.submit</strong>
</pre>\

   1. Once your interactive job has connected to the build node, you'll be able to access all of the Matlab tools installed \
there.  Look around in the =/usr/local/MATLAB= directory.  Can you find the Matlab compiler =mcc= for a specific version of Matlab?  \

   1. Compile your Matlab code with version 2014b.  \
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>/usr/local/MATLAB/R2014b/bin/mcc -m -R -singleCompThread -R -nodisplay -R -nojvm spline.m</strong> 
</pre>\
The extra arguments to the =mcc= command are very important here.  Matlab, by default, will run on as many CPUs as it can find.  This can be a big problem \
when running on someone else's computers, because your Matlab code might interfere with what the owner wants.  The =-singleCompThread= option \
compiles the code to run on a single CPU, avoiding this problem.  In addition, the =-nodisplay= and =-nojvm= options turn off the display (which won't exist \
where the code runs) and the Java virtual machine.  Both of these options will allow the code to run in more places.  \

   1. To exit the interactive session, type =exit=
   1. Now that you're back on the submit node, look at the files that were created by the Matlab compiler.  Which one is the compiled binary?  

---++ Wrapper Script

Like the GROMACS example from earlier this morning, we will need a wrapper script to install the Matlab runtime and then run our compiled Matlab code.  For Matlab, the runtime is 
too large to be transferred using =transfer_input_files=.  Instead, we will use our wrapper script to download (and then install) the runtime within the job.  For this exercise, we will 
download CHTC's copy of the Matlab runtime, which is hosted on a public proxy server.  

In summary, our wrapper script will need to accomplish the following steps: 
   * Download and unpack the runtime 
   * Set the environment variables
   * Run our compiled matlab code

Fortunately, the Matlab compiler has pre-written most of this wrapper script for us!  

   1. Take a look at =run_spline.sh=.  Which of the above steps do we need to add?  Once you have an idea, move to the next step.\

   2. We'll need to add commands to download and unpack the runtime.  Add these lines to the beginning of the =run_spline.sh= file, after =#!/bin/bash= but before =exe_name=$0= : \
<pre class="file">
wget http://proxy.chtc.wisc.edu/SQUID/r2014b.tar.gz 
tar xzf r2014b.tar.gz
rm r2014b.tar.gz 
</pre>\

   3. A question to consider: why is there a line to remove the =r2014b.tar.gz= file after unpacking the directory?  \
\
\
Remember that Condor transfers back all _new_ files as "output."  Thus, files that you download (or copy) into a job while it is running will be seen as output. \
This is another good reason to use wrapper scripts - you can delete any downloaded (or otherwise non-output) files so that Condor only returns the files you want.  \

   4. Look at =readme.txt= to determine what arguments our wrapper script requires.  Once you have an idea, move to the next step.\

   5. The name of the Matlab runtime directory is a required argument to the wrapper script =run_spline.sh=.  We'll have to do a little extra work to find out the name of that directory.  
      1. Download the runtime tarball by running the =wget= command that you added to =run_spline.sh=.  
      2. Untar the runtime tarball.
      3. What directory has been created?  This is the name of the runtime directory, and the argument you should pass to =run_spline.sh=.  

---++ Submitting the Job

   1. Copy an existing submit file into your current directory.  The submit file we used for the =gromacs= example would be a good candidate, as that example also used a wrapper script.  
   2. Modify your submit file for this job.  
   3. Check your changes against the list below.  
      * The =executable= for this job is going to be our wrapper script =run_spline.sh=.
      * You need to transfer the compiled binary =spline=, using =transfer_input_files=.
      * The argument to =run_spline.sh= is "v84", as that is the name of the un-tarred runtime directory.  
      * Because we are downloading and unpacking an outside file (the Matlab runtime), it would be a good idea to request the amount of disk we need.  \
      <pre class="file">request_disk = 1GB</pre>
   3. Submit the job using =condor_submit=.  
   4. After it completes, the job should have produced a file called =medallion.png=
