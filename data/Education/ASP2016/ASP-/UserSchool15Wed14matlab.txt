%META:TOPICINFO{author="ChristinaKoch" date="1437604235" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.4: Matlab

The goal of this exercise is to compile Matlab code and run it.  This exercise will draw on the idea of writing a wrapper script to install and run code, first introduced in [[UserSchool15Wed13wrapper][Exercise 1.3]]

---++ Background

Matlab is licensed; however, unlike most licensed software, it has the ability to be compiled and run without a license.  One way to run Matlab without a license is to compile Matlab .m files into a binary file and run the binary by using a set of files called the Matlab runtime. 

---++ Compiling Matlab

In order to compile Matlab, you need access to a Matlab compiler.  For this school, you can use the compilers that are installed on the CHTC pool.  

   1. Log in to the CHTC submit node (=osg-ss-submit.chtc.wisc.edu=).  
   2. Copy the following code into a file called =spline.m= \
\
<pre class="file">
pp =[zeros(1,7); 5.4, 3, 6.9, 2.75, 2.5, .5, 5];
alpha = 2*pi/3; ca = cos(alpha); sa = sin(alpha); c = [ca sa;-sa ca];
d = [0 0 .05 -.05;1 -1 .98 .98]; d = [d c*d];
yin = rscvn([pp(:,[7,1:3]),c*pp(:,3:4),pp(:,3)], d(:,[1 2 1 4 7 5 1]));
fnplt(yin), hold on, fnplt(fncmb(yin,c)), fnplt(fncmb(yin,c'))
yang = rscvn([pp(:,6),-pp(:,6),pp(:,5),c*pp(:,4)],[d(:,[2 1 1]),c(:,2)]);
fnplt(yang), fnplt(fncmb(yang,c)), fnplt(fncmb(yang,c'))
axis([-7.2 7.2 -7.2 7.2]), axis equal, axis off, hold off
print('medallion','-dpng')
</pre>\

   1. To compile this code, we need to access the machines with the Matlab compiler installed.  In the CHTC pool, you can't use =ssh= to directly connect to these machines. Instead, you must submit an interactive job.  An interactive job is like a normal Condor job but without an executable.  Instead of Condor running the executable, it creates a bash session on an execute machine so that you can run commands yourself (in this case, to compile Matlab).  
   1.  An interactive job requires its own submit file.  Create a file called =compile.submit= with the lines below: \
\
<pre class="file">
universe = vanilla

output = compile.out
error = compile.err
log = compile.log

+IsBuildJob = true
requirements = (OpSysAndVer =?= "SL6") && ( IsBuildSlot == true )

should_transfer_files = YES
when_to_transfer_output = ON_EXIT

transfer_input_files = spline.m

queue
</pre>\

   1. You can initiate the interactive job by using =condor_submit='s =-i= option.  Enter the following command: \
\
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit -i compile.submit</strong>
</pre>\

   1. Once your interactive job has connected to the build node, you'll be able to compile your Matlab code.  Run the following command: \
<pre class="screen">
%UCL_PROMPT_SHORT% <strong>/usr/local/MATLAB/R2013b/bin/mcc -m -R -singleCompThread -R -nodisplay -R -nojvm spline.m</strong>
</pre>\

   1. To exit the interactive session, type =exit=
   1. Now that you're back on the submit node, look at the files that were created by the Matlab compiler.  In particular, take a look at the =readme.txt= file. 

---++ Wrapper Script

Like the GROMACS example from earlier this morning, we will need a wrapper script to install the Matlab runtime and then run our compiled Matlab code.  In particular, it will need to accomplish the following steps: 
   * Download and unpack the runtime (it's too large to be transferred with ordinary file transfer)
   * Set the environment variables
   * Run our compiled matlab code

Fortunately, the Matlab compiler has pre-written most of this wrapper script for us!  

   1. Take a look at =run_spline.sh=.  Which of the above steps do you think we need to add to what has already been written?  \

   2. We'll need to add commands to download and unpack the runtime.  Add these lines to the beginning of the =run_spline.sh= file: \
<pre class="file">
wget http://proxy.chtc.wisc.edu/SQUID/r2014b.tar.gz 
tar xzf r2014b.tar.gz
rm r2014b.tar.gz 
</pre>

---++ Submit file

   1. Make copy of previous wrapper submit file (=gromacs.submit=), named =matlab.submit=.  Which lines to change?  
   2. Change those lines
   3. Check your changes
      * executable: run_spline.sh
      * transfer_input_files: spline
      * arguments -> look at the readme!  unpack the tar file to find out directory name
   3. Submit the job using =condor_submit=.  
   4. After it runs, the job should produce a file called =medallion.png=
