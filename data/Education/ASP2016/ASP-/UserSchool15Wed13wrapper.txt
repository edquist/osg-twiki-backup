%META:TOPICINFO{author="ChristinaKoch" date="1436975474" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.3: Wrapper scripts for in-job installation

Our last exercise for this session is the most important.  Some software cannot be compiled into a 
single executable - either the language or its libraries don't allow for static compilation.  
In this case, it is necessary to create a "wrapper" script (usually in bash or 
perl) that is able to install the software from the source code on a per job basis.  Not only 
does this portability technique work with almost any kind of software that can be 
locally installed, it also allows for a great deal of control and flexibility 
for what happens within your job.  Once you can write a script to handle your software 
(and often your data as well), you can submit a large variety of workflows to a distributed computing 
system like the Open Science Grid.  

---++ Our software example

For this exercise, we will be using the molecular dynamic simulation software package GROMACS.  GROMACS is a good example of 
software that is not easily compiled to a single executable: a researcher may want to run multiple GROMACS commands in order to 
complete a full simulation, and some of these commands depend on libraries that can't be statically compiled into the executable (check to see if that's true).  

The source for GROMACS can be downloaded from this page: 

http://www.gromacs.org/Downloads

Create a =gromacs= directory on the OSG submit node, and download GROMACS version 4.6.5 into that directory.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>mkdir gromacs</strong>
%UCL_PROMPT_SHORT% <strong>cd gromacs</strong>
%UCL_PROMPT_SHORT% <strong>wget ftp://ftp.gromacs.org/pub/gromacs/gromacs-4.6.5.tar.gz</strong>
</pre>

---++ Installation instructions

Our goal is to write a script that will install GROMACS for us, then run a simulation.  This first requires that 
we understand how GROMACS should be installed.  On the [[http://www.gromacs.org/Downloads][downloads page]], there is a 
[[http://www.gromacs.org/Documentation/Installation_Instructions][link to installation instructions]].  Clicking through to the documentation page, 
then choosing the version of GROMACS we downloaded, we can find instructions for installing GROMACS 4.6.  

http://www.gromacs.org/Documentation/Installation_Instructions_4.6

This is great - there's a lot of information about installation!  First, I want to get an overview of what the installation 
procedure will involve.  That information will be likely be available in the section on [[http://www.gromacs.org/Documentation/Installation_Instructions_4.6#2._Quick_and_dirty_installation]["Quick and Dirty Installation"]].  

Sure enough, that section provides the following information: 

<pre>
1. Get the latest version of your compiler.
2. Check you have CMake version 2.8.x or later.
3. Unpack the GROMACS tarball.
4. Make a separate build directory and change to it.
5. Run CMake with the path to the source as an argument
6. Run make and make install

Or, as a sequence of commands to execute:

$ tar xfz gromacs-4.6.5.tar.gz
$ cd gromacs-4.6.5
$ mkdir build
$ cd build
$ cmake .. -DGMX_BUILD_OWN_FFTW=ON
$ make
$ sudo make install
</pre>

This is helpful because it gives a sense of 
what steps are necessary to install GROMACS, and what the main lines of our wrapper script 
are going to be.  The last line of the brief install instructions: 

<pre class="file">
sudo make install
</pre>

should give us pause.  =sudo= indicates the need for administrative privileges, which are not available 
to within a job.  This means that we will have to change 
at least one step in the install procedure to make sure that we're 
installing to the job's working directory (where we have the ability to install software) instead of a 
protected system location (where we don't have the ability to install software).  

Often, software's installation location can be set by using a "prefix" argument, typically during a configuration step 
of the installation.  Reading through more of the documentation for GROMACS installation, we find that 

* the =make install= step will install the software to a location provided to the =cmake= installation step.  
(see: [[http://www.gromacs.org/Documentation/Installation_Instructions_4.6#4.10._Installing_GROMACS][Section 4.10]])

* looking at the instructions for the =cmake= installation step, there is an example showing how to change the installation directory prefix.  (see: [[http://www.gromacs.org/Documentation/Installation_Instructions_4.6#4.2._Using_CMake_command-line_options][Section 4.2]]

So we will have to set the installation prefix to our job's working directory, using the =-DCMAKE_INSTALL_PREFIX=/path/to/install/location= 
argument to =cmake=.  

One final hurdle to overcome: we won't know the path of the job's working directory in advance, as it's created at run time.  Here, we'll need 
a unix trick; the =$(pwd)= variable can be used in bash commands and prints the working directory.  So if our install script is running from the location: 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>pwd</strong> 
/var/lib/condor/asdf;lkj/gromacs-4.6.5/build
</pre>

And we want to install to the directory at =/var/lib/condor/asdf;lkj/=, we will want to set the installation prefix as =$(pwd)/../..=.  

---++ Write a wrapper script

We're now ready to write our script.  This script needs to install 
GROMACS, with the considerations we've already looked at above, then run some GROMACS commands.  
Carefully read the script below, making sure you understand what each line is doing.  Then copy and paste 
into a file named =run_gromacs.sh=.  

<pre class="file">
#!/bin/bash

# Start installing gromacs, using steps based on online documentation
tar xfz gromacs-4.6.5.tar.gz
cd gromacs-4.6.5
mkdir build
cd build
# The next line specifies the installation location
# via an install prefix.  The path given will install GROMACS 
# in the working directory of the job
cmake .. -DCMAKE_INSTALL_PREFIX=$(pwd)/../../
make
# We don't need sudo in front of 'make install' because 
# we're installing within the job's working directory.  
make install
# Leave installation directory and return to the working directory
# where GROMACS has been installed.  
cd ../../

# Run gromacs commands
bin/pdb2gmx -f JZ4.pdb -o JZ4.gro -water spc -ff gromos43a1
bin/grompp -v -f minim.mdp -c JZ4.gro -p topol.top -o results.tpr
bin/mdrun -v -deffnm results -c results.gro

</pre>

The last step in preparing our script is to make it a proper executable, using the =chmod= command.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>chmod +x run_gromacs.sh</strong>
</pre>

---++ Run a GROMACS job

Now we have a script that will install and run GROMACS for us.  Our last step is to create a submit file to send our GROMACS job to the OSG.  
Create a file called =gromacs.submit= 
and fill it in with the following lines: 

<pre class="file">
universe = vanilla
executable = run_gromacs.sh

log = gromacs.log
error = gromacs.err
output = gromacs.out

should_transfer_files = YES
when_to_transfer_output = ON_EXIT
transfer_input_files = gromacs-4.6.5.tar.gz,JZ4.pdb,minim.mdp

request_cpus = 1
request_memory = 1GB
request_disk = 1GB

queue
</pre>

Note that our =run_gromacs.sh= script is the executable, and we must transfer the GROMACS source =gromacs-4.6.5.tar.gz= file in =transfer_input_files=.  

This job also requires two input files, which are located on the OSG submit node at =/home/ckoch5/OSGdata= and should be copied to your submission directory.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cp /home/ckoch5/OSGdata/JZ4.pdb /home/ckoch5/OSGdata/minim.mdp ./</strong>
</pre>

Now the job is ready to be submitted!  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit gromacs.submit</strong>
</pre>

Once the job finishes, it should produce a =results.log= file, along with various other intermediate files.  

---++ Food for thought

Right now, our =run_gromacs.sh= script installs GROMACS to the working directory, placing the various GROMACS
directories (=bin=, =lib=, =include= and so on) 
in the top-level directory of the job.  How would you change the script so that it: 

a) creates a directory called =gromacs= inside the job's working directory

b) installs GROMACS to this location

c) runs the same GROMACS commands from this installation?

In addition, there were a lot of intermediate files (=.gro, =.top) that came back with our actual results.  What commands 
could you add to the wrapper script to delete these files before the job exits?  
