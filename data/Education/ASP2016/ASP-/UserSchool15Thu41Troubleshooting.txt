%META:TOPICINFO{author="LincolnBryant" date="1438289916" format="1.1" version="1.2"}%
---+ Exercises 
---++ Goal

In this exercise, we'll look at a few different ways that jobs might get stuck or fail, and how to troubleshoot them. 

---++ Setup

First, you'll need to log in to the CHTC submit node:

 <pre class="screen">
%UCL_PROMPT_SHORT% ssh osg-ss-submit.chtc.wisc.edu
</pre>

Then, create a new directory in your home for these exercises:
<pre class="screen">
%UCL_PROMPT_SHORT% mkdir -p ~/troubleshooting
%UCL_PROMPT_SHORT% cd ~/troubleshooting
</pre>

We'll write a job that needs access to the CHTC's Gluster filesystem. We won't actually do anything with Gluster, other than verify that it is there.

Copy and paste the following as a script called =gluster.sh=: 
<pre class="file">
GLUSTER_LOCATION=/mnt/gluster

echo "I am a short job running on node" `hostname`

stat $GLUSTER_LOCATION > /dev/null

if [ $? -eq '0' ]; then
  echo "Gluster is mounted at $GLUSTER_LOCATION!"
else
  echo "Could not find Gluster :("
fi
</pre>

Make sure to =chmod +x gluster.sh=. 

Create an HTCondor submit file to go with it and include the following requirements line:

<pre>
Requirements = (Has_Gluster =?= True)
</pre>

---++ Exercise 1: Fix a stuck job

Once you've created the submit file, go ahead and submit your job. 

Will this job ever run? After submitting, analyze the job with =condor_q -better-analyze [Job ID]=.

%TWISTY{
showlink="Click to see expected output"
hidelink="Hide"
mode="div"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
<pre class="file">
The Requirements expression for your job reduces to these conditions:

         Slots
Step    Matched  Condition
-----  --------  ---------
[0]           0  Has_Gluster is true
</pre>
%ENDTWISTY%

We can also see how many nodes match our requirement with =condor_status=:
<pre class="screen">
condor_status -constraint Has_Gluster
</pre> 

Does =condor_status= show any slots that match Has_Gluster? No -- I have led you astray and given you a bad requirements line :)

The actual ClassAd that we want is named *HasGluster* not _Has_Gluster_. At this point, we can either remove our old job and resubmit, or we can edit the job in queue with =condor_qedit=. 

<pre class="screen">
condor_qedit [Job ID] Requirements 'HasGluster =?= True'
</pre> 

Once you've edited the job in queue, use =condor_release= to re-queue it.

Try to run =condor_q -better [Job ID]= again. Has the output changed?

---++ Exercise 2: Investigate why a job is held

Did the job in the previous exercise finish? It should have eventually started after fixing the requirements line, but you may now see it in H state (Held). Why? Try investigating with =condor_q -hold [Job ID]=

%TWISTY{
showlink="Click to see expected output"
hidelink="Hide"
mode="div"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
<pre class="file">
Error from slot1@e233.chtc.wisc.edu: Failed to execute '/var/lib/condor/execute/slot1/dir_27964/condor_exec.exe': (errno=8: 'Exec format error')
</pre>
%ENDTWISTY%

What could be wrong with this job? Go back and look at the executable again. There's something missing at the top. 

%TWISTY{
showlink="Click to see the answer" 
hidelink="Hide"
mode="div"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
The shell script is missing the interpeter line, =#!/bin/bash=. Without it, HTCondor will fail to run the job.
%ENDTWISTY%

---++ Exercise 3: Try condor_ssh_to_job
This exercise is a bit more open-ended. Try to create a submit file that runs the "sleep" command. Sleep takes integer seconds as an argument, so try to have your job do something like "sleep 3600".

Submit the job, and once it's running, use "condor_ssh_to_job [Job ID]" to SSH to the remote execution host.

Try to answer the following questions: 

What is =condor_exec.exe=? What do =_condor_stderr= and =_condor_stdout= correspond to?


-- Main.LincolnBryant - 29 Jul 2015
