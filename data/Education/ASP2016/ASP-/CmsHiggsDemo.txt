%META:TOPICINFO{author="AnneHeavey" date="1181849494" format="1.1" reprev="1.11" version="1.11"}%
---+ Analyzing Millions of Gigabytes of LHC Data for CMS - Discover the Higgs on OSG
d7 1
%TOC{title="Outline:"}% 

---++ Introduction
Feel the thrill of discovery as you use the same CMS software and simulated data as the physicists do to find this elusive, coveted treasure! You'll run your job real-time on remote computers made available through Open Science Grid.
CMS's Oliver Gutsche has compiled a demo/tutorial on *discovering the Higgs on OSG*.  Feel the thrill of discovery as you use the same CMS software and simulated data as the physicists do to find this elusive, coveted treasure! You'll run your job real-time on remote computers made available through Open Science Grid.
Only people eligible for membership in the CMS VO can set up their computing environments appropriately to run this demo. If you're not affiliated with CMS, you'll have to sit with somebody who is.
Only people eligible for membership in the CMS VO can set up their computing environments appropriately to run this demo. If you're not affiliated with CMS, you'll have to go through this with somebody who is.

<!--
   * Oliver Gutsche's demo shows the analysis workflow for *discovering the Higgs on OSG*
      * Analysis code was prepared in the CMSSW framework:
         * EDAnalyzer accessing reconstructed tracks and writing out ROOT file with histograms:
            * transverse momentum of reconstructed tracks: p<sub>T</sub> [GeV]
            * di-track invariant mass: m<sub>mu,mu</sub> [GeV]
            * invariant mass of two di-track-objects: m<sub>Z,Z</sub> [GeV]
      * Dataset discovery: use DBS/DLS discovery page to check availability and location of datasample: *Higgs->ZZ->4mu* %RED%Datasets change; sometimes this will not work%ENDCOLOR%
      * Analysis job execution on the GRID using CRAB

   * Used components of the CMS software and computing environment:
      * *CMSSW*: CMS software framework and EDM
      * *DBS/DLS discovery webpage*:
         * *DBS*: Dataset Bookkeeping System, database of datasets and their files
         * *DLS*: Dataset Location Service, database of location(s) of datasets _(which dataset is available at which site)_
      * *CRAB*: CMS Remote Analysis Builder, user tool to submit and control batch analysis jobs to the GRID

   * *CMSSW*:
      * Based on a bus model, user schedules modules which are run by the main framework application: _cmsRun_
      * User interaction with the framework application is done through configuration file called _parameter-set_
      * Parameter-set instantiates modules, instance is labeled by the _module label_
      * 4 different types of modules, two main user modules:
         * *EDProducer*: uses input from the event and produces new output which is stored in the event
         * *EDAnalyzer*: uses input form the event and performs operations on input, does not store anything in the event _(preparation shown in this demo)_

   * Locations:
      * *User interface (UI)*: interactive login nodes at Fermilab _(UAF)_, cmsuaf.fnal.gov
      * *GRID sites*: one of the seven US-CMS T2 sites
         * University of Nebraska, Lincoln (UNL, OSG middleware), srm.unl.edu
         * University of Wisconsin, Madison (Wisconsin, OSG middleware)
         * California Institute of Technology (Caltech, OSG middleware)
         * Massachusetts Institute of Technology (MIT, OSG middleware)
         * Purdue University (Purdue, OSG middleware)
-->
d153 2
---++ Things to do ahead of time
   * Get a grid (PKI) certificate; load it into your browser and copy it into the =$HOME/.globus area= of the UNIX/Linux machine you're going to use.
   * Convert the certificate using the =openssl= command as shown (use your actual =.pl2= certificate filename with no angle brackets; use the output names =usercert.pem= and =userkey.pem= as shown):
<verbatim style="background-color: lightblue;  text-align: left;padding: 10px;margin-left: 20px;margin-right: 20px;color: black;">
      openssl pkcs12 -in <YourCert>.p12 -clcerts -nokeys -out $HOME/.globus/usercert.pem
      openssl pkcs12 -in <YourCert>.p12 -nocerts -out $HOME/.globus/userkey.pem
      chmod go-rw $HOME/.globus/userkey.pem) 
</verbatim>
   * Join the CMS VO. Go to [[https://lcg-voms.cern.ch:8443/vo/cms/vomrs?path=/RootNode][the CMS VO registration page]]. It may take a day or so to get approved and become fully registered.

d58 4
---++ Set up your environment and prepare your user area

   1. First, check the [[MidWestGridWorkshop2007Conventions][Format conventions]] to understand what the blue, red and gray sections mean as you go through the demo.
   2. [[MidWestGridWorkshop2007Setup][Set up your CMS software environment]].
   3.  Get a grid proxy using =grid-proxy-init=. Or =voms-proxy-init=? You will be prompted for your GRID pass phrase.
   4. To check your proxy, run =voms-proxy-info -all=.
   * First, check the [[MidWestGridWorkshop2007Conventions][Format conventions]] to understand what the blue, red and gray sections mean as you go through the demo.
   * [[MidWestGridWorkshop2007Setup][Set up your CMS software environment]].
   * Get a grid proxy using =grid-proxy-init=. Or =voms-proxy-init=? You will be prompted for your GRID pass phrase.
   * To check your proxy, run =voms-proxy-info -all=.

---++ Prepare the analysis code 
The overall collection of software, referred to as CMSSW, is built around a Framework, an Event Data Model (EDM), and Services needed by the simulation, calibration and alignment, and reconstruction modules that process event data so that physicists can perform analysis. 

The CMSSW framework implements a software bus model wherein there is one executable, called cmsRun, and many plug-in modules which run algorithms. The same executable is used for both detector and Monte Carlo (simulation) data.   You will need to create what's called an "EDAnalyzer" module to plug into the Framework.

The EDAnalyzer module will access reconstructed tracks and write out a ROOT file with histograms.

Go to the [[CmsCodePrep][Code preparation]] page. 

---++ Find the dataset

CMSSW data discovery is available on the [[http://cmsdbs.cern.ch/DBS2_discovery/][DBS/DLS discovery]] page. You'll want to search on the string: 
<verbatim>
*Higgs-ZZ-4mu
CMSSW uses CRAB ...
   * Setup CRAB (using sh or csh as appropriate):
The returned page gives both the dataset names and, for each, the set of destination sites from which to choose %RED%(How do we know which are OSG? What criteria to use to choose?)%ENDCOLOR%. Make a note of the dataset and site you want. Since you're using real datasets, they will change over time.
---++ Execute your analysis job on an OSG resource
---+++ Set up the build program
Cms Remote Analysis Builder (CRAB) is a Python program intended to simplify the process of creation and submission of CMS analysis jobs into a grid environment.

   * prepare CRAB configuration file; create =Demo/MyTrackAnalyzer/test/crab.cfg= and give it the following contents, replacing the items in brackets <...> appropriately: 
<verbatim style="background-color: lightblue;  text-align: left;padding: 10px;margin-left: 20px;margin-right: 20px;color: black;">
source /uscmst1/prod/grid/CRAB_1_5_1/crab.sh
</verbatim>
---+++ Make a configuration file
Create the CRAB configuration file: =Demo/MyTrackAnalyzer/test/crab.cfg= and give it the following contents, replacing the items in brackets <...> appropriately: 
<verbatim style="background-color: lightgrey;  text-align: left;padding: 10px;margin-left: 20px;margin-right: 20px;color: black;">
[CRAB]
jobtype                = cmssw
scheduler              = condor_g

[CMSSW]
datasetpath            = <dataset name discovered with discovery page>
pset                       = <parameter-set for analysis code (demotest.cfg)>
total_number_of_events = 100
events_per_job         = 10
output_file            = <histogram file name (histograms.root>

[EDG]
se_white_list          = <destination site (e.g., srm.unl.edu)>
   * create jobs
lfc_host               = lfc-cms-test.cern.ch
lfc_home               = /grid/cms
</verbatim>
---+++ Create your jobs
Now it's time to create the 10 jobs (notice in file above, 100 events/10 evts-per-job).  CRAB does this for you. It will read this configuration file. Run the command:
<verbatim style="background-color: lightblue;  text-align: left;padding: 10px;margin-left: 20px;margin-right: 20px;color: black;">
crab -create
...end of output ...
...
crab. Contacting DLS...
crab. Sites (1) hosting part/all of dataset: ['srm.unl.edu']

crab. 10 job(s) can run on 100 events.

crab. Creating 10 jobs, please wait...
   * submit jobs

crab. Log-file is /uscms/home/aheavey/demo/CMSSW_1_2_0/src/Demo/MyTrackAnalyzer/test/crab_0_070529_144807/log/crab.log
</verbatim>
---+++ Submit your jobs to the grid
Use CRAB to submit these jobs to the grid:
<verbatim style="background-color: lightblue;  text-align: left;padding: 10px;margin-left: 20px;margin-right: 20px;color: black;">
crab -submit all -continue
If this fails and you have fix something and rerun it, first rerun =crab -create=.
...end of output ...
If the jobs have been submitted, then something fails, first kill them (=crab -kill all=) then resubmit them (=crab -resubmit all=). 

   * status check
</verbatim>

If something fails after submission, before resubmitting, first kill them (=crab -kill all=). Then rerun =crab -create= and resubmit them (=crab -resubmit all=). 
You should see that each job is scheduled, and near the end it says =10 Jobs Scheduled=.
   * output retrieval
You can also check your jobs' status at the [[http://lxarda09.cern.ch/dashboard/request.py/jobsummary][DashBoard]].

---+++ Retrieve your output
%RED%I haven't gotten this far%ENDCOLOR%
---++ Finalize analysis: histograms
</verbatim>

%RED%What do you get?  %ENDCOLOR%
---++ Make some histograms
Finalize analysis: histograms

   * post processing: add histogram files of individual jobs using ROOT tool
<verbatim style="background-color: lightblue;  text-align: left;padding: 10px;margin-left: 20px;margin-right: 20px;color: black;">
cd crab_?_*_*/res
hadd histograms.root *.root
</verbatim>
   * Show histograms
<verbatim style="background-color: lightblue;  text-align: left;padding: 10px;margin-left: 20px;margin-right: 20px;color: black;">
root histograms.root
---++ Monitoring

   * [[http://lxarda09.cern.ch/dashboard/request.py/jobsummary?user=OliverGutsche&site=&ce=&submissiontool=&dataset=&application=&rb=&activity=&grid=&date1=2007-03-25+00%3A00%3A00&date2=2007-03-26+00%3A00%3A00&sortby=site&nbars=][DashBoard]]
mmumu->Draw();
mzz->Draw();
</verbatim>

Congratulations! Now wait for the call from Stockholm.

-- Main.AnneHeavey - 24 May 2007

%META:FILEATTACHMENT{name="cms_higgs_demo_flow.gif" attachment="cms_higgs_demo_flow.gif" attr="" comment="flow diagram of demo" date="1182449703" path="cms_higgs_demo_flow.gif" size="79189" stream="cms_higgs_demo_flow.gif" user="Main.AnneHeavey" version="1"}%
