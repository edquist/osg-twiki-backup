%META:TOPICINFO{author="ChristinaKoch" date="1437167117" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.5: Using python, pre-built

Common to run python code.  

Running python code requires an installation of the python interpreter (what we invoke when we type =python= at the command line).  

We can pre-build the interpreter by installing it to a specific directory, then creating a tarball of the installation that we can use 
to run our python code.  

The principles we describe here can be extended to most software packages requiring installation.  

---++ Interactive job for pre-building

Our first step is to build a python installation that we can package for future use.  Building python is a computationally 
intensive task, so it should not be performed on the submit node.  Instead, we'll use an interactive job, which will allow us 
to access a node in the local Condor pool where we can build Python.  

While logged into the CHTC submit node =osg-ss-submit.chtc.wisc.edu=, create a directory called =python=.  =cd= 
into it and create a file called  =build.submit= with the following lines: 

<pre class="file">
universe = vanilla

output = build.out
error = build.err
log = build.log

should_transfer_files = YES
when_to_transfer_output = ON_EXIT

queue
</pre>

To request an interactive session, use the =-i= option with =condor_submit=.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit -i build.submit</strong>
</pre>

To start the installation process, we need to download the Python source code from https://www.python.org/ and then untar the source.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz</strong>
%UCL_PROMPT_SHORT% <strong>tar xzf Python-2.7.10.tgz</strong>
</pre>

Now we have to determine how to install it to a specific location in our working directory.  If we move into the un-tarred 
=Python-2.7.10= directory, we'll see a lot of different files.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cd Python-2.7.10</strong>
%UCL_PROMPT_SHORT% <strong>less README</strong>
</pre>

Looking at the =README=, there are some basic installation 
instructions near the top, under the heading "If you don't read instructions".  Based on that short introduction, we can see the main steps of installation will be: 
<pre>
./configure
make
make install
</pre>

This looks a lot like the GROMACS installation from earlier today!  Like the GROMACS installation, the default installation 
location for Python will be a system location, =/usr/local=.  However, we'd like to install to a specific location in the working directory
so that we can compress that installation directory into a tarball.  Reading 
further into the README, the place to change where Python is installed is in the =configure= step.  Let's see if the 
=configure= script has a "help" option.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>./configure --help</strong>
</pre>

Sure enough, there's a list of all the different options that can be passed to the =configure= script.  We want the =--prefix= 
option, as that sets the installation directory.  We can reuse the 
trick from the GROMACS example of using =$(pwd)= as part of that argument in order to set the path correctly.  

Now let's actually install Python!  First I'll create a directory to hold the installation.  (Note that I'm creating it in the job's working 
directory, not in the =Python-2.7.10= directory where I'm currently located.)  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>mkdir ../python</strong>
</pre>

Now I can run the installation commands.  These may take a few minutes each.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>./configure --prefix=$(pwd)/../python</strong>
%UCL_PROMPT_SHORT% <strong>make</strong>
%UCL_PROMPT_SHORT% <strong>make install</strong>
</pre>

If I move back to the working directory, and look in the =python= subdirectory, I should see a Python installation.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cd ..</strong>
%UCL_PROMPT_SHORT% <strong>ls python/</strong>
bin  include  lib  share
</pre>

Now just tar it up!

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>tar czf python_prebuilt.tar.gz python/</strong>
</pre>

When we exit the job, any new files will return with us.  One of them will be our =python_prebuilt.tar.gz= file, which we want, but the 
other will be the Python source tarball, =Python-2.7.10.tgz=, which we don't need.  If we remove it before exiting, then only our 
prebuilt python tarball will return to the submit node.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>rm Python-2.7.10.tgz</strong>
%UCL_PROMPT_SHORT% <strong>exit</strong>
</pre>

---++ Python script

To run python, we need a script.  In your =python= directory on the submit node, create a file named =fibonacci.py= with the following lines.  

<pre class="file">
import sys

# recursive fibonacci function
def add_fib(fi,fj):
    if fi == 0:
        return 0
    elif fi == 1:
        return 1
    else:
	return add_fib(fi-1,fi-2) + add_fib(fj-1, fj-2)

# command line argument to set which number you want
n = int(sys.argv[1])
assert n > 0, "Invalid value for n"

# print value
print "The", str(n)+"th", "fibonacci number is", add_fib(n-1,n-2)
</pre>

---++ Wrapper script

Our wrapper script this time will much simpler.  Since we've already done all the installation steps and tarred results, 
just need to untar.  Access installation using the same two methods of previous exercise.  

---++ Submit file

Make copy of previous submit file (=python.submit=), named =python.submit=.  Which lines to change?  

* executable =run_fib.sh=
* transfer_input_files =fibonacci.py=, python source

think about how much space you need!  

submit job

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit matlab.submit</strong>
</pre>

Check =.out= file to see if job completed.  

%META:TOPICMOVED{by="ChristinaKoch" date="1437162490" from="Education.UserSchool15Wed16pybuilt" to="Education.UserSchool15Wed15pybuilt"}%
