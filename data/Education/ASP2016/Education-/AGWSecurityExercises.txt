%META:TOPICINFO{author="ForrestChristian" date="1173120659" format="1.1" version="1.4"}%
%META:TOPICPARENT{name="ArgentinaGridWorkshop"}%
<link rel="stylesheet" type="text/css" href="%PUBURL%/%WEB%/WorkshopTutorialModules/exercises.css">

---+!! Tutorial: Security and Certificates on the Grid

%TOC{depth="3"}%

---++ Introduction

This exercise will provide hands-on experience in using various tools to setup and use GSI for working on the grid. The first few sections delve into certificates and proxies and demonstrate how pre-configured credentials can be used to run some grid enable programs. The later sections discuss steps involved in obtaining a new certificate and using them on the grid. We also explore delegation of rights and using of a credentials repository <nop>MyProxy.

The exercise uses tools like _globusrun-ws_ and _globus-url-copy_ to execute jobs on the grid and move files across machines respectively. This exercise does not deal in detail with those tools, but focuses more on the security aspects. These tools and realted technology will be discussed in lectures and exercises later this week.

---++ Notes information

These notes have been written to lead you through the exercises on your own and provide commands to type, expected output and notes highlighting the key aspects of a particular step. Feel free to ask the TAs for help if you have any problems or have any questions.

These notes have transcripts from runs on machine *%LOGINHOST%*. Replace that with your machine name wherever appropriate.

The exercise notes was prepared by running as user *train31*. Replace that with your username in all command line parameters.

You will see two styles of machine text here:

<pre class="screen">
<userinput>Text like this is input that you should type.</userinput>
Text like this is the output you should get.
</pre>

For example:

<pre class="screen">
$ <userinput>date</userinput>
Wed May 31 11:54:58 BST 2006
</pre>


---++ Using Certificates

%INCLUDE{ "UsingCertificates" }%



---++ Using Grid Proxy certificates

%INCLUDE{ "GridProxyCertificates" }%



---++ Obtaining a new certificate

%INCLUDE{ "ObtainingANewCertificate" }%



---++ Using GCS credentials

---+++ Setting up clients to use GCS proxy
To use the proxy genrated from your new credentials from GCS, set the environment variable =X509_USER_PROXY= to point to your proxy file.

<pre class="screen">
[train31 ~]$ <userinput>export X509_USER_PROXY=gcsProxy</userinput>
[train31 ~]$ 
</pre>


---+++ Using GCS credentials to transfer file to remote server

<pre class="screen">
[train31 ~]$ <userinput>globus-url-copy gsiftp://%LOGINHOST%:2811/home/train31/tempFile gsiftp://%GRIDHOST%:2811/tmp/train31TestFile</userinput>
error: globus_ftp_client: the server responded with an error
535 535-FTPD GSSAPI error: GSS Major Status: Authentication Failed
535-FTPD GSSAPI error: GSS Minor Status Error Chain:
535-FTPD GSSAPI error: 
535-FTPD GSSAPI error: accept_sec_context.c:170: gss_accept_sec_context: SSLv3 handshake problems
535-FTPD GSSAPI error: globus_i_gsi_gss_utils.c:881: globus_i_gsi_gss_handshake: Unable to verify remote side's credentials
535-FTPD GSSAPI error: globus_i_gsi_gss_utils.c:854: globus_i_gsi_gss_handshake: SSLv3 handshake problems: Couldn't do ssl handshake
535-FTPD GSSAPI error: OpenSSL Error: s3_srvr.c:1816: in library: SSL routines, function SSL3_GET_CLIENT_CERTIFICATE: no certificate returned
535-FTPD GSSAPI error: globus_gsi_callback.c:351: globus_i_gsi_callback_handshake_callback: Could not verify credential
535-FTPD GSSAPI error: globus_gsi_callback.c:443: globus_i_gsi_callback_cred_verify: Could not verify credential: self signed certificate in certificate chain
535 FTPD GSSAPI error: accepting context
[train31@gridlab1 ~]$ 
</pre>

The above error indicates that the authentication failed because the CA who signed the certificate from which the proxy was created is not trusted on that machine. 

Note that the lifetime of proxy and certificates is valid. But since the chain of trust starts from the CA and the CA is not trusted, authentication fails.

Just to make sure your command is accurate, unset the =X509_USER_PROXY= variable: 


<pre class="screen">[train31 ~]$ <userinput>unset X509_USER_PROXY</userinput></pre>

Submit using your SDSC issued certificate. 

<pre class="screen">[train31 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://%LOGINHOST%:2811/tmp/train31TestFile</userinput></pre>

You'll see that you are able to transfer, because that CA is trusted on that server.

---+++ Using GCS credentials to transfer file  with in local cluster
Now lets try running the same command using the GCS Proxy to transfer file with in local cluster. This cluster has been set up to trust GCS CA. In this example %LOGINHOST% is local machine and %OTHERHOST% is remote machine. Please use appropriate machines in your run.

<pre class="screen">
[train31 ~]$ <userinput>export X509_USER_PROXY=gcsProxy</userinput>
[train31 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://%OTHERHOST%:2811/tmp/train31Test</userinput>
error: globus_ftp_client: the server responded with an error
530 530-Login incorrect. :
 globus_gss_assist: Gridmap lookup failure: 
Could not map /C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53
530-
530 End.
</pre>

The transfer fails here with authorization exceptions. 

The client authenticated with the server and the server established your identity as the DN specified in the error message. In this case:

<verbatim>/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53</verbatim>

But the identity established in authentication is not authorized to use the service. The service uses GridMap authorization, where a mapping of of authorized identities (DNs) is mapped to local user names.

---++ Contents of GridMap file
The local GridFTP service and the one on remote machine is configured to use a gridmap file located in =etc/grid-security/gridmap-file=. This file is write protected so only administrators can change it to give access. But the file can be read by anyone.

<pre class="screen">
[train31 ~]$ <userinput>more /etc/grid-security/grid-mapfile </userinput>
# $Source: /u/e/d/edquist/scratch/git/twiki-backup/data/Education/ASP2016/Education-/AGWSecurityExercises.txt,v $
#
# Automatically generated by gx-gen-mapfile (gx-map 0.5.1)
# at Fri 2006-06-23 15:26:02 UTC on gridlab1.phys.utb.edu.
# DO NOT EDIT THIS FILE.  ANY CHANGES YOU MAKE WILL BE LOST ON THE NEXT UPDATE.
#
"/C=US/O=Globus Alliance/OU=User/CN=101497d3dcd.3dcd5aef" ranantha
"/C=US/O=Globus Alliance/OU=User/CN=10bd8f410f6.5f0086b4" benc
"/C=US/O=Globus Alliance/OU=User/CN=10bf234e01a.ac286cfa" ranantha
"/C=US/O=SDSC/OU=SDSC/CN=Account Train10/UID=train10" train10
"/C=US/O=SDSC/OU=SDSC/CN=Account Train11/UID=train11" train11
"/C=US/O=SDSC/OU=SDSC/CN=Account Train12/UID=train12" train12
"/C=US/O=SDSC/OU=SDSC/CN=Account Train13/UID=train13" train13
"/C=US/O=SDSC/OU=SDSC/CN=Account Train14/UID=train14" train14
"/C=US/O=SDSC/OU=SDSC/CN=Account Train15/UID=train15" train15
"/C=US/O=SDSC/OU=SDSC/CN=Account Train16/UID=train16" train16
"/C=US/O=SDSC/OU=SDSC/CN=Account Train17/UID=train17" train17
"/C=US/O=SDSC/OU=SDSC/CN=Account Train18/UID=train18" train18
"/C=US/O=SDSC/OU=SDSC/CN=Account Train19/UID=train19" train19
...
"/C=US/O=SDSC/OU=SDSC/CN=Account Train58/UID=train58" train58
"/C=US/O=SDSC/OU=SDSC/CN=Account Train59/UID=train59" train59
"/C=US/O=SDSC/OU=SDSC/CN=Account Train60/UID=train60" train60
"/DC=org/DC=doegrids/OU=People/CN=Gaurang Mehta 998137" gmehta
[train31@gridlab1 ~]$ 
</pre>

This gridmap file has been created using a tool called gx-map. It can also be hand written.

Only the listed DNs are allowed to access the GRAM server.

Each entry is a mapping from DN to username. For example, DN <tt>/C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31</tt> is mapped to usename =train31=.

%NOTE% The identity presented by credentials you used in previous step is not in the gridmap file. 


---++ Using gx-gridmap to add GCS certificate DN to gridmap
Typically an administrator is required to add users to the gridmap file and is an out of band activity. The tool =gx-gridmap=, if set up by the admnistator, can be used by anyone who has access to a machine to add an identity to the gridmap file. The actual addition is not instant and it might take a few minutes to reflect on the gridmap file.

<pre class="screen">
[train31 ~]$ <userinput>gx-request -quick-add</userinput>
About to map distinguished name
    "/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53"
to user
    train31
Proceed? [yn] <userinput>y</userinput>
Mapping request submitted.
The grid-mapfile should be updated in a few minutes
[train31 ~]$ 
</pre>

This update may take a few minutes. You can look for the update by searching the gridmap file for your DN.

<pre class="screen">
[train31 ~]$ <userinput>grep "/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53" /etc/grid-security/grid-mapfile </userinput>
[train31 ~]$ <userinput>grep "/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53" /etc/grid-security/grid-mapfile </userinput>
"/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53" train31
[train31 ~]$ 
</pre>

You have to do a similar step in the remote machine (i.e gridlab2 in this example).

First, let us get the DN we want mapped on the remote machine.

<pre class="screen">
[train31 ~]$ <userinput>grid-proxy-info -subject</userinput>
/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53/CN=1488313937
[trian31 ~]$ 
</pre>

The output needs to be pasted in the command you run on remote machine. In a second terminal, ssh to the remote machine.

<pre class="screen">
[train31 ~]$ <userinput>ssh %OTHERHOST%</userinput>
[%OTHERHOST%]$ <userinput>gx-request -interactive</userinput>
The gx-request command lets you submit a request to modify the
Globus grid-mapfile(s) on one or more machines.  Once the request
is submitted, the updates should occur within a few minutes.

A grid-mapfile entry maps a DN (Distinguished Name) to a Unix
user name.  For example, an entry like
    "/O=Big University/OU=Small Department/CN=John Doe" jdoe
allows a user holding a Globus certificate with the specified
DN to run Globus jobs under the Unix account "jdoe".

gx-request can be run interactively or with command-line arguments.

In this interactive mode, you will be asked a series of questions.
Enter your responses followed by &gt;return>.

Single-letter menu responses are case-insensitive; other responses
must be entered exactly.

If there is a default response indicated by the prompt, you can
enter it by just typing &gt;return>.

(a) Add a grid-mapfile entry
(r) Remove a grid-mapfile entry
(u) Request an update of the grid-mapfiles
(x) Exit
(The "set" operation is not currently available in interactive mode.)
What do you want to do? [arux] <userinput>a</userinput>
You can specify the DN in one of the following ways:
(c) Certificate, extract from /home/train31/.globus/usercert.pem
(f) File, extract from a specified certificate file
(i) Input the DN directly
(x) Exit
How do you want to specify the DN? [cfix]<userinput>i</userinput>
Enter distinguished name: <userinput>/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53/CN=1488313937</userinput>
You may provide your e-mail address if you wish.
It will be recorded in the request log, and may be used
to contact you if there is a problem with your certificate.
E-mail address (&gt;return> for none): 

You may provide an optional comment.
If you do, it will be recorded in the request log.
Press return if you don't wish to provide a comment.
Comment: 

About to map distinguished name
    "/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53"
to user
    train31
Proceed? [yn]<userinput>y</userinput>
Mapping request submitted.
The grid-mapfile should be updated in a few minutes
[%OTHERHOST%]$ 
</pre>

The update takes a few minutes.


---+++ Using GCS trusted credentials to transfer file with in local server</h4>
Now that the gridmap file has been updated such that your identity is authorized to submit jobs, lets try the command again.

<pre class="screen">
[train31 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train30/tempFile gsiftp://%OTHERHOST%:2811/tmp/train31Test 
</userinput>
[train31 ~]$ 
</pre>

The client authenticated successfully with the server. So the server knows the identity of the client. A handshake occurred between the client and server to establish a &quot;context&quot;, which is a secret key used to secure the message.

The request and response was then signed using that context, so that it cannot be tampered with.

We can explicitly request for this message to be encrypted, so that no one else can read it. Then the same context is used to encrypt the message.

To ensure the transfer occurred, lets ssh to remote machine and look for file:

<pre class="screen">
[train31 ~]$ <userinput>ssh %OTHERHOST%</userinput>
[%OTHERHOST%]$ <userinput>ls -lt /tmp/train31Test</userinput>
-rw-r--r--  1 train31 train31 43 Jun 23 12:07 /tmp/train31Test
[%OTHERHOST%]$ 
</pre>



---++ Delegating credentials

%INCLUDE{ "DelegatingCredentials" }%



d292 1
---++ Using <nop>MyProxy
%INCLUDE{ "UsingMyProxy" }%

<!--                                                                            
      * Set LOGINHOST = d4
      * Set GRIDHOST = tg-login.ncsa.teragrid.org
      * Set OTHERHOST = d3
--> 
