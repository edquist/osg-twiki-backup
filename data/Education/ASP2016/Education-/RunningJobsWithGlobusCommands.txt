%META:TOPICINFO{author="ForrestChristian" date="1173211353" format="1.1" version="1.4"}%
%META:TOPICPARENT{name="LectureOneTutorial"}%
<link rel="stylesheet" type="text/css" href="%PUBURL%/%WEB%/WorkshopTutorialModules/exercises.css">

---+!! %SPACEOUT{ "%TOPIC%" }%

%TOC%

%STARTINCLUDE%
%EDITTHIS%

Now, if everything is set correctly, you should be able to run "Grid jobs" on the hosts in the lab Grid. And of course, one's first Grid job must always be this:

<pre class="screen">
$ <userinput>globus-job-run %OTHERHOST%/jobmanager-fork /bin/echo Hello World</userinput>
 Hello World
</pre>

You've just submitted a "job" (the Linux command "echo") from %LOGINHOST% (the "submit host") to the GRAM gatekeeper on %OTHERHOST%! Trivial, perhaps, but a building block to more powerful capabilities. 

If this doesn't work, check that the "gatekeeper" - the Grid component that accepts and executes remote jobs - can correctly authenticate you:

<pre class="screen">
$ <userinput>globusrun -a -r %OTHERHOST%/jobmanager-fork</userinput>
GRAM Authentication test successful
</pre>

This is a handy diagnostic test to know for any job.

If you type ==grid-proxy-destroy== and then do the authentication test, you will see a long chain of errors.  Do another ==grid-proxy-init==, exactly as before, and you should be able to correctly authenticate again.

Now, back to "globus-job-run". This utility runs commands on remote sites, but it expects them to be "fully qualified" path names (i.e., they must start with a "/"). Lets say we want to run the Linux command =hostname= on the remote site to verify that we're talking to the resource we think we are.

   1. Run it locally to make sure you are invoking it correctly. 
   1. Use the command =which= to discover the location of the version of =hostname= that you are using. It will return a fully-qualified path name.

<pre class="screen">
$ <userinput>hostname</userinput>
%LOGINHOST%
$ <userinput>which hostname</userinput>
/bin/hostname
</pre>

This tells you that to run =hostname=  via globus-job-run, use =/bin/hostname=.  

Use =which= to discover the location of the following commands on the system:
   * =id=
   * =env=
   * =ps=
   * =uptime=  

Now run =hostname= remotely, on %OTHERHOST%, to verify that you really are reaching a remote system.

Next, see what else can you learn about the remote system with this approach.  
   1. Discover what user ID your job ran under using =id=.  
   1. Discover what environment variables are set using =env=.
   1. Discover the load on the remote Grid server using =uptime=
   1. Discover the default working directory in which your remote job will run using =pwd=. 
      1. Do an =ls= of this working directory.  
      1. Use =df= to discover how much storage space exists in this working directory.
   1. Use =df= to discover how much storage space exists in the remote =/tmp= directory.  
      * Can you create a file on the remote system?  
      * Can you remove it?

%STOPINCLUDE%

<!--                                                                            
      * Set LOGINHOST = gridlab1
      * Set GRIDHOST = tg-login.ncsa.teragrid.org
      * Set OTHERHOST = gridlab2
-->  

%BOTTOMMATTER%
-- Main.ForrestChristian - 29 Jan 2007: edited from original