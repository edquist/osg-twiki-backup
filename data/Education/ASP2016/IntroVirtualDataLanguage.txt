%META:TOPICINFO{author="ForrestChristian" date="1172613383" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="LectureEightTutorial"}%
%LINKCSS%

---+ Introduction to Virtual Data Language 
%STARTINCLUDE%
%EDITTHIS%

In this exercise, you will use the VDL tools to generate a very simple 'Hello World' message. You need some setup files for VDS (vdsrc and wfrc), and then one exercise file.

Set up VDS by copying in a vdsrc and a wfrc from the example provided:
<pre class="screen">
$ <b>cp /opt/vdltut/vdsrc ~/.vdsrc</b>
$ <b>cp /opt/vdltut/wfrc ~/.wfrc</b>
</pre>

Now edit =~/.vdsrc= so that the =dir.storage= and =dir.exec= refer to your user number instead of =USERXX=.

VDS should now be configured. You can try it by running a helloworld workflow, as follows.

Copy the file into a working directory:
<pre class="screen">
$ <b>cd ~ </b>
$ <b>mkdir VDLINTRO</b>
$ <b>cd VDLINTRO</b>
$ <b>cp /opt/vdltut/VDLINTRO/helloworld.vdl . </b>
$ <b>ls</b>
helloworld.vdl
</pre>

=helloworld.vdl= is a <span class="firstterm">VDL (Virtual Data Language)</span> file which defines one <em>transformation</em> (like a function definition), and one <em>derivation</em> (like a function call). 

The transformation defined here takes a message and outputs it to a file.

The derivation defined here calls this transformation, with a specific message (hello world!) and a specific output file.

The first step in running helloworld is to compile the VDL file into an <span class="firstterm">abstract DAG (DAX)</span>. Use the vdlc command for this:
<pre class="screen">
$ <b>vdlc helloworld.vdl </b>
20060531T145705.890: [app] using label "helloworld"
20060531T145705.891: [app] using output file "helloworld.dax"
</pre>

An abstract DAG has been generated and output in XML format into =helloworld.dax=. Open =helloworld.dax= in a file viewer:

<pre class="screen">
$ <b>cat helloworld.dax</b>
</pre>

Inside the DAX, you should see three sections.
   1. <em>list of all referenced files</em> &endash; this shows the input and output files used by this workflow. In this case, there is only one file, the output file =greeting.txt=.
   1. <em>definition of all jobs</em> &endash; each job in the workflow. In this exercise, there is only one. The derivation specified in the VDL file has been converted into a single =<job>= element in the DAX.
   1. <em>list of control-flow dependencies</em> &endash; this section specifies a partial order in which jobs are to executed. As there is only one job in this DAX, there is nothing here. In later exercises, you will see more information here.

Now that you have your abstract DAG, you can run it through the planner to generate a plan for the workflow, using the =vds-plan= command.

<pre class="screen">
$ <b>vds-plan --pegasus -g QuarkCode --option pools=local --option output=local --option force helloworld.dax --base ./dags </b>
[...many lines of output...]
d72 1
2006.06.10 20:14:57.108 PDT: [INFO] Generating submit files for the concrete workflow (completed)
2006.06.10 20:14:57.108 PDT: [INFO] Generating submit files for the cleanup workflow
2006.06.10 20:14:57.114 PDT: [INFO] Generating submit files for the cleanup workflow (completed)
2006.06.10 20:14:57.115 PDT: [INFO] Time taken to execute is 1.05 seconds

I have concretized your abstract workflow. The workflow has been entered
into the workflow database with a state of "planned". The next step is 
to start or execute your workflow. The invocation required is

vds-run  /home/trainXX/VDLINTRO/dags/QuarkCode/helloworld/run0007</span>
vds-run  /home/trainXX/VDLINTRO/dags/QuarkCode/helloworld/run0007
</pre>

The workflow has been planned. You can start it running by typing the command shown in the above output (note that the numbers will probably be different for you).

You can start it running using the =vds-run= command:

<pre class="screen">
$ <b>vds-run  /home/trainXX/VDLINTRO/dags/QuarkCode/helloworld/run0007 </b>
d95 1
Checking all your submit files for log file names.
This might take a while... 
Done.
-----------------------------------------------------------------------
File for submitting this DAG to Condor           : helloworld-0.dag.condor.sub
Log of DAGMan debugging messages                 : helloworld-0.dag.dagman.out
Log of Condor library debug messages             : helloworld-0.dag.lib.out
Log of the life of condor_dagman itself          : helloworld-0.dag.dagman.log

Condor Log file for all jobs of this DAG         : /tmp/helloworld-037504.log
Submitting job(s).
Logging submit event(s).
1 job(s) submitted to cluster 212.
-----------------------------------------------------------------------</span>
-----------------------------------------------------------------------
</pre>


You can monitor which jobs are running using the condor_q command and by watching the jobstate log.

<pre class="screen">
$ <b>cd /home/trainXX/VDLINTRO/dags/QuarkCode/helloworld/run0007 </b>
$ <b>tail -f jobstate.log </b>
[...log information appears over time...]
1150052758 INTERNAL *** DAGMAN_FINISHED ***
1150052762 INTERNAL *** TAILSTATD_FINISHED 0 ***
</pre>

You will know when your job is completed when the TAILSTATD_FINISHED message appears. If something has gone wrong, you might see an error message instead.

When you job has completed, you can examine the results as follows. You will need to substitute your user number in twice, and the run number that you used above. Replace 2 below with your user number and 0005 with the run number.

<pre class="screen">
$ <b>cat /scratch/train02/QuarkCode/train2/helloworld/run0005/greeting.txt</b>
Hello World
</pre>

and now you can see the greeting.

<pre class="screen">
$ <b>cat greeting.txt </b>
Hello World
</pre>

Congratulations! You've run your first VDL workflow.

%STOPINCLUDE%


%BOTTOMMATTER%
-- Main.ForrestChristian - 27 Feb 2007

%META:TOPICMOVED{by="ForrestChristian" date="1172613383" from="Education.VdsVdlintro" to="Education.IntroVirtualDataLanguage"}%
