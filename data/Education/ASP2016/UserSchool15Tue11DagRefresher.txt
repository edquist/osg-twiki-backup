%META:TOPICINFO{author="TimCartwright" date="1437684375" format="1.1" reprev="1.10" version="1.10"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
---+ Tuesday Exercise 1.1: Refresher &ndash; Making a Simple DAG

The goal of this exercise is to map the physical locations of some worker nodes in our local cluster. To do this, you will write a simple, linear DAG that will submit many jobs into the cluster and summarizes the results into a single file.

---++ Where in the World Are My Jobs?

To find the physical location of the computers your jobs our running on, we will use a method called _geolocation_. Geolocation uses a registry to match computer’s network address to an approximate location.

---+++ Geolocation code

Below is a Python script that geolocates the machine that it is running on, returning [[https://en.wikipedia.org/wiki/Geographic_coordinate_system][latitude and longitude coordinates]]. It is not important to understand how the script works.

<pre class="file">
#!/bin/env python

import json
import socket
import time
import urllib2

hostname = socket.getfqdn()
ipaddr = socket.gethostbyname(hostname)

for i in xrange(1, 4):
    try:
        response = urllib2.urlopen('http://www.freegeoip.net/json/' + ipaddr).read()
        json_response = json.loads(response)
        print "%s,%s" % (json_response['latitude'], json_response['longitude'])
        break
    except urllib2.HTTPError:
        time.sleep(3 ** i)
        pass
</pre>

---+++ Geolocating several machines

Now, let’s try to use this Python script and remember some basic HTCondor and DAGMan ideas from yesterday!

   1. Log on to =osg-ss-submit=
   1. Create and changed into a new folder for this exercise, for example =tuesday-1.1=
   1. Save the Python script above as a file named =location.py=
   1. As always (!), make sure that you can run your script from the command line before asking HTCondor to do so
   1. Create a submit file that runs =location.py= ten times and uses the =$(Process)= macro to write different =output=, =error=, and =log= files\
       <p>Try to do this step without looking at materials from yesterday. But if you are stuck, see [[UserSchool15Mon25QueueN][yesterday’s exercise 2.5]].</p>
   1. Create another submit file to concatenate (combine into one file) the results from each =location.py= job:
      * Use the standard Linux command =cat= to combine separate files (located at =/bin/cat=)
      * The arguments to =cat= are the output files from the =location.py= jobs
      * Because =cat= will expect *files* for its own input, where else in the submit file do you have to list the output files from the =location.py= jobs?
   1. Write a simple DAG file with two nodes, where the first node runs the =location.py= jobs and the second (child) node runs the concatenation job
   1. Submit your DAG and wait for the results

---++ Mapping Your Results

To visualize the locations of the machines that your jobs ran on, we will be using http://www.mapcustomizer.com/. Copy and paste the results from your DAG into the bulk creation text box at the bottom of the screen. Are the results what you expected?

%META:TOPICMOVED{by="TimCartwright" date="1437682662" from="Education.UserSchool15Wed11DagRefresher" to="Education.UserSchool15Tue11DagRefresher"}%
