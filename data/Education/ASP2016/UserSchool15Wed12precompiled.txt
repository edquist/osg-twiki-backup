%META:TOPICINFO{author="ChristinaKoch" date="1436980777" format="1.1" reprev="1.4" version="1.4"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.2: Using a pre-compiled binary

In the previous exercise, we were using a piece of software that was available as source code, and 
could be compiled to a static binary.  However, this is not the only software availability scenario when 
it comes to scientific software.  Many well-supported scientific programs provide not only 
the source code for their software, but static binaries that have been pre-compiled on various 
operating systems.  Using a pre-compiled binary can allow you to avoid compiling the code yourself; 
accessing the software and getting it ready to run is as simple as downloading the binary.  

---++ Our software example

The software we will be using for this example is a very common tool for aligning 
genome and protein sequences against a reference database, the BLAST program.  

The BLAST website has some general information about the BLAST executables here: 

http://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE_TYPE=BlastDocs&DOC_TYPE=Download

It also has links to the BLAST downloads page: 

ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/

We could download the source and compile it ourselves, but instead, we're going to opt for 
one of the pre-built binaries.  
Based on our operating system, we want to use the Linux binary, which is
labelled with the =x64-linux= suffix.  

Before downloading, let's create a directory for this job.  While logged into the OSG submit node, =osg-submit.wisc.edu=, 
create a directory named =blast= and =cd= into it: 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>mkdir blast</strong>
%UCL_PROMPT_SHORT% <strong>cd blast</strong>
</pre>

Download the BLAST tarball using =wget= and then untar the file. 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.2.31+-x64-linux.tar.gz</strong>
%UCL_PROMPT_SHORT% <strong>tar xzf ncbi-blast-2.2.31+-x64-linux.tar.gz</strong>
</pre>

We'll be using the =blastx= binary, which should be located in the =bin= directory.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>ls ncbi-blast-2.2.31+/bin/</strong>
blastdb_aliastool  blastn             deltablast       makembindex    rpstblastn  update_blastdb.pl
blastdbcheck       blastp             dustmasker       makeprofiledb  segmasker   windowmasker
blastdbcmd         blastx             legacy_blast.pl  psiblast       tblastn
blast_formatter    convert2blastmask  makeblastdb      rpsblast       tblastx

</pre>

---++ Copy the input files

To run blast, we'll need an input fasta file and reference database.  For 
this example, we'll use the "pdbaa" database, which contains sequences 
for the protein structure from the Protein Data Bank.  We'll use an abbreviated 
fasta file with mouse genome information.  These files are located on the 
OSG submit node at =/home/ckoch5/OSGdata=.  Copy them to your =blast=
directory with the command: 

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>cp -r /home/ckoch5/OSGdata/mouse.fa /home/ckoch5/OSGdata/pdbaa ./</strong>
</pre>

---++ Submitting the job

We now have our program (pre-compiled =blastx= binary) and our input files, so all that 
remains is to create the submit file.  Read through the submit file below to see how we 
incorporate these pieces (binary and input files) into the job submission.  
Then, in your =blast= directory, create a file called 
=blast.submit= that contains the following lines.  

<pre class="file">
universe = vanilla

# The blastx executable is located in the ncbi-blast-2.2.31+/bin/ directory
executable = ncbi-blast-2.2.31+/bin/blastx
# A simple blastx command on the command line looks like this: 
# $> blastx –db database –query fasta_file –out results.txt
# For us, the database is "pdbaa" and the fasta file will be "mouse.fa".  
arguments = "–db pdbaa –query mouse.fa –out results.txt"

log = blast.log
error = blast.err
output = blast.out
should_transfer_files = YES
when_to_transfer_output = ON_EXIT

# The job will need our FASTA input file and protein database
transfer_input_files = pdbaa/, mouse.fa

# Because we are using a binary that was compiled for use
# on Linux, we need to make sure we request computers with 
# Linux as the operating system.  
requirements = (OpSys == "LINUX")

request_cpus = 1
request_memory = 4GB
request_disk = 2GB

queue
</pre>

Submit the blast job using =condor_submit=.   

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit blast.submit</strong>
</pre>

The job should run in just a few minutes and produce a =results.txt= file.  
