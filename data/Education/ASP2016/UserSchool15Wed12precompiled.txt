%META:TOPICINFO{author="ChristinaKoch" date="1436911914" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.2: Using a pre-compiled binary

In the previous exercise, we had to compile the software ourselves in order to prepare it 
to run in a job.  For this exercise, we will again be using a single compiled executable to 
run a job, but this time, it has been pre-compiled for us.  In this case, accessing a piece of 
software and getting it ready to run is 
as simple as finding the pre-compiled binary online and downloading it.  
Many well-supported scientific 
softwares offer binaries that have been pre-compiled on various operating systems.  

The software we will be using for this example is a very common tool for aligning 
genome and protein sequences against a reference database, the BLAST program.  

---++ Download the software

The BLAST website has some general information about the BLAST executables here: 

http://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE_TYPE=BlastDocs&DOC_TYPE=Download

It also has links to the BLAST downloads page: 

ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/

Based on our operating system, we want to use the pre-built linux binary, which is
labelled with the =x64-linux= suffix.  While logged into the OSG submit node, =osg-submit.wisc.edu=, 
create a directory named =blast= and =cd= into it: 

<pre class="screen">
%UCL_PROMPT_SHORT% mkdir blast
%UCL_PROMPT_SHORT% cd blast
</pre>

Then download the BLAST tarball using =wget= and untar the file. 

<pre class="screen">
%UCL_PROMPT_SHORT% wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.2.31+-x64-linux.tar.gz
%UCL_PROMPT_SHORT% tar xzf ncbi-blast-2.2.31+-x64-linux.tar.gz
</pre>

We'll be using the =blastx= binary, located in the =bin= directory.  

---++ Copy the input files

To run blast, we'll need an input fasta file and reference database.  For 
this example, we'll use the "pdbaa" database, which contains sequences 
for the protein structure from the Protein Data Bank.  We'll use an abbreviated 
FASTA file with mouse genome information.  These files are located on the 
OSG submit node at =/home/ckoch5/OSGdata=, simply copy them to your current location: 

<pre class="screen">
%UCL_PROMPT_SHORT% cp -r /home/ckoch5/OSGdata/mouse.fa /home/ckoch5/OSGdata/pdbaa ./
</pre>

---++ Submitting the job

Create a file called =blast.submit= with the following lines: 

<pre class="file">
universe = vanilla
log = blast_$(Cluster)_$(Process).log
error = blast_ $(Cluster)_$(Process).err
output = blast_$(Cluster)_$(Process).out

# The blastx executable is located in the ncbi-blast-2.2.31+/bin/ directory
executable = ncbi-blast-2.2.31+/bin/blastx

# A simple blastx command on the command line looks like this: 
# $> blastx –db database –query fasta_file –out results.txt
# For us, the database is "pdbaa" and the fasta file will be "mouse.fa".  
arguments = "–db pdbaa –query mouse.fa –out results.txt"

should_transfer_files = YES
when_to_transfer_output = ON_EXIT

# The job will need our FASTA input file and protein database
transfer_input_files = pdbaa/, mouse.fa

# Because we are using a binary that was compiled for use
# on Linux, we need to make sure we request computers with 
# Linux as the operating system.  
requirements = (OpSys == "LINUX")

request_cpus = 1
request_memory = 4GB
request_disk = 2GB

queue
</pre>

Submit the blast job using =condor_submit=.   

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit blast.submit</strong>
</pre>

The job should run in just a few minutes and produce a =results.txt= file.  
