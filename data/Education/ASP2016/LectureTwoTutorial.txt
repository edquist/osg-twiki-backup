%META:TOPICINFO{author="ForrestChristian" date="1170103341" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="WorkshopTutorialModules"}%
<link rel="stylesheet" type="text/css" href="%PUBURL%/%WEB%/WorkshopTutorialModules/exercises.css">

---+ !!Grid Summer School Lab Exercise 2: Security

%TOC{depth="3"}%

---++ Introduction

This exercise will provide hands-on experience in using various tools to setup and use GSI for working on the grid. The first few sections delve into certificates and proxies and demonstarate how pre-configured credentials can be used to run some grid enable programs. The later sections discuss steps involved in obtaining a new certificate and using them on the grid. We also explore delegation of rights and using of a credentials repository <nop>MyProxy.

The exercise uses tools like _globusrun-ws_ and _globus-url-copy_ to execute jobs on the grid and move files across machines respectively. This exercise does not deal in detail with those tools, but focuses more on the security aspects. These tools and realted technology will be discussed in lectures and exercises later this week.

---++ Notes information

These notes have been written to lead you through the exercises on your own and provide commands to type, expected output and notes highlighting the key aspects of a particular step. Feel free to ask the TAs for help if you have any problems or have any questions.

These notes have transcripts from runs on machine *gridlab1*. Replace that with your machine name wherever appropriate.

The exercise notes was prepared by running as user *train31*. Replace that with your username in all command line parameters.

You will see two styles of machine text here:

<pre class="screen">
<userinput>Text like this is input that you should type.</userinput>
Text like this is the output you should get.
</pre>

For example:

<pre class="screen">
$ <userinput>date</userinput>
Wed May 31 11:54:58 BST 2006
</pre>



---++ Basic steps

---+++ Logging on to remote machine

From local laptop ssh into remote Linux server as described in the previous exercise.

<pre class="screen">
@:~> <userinput>ssh train31@gridlab1.phys.utb.edu</userinput>
Enter passphrase for key '/homes/train31/.ssh/id_rsa':
Last login: Tue Jun 20 12:04:39 2006 from 140.221.9.72
[train31@gridlab1 ~]$ 
</pre>


---+++ Checking GLOBUS_LOCATION setup
The machine is set up with Globus Toolkit install and an environment variable =GLOBUS_LOCATION= pointing to the install should be set up.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>echo $GLOBUS_LOCATION</userinput>
/opt/globus
[train31@gridlab1 ~]$ 
</pre>

The command line clients that are installed as part of Globus Toolkit have already been added to your PATH.

---++ Certificates

---+++ Default Credential Location

By default the user certificate and user key are installed in =~/.globus=. Unless overriden explicitly on command line, the clients use these credentials.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>ls -lt ~/.globus/</userinput>
total 12
-rw-------  1 train31 train31 1743 Jun 22 16:45 userkey.pem
-rw-------  1 train31 train31 5011 Jun 22 16:37 usercert.pem
[train31@gridlab1 ~]$ 
</pre>

---++++ Notes

The userkey.pem is the file containing encrypted private key. The permissions on that file are restrictive, such that only the owner can read or write to that file.

The usercert.pem is the certificate, containting the public key. This file is not encrypted and can be distributed freely.

---+++ Certificate Contents
This shows the an example of a certificate's contents. You can show the contents of your certificate using the =<userinput>grid-cert-info</userinput>= command. %STARTMore%

<pre class="programlisting">
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 923 (0x39b)
        Signature Algorithm: md5WithRSAEncryption
        Issuer: C=US, O=SDSC, OU=SDSC-CA, CN=Certificate Authority/UID=certman
        Validity
            Not Before: Jun 22 00:46:02 2006 GMT
            Not After : Jul  2 00:46:02 2006 GMT
        Subject: C=US, O=SDSC, OU=SDSC, CN=Account Train31/UID=train31
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (2048 bit)
                Modulus (2048 bit):
                    00:af:93:40:80:ce:14:68:d6:6c:67:89:45:0c:3e:
                    30:98:38:35:c9:bd:b5:08:00:17:4c:e1:fb:38:50:
                    bd:97:f5:41:92:e7:6e:c4:6f:dc:ad:52:2c:e0:2a:
                    54:83:79:45:fb:5d:e2:f5:a5:cf:42:94:45:98:22:
                    d9:5b:81:93:e2:46:5f:e0:7f:71:5f:2d:b0:4a:82:
                    21:7d:f2:41:f7:b6:33:eb:59:93:f1:71:e3:79:ea:
                    c0:1b:5e:07:c6:d5:c2:67:41:56:73:d8:1f:a3:fb:
                    32:4b:f5:96:9f:65:f5:0a:f0:28:d5:90:d6:b0:dc:
                    4b:29:85:aa:8b:b7:d5:c0:f3:45:28:f9:af:80:7a:
                    88:40:40:21:60:ea:14:cd:8a:8e:53:40:67:c5:47:
                    51:bc:95:76:1e:90:b0:ee:ee:41:5a:ec:d4:4c:3c:
                    ea:eb:2f:f1:55:82:d8:b2:36:d9:92:88:bd:b6:93:
                    eb:46:69:3b:3a:e2:15:54:82:c0:30:4b:a9:54:3c:
                    af:52:4e:a5:71:40:a1:58:21:2e:ab:6d:c4:7c:59:
                    5d:68:b6:95:80:0e:12:91:51:90:0e:38:84:3f:de:
                    07:99:43:86:a1:0f:70:01:2f:3c:bf:e3:47:b2:16:
                    67:eb:00:6b:c4:7d:d8:e5:39:77:ac:29:cc:76:94:
                    2b:d3
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            Netscape Cert Type: 
                SSL Client, S/MIME, Object Signing
            Netscape Comment: 
                OpenSSL Generated Certificate
            Netscape CA Revocation Url: 
                http://www.sdsc.edu/CA/SDSC_CRL.pem
            X509v3 Subject Key Identifier: 
                E1:E3:C9:6E:A6:CF:2C:FC:D3:B7:51:F6:03:66:98:C5:18:71:60:F8
            X509v3 Authority Key Identifier: 
                keyid:BF:A3:87:2C:F6:0D:74:BD:48:6C:0E:27:BF:01:E4:F2:4F:46:BA:27
                DirName:/C=US/O=SDSC/OU=SDSC-CA/CN=Certificate Authority/UID=certman
                serial:00

    Signature Algorithm: md5WithRSAEncryption
        93:b2:78:07:d9:72:e2:71:d7:66:83:0c:d3:97:0c:9e:24:33:
        4e:e3:48:28:9c:44:7e:31:13:70:cc:f8:4a:5d:bc:64:84:3e:
        aa:fa:da:86:3f:5e:f8:4a:72:a1:59:57:5a:89:49:5a:2d:c9:
        09:5c:a5:69:6e:65:f7:85:8b:07:57:f1:6a:cb:6e:e5:00:17:
        5d:02:0a:b5:52:6f:92:93:5b:94:c3:84:59:66:f4:29:f1:6a:
        a2:ff:eb:5d:6a:89:43:1a:82:cf:d7:66:d3:f6:f6:b6:ba:45:
        02:ec:60:86:88:00:4d:09:53:fc:7e:a7:cd:71:d8:ff:72:4f:
        36:1f:15:b1:af:ca:d3:8c:ac:4c:1b:99:5a:de:98:7a:81:22:
        c3:c3:3f:65:04:06:b7:5b:de:1a:65:f1:69:74:51:67:bc:0d:
        d2:00:cd:f0:c1:b2:c1:12:ba:6a:30:01:4c:98:fe:7a:bb:a8:
        d8:1e:61:39:9f:c4:c3:f4:f5:ba:be:43:13:75:84:fe:82:93:
        a9:00:3e:35:75:60:f7:8c:68:58:74:ed:27:c6:99:49:a8:e4:
        c0:27:32:1f:5c:b0:06:ed:63:d7:f7:79:89:11:d2:4e:5d:31:
        33:6e:d4:fd:90:51:4b:65:29:c6:6c:68:55:e6:2d:41:6a:c1:
        58:2b:f4:d3
</pre>

%ENDMore%

---++++ Notes

Since no parameters were specified on command line, the default credentials were used. Try the same command with =-help= to look at other options. We will use some later in the exercise.

The _Issuer DN_ is the distinguished name (DN) of the Certificate Authority who issues the certificate.

Note that the certificate has validity that determines valid from and valid until.

_Subject:_ is the distinguished name that this certificate is bound to.

_Key information_ is the public key.

The CA generates a digest of the key and other binding information (validity, DN and so on) and signs it. The signature is included at the end of the cerificate.

The algorithm used to generate digest and sign is important information, since the same algorithms should be applied at verification.

---+++ Using certificates to transfer file </h4>

The client _globus-url-copy_ can be used to transfer files on the grid. It uses the GridFTP server to transfer the files. This requires that the client who is requesting transfer have valid credentials and be authorized to the transfer. We will go into authorization step later, for now you are already authorized, so lets try the  client.

<ol>
  <li>Run =<userinput>grid-proxy-destroy</userinput>=. Ignore any errors.</li>
  <li>Run the following commands to set the environment variables. This will ensure that the certificate and key are used, since by default _globus-url-copy_ uses proxy certificates.
      * =<userinput>export X509_USER_CERT=.globus/usercert.pem</userinput>=
      * =<userinput>export X509_USER_KEY=.globus/userkey.pem</userinput>=
   </li>
   <li>Create a temporary file to move using _globus-url-copy_. You can use some text editor (e.g., vi) to create it and add some contents. For example:
<pre class="screen">
[train31@gridlab1 ~]$ <userinput>more tempFile</userinput>
Temporary file for testing globus-url-copy
[train31@gridlab1 ~]$ 
</pre></li>
   <li> Use _globus-url-copy_ to move the file. 
<pre class="screen">
[train31@gridlab1 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://localhost:2811/home/train31/destFile</userinput>

error: globus_xio: Unable to connect to loclahost:2811
globus_xio: globus_libc_getaddrinfo failed.
globus_common: Name or service not known
[train31@gridlab1 ~]$ globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://localhost:2811/home/train31/destFile

error: globus_ftp_control: gss_init_sec_context failed
globus_gsi_gssapi: Error with gss credential handle
globus_credential: Valid credentials could not be found in any of the possible locations specified by the credential search order.
Valid credentials could not be found in any of the possible locations specified by the credential search order.

Attempt 1

globus_credential: Error reading host credential
globus_sysconfig: Error with certificate filename
globus_sysconfig: Error with certificate filename
globus_sysconfig: File is not owned by current user: /etc/grid-security/hostcert.pem is not owned by current user

Attempt 2

globus_credential: Error reading proxy credential
globus_sysconfig: Could not find a valid proxy certificate file location
globus_sysconfig: Error with key filename
globus_sysconfig: File does not exist: /tmp/x509up_u502 is not a valid file

Attempt 3

globus_credential: Error reading user credential
globus_credential: Key is password protected: GSI does not currently support password protected private keys.
OpenSSL Error: pem_lib.c:401: in library: PEM routines, function PEM_do_header: bad password read

[train31@gridlab1 ~]$
</pre>

The client first attempts to authenticate with the server, to prove its identity. To do that it needs valid credentials. The command attempts to use host credentials. Second, it attempts to use a proxy, which does not exist. Last, it attempts to use your user credentials. The command failed since the private key is encrypted.

A real, live person will be required each time to enter the passphrase. To alleviate the problems associated with this, that is to sign on once and run numerous time, we use proxies.

</li>
   <li> Unset variables to use default locations
<pre class="screen">
[train31@gridlab1 ~]$ <userinput>unset X509_USER_CERT</userinput>
[train31@gridlab1 ~]$ <userinput>unset X509_USER_KEY</userinput>
[train31@gridlab1 ~]$ 
</pre></li>
</ol>

---++ Proxy certificates

---+++ Creating proxy certificates

The command _grid-proxy-init_ is used to create proxies.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>grid-proxy-init</userinput>
our identity: /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31
Enter GRID pass phrase for this identity:
phrase is too short, needs to be at least 4 chars
Enter GRID pass phrase for this identity:
Creating proxy .......................................... Done
Your proxy is valid until: Fri Jun 23 22:00:10 2006
[train31@gridlab1 ~]$
</pre>


The proxy is created using the user certificate and the key.

The passphrase entered is used to decrypt the private key file.

---+++ Contents of the proxy
Use =<span class="command">grid-proxy-info</span>= to list the contents of your proxy. To do that, you will first need to know where your proxy is stored. We can use =grid-proxy-info= to do that, too.

Run =<userinput>grid-proxy-info -all</userinput>= to display information about grid proxies in use on your system:


<pre class="screen">
[train31@gridlab1 ~]$ <userinput>grid-proxy-info -all</userinput>
subject  : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31/CN=203360020
issuer   : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31
identity : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31
type     : Proxy draft (pre-RFC) compliant impersonation proxy
strength : 512 bits
path     : /tmp/x509up_u539
timeleft : 11:58:58
</pre>


| *Variable* | *Description* |
| =subject= | The distingushed name (DN) from the certificate, appended with a uniqe string of numbers. |
| =issuer= | The user certificate itself. | 
| =path= | Where the your proxy is stored. |
| =timeleft= | How much longer the proxy will be valid. |

As you can see, the issuer of the grid certificate is the user certificate. This shows the chain of trust:  _CA &rarr; user certificate &rarr; proxy certificate_.

The proxy certificate contains the private key generated for proxy, correspnding public key and is signed like a certificate by the user certificate. 

Now list the contents of the proxy, using the path displayed from running =<userinput>grid-proxy-info -all</userinput>= by running =grid-cert-info=, specifying the full path to your proxy:

<pre>   grid-cert-info -file </em>[/path/to/proxy/proxyFileName]</em> </pre>

For example, in our case our proxy path is =/tmp/x509up_u539=, so:

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>grid-cert-info -file /tmp/x509up_u539</userinput>
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 203360020 (0xc1f0714)
        Signature Algorithm: md5WithRSAEncryption
        Issuer: C=US, O=SDSC, OU=SDSC, CN=Account Train31/UID=train31
        Validity
            Not Before: Jun 23 14:55:10 2006 GMT
            Not After : Jun 24 03:00:10 2006 GMT
        Subject: C=US, O=SDSC, OU=SDSC, CN=Account Train31/UID=train31, CN=203360020
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (512 bit)
                Modulus (512 bit):
                    00:b8:75:e3:a4:3c:31:9e:b9:71:e8:b0:4e:fc:18:
                    69:e6:79:15:90:f4:0f:49:20:f0:e3:62:9f:e2:92:
                    d0:96:4c:9b:b5:97:12:b3:bd:87:c7:8c:2f:bb:b0:
                    fe:79:8c:3d:61:5e:49:f6:c1:46:e1:1e:08:d1:d7:
                    89:a0:e3:8a:f3
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            1.3.6.1.4.1.3536.1.222: critical
                0.0
..+.......
    Signature Algorithm: md5WithRSAEncryption
        45:05:52:c7:9f:a7:35:32:d9:a8:be:58:92:a7:b0:61:e4:7a:
        2a:a2:36:0f:eb:65:0e:0f:ca:40:3d:0e:27:8b:38:14:a6:af:
        51:7d:28:2f:ac:3e:3e:05:7b:ea:d6:0e:fc:78:7d:eb:60:80:
        6a:74:43:64:ef:ca:e8:25:fe:d3:07:a9:4d:e0:54:4a:75:9f:
        c9:8e:9a:1e:82:19:a4:fc:72:a3:6f:0d:de:33:57:d8:f8:cd:
        da:d2:bc:8a:ee:48:34:4b:00:3e:7e:b7:5e:66:fa:2e:5c:22:
        4a:50:98:02:32:c6:e3:a9:07:b7:bb:e6:4d:02:e8:6c:d4:48:
        5e:55:ec:ed:a9:38:ee:b8:33:60:88:c1:ab:38:ce:d8:53:a3:
        ac:c3:a2:c1:d8:1e:95:5b:e5:3a:3f:d1:e0:51:c2:5e:82:e0:
        a4:48:d3:e6:82:66:56:d9:6b:e0:a5:1e:85:4d:3d:d7:e0:4e:
        03:ce:f7:5a:63:cd:5c:9a:38:96:59:0f:92:11:6b:eb:ed:34:
        1a:55:73:e1:c0:b0:91:ea:b4:1e:3b:8d:0f:2d:53:83:10:98:
        44:19:ac:39:6d:1a:6b:37:90:60:6a:35:9b:c6:41:2e:5a:ef:
        ae:54:6c:9e:51:b8:68:c2:97:83:2f:72:25:df:90:b9:bc:31:
        92:23:45:77
[train31@gridlab1 ~]$ 
</pre>


The contents are similar to the certificate, but the issuer is the DN of the user certificate.

=grid-cert-info= is useful to see how long your proxy certificate will last (the *Not Before* and *Not After* lines under *Validity*). 


---+++ Using Proxy Certificate to transfer file<


<pre class="screen">
[train31@gridlab1 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://localhost:2811/home/train31/destFile</userinput>
[train31@gridlab1 ~]$ <userinput>ls -lt destFile</userinput>
rw-r--r--  1 train31 train31 43 Jun 23 10:04 destFile
[train31@gridlab1 ~]$ <userinput>more destFile</userinput>
Temporary file for testing globus-url-copy
[train31@gridlab1 ~]$ 
</pre>

_globus-url-copy_ picks up the proxy from the default location and uses that to authenticate with the GridFTP server. Authentication establishes your identity. Note that the identity in proxy certificate is still your certificate's identity. 

Upon successful authentication, the server knows the client is who it claims to be. It then checks to see if the identity to authorized to transfer files and uses Grid Map Authorization to determine this. We have already set up the gridmap to allow your identity. We will learn more about this later in the exercise.

---+++ Proxy lifetime implications
By default, a proxy valid for 12 hours is created, but the validity of proxy can be specified on command line.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>date</userinput>
Fri Jun 23 10:06:01 CDT 2006
[train31@gridlab1 ~]$
</pre>

<pre class="screen">
[train31@gridlab1 ~]$ <userinput> grid-proxy-init -valid 0:1</userinput>
Your identity: /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31
Enter GRID pass phrase for this identity:
Creating proxy ........................................ Done
Your proxy is valid until: Fri Jun 23 10:07:10 2006
[train31@gridlab1 ~]$ 
</pre>

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>grid-proxy-info</userinput>
subject  : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31/CN=24915772
issuer   : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31
identity : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31
type     : Proxy draft (pre-RFC) compliant impersonation proxy
strength : 512 bits
path     : /tmp/x509up_u539
timeleft : 0:00:52
[train31@gridlab1 ~]$ 
</pre>

The proxy requested was for 1 minute and _grid-proxy-info_ shows the valid time left.

%NOTE% The proxy lifetime cannot be greater than the certificate that issues it.

---+++ Attempting to use expired proxy
Wait for a minute after the previous _grid-proxy-init_ run before you try this step. The proxy file will exist, but would have expired.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>date</userinput>
Fri Jun 23 10:07:35 CDT 2006
[train31@gridlab1 ~]$ 
</pre>

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>grid-proxy-info</userinput>
subject  : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31/CN=24915772
issuer   : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31
identity : /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31
type     : Proxy draft (pre-RFC) compliant impersonation proxy
strength : 512 bits
path     : /tmp/x509up_u539
timeleft : 0:00:00
[train31@gridlab1 ~]$ 
</pre>

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://localhost:2811/home/train31/expiredTest</userinput>
error: globus_ftp_control: gss_init_sec_context failed
globus_gsi_gssapi: Error with GSI credential
globus_gsi_gssapi: Error with gss credential handle
globus_credential: Error with credential: The proxy credential: /tmp/x509up_u539
      with subject: /C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31/CN=24915772
      expired 1 minutes ago.
[train31@gridlab1 ~]$ 
</pre>

<pre class="screen">
[train31@gridlab1 ~]$ <userinput> ls -lt expiredTest</userinput>
ls: expiredTest: No such file or directory
[train31@gridlab1 ~]$ 
</pre>

The error indicates that the proxy file has expired. So the client was not able to successfully authenticate with server and the file was not transfered.

a78 1
---++ Obtaining a new certificate

%INCLUDE{ "ObtainingANewCertificate" }%



---++ Using GCS credentials

---+++ Setting up clients to use GCS proxy
To use the proxy genrated from your new credentials from GCS, set the environment variable =X509_USER_PROXY= to point to your proxy file.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>export X509_USER_PROXY=gcsProxy</userinput>
[train31@gridlab1 ~]$ 
</pre>


---+++ Using GCS credentials to transfer file to remote server

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://tg-login.ncsa.teragrid.org:2811/tmp/train31TestFile</userinput>
error: globus_ftp_client: the server responded with an error
535 535-FTPD GSSAPI error: GSS Major Status: Authentication Failed
535-FTPD GSSAPI error: GSS Minor Status Error Chain:
535-FTPD GSSAPI error: 
535-FTPD GSSAPI error: accept_sec_context.c:170: gss_accept_sec_context: SSLv3 handshake problems
535-FTPD GSSAPI error: globus_i_gsi_gss_utils.c:881: globus_i_gsi_gss_handshake: Unable to verify remote side's credentials
535-FTPD GSSAPI error: globus_i_gsi_gss_utils.c:854: globus_i_gsi_gss_handshake: SSLv3 handshake problems: Couldn't do ssl handshake
535-FTPD GSSAPI error: OpenSSL Error: s3_srvr.c:1816: in library: SSL routines, function SSL3_GET_CLIENT_CERTIFICATE: no certificate returned
535-FTPD GSSAPI error: globus_gsi_callback.c:351: globus_i_gsi_callback_handshake_callback: Could not verify credential
535-FTPD GSSAPI error: globus_gsi_callback.c:443: globus_i_gsi_callback_cred_verify: Could not verify credential: self signed certificate in certificate chain
535 FTPD GSSAPI error: accepting context
[train31@gridlab1 ~]$ 
</pre>

The above error indicates that the authentication failed because the CA who signed the certificate from which the proxy was created is not trusted on that machine. 

Note that the lifetime of proxy and certificates is valid. But since the chain of trust starts from the CA and the CA is not trusted, authentication fails.

Just to make sure your command is accurate, unset the =X509_USER_PROXY= variable: 


<pre class="screen">[train31@gridlab1 ~]$ <userinput>unset X509_USER_PROXY</userinput></pre>

Submit using your SDSC issued certificate. 

<pre class="screen">[train31@gridlab1 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://tg-login.ncsa.teragrid.org:2811/tmp/train31TestFile</userinput></pre>

You'll see that you are able to transfer, because that CA is trusted on that server.

---+++ Using GCS credentials to transfer file  with in local cluster
Now lets try running the same command using the GCS Proxy to transfer file with in local cluster. This cluster has been set up to trust GCS CA. In this example gridlab1 is local machine and gridlab2 is remote machine. Please use appropriate machines in your run.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>export X509_USER_PROXY=gcsProxy</userinput>
[train31@gridlab1 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train31/tempFile gsiftp://gridlab2.phys.utb.edu:2811/tmp/train31Test</userinput>
error: globus_ftp_client: the server responded with an error
530 530-Login incorrect. :
 globus_gss_assist: Gridmap lookup failure: 
Could not map /C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53
530-
530 End.
[train31@gridlab1 ~]$ 
</pre>

The transfer fails here with authorization exceptions. 

The client authenticated with the server and the server established your identity as the DN specified in the error message. In this case:

<verbatim>/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53</verbatim>

But the identity established in authentication is not authorized to use the service. The service uses GridMap authorization, where a mapping of of authorized identities (DNs) is mapped to local user names.

---++ Contents of GridMap file
The local GridFTP service and the one on remote machine is configured to use a gridmap file located in =etc/grid-security/gridmap-file=. This file is write protected so only administrators can change it to give access. But the file can be read by anyone.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>more /etc/grid-security/grid-mapfile </userinput>
# $Id: LectureTwoTutorial.txt,v 1.1 2007/01/29 20:42:21 ForrestChristian Exp $
# $Source: /u/e/d/edquist/scratch/git/twiki-backup/data/Education/ASP2016/LectureTwoTutorial.txt,v $
#
# Automatically generated by gx-gen-mapfile (gx-map 0.5.1)
# at Fri 2006-06-23 15:26:02 UTC on gridlab1.phys.utb.edu.
# DO NOT EDIT THIS FILE.  ANY CHANGES YOU MAKE WILL BE LOST ON THE NEXT UPDATE.
#
"/C=US/O=Globus Alliance/OU=User/CN=101497d3dcd.3dcd5aef" ranantha
"/C=US/O=Globus Alliance/OU=User/CN=10bd8f410f6.5f0086b4" benc
"/C=US/O=Globus Alliance/OU=User/CN=10bf234e01a.ac286cfa" ranantha
"/C=US/O=SDSC/OU=SDSC/CN=Account Train10/UID=train10" train10
"/C=US/O=SDSC/OU=SDSC/CN=Account Train11/UID=train11" train11
"/C=US/O=SDSC/OU=SDSC/CN=Account Train12/UID=train12" train12
"/C=US/O=SDSC/OU=SDSC/CN=Account Train13/UID=train13" train13
"/C=US/O=SDSC/OU=SDSC/CN=Account Train14/UID=train14" train14
"/C=US/O=SDSC/OU=SDSC/CN=Account Train15/UID=train15" train15
"/C=US/O=SDSC/OU=SDSC/CN=Account Train16/UID=train16" train16
"/C=US/O=SDSC/OU=SDSC/CN=Account Train17/UID=train17" train17
"/C=US/O=SDSC/OU=SDSC/CN=Account Train18/UID=train18" train18
"/C=US/O=SDSC/OU=SDSC/CN=Account Train19/UID=train19" train19
...
"/C=US/O=SDSC/OU=SDSC/CN=Account Train58/UID=train58" train58
"/C=US/O=SDSC/OU=SDSC/CN=Account Train59/UID=train59" train59
"/C=US/O=SDSC/OU=SDSC/CN=Account Train60/UID=train60" train60
"/DC=org/DC=doegrids/OU=People/CN=Gaurang Mehta 998137" gmehta
[train31@gridlab1 ~]$ 
</pre>

This gridmap file has been created using a tool (it can also be hand written).

Only the listed DNs are allowed to access the GRAM server.

Each entry is a mapping from DN to username. For example, DN <tt>/C=US/O=SDSC/OU=SDSC/CN=Account Train31/UID=train31</tt> is mapped to usename =train31=.

%NOTE% The identity presented by credenitals you used in previous step is not in the gridmap file. 


---++ Using gx-gridmap to add GCS certificate DN to gridmap
Typically an administrator is required to add users to the gridmap file and is an out of band activity. The tool =gx-gridmap=, if set up by the admnistator, can be used by anyone who has access to a machine to add an identity to the gridmap file. The actual addition is not instant and it might take a few minutes to reflect on the gridmap file.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>gx-request -quick-add</userinput>
About to map distinguished name
    "/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53"
to user
    train31
Proceed? [yn] <userinput>y</userinput>
Mapping request submitted.
The grid-mapfile should be updated in a few minutes
[train31@gridlab1 ~]$ 
</pre>

This update may take a few minutes. You can look for the update by searching the gridmap file for your DN.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>grep "/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53" /etc/grid-security/grid-mapfile </userinput>
[train31@gridlab1 ~]$ <userinput>grep "/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53" /etc/grid-security/grid-mapfile </userinput>
"/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53" train31
[train31@gridlab1 ~]$ 
</pre>

You have to do a similar step in the remote machine (i.e gridlab2 in this example).

First, let us get the DN we want mapped on the remote machine.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>grid-proxy-info -subject</userinput>
/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53/CN=1488313937
[trian31@gridlab2 ~]$ 
</pre>

The output needs to be pasted in the command you run on remote machine. In a second terminal, ssh to the remote machine.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>ssh gridlab2</userinput>
[trian31@gridlab2 ~]$ <userinput>gx-request -interactive</userinput>
The gx-request command lets you submit a request to modify the
Globus grid-mapfile(s) on one or more machines.  Once the request
is submitted, the updates should occur within a few minutes.

A grid-mapfile entry maps a DN (Distinguished Name) to a Unix
user name.  For example, an entry like
    "/O=Big University/OU=Small Department/CN=John Doe" jdoe
allows a user holding a Globus certificate with the specified
DN to run Globus jobs under the Unix account "jdoe".

gx-request can be run interactively or with command-line arguments.

In this interactive mode, you will be asked a series of questions.
Enter your responses followed by &gt;return>.

Single-letter menu responses are case-insensitive; other responses
must be entered exactly.

If there is a default response indicated by the prompt, you can
enter it by just typing &gt;return>.

(a) Add a grid-mapfile entry
(r) Remove a grid-mapfile entry
(u) Request an update of the grid-mapfiles
(x) Exit
(The "set" operation is not currently available in interactive mode.)
What do you want to do? [arux] <userinput>a</userinput>
You can specify the DN in one of the following ways:
(c) Certificate, extract from /home/train31/.globus/usercert.pem
(f) File, extract from a specified certificate file
(i) Input the DN directly
(x) Exit
How do you want to specify the DN? [cfix]<userinput>i</userinput>
Enter distinguished name: <userinput>/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53/CN=1488313937</userinput>
You may provide your e-mail address if you wish.
It will be recorded in the request log, and may be used
to contact you if there is a problem with your certificate.
E-mail address (&gt;return> for none): 

You may provide an optional comment.
If you do, it will be recorded in the request log.
Press return if you don't wish to provide a comment.
Comment: 

About to map distinguished name
    "/C=US/O=Globus Alliance/OU=User/CN=10c00791bfb.54294d53"
to user
    train31
Proceed? [yn]<userinput>y</userinput>
Mapping request submitted.
The grid-mapfile should be updated in a few minutes
[train31@gridlab2 ~]$ 
</pre>

The update takes a few minutes.


---+++ Using GCS trusted credentials to transfer file with in local server</h4>
Now that the gridmap file has been updated such that your identity is authorized to submit jobs, lets try the command again.

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>globus-url-copy gsiftp://localhost:2811/home/train30/tempFile gsiftp://gridlab2.phys.utb.edu:2811/tmp/train31Test 
</userinput>
[train31@gridlab1 ~]$ 
</pre>

The client authenticated succesfully with the server. So the server knows the identity of the client. A handshake occured between the client and server to establish a &quot;context&quot;, which is a secret key used to secure the message.

The request and response was then signed using that context, so that it cannot be tampered with.

We can explicitly request for this message to be encrypted, so that no one else can read it. Then the same context is used to encrypt the message.

To ensure the transfer occured, lets ssh to remote machine and look for file:

<pre class="screen">
[train31@gridlab1 ~]$ <userinput>ssh gridlab2</userinput>
[train31@gridlab2 ~]$ <userinput>ls -lt /tmp/train31Test</userinput>
-rw-r--r--  1 train31 train31 43 Jun 23 12:07 /tmp/train31Test
[train31@gridlab2 ~]$ 
</pre>



---++ Delegating credentials

%INCLUDE{ "DelegatingCredentials" }%




---++ Using <nop>MyProxy
%INCLUDE{ "UsingMyProxy" }%