%META:TOPICINFO{author="LincolnBryant" date="1404747497" format="1.1" reprev="1.1" version="1.1"}%
---+ Determining Storage Requirements

---++ About this exercise
This exercise's goal is to learn to think critically about an application's data needs.  In this exercise we will attempt to understand the input and output of the bioinformatics application [[http://blast.ncbi.nlm.nih.gov/][BLAST]].

---++ Customize this Document

<!-- OSG Summer School 2011 Defaults
   * Local VO= %URLPARAM{"INPUT_VO" encode="quote" default="osgedu"}%
   * Local UCL_HOST = %URLPARAM{"INPUT_HOST" encode="quote" default="osg-ss-submit"}%
   * Local UCL_USER = %URLPARAM{"INPUT_USER" encode="quote" default="user"}%
   * Local UCL_DOMAIN = %URLPARAM{"INPUT_DOMAIN" encode="quote" default="chtc.wisc.edu"}%
   * Local GATEKEEPER = %URLPARAM{"INPUT_GATEKEEPER" encode="quote" default="red.unl.edu"}%
   * Local UCL_CWD= %URLPARAM{"INPUT_CWD" encode="quote" default="~/dm_part_1"}%
   * Local BATCH_SYSTEM = %URLPARAM{"BATCH_SYSTEM" encode="quote" default="condor"}%
   * Local REMOTE_ROOT = %URLPARAM{"INPUT_REMOTE_ROOT" encode="quote" default="/mnt/hadoop/user"}%
   * Local REMOTE_SRM = %URLPARAM{"INPUT_SRM" encode="quote" default="red-srm1.unl.edu:8443"}%
   * Local REMOTE_GRIDFTP= %URLPARAM{"INPUT_GRIDFTP" encode="quote" default="red-gridftp12.unl.edu"}%
   * Local SURL = srm://%REMOTE_SRM%/srm/v2/server?SFN=%REMOTE_ROOT%
   * Local TURL= gsiftp://%REMOTE_GRIDFTP%/%REMOTE_ROOT%
   * Local OSG_DATA=%URLPARAM{"INPUT_OSG_DATA" encode="quote" default="/osg/data"}%
   * Local BLAST_DB_SUBMIT=%URLPARAM{"INPUT_BLAST_DB_SUBMIT" encode="quote" default="/share/blast"}%
   * Local VDT_LOCATION=/opt/osg-client
-->

%ICON{"warning"}% %RED% Please change your Login Name and click on the Customize button!%ENDCOLOR%
<form action="%SCRIPTURLPATH{"view"}%/%WEB%/%TOPIC%">
<table>
  <tr>
    <td>
      %RED%Login Name%ENDCOLOR%
    </td>
    <td>
      <input size=100 type="text" name="INPUT_USER" value="%UCL_USER%"/>
    </td>
  </tr>
  <tr>
    <td>
      VO
    </td>
    <td>
      <input size=100 type="text" name="INPUT_VO" value="%VO%"/>
    </td>
  <tr>
    <td>
      Host Name
    </td>
    <td>
      <input size=100 type="text" name="INPUT_HOST" value="%UCL_HOST%"/>
    </td>
  </tr>
  <tr>
    <td>
      Domain Name
    </td>
    <td>
      <input size=100 type="text" name="INPUT_DOMAIN" value="%UCL_DOMAIN%"/>
    </td>
  </tr>
    <td>
      Exercise Path
    </td>
    <td>
      <input size=100 type="text" name="INPUT_CWD" value="%UCL_CWD%"/>
    </td>
  </tr>
<!--
  <tr>
    <td>
      Remote SE root directory
    </td>
    <td>
      <input size=100 type="text" name="INPUT_REMOTE_ROOT" value="%REMOTE_ROOT%"/>
    </td>
  </tr>
  <tr>
    <td>
      SRM host endpoint
    </td>
    <td>
      <input size=100 type="text" name="INPUT_SRM" value="%REMOTE_SRM%"/>
    </td>
  </tr>
  <tr>
    <td>
      !GridFTP host endpoint
    </td>
    <td>
      <input size=100 type="text" name="INPUT_GRIDFTP" value="%REMOTE_GRIDFTP%"/>
    </td>
  </tr>
-->
  <tr>
    <td>
     &nbsp;
     <input type="submit" class="twikiSubmit" value="Customize" />
    </td>
  </tr>
</table>
</form>

---++ Prerequisite 

   * Login on submission node <pre class="screen">
ssh %UCL_USER%@%UCL_HOST%.%UCL_DOMAIN%
</pre>
-->
   * Obtain proxy certificate, if you have not done so already <pre class="screen">
voms-proxy-init -voms %VO%:/%VO%
</pre>
   * Make a directory for this exercise<pre class="screen">
mkdir -p %UCL_CWD%
cd %UCL_CWD%
</pre>

---++ Understanding blastp
The executable used for blast is ==blastp==.  It is located at ==%BLAST_DB_SUBMIT%/bin==.  The goal of this exercise is to understand ==blastp== enough to be able to copy all files necessary for a single blast search into a directory.  ==blastp== is executed with: <pre class="screen">
%UCL_PROMPT% blastp -db %RED%[database_file]%ENDCOLOR% -query %RED%[query_file]%ENDCOLOR%
</pre>

I have provided an input query file in ==%BLAST_DB_SUBMIT%/queries/query1==.  Create a shell script that will copy the files for a yeast search into a directory.  

%TWISTY{
showlink="Show hint"
hidelink="Hide hint"
mode="div"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
Here's the command line that you should end up with to start ==blastp==:
<pre class="screen">
%UCL_PROMPT% ./blastp -db ./yeast.aa -query ./query1
</pre>
%ENDTWISTY%

This may require copying files into a directory, running ==blastp==, ==blastp== failing, then copying more files into a directory.  Repeat until blastp successfully completes.  Make a note of the files in the directory and create a shell script that will copy those files into a directory and run ==blastp==.

%TWISTY{
showlink="Show example script"
hidelink="Hide example script"
mode="div"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
<pre class="file">
#!/bin/sh
mkdir example_dir
cp %BLAST_DB_SUBMIT%/bin/blastp example_dir/
cp %BLAST_DB_SUBMIT%/queries/query1 example_dir/
cp %BLAST_DB_SUBMIT%/data/yeast.aa example_dir/

cd example_dir
./blastp -db ./yeast.aa -query ./query1
</pre>
%ENDTWISTY%

---+++ Input requirements
The input to blast is a database (files).  In the ==%BLAST_DB_SUBMIT%/data== directory, there is a few different databases.  For this exercise, attempt to only run the yeast db.

How to determine a file size: <pre class="screen">
%UCL_PROMPT% ls -lh %RED%file%ENDCOLOR%
</pre>

How to determine the size of a directory: <pre class="screen">
%UCL_PROMPT% du -sh %RED%directory%ENDCOLOR%
</pre>

Make a note of the files required for a run of ==blastp==.  This will be important in future exercises.  

---+++ Output requirements
The output that we care about is sent to stdout.

---++ Replicating setup
Now that you have made an execution for yeast, can you do the same for drosoph.aa ?

---++ Possible storage possibilities
Once you have completed the script, you will have a list of files that are required for running ==blastp==.  This will help in finding what files need to be stored.  Can you answer some of the questions:

   * How much disk space is required for the yeast run?  drosoph.aa?
   * How many files are needed for the runs?
   * Assuming the each file is read completely by BLAST, and since you know how long blastp runs (time it!):
      * At what rate are files read in?  
      * How many MB/s?


---++ Extra Credit: Running the script as a condor job

Since you now know the files necessary for blast to run, you can use ==transfer_input_files== in the condor submit file to send them in a condor job.  Make a condor job that runs a yeast query.

In this extra credit, the ==executable== would be ==/share/blast/bin/blastp==.  The ==arguments== would be the normal arguments to blast, ==-db %RED%database%ENDCOLOR% -query %RED%queryfile%ENDCOLOR%==.  The ==transfer_input_files== should list the query file and the database files.

