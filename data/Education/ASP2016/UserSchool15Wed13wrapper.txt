%META:TOPICINFO{author="ChristinaKoch" date="1436894299" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
<style type="text/css">
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
</style>

---+ Wednesday Exercise 1.3: Wrapper scripts for in-job installation

Our last exercise is the most important.  Some software cannot be compiled into a 
single executable - either the language or its libraries don't behave that way.  
In this case, it is necessary to create a "wrapper" script (usually in bash or 
perl) that is able to install the software from source on a per job basis.  Not only 
does this portability technique work with almost any kind of software that can be 
locally installed, it also allows for a great deal of control and flexibility 
for what happens within your job.  Once you can write a script to handle your code 
(and often data!), you can do almost anything.  

---++ GROMACS

For this exercise, we will be using the molecular dynamic simulation software package GROMACS.  (add more about gromacs and why we need to install it this way?)  

The source for GROMACS can be downloaded from this page: 

http://www.gromacs.org/Downloads

Download version 4.6.7 to the OSG submit node =osg-submit.chtc.wisc.edu=, into your =gromacs= directory.  

---++ Installation instructions

On the downloads page, there is a link to installation instructions.  Clicking through to the documentation page, 
then choosing the version of GROMACS we downloaded, we can find instructions for installing GROMACS 4.6.  

http://www.gromacs.org/Documentation/Installation_Instructions_4.6

There are two things to look at right away.  First is the "Quick and Dirty Installation" (http://www.gromacs.org/Documentation/Installation_Instructions_4.6#2._Quick_and_dirty_installation).  This is helpful because it gives a sense of 
what steps are necessary to install GROMACS, and what the main lines of our wrapper script are going to be.  The last line of the brief install instructions: 

<pre class=file">
sudo make install
</pre>

should give us pause.  =sudo= indicates the need for administrative privileges, which are not available to you within a job.  This means that we will have to change 
at least one step in the install procedure to make sure that we're installing to the local directory instead of a system location.  The relevant section is: 

http://www.gromacs.org/Documentation/Installation_Instructions_4.6#4.10._Installing_GROMACS

http://www.gromacs.org/Documentation/Installation_Instructions_4.6#4.2._Using_CMake_command-line_options

---++ Write a wrapper script

Create a script called =run_gromacs.sh= in the same directory as the GROMACS tar.gz source file.  This script needs to install 
GROMACS, with the considerations we've already looked at above, then run GROMACS commands.  

<pre class="file">
#!/bin/bash

# Start installing gromacs, based on online documentation
tar xfz gromacs-4.6.7.tar.gz
cd gromacs-4.6.7
mkdir build
cd build
# The next line is where we specify the location of the installation 
# via an install prefix.  
cmake .. -DCMAKE_INSTALL_PREFIX=$(pwd)/../../
make
make install
# Leave installation directory
cd ../../

# Run gromacs commands
bin/pdb2gmx -f JZ4.pdb -o JZ4.gro -water spc -ff gromos43a1
bin/grompp -v -f minim.mdp -c JZ4.gro -p topol.top -o results.tpr
bin/mdrun -v -deffnm results -c results.gro

</pre>

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>chmod +x run_gromacs.sh</strong>
</pre>

---++ Run a gromacs job

Now we have a script that will install and run gromacs for us.  Our last step is to create a submit file to send our GROMACS job to the OSG.  Create a file called =gromacs.submit= 
and fill it in with the following lines: 

<pre class="file">
universe = vanilla
log = gromacs_$(Cluster).log
error = gromacs_$(Cluster).err
output = gromacs_$(Cluster).out

executable = run_gromacs.sh

should_transfer_files = YES
when_to_transfer_output = ON_EXIT
transfer_input_files = gromacs-4.6.7.tar.gz,JZ4.pdb,minim.mdp

request_cpus = 1
request_memory = 1GB
request_disk = 1GB

queue
</pre>

(Copy input files)

Note that our =run_gromacs.sh= script is the executable, and we must transfer the =gromacs-4.6.7.tar.gz= file in =transfer_input_files=.  

<pre class="screen">
%UCL_PROMPT_SHORT% <strong>condor_submit gromacs.submit</strong>
</pre>
