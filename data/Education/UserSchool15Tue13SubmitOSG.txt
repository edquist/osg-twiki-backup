%META:TOPICINFO{author="BrianLin" date="1437799468" format="1.1" reprev="1.5" version="1.5"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
---+ Tuesday Exercise 1.3: Running jobs in the OSG

The goal of this exercise is to have your jobs running on the OSG and map their geographical locations. 

---++ Where in the World Are My Jobs? Pt 2

In this version of the geolocating exercise, we will be submitting jobs to the OSG from =osg-ss-glidein-submit= and hopefully getting back much more interesting results! Due to some differences between the machines in the OSG and our local cluster here at UW-Madison, we will need to run different scripts. The first script will grab some network information from machines out in the OSG and the second script will be run manually on the submit node to perform the summarization and lookups.

*NOTE:* We are bending a rule about running jobs locally on the submit host because this host is a closed environment only utilized by the class and this exercise is designed for low load. Normally you should NOT run jobs on your submit host.

---+++ Hostname fetching code

The following shell script finds the !ClassAd of the machine it's running on and finds a network identity that can be used to perform lookups:

<pre class="file">#!/bin/sh
grep GLIDEIN_SiteWMS_Queue "$_CONDOR_MACHINE_AD" | awk '{print $3}' | tr -d '"'
</pre>

---+++ Geolocation code

The following Python script is the same as the geolocation script from the last exercise except that instead of gelocating the host that it is being run on, it can take a list of files containing host information and geolocate them:

<pre class="file">
#!/bin/env python

import sys
import socket
import urllib2
import json
import time

hostnames = set()
for filename in sys.argv[1:]:
    try:
        with open(filename, 'r') as f:
            hostnames.add(f.read().strip())
    except IOError:
        pass

for host in hostnames: 
    try:
        ipaddr = socket.gethostbyname(host)
        for i in range(1,4):
            try:
                response = urllib2.urlopen('http://www.freegeoip.net/json/' + ipaddr).read()
                json_response = json.loads(response)
                print "%s,%s" % (json_response['latitude'], json_response['longitude'])
                break
            except urllib2.HTTPError:
                time.sleep(3**i)
                pass
    except socket.gaierror:
        pass
</pre>

---+++ Gathering network information from the OSG

Now to create submit files and that will run in the OSG!

   1. If not already logged in, =ssh= into =osg-ss-glidein-submit=
   1. Make a new directory for this exercise, =tuesday-1.3= and change into it
   1. Save the above shell script to a file and call it =ce_hostname.sh=
   1. Don't forget to test the script on the submit host!
   1. Create a submit file that runs =ce_hostname.sh= twenty times and uses the $(Process) macro to write different =output=, =error= and =log= files
   1. Submit your file and wait for the results

---+++ Geolocating machines in the OSG

To perform the geolocation step, you will need to utilize the Python script mentioned above, so save it to a file called =ce_location.py=. This script will take a list of output files as its arguments (*Hint:* you can use the =*= like you did in the last exercise).

---++ Mapping Your Jobs

As before, you will be using http://www.mapcustomizer.com/ to visualize where your jobs have landed in the OSG. Copy and paste the results from the Python script into the bulk creation text box at the bottom of the screen. Where did your jobs end up?

%META:TOPICMOVED{by="BrianLin" date="1437683241" from="Education.UserSchool15Wed13SubmitOSG" to="Education.UserSchool15Tue13SubmitOSG"}%
