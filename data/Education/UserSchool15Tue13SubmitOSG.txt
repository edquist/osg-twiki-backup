%META:TOPICINFO{author="BrianLin" date="1437683241" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="UserSchool15Materials"}%
---+ Tuesday Exercise 1.3: Running jobs in the OSG

The goal of this exercise is to have your jobs running on the OSG and map their geographical locations. To do this, we will write another simple, linear DAG like the last exercise but their payloads will be slightly different.

---++ Where in the World Are My Jobs? Pt 2

In this version of the geolocating exercise, we will be submitting jobs to the OSG from =osg-ss-glidein-submit= and hopefully getting back much more interesting results!

   1. If not already logged in, =ssh= into =osg-ss-glidein-submit=
   1. Make a new directory for this exercise, =wed-1.3= and =cd= into it
   1. Save the following shell script to =ce_hostname.sh=:\
<pre class="file">#!/bin/sh
grep GLIDEIN_SiteWMS_Queue "$_CONDOR_MACHINE_AD" | awk '{print $3}' | tr -d '"'
</pre>
   1. Create a submit file that runs =ce_hostname.sh=:
      a. It should run the job ten times
      a. Ensure that it uses the $(Process) macro to write different =output=, =error= and =log= files
      a. Add =+WantGlidein=True= before the =queue= statement
   1. Save the following Python script to =ce_location.py=:\
<pre class="file">
#!/bin/env python

import sys
import socket
import urllib2
import json
import time

hostnames = set()

for filename in sys.argv[1:]:
    try:
        with open(filename, 'r') as f:
            hostnames.add(f.read().strip())
    except IOError:
        pass

for host in hostnames: 
    ipaddr = socket.gethostbyname(host)
    for i in range(1,4):
        try:
            response = urllib2.urlopen('http://www.freegeoip.net/json/' + ipaddr).read()
            json_response = json.loads(response)
            print "%s,%s" % (json_response['latitude'], json_response['longitude'])
            break
        except urllib2.HTTPError:
            time.sleep(3**i)
            pass
</pre>
   1. Create a submit file runs =ce_location.py=. You will need to do the following
      a. Set the =universe= to =scheduler=, this will run the job locally on the submit host
      a. Set the =arguments= to each of the output files you get from the =ce_hostname.sh= jobs
      a. Omit the =should_transfer_files= and =when_to_transfer_output= lines.
   1. Write a DAG with the =ce_location.py= job as the child of the =ce_hostname.sh= job
   1. Submit your DAG and wait for the results

---++ Mapping Your Jobs

Same as the last exercise, we will be using http://www.mapcustomizer.com/ to visualize where your jobs have landed in the OSG. Copy and paste the results from your DAG into the bulk creation text box at the bottom of the screen. Where did your jobs end up?

%META:TOPICMOVED{by="BrianLin" date="1437683241" from="Education.UserSchool15Wed13SubmitOSG" to="Education.UserSchool15Tue13SubmitOSG"}%
