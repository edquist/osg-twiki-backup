%META:TOPICINFO{author="JamesBarlow" date="1271876954" format="1.1" version="1.7"}%
%META:TOPICPARENT{name="WebHome"}%
%DOC_STATUS_TABLE%

%TOC%
---+ Secure Hash Algorithms

Cryptographic hash functions, also known as secure hash algorithms, take an arbitrary length string and return a fixed-length hash value.
Strong cryptographic hash functions make it easy to compute the hash value from an input string but very difficult to find a message that results in a particular hash value, modify a message without changing its hash value, or find two messages that hash to the same value.
Digital signature algorithms rely on cryptographic hash functions.
To sign a message, the signer first computes the hash value of the message, then encrypts the hash value with his or her private key.
To verify a message, the verifier decrypts the signature with the signer's public key and verifies that the decrypted value matches the message hash.
A Public Key Infrastructure (PKI) uses digital signatures when creating and verifying certificates.

OSG's authentication and authorization infrastructure is PKI-based.
Thus, cryptographic hash functions play an important role in OSG security.
The OSG Security Team encourages the use of strong cryptographic hash functions
and supports the migration away from cryptographic hash functions with known weaknesses.

---++ MD5

In December 2008, researchers demonstrated an attack against MD5-based signatures in X.509 certificates
(see http://www.win.tue.nl/hashclash/rogue-ca/ for details).
Weaknesses in the MD5 hash algorithm allowed the researchers to modify a valid certificate, changing the certificate's subject, serial number, validity period, and other fields, without changing the certificate's hash value, so the CA's signature on the certificate was still valid.
The [[http://www.igtf.net/][IGTF]] issued a statement regarding the impact of this attack on IGTF CAs (http://www.eugridpma.org/newsletter/eugridpma-newsletter-20090102.txt).
IGTF CAs began migrating from the MD5 hash algorithm to SHA-1 when MD5 weaknesses were published in 2004.
No CAs accredited by IGTF currently issue new certificates using MD5.
The IGTF is also phasing out the use of MD5 in CA certificates and CRLs in 2009.

The FNAL KCA is migrating from MD5 to SHA-1 as part of its transition to IGTF-compliant operation in 2009.

Globus Toolkit 4.2.1, 4.0.8, and earlier use MD5-based signatures in proxy certificates.
In later versions, Globus software will create proxy certificates using the hash algorithm found in the
signer's certificate, thereby automatically transitioning to new hash algorithms as they are adopted by CAs.
See [[http://bugzilla.globus.org/globus/show_bug.cgi?id=6613][Bug 6613]] for details.

---++ SHA-1

Currently, all IGTF CAs issue certificates using the SHA-1 hash function.
In 2005, researchers began to demonstrate weaknesses in SHA-1.
According to [[http://csrc.nist.gov/groups/ST/hash/policy.html][NIST's Policy on Hash Functions]],
"Federal agencies should stop using SHA-1 for digital signatures, digital time stamping and other applications that require collision resistance as soon as practical, and must use the SHA-2 family of hash functions for these applications after 2010."
Researchers are actively searching for SHA-1 hash collisions
(see http://www.iaik.tugraz.at/content/research/krypto/sha1/)
that would enable attacks against SHA-1 signatures in X.509 certificates.
Therefore, it is prudent for OSG and the wider grid community to begin migrating to SHA-2.

---++ SHA-2

Before CAs begin issuing certificates using the SHA-2 hash function,
it is necessary for our software and systems to support it.
We track our progress below.

---+++ !OpenSSL

!OpenSSL added support for SHA-2 starting in version 0.9.8.

---+++ Sun Java

Sun Java supports SHA256withRSA, SHA384withRSA and SHA512withRSA but not SHA224.

---+++ !BouncyCastle

According to the [[http://www.bouncycastle.org/releasenotes.html][release notes]],
!BouncyCastle has supported the SHA-2 algorithms since version 1.27.

---+++ !PureTLS

[[http://www.rtfm.com/puretls/][PureTLS]] is used by the Java !CoG Kit (jglobus).
!PureTLS 0.9b5 (the current release) does not support SHA-2 algorithms.
For example, see the oid2NameMap in COM.claymoresystems.cert.X509Cert.
This causes org.globus.gsi.proxy.ProxyPathValidator.validate() to fail.

---+++ Globus Toolkit

Versions 4.0.8 and earlier of the Globus Toolkit contain !OpenSSL 0.9.7 (or earlier), which does not support SHA-2.
Later Globus Toolkit versions (such as 4.0.9 and 4.2) use the !OpenSSL version provided by the operating system.
[[http://vdt.cs.wisc.edu/releases/1.10.0/release.html][VDT 1.10.0]] was the first version to configure Globus to use the operating system's version of !OpenSSL.

When configured to use !OpenSSL 0.9.8 or later, Globus Toolkit C components support SHA-2.
This has been confirmed for !MyProxy, GSI-OpenSSH, and grid-proxy-init so far.

Globus Toolkit Java components use the !BouncyCastle and !PureTLS libraries for certificate validation.
Globus Toolkit 4.0.8 contains !BouncyCastle 1.25.
Globus Toolkit 4.2.0 contains !BouncyCastle 1.31.

The org.globus.gsi.bc.BouncyCastleCertProcessingFactory class in jglobus 1.6.0 and earlier used
the deprecated org.bouncycastle.jce.X509V3CertificateGenerator class which doesn't support SHA-2.
Main.JimBasney committed a fix to the jglobus CVS on May 7 2009 to use
org.bouncycastle.x509.X509V3CertificateGenerator which supports SHA-2.

The use of !PureTLS appears to be a major problem for SHA-2 support in jglobus.
See [[http://bugzilla.globus.org/globus/show_bug.cgi?id=6730][Globus Bug 6730]].

---+++ gLite

David Groep reports:

<verbatim>
gLite 3.0 (no longer supported but still in use, e.g. for lcg-D0 RBs):
	System OpenSSL: RHEL3 = OpenSSL 0.9.7a; NO SHA-2
	Grid OpenSSL: VDT1.2 = OpenSSL 0.9.6m; NO SHA-2
gLite 3.1 (current production version):
	System OpenSSL: RHEL4 = OpenSSL 0.9.7a (++); NO SHA-2
	Grid OpenSSL: VDT1.6 = OpenSSL 0.9.7d; NO SHA-2
gLite 3.2 (future release):
	System OpenSSL: RHEL5 = OpenSSL 0.9.8e; YES for SHA-2
	Grid OpenSSL: VDT1.10, uses system OpenSSL!

Given the typical cycle times in the infrastructure, gLite 3.1 will
be around until well in 2010 (no official end date has been announced,
but this is my experience based on gLite 3.0 which is still present).
Only the upgrade to EL5 and gLite 3.2 will (hopefully) resolve the
OpenSSL problem.
</verbatim>

---+++ Scientific Linux

Scientific Linux 4 contains !OpenSSL 0.9.7 (which does not support SHA-2).
Scientific Linux 5 contains !OpenSSL 0.9.8 (which supports SHA-2).

---+++ UNICORE

Test report from Bernd Schuller via Jules Wolfrat:
   * UNICORE 6 has no problems with SHA256, SHA384 and (presumably) SHA512.
   * SHA224 does not work with default SUN provider, requires BouncyCastle provider

---++ References

   * Wikipedia links:
      * [[http://en.wikipedia.org/wiki/Cryptographic_hash_function][Cryptographic hash function]]
      * [[http://en.wikipedia.org/wiki/Digital_signature][Digital signature]]
      * [[http://en.wikipedia.org/wiki/SHA_hash_functions][SHA hash functions]]

<!-- CONTENT MANAGEMENT PROJECT

   DEAR DOCUMENT OWNER
   ===================

   Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER          = JamesBarlow

   Please define the document area, choose one of the defined areas from the next line
   DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = Security

   define the primary role the document serves, choose one of the defined roles from the next line
   DOC_ROLE = (Scientist|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

   Please define the document type, choose one of the defined types from the next line
   DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Knowledge
   
   Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

   Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %NO%

   change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

   change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

   change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


   DEAR DOCUMENT REVIEWER
   ======================

   Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = MineAltunay
  
   Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %NO%


   DEAR DOCUMENT TESTER
   ====================

   Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = 
  
   Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
 
-->

%META:FILEATTACHMENT{name="76210ca4.0" attachment="76210ca4.0" attr="" comment="SHA-2 Test CA certificate" date="1241704830" path="76210ca4.0" size="834" stream="76210ca4.0" tmpFilename="/usr/tmp/CGItemp33415" user="JimBasney" version="1"}%
%META:FILEATTACHMENT{name="76210ca4.signing_policy" attachment="76210ca4.signing_policy" attr="" comment="SHA-2 Test CA signing policy" date="1241704847" path="76210ca4.signing_policy" size="1288" stream="76210ca4.signing_policy" tmpFilename="/usr/tmp/CGItemp33638" user="JimBasney" version="1"}%
%META:FILEATTACHMENT{name="sha512-userkey.pem" attachment="sha512-userkey.pem" attr="" comment="SHA-512 Test User private key" date="1242047266" path="sha512-userkey.pem" size="887" stream="sha512-userkey.pem" tmpFilename="/usr/tmp/CGItemp37357" user="JimBasney" version="2"}%
%META:FILEATTACHMENT{name="sha512-usercert.pem" attachment="sha512-usercert.pem" attr="" comment="SHA-512 Test User certificate" date="1242047251" path="sha512-usercert.pem" size="798" stream="sha512-usercert.pem" tmpFilename="/usr/tmp/CGItemp38394" user="JimBasney" version="2"}%
%META:FILEATTACHMENT{name="sha384-userkey.pem" attachment="sha384-userkey.pem" attr="" comment="SHA-384 Test User private key" date="1241704922" path="sha384-userkey.pem" size="883" stream="sha384-userkey.pem" tmpFilename="/usr/tmp/CGItemp33545" user="JimBasney" version="1"}%
%META:FILEATTACHMENT{name="sha384-usercert.pem" attachment="sha384-usercert.pem" attr="" comment="SHA-384 Test User certificate" date="1241704949" path="sha384-usercert.pem" size="798" stream="sha384-usercert.pem" tmpFilename="/usr/tmp/CGItemp33627" user="JimBasney" version="1"}%
%META:FILEATTACHMENT{name="sha256-userkey.pem" attachment="sha256-userkey.pem" attr="" comment="SHA-256 Test User private key" date="1241704970" path="sha256-userkey.pem" size="887" stream="sha256-userkey.pem" tmpFilename="/usr/tmp/CGItemp33581" user="JimBasney" version="1"}%
%META:FILEATTACHMENT{name="sha256-usercert.pem" attachment="sha256-usercert.pem" attr="" comment="SHA-256 Test User certificate" date="1241704989" path="sha256-usercert.pem" size="798" stream="sha256-usercert.pem" tmpFilename="/usr/tmp/CGItemp33719" user="JimBasney" version="1"}%
%META:FILEATTACHMENT{name="sha224-userkey.pem" attachment="sha224-userkey.pem" attr="" comment="SHA-224 Test User private key" date="1241705004" path="sha224-userkey.pem" size="887" stream="sha224-userkey.pem" tmpFilename="/usr/tmp/CGItemp33694" user="JimBasney" version="1"}%
%META:FILEATTACHMENT{name="sha224-usercert.pem" attachment="sha224-usercert.pem" attr="" comment="SHA-224 Test User certificate" date="1241705020" path="sha224-usercert.pem" size="798" stream="sha224-usercert.pem" tmpFilename="/usr/tmp/CGItemp33673" user="JimBasney" version="1"}%
