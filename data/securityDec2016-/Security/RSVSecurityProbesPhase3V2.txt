%META:TOPICINFO{author="KyleGross" date="1481047952" format="1.1" version="1.9"}%
%META:TOPICPARENT{name="SecurityTeamWorkingArea"}%
---+ RSV security metrics - Phase 3 v2
%TOC%

---++Centralized Metrics

The Centralized RSV metrics will be run by GOC and will monitor the status of the CAs being distributed by both OSG and VDT and the corresponding CRLs.

---++++Distribution Availability Metric
*High-level Goal*: check OSG provided CA distribution mechanisms are available 
We have at least four separate distribution mechanisms provided by OSG: pacman caches at VDT and GOC and yum/rpm repositories at GOC and VDT. These services are critical for OSG operations. We will check if these services are up, and provide the expected CA content. 

---++++Distribution Content Metric
*High-level Goal*: check if the CAs included in a distribution service complies with OSG requirements. For each distribution service, we have a list of CAs to be included. For example, VDT must include IGTF latest distribution + Fermi KCA. GOC must include IGTF latest distribution+ FNAL KCA+ TeraGrid CAs. Mine expects this to check if the distribution service has the latest version of IGTF distribution and includes all other necessary CAs. The security team is responsible for detecting a new IGTF distribution and creating a new CA package to be distributed. 

Having said that this is done very ad-hoc manner: it is likely Jim may be on vacation and Mine may miss an email from IGTF on new distribution. To prevent this situation, it would be ideal to automate this process. The OSG security team is ready to list the expected content of CAs in each distribution service.
  
---++++CA Metric 
*High-level Goal*: check if CAs contained in a distribution service are up-to-date. Check if any of the certificates are expired or about to expire. This metric must be applied to all distribution services that passed the availability and content metrics successfully. Any distribution service who failed the availability and content metrics will be examined first. 
 
The CA metric will just check the validity/expiry of the certificates using openssl commands against a particular directory. We will require the deployment to be done against each of the distribution service. Additionally we will require the CRLs to be kept in a different location than the CAs, so as to make sure that the expiry of a CRLs does not impact the result of the CA metric. 
 [Comment from Arvind: Why would it?]

---++++CRL distribution-availability Metric
*High-level Goal*: Check if our central retrieval mechanism for downloading CRLs is available and working. 
 [Comment from Arvind: Are we going to have a central retrieval mechanism? Right now sites get CRLs directly from each CA using fetch-crl, correct? ]

---++++CRL Metric
*High-level Goal*: Check if CRL files of CAs included in a distribution service is up-to-date. This metric downloads CRLs directly from each CA web site, and checks whether the currently distributed CRL has expired or not.  If the CRLs are expired, the CA name will be outputted. Additionally the metric will produce warnings if the CRLs are set to expire within 3 days. 
 [Comment from Arvind: Same question -- Are we going to have a central retrieval mechanism? Right now sites get CRLs directly from each CA using fetch-crl, correct? ]


*Implementation Considerations:*
This metric (or the corresponding distribution availability metric) will pass out any error information from fetch-crl. Additionally the metric will also check the timestamps associated with the files and produce an error if the file has not been updated over the last X runs, because this could indicate a problem with the crl_url distributing the crl files. 
*M. Altunay* : how frequently does  CA have to produce a new CRL, if there is no revocation? Why X runs? 

*Arvind's Comments*: Arvind has similar comment for the CRL ,metric as CA metric, he wanted to keep the fetch-crl process separate from the metric. 

*Anand's Comments*: Keeping the metric and the fetch-crl process separate could be good from a design perspective, but could again cause the probes to miss potential errors being reported by fetch-crl. Another aspect to consider is the interaction between the CAs and CRLs. If we use the same directory to downloaded cas and crls, if one of them expires then other metric could also report problem 
 [Comment from Arvind: a) Whether or not a CRL's expiry causes a CA-error report depends on what you're testing. Just running an openssl text for expirty date, for example, will not pick up an expired CRL b) I've still not heard a convincing answer as to why it's important to mix retrieval mechanisms with data-integrity checks. "Could cause probe to miss potential error" is vague.]

*M. Altunay:* I do not care how we fetch the CRLs. Given we encourage OSG sites to use fetch-crl, I would like to use the same method as our users do. Since we do not have another mechanism ready for fetching the CRLs, I do not see why not using it? 
 [Comment from Arvind: As a key RSV developer, I'd like to keep an eye on the future, and not just base everything on current case-studies]



---++Site-level Metrics

These probes are meant to run via RSV clients on OSG sites.

---++++CA metric (Availability Metric: AM1) 
*High-level Goal*: Check if a site has up-to-date CA distribution package provided by OSG. Note I did NOT say if a site has up-to-date certificates. This is on purpose: certificates are provided by OSG distribution services and OSG is responsible for content, availability and freshness of these distribution services. Sites are NOT expected to individually download a CA certificate directly from that CA’s website. However, we do expect sites to have the latest versions of our distribution services. Mine wants this metric to return a success as long as a site has downloaded the latest version of OSG CA distribution services. 

*Address to Arvind's comment*: Arvind claimed if a site uses RPM distribution service, the above method may not work. ? I think we can check which version of RPMs have been installed from YUM repository and as long as it matches the latest version, we return a success status. 

*Having said this*, I do realize that we expect OSG sites to use one of OSG distribution services. If we agree that  there could be sites who never uses our distribution services, but get their certs from other places themselves for example directly downloading from IGTF website
, *Then I agree to check each cert locally via openssl and then comparing with CA's latest cert version*. In this case, if the CA installed are NOT known to OSG distribution and we do not even know where the CA's web site, then we cannot do anything. In that case, it is OK to skip this CA with a warning to site admin, as we have no clue about it. 
 
*Synchronization issue for using openssl* : I am not against using openssl on the site to check if the cert is expired or not; we can use a central directory on GOC to find out if CA was the lazy party. *However*, this can lead to *synchronization problems*. Corner case: GOC does its retrieval the day on CA publishes a new cert, the site ran its updates the previous night. Sites are suppoed to run updates once a day. This site should NOT be penalized. It is CA's fault. 

(I do not care about the other corner case of GOC being late and site being late to retrieve the new cert on the day it is publshed by CA. CA should not publish on the last day anyway.) 

*Arvind's latest proposal - simplifying above comments--clean up when completely agreed on*: 
   * Compare version numbers for known retrieval mechanisms/source: VDT-update-certs, YUM/RPM.; Sources: VDT, GOC
   * If site uses unknown retrieval mechanism and/or retrieval source, then run openssl checks, and look for expired CAs


---++++CRL metric AM2
*High-level Goal:* Check if a site has filestamps for the CRL files that are within the last 6 hours. Note I am NOT saying site has to have up-to-date CRLs. I do not need to bring any complexity to this. WLCG requirement only asks about filestamp to be within last 6 hour. 
 [Comment from Arvind: EGEE metric a bit different - waiting on response from security team]


---++Additional site-level metrics that are CURRENTLY NOT availability metrics w.r.t WLCG

---++++CRL expiry-dates metric (NAM1)
*High-level goal*: Check if a site has up-to-date CRL files for all CAs installed on the machine. This metric checks if the CRLs are expired or not and sends GOC a list of expired CRLs
 [Comment from Arvind: Isn't this a redundant and possibly mis-leading metric? The above CRL metric should cover this]

---++++CRL update-mechanism metric (NAM2)
*High-level Goal:* This metric checks if the site has enabled fetch-crl mechanism to run every 6 hours. 
 [Comment from Arvind: This is definitely redundant IMO -- if the main CRL metric passes, then you know you've passed this metric. And vice-versa]


---++++CA supported-VO metric (NAM3)
*High-level Goal:* Check if a site has CAs installed that are necessary to support the VOs that site has agreed to support. This metric will check if site has installed all of the CAs that supported VOs has advertised. Arvind expects this metric will become an availability metric in future. I do not expect the siet to manually go download the CA certificates. They should have dimply keep up-to-date versions of OSG distribution services. This metric will make sure that none of the required CAs are excluded from the installation. (This may require checking the vdt-cert-update.config file. The sites that uses RPMs will install the entire CA stack from the yum repository anyway. So those sites would be good as long as they have the latest version of yum repository.) Important Note: All of the CAs that are used by OSG VOs will be included in OSG CA distribution services. 

---++++CRL supported-VO metric (NAM4)
*High-level Goal:* Check if the site has an up-to-date version of CRLs for supported VO CAs. check the filestamp on the CRL files to determine if site has updated the CRLs in the last 6 hours. 
*As long this metric is reported to WLCG, I will keep it identical to EGEE implementation.* 
 [Comment from Arvind: This is definitely redundant IMO, isn't it? Worst case -- NAM1 covers it; also why would this be considered an availability metric by WLCG?]

---++++HostCert metric (NAM5)
*High-level Goal*: checks if the local machine's (that we run RSV probes on) certificate has been expired or not. This is an existing metric in RSV v1 and v2.

---++++GUMS availability metric
*High-level Goal*: Check if GUMS service is up and running. (This could be problematic as GUMS only accepts connections form the gatekeeper. The metric must be run on gatekeeper). 
[Comment from Arvind: Not clear enough for me to make a comment]

---++++GUMS version metric
*High-level Goal*: Check which version of GUMS is installed. 

---++++Supported-VO metric
*High-level Goal*: Check which VOs are supported by this site. Note I did not refer to GUMS because I would like this information to come from edg-mkgridmapfile OR from GUMS whichever one is installed and used by the gatekeeper. This metric exists in RSV v2.
[Comment from Arvind: I do not like mixing filenames, etc. in here. We really should be talking design]

---++++VOHandshake frequency metric
*high-level Goal*: Check how frequently site is downloading VOMS membership information from VOs. In other words, check GUMS or edg-mkgridmapfile conifguration for download frequency
[Comment from Arvind: Do all OSG sites use VOMS?]

---+++++ Probe Implementation Considerations (Anand)
*High Level Goal* The high level goal of this probe is to ensue that the sites are getting updated VO list from the correct VOMS servers periodically. (Note: High-level goal has been updated based on Mine'e requirement)

Checking this high-level goal will entail at-least verifying the following two conditions:
   1. The VO list is getting updated at-least every X (24?) hours 
   1. The correct VOMS servers are being contacted.
   
Any other requirements?
OSG sites could either use GUMS or edg-mkgridmap to get the list from the VOs, so we will need to address all paths

*Note* The discussion below assumed the RSV is running as daemon on the CE node. If it runs on GUMS host, steps to meet the requirements will be different.

---++++++ Requirement 1: Check if the VO list is getting updated at-least every X (24?) hours 
*For sites using GUMS in full-privilege mode*: GUMS developers will need to add a functionality that will publish the information about how when was the last time the VO-list update process was run. This information needs to be queryable from the CE using the RSV service certificate.

*For sites using edg-mkgridmap*: We will have to modify the edg-mkgridmap code so that it records the information about the last time it was run.

*For sites using GUMS in compatibility mode*: These sites actually generate gridmap file (GMF) using a cron job that contacts their GUMS server. For sites using GUMS in compatibility mode, in addition to checking if GUMS is contacting the VOMS servers periodically, we will also have to ensure that the process used to generate the  GMF from GUMS is successfully running. I am unclear what this check will entail.

*Issue 1* One potential issue will be to correctly identify sites which are using GUMS compatibility mode and not edg-mkgridmap, since both will not have a prima call out configured on the CE. Sites using gums can be easily identified by looking for prima.conf. Should we just ignore sites using GUMS compatibility mode (for this RSV probe) since it is being used only a few sites? Any other solutions?

*Issue 2*: As stated, requirement 1 just checks if the process of updating the VO membership was run. It does not check whether VO membership was retrieved successfully from all the VOMS servers. Requiring the later will necessitate further changes to both GUMS and edg-mkgridmap process. Furthermore we will have to develop a mechanism to identify (within the RSV probe) if the problem lies on the site CE or at the VO level.

---++++++ Requirement 2: Is the correct VOMS servers are being contacted
*Step 1: Find out what VOMS servers the sites are connecting to*

*For sites using GUMS* : A simple way to know this would be to access the entire GUMS configuration file, but that might be unwise from a security perspective to open up access to GUMS configuration from the CE. So Ideally the GUMS developers will also have to add a functionality that will return a list of VOMS server being contacted for each VO. This approach will work for both full-privilege and compatibility mode, assuming of-course that Issue 1 (listed in previous section) has been resolved.

*For sites using edg-mkgridmap*: We could use the edg-mkgridmap.conf to figure out what VOs the site is downloading its membership list from.

*Step 2: Is the site contacting the correct VOMS server*

Once we have the list of VOMS servers being contacted by the site, we will need to compare it with the central list (from GOC).The comparison will also depend on the supported VO list that is maintained at the site ($VDT_LOCATION/monitoring). If a VO is listed in this list we will check to see if the VOMS server listed in the GOC list is listed.  If the server is not listed an error/warning message should be issued. *NOTE*: This test will just tell you that the latest VOMS server is not on the sites list, it will not be able to identify the difference between a site is using a old VOMS server location and a site not having any VOMS location for a particular VO. If we need to identify this difference we will have to depend on the comment line in the template distributed by GOC.

---++++++ Additional Comments

*Issue 3*: Having site probes depend on a central list maintained at the GOC is not ideal and might be prone to problems.

*Issue 4*: This probe seems to be operational rather than a security probe. I agree that the VOs will like the site to keep their membership list updated, so that if they remove/add a user from/to the VO this gets immediately reflected. A removed user can be misusing the VOs resources. But this still does not rise to a Grid level security problem. If the user is indeed behaving in bad-faith, and hence is posing security problem to the Grid, it would be more advisable to revoke the users certificate rather than just removing him from a VO.
 
---+++ The following should be central metrics, in my opinion -ag

---++++VOMS availability metric
*High-level Goal*: Check if a VOMS server is up and running. try downloading member users. 
[Comment from Arvind: This should be a central metric. No?]
---+++++ Implementation Issues
The idea is to make the current VOMS monitor into an equivalent RSV probe [[http://voms-monitor.grid.iu.edu/cgi-bin/index.cgi]]

The status thus far is that the current voms-monitor test produces some numbers that are mostly meaningless. And ideally we would replace the metric with a more thoughtful/useful one. More details need to be flushed out before the probes are implemented.


---++++VOMS version metric
*High-level Goal*: Check the version of a VOMS server. 
[Comment from Arvind: This should be a central metric. No?]


---++++VOMS lifetime metric
*High-level Goal*: Check the lifetimes issued by this VOMS server for the user's voms-proxies. This is needed to troubleshoot failed authz requests and incident response.  
[Comment from Arvind: This should be a central metric. No?]
 






-- Main.AnandPadmanabhan - 16 Mar 2009 - comments
-- Main.ArvindGopu - 05 Dec 2008 - comments, edits
-- Main.MineAltunay - 11 Nov 2008