%META:TOPICINFO{author="PoHsiangChiu" date="1222108451" format="1.1" reprev="1.15" version="1.15"}%
%META:TOPICPARENT{name="OSGIndividualEffortReports"}%
---+!! Effort reports from Barnett Chiu

%TOC%

<!-- * Set NAVY = <font color="#6666CC"> -->
---++ %NAVY%Period: November 2006%ENDCOLOR%

---+++ Task Description
   * Visited Condor research team for the first time and studied and investigated how some of the Condor internal works and how Condor system can be applied to address scalablity issues faced by current Pilot scheme(s). 
   * Tested Condor-G, Condor glidein mechanims within ATLAS sites. 

---+++ Notes

---++++ General Tasks
   * Investigated and test various Condor daemons and Condor system as a whole and study how they can integrate with Panda system employed by ATLAS. 

---++++ Supportive Study
   * More familarity with Python and Linux in generral 

---++ %NAVY%Period: December 2006%ENDCOLOR%

---+++ Documents

   1 The initial _PilotFactory_ proposal is located [[http://www.usatlas.bnl.gov/twiki/bin/view/AtlasSoftware/PilotFactoryPlan][here]]. 
   1 Descriptions on _schedd-based glidein_ is [[http://www.usatlas.bnl.gov/twiki/bin/view/AtlasSoftware/ScheddGlidein][here]]. 

Note that these pages above are subject to frequent updates.

---+++ Task Description

   * Proposal for _PilotFactory_ implementation. 
   * Proposal for _schedd-based_ glidein targeted to increase Pilot submission rate. 
   * Proposal for a new Pilot scheme, combining current Pilot with Condor [[http://www.cs.wisc.edu/condor/manual/v6.8/3_1Introduction.html][startd]]; the new Pilot scheme is targeted for increasing Pilot execution. 
   * OSG Work Load Management meeting at UTA. For more information, please visit [[http://www.uta.edu/physics/meetings/hep/osg/12072006/index.html][OSG WMS Workshop]] 

---+++ Notes

---++++ Supportive Study
   * More familiarity with Perl, shell scripts, XML, web Technologies, and Linux in general. 

---++ %NAVY%Period: January 2007%ENDCOLOR%

---+++ Task Description

   * Implemented and tested _schedd-based glidein_ mechanism within ATLAS sites. 
      * Sample [[http://www.cs.wisc.edu/~pleiades/][schedd-related binaries]] are available on the server at University of Wisconsin at Madison; note that these binaries are currently for temporary use and therefore are subject to updates. 
   * Configured _glidein_ tarball server for the use within ATLAS sites. 

---+++ Notes

---++ %NAVY%Period: Feburary 2007%ENDCOLOR%

   * Modified schedd-based glidein code to allow for the user to customize the glideins. 
   * Developed tools (programs in shell scripts) for general testing and debugging on glideins. 

---+++ Notes

---++++ Supportive Study

   * Condor schedd-related configurations, startd policies, match-making algorithms and other features. 
   * Globus Toolkit 

---++ %NAVY%Period: March 2007%ENDCOLOR%

   * OSG Work Load Management meeting at UCSD. Please visit: [[http://twiki.grid.iu.edu/twiki/bin/view/VO/OSGWorkloadManagementUCSD20070308][OSG WMS Meeting Page]] 
   * Modified scheduler glidein code to support multiple schedulers with single glidein request 
   * Started working on integration of [[http://svn.tjweb.org/TestPilot][TestPilot]] module and schedd-glidein. [note]: !TestPilot is a program for pilot submissions, scheduling, monitoring and so on. 
   * Started reading and testing [[http://home.fnal.gov/~sfiligoi/glideinWMS/][glideinWMS]] codes. 

---+++ Notes

---++++ Supportive Study

   * System programming in Python 
   * Condor startd policy and security features. 

---++ %NAVY%Period: April 2007%ENDCOLOR%

   * Condor scheduler glidein testing and updates. 
   * Applied AutoPilot (pilot submission and monitoring modules) to scheduler glidein 
   * Tested on administrative issues of Condor system, especially those related to feasibility of Condor scheduler glidein scheme. 
   * Worked on programs that facilitate Condor job submissions. 

---++ %NAVY%Period: May 2007%ENDCOLOR%

   * Start implementing PilotFactory by combining Condor scheduler glidein with autopilot; prototype done. 

---+++ Notes

   * Generic PilotFactory consists of a general program launcher (logic based on condor_glidein command in Condor) and several modules in Autopilot responsible for submissions. 

---++++ Supportive Study

   * System programming in Python 

---++ %NAVY%Period: June 2007%ENDCOLOR%

   * Tested and enhanced !PilotFactory prototype 
   * Tested Condor-C pilot job submissions with scheduler glidein. 

---+++ Notes

   1 That a script works in shell environment does not guarantee the same script will work perfectly well in a Condor scheduler. Condor's scheduler works directly with OS's kernel, which is less lenient on script's format. In other words, if a job is submitted via Condor-C and remotely executed in Condor's Scheduler Universe, the script syntax and format needs to conform to what the kernel on the remote machine would expect. For example, *#!/bin/sh* must be located on the first line of the script being submitted as a Condor-C job; otherwise, user will only see the job being put to idle state indefinitely without further reasons given by Condor. 

---++ %NAVY%Period: July 2007%ENDCOLOR%

   * Tested and enhance [[http://www.usatlas.bnl.gov/twiki/bin/view/AtlasSoftware/PilotFactoryPlan][PilotFactory]] modules. 
   * Document and rewrite portions of the !AutoPilot codes to facilitate testing and maintenance. 
   * Tested Condor-C with two major test cases: 
      1 Submit scheduler and target scheduler are on the same FS. 
      1 Submit scheduler and target scheduler are not on the same FS 

---++ %NAVY%Period: August 2007%ENDCOLOR%

   * Modified schedd-based gldiein code to avoid creations of unlimited job directories on gatekeeper (see note 1). 
   * Set up a cron job with a program that submits test Panda jobs to be picked up by pilots submitted from !PilotFactory. 
   * Modified !PilotFactory codes for a better user interface. 
   * Updated documentation on [[http://www.usatlas.bnl.gov/twiki/bin/view/AtlasSoftware/ScheddGlidein][scheduler glidein]]. 

---+++ Notes

   1 In older version of Condor, when schedd fails to run a job (as a result of errors in the executable) in local universe, it will create another directory and retry it again. Recurring of this process would create indefinite amount of unnecessary directories. This problem has been resolved in v6.9. 

---++ %NAVY%Period: September 2007%ENDCOLOR%

   * Tested pilot submissions with [[http://home.fnal.gov/~sfiligoi/glideinWMS/][glideinWMS]], a structured startd-based glidein submission software developing in Fermi Lab. 
   * Tested Condor-PBS job submission interface (i.e. Condor's GAHP wrapper on PBS) in order for scheduler glideins to submit jobs to nodes managed by PBS. 

---++ %NAVY%Period: October 2007%ENDCOLOR%

   * Set up Condor schedd glideins on PBS managed pool in preparation for performance on Condor-PBS job submissions. 
   * Added new functionalities to !PilotFactory (e.g. functions for evaluation of optimal glidein selection). 
   * Researched on adaptive clustering algorithms that could be applied to grid scheduling and match-making between user jobs and resources (e.g. worker nodes managed by Globus and native batch system). 
   * Modified and updated parts of !AutoPilot Code. 

---++ %NAVY%Period: November 2007%ENDCOLOR%

   * Extended !AutoPilot with functionalities of Condor-C- and Codnor-to-PBS-based pilot submission in order to support schedd glideins (dynamically deployed Condor schedd). 
   * Extended !AutoPilot with monitoring functions for schedd glideins. 
   * Rewrote [[http://www.usatlas.bnl.gov/twiki/bin/view/AtlasSoftware/PilotFactory.html][Pilot Factory]] and [[http://www.usatlas.bnl.gov/twiki/bin/view/AtlasSoftware/ScheddGlidein.html][Schedd Glidein]] documentations and included instructions on glidein setups and Pilot Factory startup. 

---++ %NAVY%Period: December 2007%ENDCOLOR%

   * Extended Pilot Factory to support running pilotScheduler, a pilot submission program, locally on submit host and sending pilots in Condor-C via schedd glidein to native schedd on the headnode. 
   * Continued on improving Pilot Factory programs including coding style and modularity. 
   * Testing and debugging glidein monitoring. 
   * Testing on both single glidein monitoring and monitoring multiple schedds (including glideins) simultaneously on the same submit host. 

---++ %NAVY%Period: January 2008%ENDCOLOR%

   * Debugged and tested pilot submitter in !AutoPilot, specifically on functions that perform parsing Condor log files and handling job state transition. 
   * Included functionalities to pilot submitter to detect an instance when schedd glidein should fail. As a note, since schedd glidein is dynamically installed on site's headnode, it is subject to removal just like other running processes either when hitting walltime limit enforced by site's policy or whenever headnode is down due to maintenance or other unexpected reasons. 
   * Completed a glidein monitoring script that constantly overlooks two codependent components: (1) Condor daemons on submit host (2) glideins running on remote hosts (e.g. site's headnode). The script restarts Condor when it is down and submits a new glidein request when glidein process is killed, maintaining an instance (configurable) of schedd glidein per site's headnode. 

---++ %NAVY%Period: February 2008%ENDCOLOR%

   * Finalized all essential components for the pilot submitter (from !AutoPilot) to support pilot submissions with glidein 
   * Designed and implemented a general job submitter, decoupled from AutoPilot, to facilitate future development for workload management project. For convenience, denote this general job submitter as "Generator" in the following context. 
   * The Generator mentioned above is implemented as a base class, which can submit arbitrary jobs continuously and periodically with a configurable queue depth. A new version of pilot submitter, independent from AutoPilot, inherits from this Generator. 
   * This Generator is made from the following reusable components: (1) !CondorClient: containing a simple API (or wrapper) for Condor client tools such as condor_status, condor_q ... etc and parsers and functions handling outputs from these client commands. (2) !CondorGlidein: containing wrapper methods of schedd/startd glidein script and methods interacting with glideins; with this module, glidein request can be made in Python context. (3) !GlideinFactory: a glidein monitoring module (4) !SubmitFileMaker: a module that makes Condor submit file 

---++ %NAVY%Period: March 2008%ENDCOLOR%

   * Added configuration parser class to the new version of Pilot Factory (independent from !AutoPilot). 
   * Improved Pilot Factory performance by changing the way of its interactions with Condor 
   * The new version Pilot Factory codes, tentatively versioned v0.5, is available [[http://www.usatlas.bnl.gov/svn/panda/pilotfac/tags/v0_5/][here]] 

   * Research on Dynamic Virtual Clustering using Reinforcement Learning with three phases (as a further extension and application of schedd glidein, pilot factory, and glidenWMS): 
      1 Formulate overlayed virtual clusters by acquiring compute resources from participating sites, in which Condor startd glideins are installed by submission of glidein requests to schedd glideins. End result of this step will provide the user compute nodes (a virtual cluster) from various sites for a certain amount of time in addition to her own available resources at local site. 
      1 With virtual clusters formed, schedule jobs to these compute nodes with a goal to maximize their overall throughput. This is where majority of RL algorithms come into play. The goal of this step is to obtain an optimal policy of job scheduling with the following possible "actions" in scheduling context: (1) regular job assignment to free slots (2) job preemption (3) oversubscription (i.e. assign jobs that require multiple job slots or CPUs to those compute nodes with less job slots available) (4) job spanning (5) job forwarding 
      1 Group "similar resources" together from these compute nodes using adaptive clustering algorithm in order to so that match-making process can be performed with respect to representative machines (cluster centers) rather than all available machines. The goal of this step is to understand machine attributes and their performance from various sites and increase the efficiency of match-making process. Two different compute resources (with different hardware configurations) can be considered "similar" in terms of their similar turnaround times on certain jobs. 

---+++ Notes
   1 A virtual cluster is essentially a cluster made up of virtual machines and is usually dynamic in nature as opposed to dedicated clusters. A compute node with Condor startd running is a virtual machine where an abstraction of machine's hardware configuration and multiple job slots are presented to users. Glidein is essentially a dynamically-installed and distributed Condor startd; therefore, installing and running glideins on a site is conceptually equivalent to formulating an overlayed virtual cluster from that site. 

---++ %NAVY%Period: April 2008%ENDCOLOR%

   * Continued to improve Pilot Factory codes, which involve schedd glidein script and pilot submitter module; the latest working version (version 0.6) can be found [[http://www.usatlas.bnl.gov/svn/panda/pilotfac/tags/v0_6/][here]] 
   * Continued the research on Dynamic Virtual Clustering (aka DVC) with machine learning mechanism as described previously in March's section. 
   * Started to build a simulator to investigate the specifics of DVC and how it interacts with the Grid. 

---++ %NAVY%Period: May 2008%ENDCOLOR%

---++ %NAVY%Period: June 2008%ENDCOLOR%

---++ %NAVY%Period: July 2008%ENDCOLOR%
   * Updated !PilotFactory [[http://www.usatlas.bnl.gov/svn/panda/pilotfac/tags/v0_7/][version 0.7]] 
   * Continued on the research and development on !DVC based on Condor's glidein mechanism 
   * Added new module (panda_logger) into !AutoPilot for reporting events during pilot submission to Panda's monitoring page. 
---++ <font>%NAVY%Period: August 2008%ENDCOLOR%</font>
   * Enchnaced schedd glidein code (used in !PilotFactory) to allow for sending startd-glidein requests via schedd glidein. This achieves an uniform interface for glidein-requests (i.e. no GRAM activities involved in glidein setups and startups) 
   * A demo for the pilots submitted via !PilotFactory can be found [[http://gridui06.usatlas.bnl.gov:25880/server/pandamon/query?tp=queue&id=BNL_GLIDE_1-condor][here]]; specifically, please click on the tag: <font color="mediumblue" class="WYSIWYG_COLOR">%BLUE%<font color="mediumturquoise" class="WYSIWYG_COLOR">look for pilots on this queue</font>%ENDCOLOR%</font>%BLUE%%ENDCOLOR%, to examine the pilots on the glidein queue: BNL_GLIDE_1-condor 

-- Main.PoHsiangChiu - 28 Jan 2007
