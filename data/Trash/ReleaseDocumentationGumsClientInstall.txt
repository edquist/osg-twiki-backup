%META:TOPICINFO{author="DerekWeitzel" date="1308258137" format="1.1" reprev="1.24" version="1.24"}%
%META:TOPICPARENT{name="InstallConfigureAndManageGUMS"}%
%DOC_STATUS_TABLE%
---+!! GUMS Client Install
%TOC%

---++ About this Document

The GUMS Client package provides the capability to remotely administer GUMS from a node other than the server. It also provides the capability of retrieving any information available via the =gums=, =gums-host= and =gums-service= commands.


---++ Requirements
The installation of the GUMS Client requires
   * [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/PacmanInstall][Pacman]]
   * [[https://twiki.grid.iu.edu/bin/view/Documentation/GUMS][GUMS Host]]

A couple of key items to note:
   * The =gums-client= package *does not* have to be installed as root.
   * You will need to be defined in GUMS as belonging to the 'admin' group.
     The DN of your certificate identifies you to GUMS (from the proxy).
   * You will need a user certificate and a grid proxy to access
     GUMS remotely just as you do on the server when running command line
     processes.
   * Both =voms-proxy-init= and =grid-proxy-init= are available in the client package.
  
---++ GUMS Client Installation instructions

   1. Download and install Pacman (if not already available); see [[PacmanBestPractices][Pacman Info]]. You will use pacman to install the GUMS client.
   1. Source the pacman setup script in the pacman installation directory.
   <pre class="screen">
%UCL_PROMPT% source path/to/pacman/setup.sh    </pre>
   1. Create a directory for the gums-client and 'cd' into that directory. We recommend that you name the directory =gums-client=.
   1. Set the VDT_GUMS_HOST variable as:
   <pre class="screen">
%UCL_PROMPT% export VDT_GUMS_HOST=%RED%&lt;YOUR_GUMS_SERVER>%ENDCOLOR%  </pre>
   This will set the variables within =$VDT_LOCATION/gums/config/gums-client.properties= to point to %RED%your GUMS server%ENDCOLOR% when "pacman -get" is run.
   1. Retrieve the gums-client package and it's dependencies from the VDT pacman cache. 
   <pre class="screen">
%UCL_PROMPT% pacman -get http://vdt.cs.wisc.edu/%VDT_CACHE%:GUMS-Client </pre>
   You will be asked if you trust the VDT caches, answer =yall=.
   1. Source the VDT
   <pre class="screen">
%UCL_PROMPT% source $VDT_LOCATION/setup.sh</pre>
   1. Run the CA setup script
   <pre class="screen">
%UCL_PROMPT% vdt-ca-manage setupca --location local  --url osg </pre>
   1. Enable the fetch-crl and vdt-update-certs scripts in cron 
   <pre class="screen">
%UCL_PROMPT%  vdt-control --non-root --on fetch-crl vdt-update-certs </pre>
   1. So you do not need to wait for the cron grab the CRLs for the CAs by hand
    <pre class="screen">
%UCL_PROMPT% $VDT_LOCATION/gums-client/fetch-crl/share/doc/fetch-crl-2.8.5/fetch-crl.cron </pre>


---++ Validation of Operation

The installation is now complete.  You should now be able to execute any of the command line tools available in =$VDT_LOCATION/gums/bin= using a grid-proxy to identify yourself:
   * gums - administrator functionality (user proxy)
   * gums-host - basic functionality (host certificate + key)
   * gums-hosts-cron - cron job for gums-host  (host certificate + key)
   * gums-service - administrator functionality (usercert + key)

%NOTE% You must be given read access in GUMS.   Contact your administrator if you do not have it.

---+++Simple Test  of the <nop>GUMS Client
For a simple test, you could generate a <i>grid-mapfile</i> listing remotely as
follows:

   1. Generate a grid proxy for yourself
   <pre class="screen">
%UCL_PROMPT% source $VDT_LOCATION/setup.sh
%UCL_PROMPT% grid-proxy-init 
Your identity: /DC=org/DC=doegrids/OU=People/CN=Derek Weitzel 285345
Enter GRID pass phrase for this identity:
Creating proxy ............................... Done
Your proxy is valid until: Thu Jun 16 02:41:59 2011 </pre>
   1. To generate a grid-mapfile:   
   <pre class="screen">
%UCL_PROMPT% gums generateGridMapfile %RED%"/DC=org/DC=doegrids/OU=Services/CN=cmssrv09.fnal.gov"%ENDCOLOR%  </pre>
   Replace the %RED%DN%ENDCOLOR% in the above command.  The DN is a CE that is registered in the GUMS configuration.
   The output above will go to stdout. On all the command line scripts,
   the '--help' argument will provide more detail on the options.





---++ Troubleshooting
---+++!! Connection failing
Vierify the =gums-client.properties= file points to your GUMS server.

View =$VDT_LOCATION/gums/config/gums-client.properties= and make sure the =gums.location= and =gums.authz= variable to point to your GUMS server. It is populated by default to the value of the =$VDT_GUMS_HOST= variable that was set during installation.  Here is an example:

<pre class="file">
  gums.location=https://gratiax31.fnal.gov:8443/gums/services/GUMSAdmin
  gums.authz=https://gratiax31.fnal.gov:8443/gums/services/GUMSAuthorizationServicePort </pre>



<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = DerekWeitzel

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = VO

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = RobertEngel
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%

DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = TerrenceMartin 
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %YES%
############################################################################################################

############################################################################################################
-->

%META:TOPICMOVED{by="JohnWeigand" date="1181312706" from="Documentation.GumsClientInstall" to="Integration/ITB_0_7.GumsClientInstall"}%
