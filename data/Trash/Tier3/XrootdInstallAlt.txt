%META:TOPICINFO{author="MarcoMambelli" date="1271098773" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="WebHome"}%
---+!! <nop>%TOPIC%
%TOC%

---++ Introduction
Xrootd is a high performance network storage system widely used in high energy physics experiments such as ATLAS and ALICE. The underlying Xroot data transfer protocol provides highly efficient access to ROOT based data files.  This page provides instructions for a simple, relatively small-scale xrootd storage system consisting of:
   * One redirector node
   * One or more data server node(s)
More advanced deployment options including larger scale systems (larger than a few TB per data server) are covered below.


---++ Getting Started

---+++ Identify hosts and roles
   * Identify the redirector node. 
   * Identify the data server(s)

---+++ Check firewall rules
It's important to make sure your firewall(s) aren't blocking the ports that xrootd uses for communication.  Otherwise, hard to diagnose errors and failures may occur.  Xrootd uses the following ports:

|*Module Name*|*Port Number*| *Protocol*|
|!Xrootd redirector|1094|tcp|
||2094|tcp|
||1213|tcp|
|!Xrootd data server| opens random port selected by OS;|tcp|


---+++ Create xrootd user account
If you manage your accounts centrally with LDAP or replicating system files, make sure that a non-privileged user for Xrootd (e.g _xrootd_) exists and has a login shell.

If you create the xrootd user (e.g _xrootd_) locally then you can use the following commands (*this user must have a login shell*):
<pre class="screen">
#/usr/sbin/groupadd xrootd 
#/usr/sbin/useradd --gid xrootd xrootd
</pre>

---+++ Install Pacman
Pacman is a package management program used to install most of OSG software.
ReleaseDocumentation.PacmanInstall describes how to install Pacman.
You may select  =/opt/pacman= as the installation directory.<br>
%TWISTY{
mode="div"
showlink="Show an example of how to install Pacman..."
hidelink="Hide"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
<pre class="screen">
cd /opt
wget http://atlas.bu.edu/~youssef/pacman/sample_cache/tarballs/pacman-3.29.tar.gz
tar --no-same-owner -xzvf pacman-3.29.tar.gz
cd pacman-3.29
source setup.sh
cd ..
ln -s pacman-3.29 pacman
</pre>
%ENDTWISTY%
Once Pacman is installed you can  =source /opt/pacman/setup.sh= and you are ready to install xrootd using Pacman.

---++ Installing and configuring the redirector
Decide what area you would use as a _storage_path_ and _storage_cache_ (e.g /storage/data and /storage/cache). You may choose a separate partition but for the redirector we recommend to just create a directory:
   * /storage/cache is the name of a service directory for the redirector (hosts actual data on data servers). Files under_cache_ are not visible to users.
   * /storage/path on the redirector is the name of a directory that contains references to actual files in the whole Xrood system. Xrootd clients have access to storage_path.
<pre class="screen">
mkdir -p /storage/data
mkdir -p /storage/cache
</pre>

Next create and change to an installation directory. This directory will later be used to get the !GridFTP-Xrootd package  from the %CACHE% cache.
<pre class="screen">
mkdir -p /opt/xrootd/
cd /opt/xrootd/
</pre>

You will need to install !Xrootd package from the %CACHE% cache. 
Pacman will ask whether you want to trust the cache (=yall=) and whether you want to accept the license (=y=).
<pre class="screen">
pacman -get %CACHE%:Xrootd
</pre>

Update the environment and run the post installation script (It is OK the the result is that there is nothing to do):
<pre class="screen">
source setup.sh
vdt-post-install
</pre>

You can verify that the version installed is the version you expected by executing =vdt-version= (man vdt-version to get more info). 
<pre class="screen">
vdt-version
</pre>

This completes the installation part of the Xrootd. Next step is to configure  !Xrootd on redirector. The command below uses the defaults chosen in these instructions, you may need to change them:
   * $VDT_LOCATION is a directory of Xrootd installation
   * xrootd is the user name of the non-privileged user that runs Xrootd 
   * /storage/cache and /storage/path are the directories created above
   * PUBLIC_SPACE_SIZE will be defined and used in the data server configuration. On the redirector set $PUBLIC_SPACE_SIZE to 0 and don't worry about it.

<pre class="screen">
cd /opt/xrootd
source setup.sh
export PUBLIC_SPACE_SIZE=0
$VDT_LOCATION/vdt/setup/configure_xrootd  --server y  --user xrootd  --this-is-xrdr --xrdr-storage-path /storage/path   --xrdr-storage-cache /storage/cache --public-cache-size 0
</pre>

Hopefully all steps completed successfully and =vdt-control -list= shows the list of available services:
<pre class="screen">
#vdt-control --list
Service                 | Type   | Desired State
------------------------+--------+--------------
xrootd                  | init   | enable
</pre>

---++ Installing and configuring the data server(s)
These instruction must be executed on each of the data servers.

Decide what area you would use as a _storage_path_ and _storage_cache_ (e.g =/storage/data= and =/storage/cache=).For the data servers we recommend to create separate partition (anyway two directories will work). 
   * /storage/cache hosts actual data on data servers. Files under_cache_ are not visible to users.
   * /storage/path is the name of a directory that contains symbolic links to the actual files in cache. Xrootd clients have access to storage_path.
You will probably:
   * choose your disk or raid array
   * create a partition, e.g. using =fdisk= 
   * format it, e.g. using ext3 file system
   * mount the disk in your main file system, e.g. adding to =/etc/fstab= a line like:<pre class="screen">
/dev/sda5               /storage                ext3    defaults        1 2
</pre>
   * create the directories<pre class="screen">
mkdir -p /storage/path
mkdir -p /storage/cache
</pre>
A more in depth discussion is below in [[#Optimizing_disk_partitions_for_p][Optimizing disk partitions for performance]].

Next create and change to an installation directory. This directory will later be used to get the !GridFTP-Xrootd package  from the %CACHE% cache.
<pre class="screen">
mkdir -p /opt/xrootd/
cd /opt/xrootd/
</pre>

You will need to install !Xrootd package from the %CACHE% cache. 
Pacman will ask whether you want to trust the cache (=yall=) and whether you want to accept the license (=y=).
<pre class="screen">
pacman -get %CACHE%:Xrootd
</pre>

Update the environment and run the post installation script (It is OK the the result is that there is nothing to do):
<pre class="screen">
source setup.sh
vdt-post-install
</pre>

You can verify that the version installed is the version you expected by executing =vdt-version= (man vdt-version to get more info). 
<pre class="screen">
vdt-version
</pre>

This completes the installation part of the Xrootd. Next step is to configure  !Xrootd redirector. The command below uses the defaults chosen in these instructions, you may need to change them:
   * $VDT_LOCATION is a directory of Xrootd installation, 
   * xrootd is the user name of the non-privileged user that runs Xrootd 
   * redirector.yourdomain is the name (FQDN) of the redirector host 
   * /storage/cache and /storage/path are the directories created above
   * $PUBLIC_SPACE_SIZE is the size of storage area (in GB) allocated for public use (is not reserved with a particular space token), e.g. 90% of the size of your storage partition (=df /storage=). If you have only public use (no space token) Xrootd still needs one block per file in =/storage/path=. 10% of the storage partition will be plenty in all normal cases. E.g. if your data disk is 1TB, PUBLIC_SPACE_SIZE should be  90% of 1024, 921. It can be bigger if you plan on having big files.

<pre class="screen">
cd /opt/xrootd
source setup.sh
export PUBLIC_SPACE_SIZE=921
$VDT_LOCATION/vdt/setup/configure_xrootd  --server y  --user xrootd  --xrdr-host  redirector.yourdomain  --xrdr-storage-path /storage/path   --xrdr-storage-cache /storage/cache  --public-cache-size $PUBLIC_SPACE_SIZE
</pre>

#storage path - storage data

Hopefully all steps completed successfully and =vdt-control -list= shows the list of available services:
<pre class="screen">
#vdt-control --list
Service                 | Type   | Desired State
------------------------+--------+--------------
xrootd                  | init   | enable
</pre>

---++ Testing your system
 Login on redirector node as an ordinary user.

<pre class="screen">cd /opt/xrootd 
source setup.sh 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$VDT_LOCATION/xrootd/lib 
export LD_PRELOAD=$VDT_LOCATION/xrootd/lib/libXrdPosixPreload.so 
echo &ldquo;This is a test&rdquo; &gt;/tmp/test 
cp /tmp/test xroot://gc1-xrdr:1094///xrootd/data/test 
cp xroot://gc1-xrdr:1094///xrootd/data/test /tmp/test1 
diff /tmp/test1 /tmp/test 
</pre>

For example:
<pre class="screen">cp /tmp/test xroot://gc1-xrdr.yourdomain.org:1094//xrootd/data/test </pre>


---++ Advanced installation options
---+++ Optimizing disk partitions for performance
To maximize the performance of your xrootd installation, you should place the storage cache and storage path on separate partitions.  The partition used for the storage cache should be optimized for the type of files used by scientific applications that will utilize the xrootd installation.  In general, you can use the defaults for =mke2fs= since that will tend to optimize for large files.

The partition used for the storage path should be optimized to hold a large number of inodes and files.  Since the storage path is used to hold symlinks to the actual data files, the file system should have a large number of inodes since each symlink will require an inode to hold an entry for the symlink.  In addition, the size of the data blocks used by the filesystem on the partition should be made as small as possible.  Since symlinks will typically consume an entire block regardless of the size of data block, a small data block size results in less space being wasted.  For an ext3 file system, passing =-b 1024= to =mke2fs= will set the block size to 1kb per block which is the smallest allowed block size.
  

---+++ Adding a data server


---++ References



%BR%



-- Main.RobGardner - 05 Apr 2010
