%META:TOPICINFO{author="DerekWeitzel" date="1306178447" format="1.1" version="1.5"}%
%META:TOPICPARENT{name="WebHome"}%
%LINKCSS%

---+!! !GlideinWMS VO Frontend Installation
%DOC_STATUS_TABLE%
%TOC{depth="3"}%

---+ About This Document

This document describes how to install the Glidein Workflow Managment System (!GlideinWMS) VO Frontend for use with the OSG glidein factory.  This software is the minimum requirement for a VO to use glideinWMS.

This document is assumes expertise with Condor and familiarity with the glideinWMS software.  It *does not* cover anything but the simplest possible install.   Please consult the [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/install.html][Glidein WMS reference documentation]] for advanced topics, including non-=root=, non-RPM-based installation.

This document covers three primary components of the frontend:
   * *User Pool Collectors*: A set of =condor_collector= processes.  Pilots submitted by the factory will join to one of these collectors to form a Condor pool.
   * *User Pool Schedd*: A =condor_schedd=.  Users may submit Condor vanilla universe jobs to this schedd; it will run jobs in the Condor pool formed by the *User Pool Collectors*.
   * *Glidein Frontend*: The frontend will periodically query the *User Pool Schedd* to determine the desired number of running job slots.   If necessary, it will request the factory to launch additional pilots.

This guide covers installation of all three components on the same host: it is designed for small to medium VOs (see the Hardware Requirements below).  Given a significant, large host, we have been able to scale the single-host install to 10,000 running jobs.

%ATTACHURL%/simple_diagram.png

---+ How to get Help?

To get assistance please use [[ReleaseDocumentation.HelpProcedure][this page]]. 

---+ Requirements
 
---++ Hardware requirements

The Glidein WMS VO Frontend has the following requirements:
   * *CPU*: Four cores, preferably no more than 2 years old.
   * *RAM*: 3GB plus 2MB per running job.  For example, to sustain 2000 running jobs, a host with 5GB is needed.
   * *Disk*:  30GB will be plenty sufficient for all the binaries, config and log files related to glideinWMS.  As this will be an interactive submit host, plan enough disk space for your users' jobs.  Depending on your workflow, this might require 2MB to 2GB per job in a workflow.
   * *Network*:  The VO frontend must have reliable network connectivity, be on the public internet (no NAT), and preferably with no firewalls.  Each running pilot requires 5 outgoing TCP ports.  Incoming TCP ports 9618 to 9660 must be open.
      * For example, 2000 running jobs require about 10,100 TCP connections.  This will overwhelm many firewalls; if you are unfamiliar with your network topology, you may want to warn your network administrator.

---++ Operating system

This has been tested on SL5.5 and !CentOS 5.5, x86_64 architecture.  Any RHEL-5.5 clone is supported.  Other platforms are not supported.

---++ Required software
Much of the required software can be found in [[http://fedoraproject.org/wiki/EPEL][EPEL]].  To install
<pre class="rootscreen">
%UCL_PROMPT_ROOT% rpm -Uvh http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
</pre>

The required software is listed below.  The items marked with =(yum)= will be automatically installed when the !GlideinWMS rpm is installed.
   * Condor v7.5 or later
   * OSG Client (without Condor)
   * javascriptRRD v0.5 or later with flot (a pure Javascript plotting library)
   * =(yum)= Httpd server
   * =(yum)= Python 2.3.4 or later with !M2Crypto
   * =(yum)= Perl with Time::HiRes
   * =(yum)= RRD Tools
   

Condor is available as RPM (via Yum, for some OS/architecture combinations) or as TAR file.
   * Check if you have condor already installed<pre class="screen">$ which condor
/usr/sbin/condor
$ condor -version
$CondorVersion: 7.5.5 Jan 26 2011 BuildID: 308936 $
$CondorPlatform: X86_64-LINUX_x86_64_rhap_5 $</pre>
   * If you have no Condor, [[http://twiki.grid.iu.edu/bin/view/Tier3/CondorRPMInstall][install RPM distribution of Condor]] (this requires root and a supported platform). Here in brief the yum commands. 
%TWISTY{%TWISTY_OPTS_OUTPUT%}%
<pre class="rootscreen">
%UCL_PROMPT_ROOT% cd /etc/yum.repo.d/
%UCL_PROMPT_ROOT% wget http://www.cs.wisc.edu/condor/yum/repo.d/condor-development-rhel5.repo
%UCL_PROMPT_ROOT% yum install condor.x86_64
</pre>
%ENDTWISTY%
   * If you cannot use the recommended yum installation, the [[http://twiki.grid.iu.edu/bin/view/Tier3/WebHome][OSG Tier 3 Web]] explains different possible [[http://twiki.grid.iu.edu/bin/view/Tier3/ModulesIntro#Phase_2_Quick_guide_for_setting][installations of Condor]]. [[http://www.cs.wisc.edu/condor/downloads-v2/download.pl][Here]] is the download page for Condor. 

Install OSG Client 1.2 without Condor. Condor included with OSG Client is v7.4, not sufficient for the VO Frontend
   * Set these environment variable to point to your Condor installation. For the RPM installation:<pre class="screen">%UCL_PROMPT% export VDTSETUP_CONDOR_LOCATION=/usr/
%UCL_PROMPT% export VDTSETUP_CONDOR_CONFIG=/etc/condor/condor_config
</pre>
   * Then [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/ClientInstallationGuide][install OSG Client]]
<!--   * This is in brief:<pre class="rootscreen">
%UCL_PROMPT_ROOT% export VDTSETUP_CONDOR_LOCATION=/usr   # &lt;Path to Condor&gt;
%UCL_PROMPT_ROOT% export VDTSETUP_CONDOR_CONFIG=/etc/condor/condor_config # &lt;Path to Condor configuration file&gt;
%UCL_PROMPT_ROOT% pacman -get http://software.grid.iu.edu/osg-1.2:client
%UCL_PROMPT_ROOT% . ./setup.sh 
%UCL_PROMPT_ROOT% vdt-ca-manage setupca --location local --url osg
%UCL_PROMPT_ROOT% vdt-control --enable fetch-crl vdt-update-certs
%UCL_PROMPT_ROOT% vdt-control --on
</pre>
-->

<!--
Apache httpd is probably already on your system or easily available.  
   * On RHEL/SL you can install it via yum and enable with chkconfig:<pre class="rootscreen">
%UCL_PROMPT_ROOT% yum install httpd
%UCL_PROMPT_ROOT% chkconfig --add httpd
%UCL_PROMPT_ROOT% chkconfig httpd on</pre>
   * [[http://www.stllinux.org/meeting_notes/2001/0719/tux/intro.html][TUX]] HTTP server is another possibility

Python 2.x interpreter, version 2.3.4 or above (no Python 3). It is probably already on your system or easily available.
   * Check if you have it<pre class="screen">%UCL_PROMPT% python -V
Python 2.4.3</pre>  
   * On RHEL/SL you can install it via yum (=yum install python=)
   * Else it is available from [[http://www.python.org/download/][python.org]]
The [[http://freshmeat.net/projects/m2crypto][M2Crypto python library]] v0.17 or later. It is probably already on your system.
   * Check using <pre class="screen">%UCL_PROMPT% python 
Python 2.4.3 (#1, Sep 10 2009, 18:34:35) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-46)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import M2Crypto
>>> M2Crypto.version
'0.16'</pre>
   * On RHEL/SL you can install it via yum (=yum install m2crypto=)
   * Expand here to see the instructions to install it from scratch
%TWISTY{%TWISTY_OPTS_OUTPUT%}%
If your system does not come with m2crypto package, or you do not can/want install it as root, compile it from source as the glidein factory user.
The source code can be downloaded from: http://chandlerproject.org/Projects/MeTooCrypto#Downloads

The build process is very easy:<pre class="rootscreen">
#  python setup.py build
#  python setup.py install --root %lt;base dir> 
</pre>
Finally add !M2Crypto site-packages into the =PYTHONPATH=, possibly in the =.profile=, =.bashrc= and/or in the =.cshrc= files.
The exact path is system specific. On a 32bit system with python 2.3.x it will look like this:<pre class="file">
    export PYTHONPATH=$PYTHONPATH:<base dir>/usr/lib/python2.3/site-packages/
</pre>
 %ENDTWISTY%
<!--
The Perl interpreter and the Perl module =Time::HiRes= are required by the RRDTools. They are probably already on your system.
   * Check typing <pre class="screen">%UCL_PROMPT% perldoc Time::HiRes
x86_64-linux-thread-muUser:Contributex86e64-linux-thread-multi::Time::HiRes(3)
...</pre>

The [[http://oss.oetiker.ch/rrdtool/][RRDTool package]] v1.2.18 or later and the rrdtool-python bindings.
   * You may have it already on your system or should be able to install it via yum after adding standard add-on repositories such as [[http://fedoraproject.org/wiki/EPEL][EPEL]] ([[http://fedoraproject.org/wiki/EPEL/FAQ#howtouse][EPEL repo Install instructions]]): <pre class="screen">%UCL_PROMPT_ROOT% yum install rrdtool-python</pre>
   * Other RPM packages are available from http://packages.sw.be/rrdtool/ 

-->

The [[http://sourceforge.net/projects/javascriptrrd/][javascriptRRD]] package v0.5 or later with [[http://code.google.com/p/flot/][flot]] (a pure Javascript plotting library) contains the javascript libraries needed by the monitoring. 
   * The RPM is available [[http://t2.unl.edu/store/repos/nebraska/5/nebraska/x86_64/javascriptrrd-0.5.0-3.noarch.rpm][here]]

All other software requirements are defined in the RPM, and will be pulled in at install time.

<!--
   * Else just download the tarball (with flot), and untar it. You will need to point the VO Frontend to this directory.<pre class="rootscreen">
%UCL_PROMPT_ROOT% wget http://sourceforge.net/projects/javascriptrrd/files/javascriptrrd/0.5.0/javascriptrrd-0.5.0-with-flot-0.6.tgz/download
%UCL_PROMPT_ROOT% cd /opt
%UCL_PROMPT_ROOT% tar xzf ~/javascriptrrd-0.5.0-with-flot-0.6.tgz 
</pre>
-->

---++ Users

The RPM distribution of the VO Frontend runs the Glidein Frontend as user =nobody=. This is the user that owns the certificate forwarded to the factory to use for the glideins.
Condor will be installed as =root= and run as =condor= (e.g. via the recommended RPM installation).

<!--
 or as the same user of the frontend (=nobody=).
-->

---++ Certificates

The OSG Client will install the CA certificates and CRL.

The VO Frontend will use two certificates in its communication with the Glidein WMS Factory:
   * Glidein Frontend Host cert - The use of a service or host certificate is recommended. The Frontend will create a proxy from the certificate.
   * User Submitter proxy - This proxy is used to submit the glidein jobs, therefore must be authorized to access to the CEs where jobs are submitted.

<!--
It is possible also to use a single certificate/proxy for both functions. It is also possible to use more than one certificate to submit glidein.
A third certificate, User Pool Collector cert, is used to secure the communication between the User Pool Collector and the User Pool Schedd, two components of the VO Frontend.
-->
Certificates will be in PEM format, a certificate file and a key file. They must be owned by the user running the service (check also that it can access the directory where you stored the certificates) and have the right permission (600).

The host certificate and key needs to be located in /etc/grid-security/hostcert.pem and /etc/grid-security/hostkey.pem.

<!--
The installer will ask for several DNs for GSI authentication. You have the option of using a service certificate or a proxy. These should be created and put in place before running the installer. The following is a list of DNs the installer will ask for:

    * WMS Collector cert/proxy DN
    * User Pool Collector cert/proxy DN
    * User Submitter cert/proxy DN
    * Glidein Frontend Condor cert/proxy DN (cannot use a cert here)

%RED%Some questions:
   * How is that 4 certificates are mentioned while only 2 are used (this is from the VO frontend installation doc)?
   * What means "Glidein Frontend Condor cert/proxy DN (cannot use a cert here)" cert/proxy and cannot use cert means only proxy or this refers to personal/service certs?
%ENDCOLOR%

Note: In some places the installer will also ask for nicknames to go with the DNs. For the most part the name given doesn't really matter. There is one case where is does matter. If you are using privilege separation, then, on the WMS Collector, the nickname for each Glidein Frontend must be the username that you created for the frontend.
Note 2: The installer will ask if these are trusted Condor Daemons. Answer 'y'. 
-->

<!--
When installing the Glidein Frontend you will be presented with a question asking for the directory location for various items. The example below puts many of them in /var. All the directories in /var have to be created as root. Therefore, if you intend on using /var, you will have to create the directories ahead of time.

Note: The web data must be stored in a directory served by the HTTP Server.

Example:

Where will the web data be hosted?: [/var/www/html/glidefactory] /var/www/html/glidefactory

Misc

At some point the installer will prompt you for the OSG VDT Client location or if you want to install it. The installer will install the client for you. (See GlideinWMS Component Install)

When asked if you want OSG_VDT_BASE defined globally? Answer 'y' unless you want to force your users to find and hard code the location.

When asked if you want to enable Match authentication, if you are using Condor 7.1.3 or later, answer 'y' unless you have a reason not to.

%RED%Why not use OSG_LOCATION or VDT_LOCATION but OSG_VDT_BASE?%ENDCOLOR%
-->

---++ Factory access
<!--
Before installing the Glidein WMS VO Frontend you need the information about a [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/factory/index.html][Glidein Factory]] that you can access:
   1 (recommended) OSG is managing a factory at UCSD and you can request access to it
   1 You have another Glidein Factory that you can access
   1 You [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/factory/install.html][install your own Glidein Factory]]
-->

To request access the OSG Glidein Factory you have to send an email to osg-gfactory-support@physics.ucsd.edu providing:
   1 Your Name
   1 The VO that is utilizing the VO Frontend
   1 The DN of the proxy you will use to submit pilots (User Submitter cert DN) and communicate with the Factory.
   1 You can propose a security name that will have to be confirmed/changed by the Factory managers (see below)
   1 A list of sites where you want to run:
      * Your VO must be supported on those sites
      * You can provide a list or piggy back on existing lists, e.g. all the sites supported for the VO. Check with the Factory managers
      * You can start with one single site 
In the reply from the OSG Factory managers you will receive some information needed for the configuration of your VO Frontend
   1 The exact spelling and capitalization of your VO name. Sometime is different from what is commonly used, e.g. OSG VO is "OSGVO".
   1 The host of the Factory Collector: =glidein-1.t2.ucsd.edu=
   1 The DN os the factory, e.g. =/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu=
   1 The factory identity, e.g.: =gfactory@glidein-1.t2.ucsd.edu=
   1 The identity on the factory you will be mapped to. Something like: =username@glidein-1.t2.ucsd.edu=
   1 Your security name. A unique name, usually containing your VO name: =My_SecName=
   1 A string to add in the main factory query_expr in the frontend configuration, e.g. =stringListMember("%RED%VO%ENDCOLOR%",GLIDEIN_Supported_VOs)=. From there you get the correct name of the VO (above in this list).


---+ Installation Procedure
After making sure that you satisfy all the pre-requisites (install all the missing software, prepare accounts and certificates, ...) you can proceed with the installation of Glidein WMS RPM.

---++ Download and install the VO Frontend RPM

The RPM is currently available from [[http://koji.hep.caltech.edu/public/packages/GlideinWMSFrontend/2.5.1/9/noarch/GlideinWMSFrontend-2.5.1-9.noarch.rpm][the glideinWMS project]].  The source RPM is available at [[http://koji.hep.caltech.edu/public/packages/GlideinWMSFrontend/2.5.1/6/src/GlideinWMSFrontend-2.5.1-9.src.rpm][the glideinWMS project]] also.

   1. Download/Install the RPM
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% wget http://koji.hep.caltech.edu/public/packages/GlideinWMSFrontend/2.5.1/9/noarch/GlideinWMSFrontend-2.5.1-9.noarch.rpm
%UCL_PROMPT_ROOT% yum localinstall GlideinWMSFrontend-2.5.1-9.noarch.rpm</pre>
<!--
   %TWISTY{
mode="div"
showlink="Click to show output"
hidelink="Click to hide output"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
   <pre class="screen">
 --11:44:53--  http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/RPMS/GlideinWMSFrontend-2.4.2-2.x86_64.rpm
           => `GlideinWMSFrontend-2.4.2-2.x86_64.rpm'
Resolving www.uscms.org... 131.225.70.20
Connecting to www.uscms.org|131.225.70.20|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 342,901 (335K) [text/plain]

100%[====================================>] 342,901       --.--K/s             

11:44:53 (11.62 MB/s) - `GlideinWMSFrontend-2.4.2-2.x86_64.rpm' saved [342901/342901]
  </pre>
   1. Install the RPM.  During installation, the rpm will check for dependencies.
   <pre class="screen">
rpm -i GlideinWMSFrontend-2.4.2-2.x86_64.rpm</pre>
   %ENDTWISTY%
<!--
-->

   If the install succeeded, then there will be no output from the command.


---+ Configuration Procedure 
After installing the RPM you need to configure the components of the Glidein WMS VO Frontend:
   1. Edit Frontend configuration options
   1. Edit Condor configuration options
   1. Create a Condor grid map file
   1. Reconfigure and Start frontend



---++ Configuring the Frontend

The configuration file is =/etc/gwms-frontend/frontend.xml=.  The next steps will describe each line that you will need to edit if you are using the OSG Factory at UCSD.  The portions to edit are highlighted in red font. If you are using a different Factory more changes are necessary, please check [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/frontend/configuration.html][the VO Frontend configuration reference]].

   1. The VO you are affiliated with. Sometime the whole =query_expr= is provided to you by the factory (see Factory access above):
   <pre class="file">
&lt;factory query_expr='((stringListMember("%RED%VO%ENDCOLOR%", GLIDEIN_Supported_VOs)))'></pre>
   1. The username that you are assigned from the factory (also called the identity you will be mapped to on the factory, see above) (scroll right, this is a long line):
   <pre class="file">
&lt;collector DN="/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu" comment="Define factory collector globally for simplicity" factory_identity="gfactory@glidein-1.t2.ucsd.edu" my_identity="%RED%username%ENDCOLOR%@glidein-1.t2.ucsd.edu" node="glidein-1.t2.ucsd.edu"/>
   </pre>
   1. The Schedd information.  The Cert DN is the DN of the User Pool Collector certificate, specified also in the GSI_DAEMON_PROXY or GSI_DAEMON_CERT when condor is configured (see below).  The hostname is the fully qualified domain name of the host where you installed the VO Frontend (run =hostname --fqdn=). A secondary schedd is optional.  You will need to delete the secondary schedd line if you are not using it. Multiple Schedd allow multiple submit host to connect to the same VO Frontend.
   <pre class="file">
&lt;schedds>
   &lt;schedd DN="%RED%Cert DN used by the schedd at fullname:%ENDCOLOR%" fullname="%RED%Hostname of the schedd%ENDCOLOR%"/>
   &lt;schedd DN="%RED%Cert DN used by the second Schedd at fullname:%ENDCOLOR%" fullname="%RED%schedd name%ENDCOLOR%@%RED%Hostname of second schedd%ENDCOLOR%"/>
&lt;/schedds></pre>
   1. The DN is that of the certificate used to communicate with the factory and submit glideins. The DN of the cert that the frontend will use to communicate with the factory and use to submit to the factory, and the Security name identifying this frontend with the Factory.
   <pre class="file">
&lt;security classad_proxy="/tmp/x509up_u99" proxy_DN="%RED%DN of proxy owned by user nobody%ENDCOLOR%" proxy_selection_plugin="ProxyAll" security_name="%RED%The security name, this is used by factory%ENDCOLOR%" sym_key="aes_256_cbc"> 
</pre>
<!--
If separate certificates are used to authenticate with the factory (Glidein Frontend Condor cert DN) and to submit to the factory (User Submitter cert DN) then make a proxy =/tmp/x509up_vofe= using the Glidein Frontend Condor cert (see below) and a proxy for the user nobody (UID 99, =/tmp/x509up_u99=) using the User Submitter cert as described below. Then edit the configuration: the DN of the cert that the frontend will use to communicate with the factory (Glidein Frontend Condor cert DN), the Security name identifying this frontend with the Factory. You may have to change the files containing the proxies (=/tmp/x509up_vofe= and /tmp/x509up_u99) if you decide to store the proxy somewhere else or use a different user.

   <pre class="file">
&lt;security classad_proxy="/tmp/x509up_vofe" proxy_DN="%RED%DN of vofe (Glidein Frontend Condor cert)%ENDCOLOR%" proxy_selection_plugin="ProxyAll" security_name="%RED%The security name, this is used by factory%ENDCOLOR%" sym_key="aes_256_cbc"> 
   &lt;proxies>
      &lt;proxy absfname="/tmp/x509up_u99" security_class="frontend"/>
   &lt;proxies>
&lt;/security></pre>
-->
   1. The hostname of the frontend.
   <pre class="file">
&lt;stage base_dir="/usr/share/gwms-frontend/www/stage" use_symlink="True" web_base_url="http://%RED%hostname of frontend%ENDCOLOR%/vofrontend/stage"/> </pre>
   1. The DN (User Pool Collector cert DN) and the hostname of the collectors (the host were the VO Frontend is being installed, =hostname -fqdn=). The default Condor configuration of the VO Frontend starts multiple Collector processes on the host: the DN and the hostname on the second line are the same as the ones in the first one.
   <pre class="file">
&lt;collector DN="DN of main collector" node="%RED%hostname of collector%ENDCOLOR%" secondary="False"/>
&lt;collector DN="DN of secondary collectors (usually same as DN in line above)" node="%RED%hostname of secondary collectors (usually same as hostname in line above)%ENDCOLOR%:9620-9660" secondary="True"/>
</pre>

---++ Configuring Condor
The condor configuration for the frontend is placed in =/etc/condor/config.d/00_frontend.config=. 
<!--
In versions of Condor 7.4.4 and above, this configuration is read automatically.
 if there is also a =/etc/condor/condor_config.local= file from the condor installation, please move it to =/etc/condor/config.d/00_condor_config.local= to make sure that it is read before the frontend configuration.  

If you have a version lower than 7.4.4, the local condor configuration file which is located at =/etc/condor/condor_config.local= must be edited.  Adding the following line to the bottom of =condor_config.local= will pick up the !GlideinWMS condor configuration.
<pre class="file">
LOCAL_CONFIG_DIR = /etc/condor/config.d</pre>
-->

After configuring condor, be sure to restart condor:
<pre class="rootscreen">
service condor restart</pre>

The lines you have to edit in the Condor configuration of the frontend:
   1. CA Certificates directory. This must point to a valid directory with CA certificates and CRLs, e.g. a link to the one installed with OSG Client:
   <pre class="file">
# Grid Certificate directory EDIT THIS
GSI_DAEMON_TRUSTED_CA_DIR=/etc/grid-security/certificates</pre>
   1. Credentials of the machine.  You can either run using a proxy, or a service certificate.  It is recommended to use a service certificate, User Pool Collector cert, which uses the variables GSI_DAEMON_CERT and GSI_DAEMON_KEY.  The proxy and certificate files should be owned by user =condor= and have the right permission (=600=).
   <pre class="file">
############################
# Credentials
############################
#GSI_DAEMON_PROXY = /tmp/x509up_u1349

# EDIT THESE VALUES
# If you ever decide to use a Certificate, see below
GSI_DAEMON_CERT = /etc/grid-security/glideincert.pem
GSI_DAEMON_KEY  = /etc/grid-security/glideinkey.pem </pre>
   1. Location of the condor grid map (description in the next section). =condor_mapfile= must be readable by the =condor= user.
   <pre class="file">
#################################
# Where to find ID->uid mappings EDIT THIS
#################################
CERTIFICATE_MAPFILE=/etc/grid-security/condor_mapfile </pre>
<!--
   1. Add the DN's for the certificates that your daemons will use, e.g. the factory (=/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu=), the Glidein Frontend Condor cert DN and the User Submitter cert DN.  Examples are placed below.
   <pre class="file">
#####################################
# Add whitelist of condor daemon DNs EDIT THIS
#####################################
#GSI_DAEMON_NAME=/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu,/DC=org/DC=doegrids/OU=Services/CN=glidein-fe-condor/gi-vofe.uchicago.edu,/DC=org/DC=doegrids/OU=People/CN=Marco Mambelli 325802
GSI_DAEMON_NAME=/DC=org/DC=doegrids/OU=People/CN=Derek Weitzel 285345,/DC=org/DC=doegrids/OU=People/CN=Derek Weitzel 285345/CN=993078166,/DC=org/DC=doegrids/OU=Services/CN=host/glidein.unl.edu,/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu
 </pre>
-->

---++ Create a Condor grid mapfile.
The Condor grid mapfile is used for authentication between the glidein running on a remote worker node, and the local collector.  Condor uses the mapfile to map certificates to users on the local machine.  It is important that you map the DN's of:
   * Each schedd that the frontend talks to
   * The DN of the proxy that the frontend uses (User Submitter proxy DN)

Below is an example mapfile:
   <pre class="file">
GSI "^\/DC\=org\/DC\=doegrids\/OU\=People\/CN\=Derek\ Weitzel\ 285345$" frontend
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/hcc\-grid\.unl\.edu$" dweitzel
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/cpass\.unl\.edu$" dweitzel
GSI (.*) anonymous
FS (.*) \1 </pre>


---++ Proxy Configuration
By default, the frontend will run as user =nobody= (UID 99).  In order for the frontend to use the certificate for user =nobody=, it has to exist and be owned by the user =nobody=.
   1. Create the proxy using the User Submitter cert
   <pre class="screen">
%UCL_PROMPT% voms-proxy-init -valid &lt;hours_valid> -voms &lt;vo> </pre>
   1. Copy the proxy to the correct name
   <pre class="screen">
%UCL_PROMPT% cp /tmp/x509up_u`id -u` /tmp/x509up_u`id -u nobody` </pre>
   1. Change ownership of the proxy
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% chown nobody: /tmp/x509up_u`id -u nobody` </pre>

The proxy above will be used for job submission (User Submitter proxy) and communicating with the Factory.  This sequence of commands will need to be renewed when the proxy expires.
<!--
Depending on the previous choices it may be used to authenticate with the factory or not. 
If you are using a separate certificate to authenticate with the Factory (Glidein Frontend Condor cert) then create the proxy. This is a simple x509 proxy without VO extensions, so you are not limited in the lifetime and it is recommended to use long lived proxies (170:00 hours will give you a week, 750:00 a month) and to use a cron job if you used a service certificate (doesn't need a password to refresh the proxy).
   1. Create the proxy using the Glidein Frontend Condor cert
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% grid-proxy-init -valid &lt;hours_valid> -cert /etc/grid-security/gwms/vofe-glidein-fe-condor-cert.pem -key /etc/grid-security/gwms/vofe-glidein-fe-condor-key.pem </pre>
   1. Copy the proxy to the correct name
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% cp /tmp/x509up_u`id -u` /tmp/x509up_vofe </pre>
   1. Change ownership of the proxy
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% chown nobody: /tmp/x509up_vofe </pre>
-->

---++ Reconfigure and verify installation
In order to use the frontend, first you must reconfigure it.

<pre class="rootscreen">
%UCL_PROMPT_ROOT% /etc/init.d/frontend_startup reconfig </pre>

After reconfiguring, you can start the frontend:
<pre class="rootscreen">
%UCL_PROMPT_ROOT% /etc/init.d/frontend_startup start </pre>


---+ Service Activation and Deactivation

%GRAY%
If applicable, this section contains steps required to activate and deactivate the software. Please reuse the material that has been written on the topic here [[ReleaseDocumentation/StartingServices][About VDT Services]]. For example like this:

<verbatim>
%INCLUDE{"ReleaseDocumentation/StartingServices" section="Activate" TOC_SHIFT="" INPUT_SERVICE="mysql"}%
%INCLUDE{"ReleaseDocumentation/StartingServices" section="Deactivate" TOC_SHIFT="" INPUT_SERVICE="mysql"}%
</verbatim>

The =INPUT_SERVICE= variable is optional.

This section may also contain the location of a log file that allows the reader to quickly verify the operation of the service.
%ENDCOLOR%


---+ Validation of Service Operation

%GRAY%
Occasionally the steps to validate the success and correct operation of an installation may be _non-trivial_. Please use this _optional_ section to describe how the user can verify the success of the installation.

%NOTE% This section should not become a user guide! Please link to the applicable sections of the user documentation if the service validation requires the reader to execute a user command.
%ENDCOLOR%

---+ Troubleshooting

---++ File Locations

|  *File Description*  |  *File Location*  |
|Configuration file | /etc/gwms-frontend/frontend.xml |
|Logs | /var/log/gwms-frontend/ |
|Startup script | /etc/init.d/frontend_startup |
|Web Directory | /usr/share/gwms-frontend/www |
|Working Directory | /usr/share/gwms-frontend/frontend-temp/ |

---+ Advanced Configurations

   * [[GlideinWMSCampusGrid][GlideinWMS Frontend on a Campus Grid]]

---++ &lt;How can I resolve this Problem?&gt;
<!--
%GRAY%
Use sub-sections for each problem you want to address in particular. Link to HelpProcedure at the end if the problem could not be resolved.
%ENDCOLOR%
-->

---+ References
Definition:
   * VO http://www.opensciencegrid.org/About/Learn_About_Us/OSG_Organization/VOs
   * http://twiki.grid.iu.edu/bin/view/Documentation/UsingTheGrid
   * http://twiki.grid.iu.edu/bin/view/Documentation/CondorGToGlidein
   * http://twiki.grid.iu.edu/bin/view/Engagement/EngageNewUserGuide

Documents about the VO frontend:
   * http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/
   * http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/manual/
   * http://twiki.grid.iu.edu/bin/view/Documentation/GlideinWMSVOFrontendInstall

Other examples:
   * http://home.fnal.gov/~weigand/weigand/www/glideinWMS_rpm/index.shtml

!M2Crypto:
   * http://www.heikkitoivonen.net/blog/2008/10/14/ssl-in-python-26/
   * http://chandlerproject.org/bin/view/Projects/MeTooCrypto
   * http://freshmeat.net/projects/m2crypto
RRDTools:
   * http://packages.sw.be/rrdtool/
javascriptRRD:
   * http://sourceforge.net/projects/javascriptrrd/

Other documents
   * RRD tools: http://segfault.in/2010/03/python-rrdtool-tutorial/
   * RRD tools: http://sourceforge.net/projects/py-rrdtool/
   * http://oss.oetiker.ch/rrdtool/download.en.html
   * http://www.express.org/~wrl/rrdtool/
   * Downloads from Nebraska: http://t2.unl.edu/store/repos/nebraska/5/nebraska/x86_64/
<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = DerekWeitzel

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|General|Integration|Monitoring|Operations|Security|Storage|Tier3|User|VO)
   * Local DOC_AREA       = General

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (Developer|Documenter|Scientist|Student|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (HowTo|Installation|Knowledge|Navigation|Planning|Training|Troubleshooting)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = BurtHolzman
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = MarcoMambelli
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
-->

-- Main.MarcoMambelli - 10 Feb 2011

%META:FILEATTACHMENT{name="simple_diagram.png" attachment="simple_diagram.png" attr="" comment="" date="1305925694" path="simple_diagram.png" size="36007" stream="simple_diagram.png" tmpFilename="/usr/tmp/CGItemp51807" user="DerekWeitzel" version="1"}%
