%META:TOPICINFO{author="BrianLin" date="1412116063" format="1.1" version="1.14"}%
%META:TOPICPARENT{name="WebHome"}%
---+!! Writing Routes for HTCondor CE

%TOC{depth="4"}%

%STARTSECTION{"RoutePitfalls"}%
---# Quirks and Pitfalls

   * If a value is set in JOB_ROUTER_DEFAULTS with =eval_set_&lt;variable&gt;= and you want to override it, you will need to use =eval_set_&lt;variable&gt;= in the JOB_ROUTER_ENTRIES.
   * Make sure to run =condor_ce_reconfig= after changing your routes, otherwise they will not take effect.
   * Before the last square bracket, make sure all lines end in a line continuation character (backslash). You can inspect the syntax of your routes with =condor_ce_config_val JOB_ROUTER_ENTRIES= to see if HTCondor CE has ingested them properly.
   * Do *not* set the =JOB_ROUTER_DEFAULTS= configuration variable, this will cause the CE to stop functioning.
   * Do *not* set the job environment through the !JobRouter. Instead, add any changes to the /etc/osg/config.d/ [Local Settings] section and run osg-configure, as documented [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/ConfigurationFileLocalSettings][here]].
   * HTCondor batch system only: Local universe jobs are excluded from any routing.
%ENDSECTION%

---# Generic Routes

---## Writing Multiple Routes

To make the most out of routes, you'll likely want to write more than one of them for various conditions your site may support. Each route is enclosed by square brackets and unless they're the last closing bracket, they need to be followed by the line continuation character. The following routes takes incoming jobs that have a =queue= attribute set to =analy= and routes them to the site's HTCondor batch system. Any other jobs will be sent to that site's PBS batch system.

%NOTE% The !JobRouter matches jobs to routes in a round-robin fashion. This means that if a job can match to multiple routes, it can be routed by any of them! So when writing job routes, make sure that they are exclusive to each other and that your jobs can only match to a single route.

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     TargetUniverse = 5; \
     name = "Route jobs to HTCondor"; \
     Requirements = (TARGET.queue =?= "analy"); \
] \
[ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Route jobs to PBS"; \
     Requirements = (TARGET.queue =!= "analy"); \
] 
</pre>

---## Writing Comments

To write comments you can use C-style comments, text enclosed by =/* */=. If the comment is at the end of a line, it still has to be followed by the line continuation character.

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     TargetUniverse = 5; \
     name = "C-style comments"; \
     <span style="background-color: #FFCCFF;"><b>/* This is a comment */ \</b></span>
] 
</pre>

For =condor_ce_version= 8.2.x or greater, you can also use =#= to comment out single lines:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     TargetUniverse = 5; \
     name = "Hash comments"; \
     <span style="background-color: #FFCCFF;"><b># BrokenAttribute = "commented out"; \</b></span> 
] 
</pre>

---## Filtering Jobs Based on&hellip;

To filter jobs, use the =Requirements= attribute. Jobs will evaluate against the !ClassAd expression set in the =Requirements= and if the expression evaluates to =TRUE=, the route will match. More information on the syntax of !ClassAd's can be found in the [[http://research.cs.wisc.edu/htcondor/manual/v8.0/4_1HTCondor_s_ClassAd.html][Condor manual]]. 

---### Glidein queue

To filter jobs based on their glidein queue attribute, you will want to look at the incoming job's =queue= attribute. The following entry routes jobs to the PBS queue if the incoming job (specified by =TARGET=) is an =analy= (Analysis) glidein:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     TargetUniverse = 5; \
     name = "Filtering by queue"; \
     <span style="background-color: #FFCCFF;"><b>Requirements = (TARGET.queue =?= "analy"); \</b></span>
] 
</pre>

---### Job submitter

To filter jobs based on who submitted it, you will want to look at the incoming job's =Owner= attribute. The following entry routes jobs to the HTCondor batch system iff the submitter is =usatlas2=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     TargetUniverse = 5; \
     name = "Filtering by job submitter"; \
     <span style="background-color: #FFCCFF;"><b>Requirements = (TARGET.Owner =?= "usatlas2"); \ </b></span>
] 
</pre>

Alternatively, you can match based on regular expression. The following entry routes jobs to the PBS batch system iff the submitter's name begins with =usatlas=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Filtering by job submitter (regular expression)"; \
     <span style="background-color: #FFCCFF;"><b>Requirements = regexp("^usatlas", TARGET.Owner); \ </b></span>
] 
</pre>

---### VOMS attribute

To filter jobs based on the subject of the proxy that the incoming job uses, you will want to look at the incoming job's =x509UserProxyFirstFQAN= attribute. The following entry routes jobs to the PBS batch system if the proxy subject contains =/cms/Role=Pilot=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Filtering by VOMS attribute (regex)"; \
     <span style="background-color: #FFCCFF;"><b>Requirements = regexp("\/cms\/Role\=pilot", x509UserProxyFirstFQAN); \ </b></span>
] 
</pre>

---## Setting a Default&hellip;

---### Maximum memory

To set a default maximum memory for routed jobs, set the attribute =default_maxMemory=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Request memory"; \
     /* Set the requested memory to 1 GB */ \
     <span style="background-color: #FFCCFF;"><b>default_maxMemory = 1000; \ </b></span>
] 
</pre>

---### Number of cores to request

To set a default number of cores for routed jobs, set the attribute =default_xcount=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Request CPU"; \
     /* Set the requested cores to 8 */ \
     <span style="background-color: #FFCCFF;"><b>default_xcount = 8; \ </b></span>
] 
</pre>

---### Batch queue for jobs to be sent to

To set a default queue for routed jobs, set the attribute =default_queue=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Setting batch system queues"; \
     <span style="background-color: #FFCCFF;"><b>default_queue = "osg_queue"; \ </b></span>
] 
</pre>

---### Maximum Walltime

To set a default queue for routed jobs, set the attribute =default_maxWallTime=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Setting WallTime"; \
     /* Set the max walltime to 1 hr */ \
     <span style="background-color: #FFCCFF;"><b>defeault_maxWallTime = 60; \ </b></span>
] 
</pre>

---## Editing Attributes&hellip;

The following functions are operations that affect job attributes and are evaluated in the following order:

   1. copy_*
   1. delete_*
   1. set_*
   1. eval_set_*

To get the !JobRouter ad, the !JobRouter combines each route from =JOB_ROUTER_ENTRIES= with the =JOB_ROUTER_DEFAULTS= and then performs the aforementioned operations on the the !JobRouter ad of each route. So if an attribute is set using =eval_set_= in the =JOB_ROUTER_DEFAULTS=, you'll be unable to delete it in your routes since =delete_= is evaluated before =eval_set_=. However, operations defined in =JOB_ROUTER_DEFAULTS= get overriden by the same operation in =JOB_ROUTER_ENTRIES=. So if we want to =delete_foo= but =foo= is defined with =eval_set_foo= in the =JOB_ROUTER_DEFAULTS=, we can 'delete' it with =eval_set_foo = ""=.

More documentation can be found in the [[http://research.cs.wisc.edu/htcondor/manual/v8.0/5_4HTCondor_Job.html][Condor manual]].

---### Copying attributes

To copy the value of an attribute of the incoming job to an attribute of the routed job, use =copy_=. The following route copies the =environment= attribute of the incoming job and sets the attribute =Original_Environment= on the routed job to the same value:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Copying attributes"; \
     <span style="background-color: #FFCCFF;"><b>copy_environment = "Original_Environment"; \ </b></span>
] 
</pre>

---### Removing attributes

To remove an attribute of the incoming job from the routed job, use =delete_=. The following route removes the =environment= attribute from the routed job:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Copying attributes"; \
     <span style="background-color: #FFCCFF;"><b>delete_environment = True; \ </b></span>
] 
</pre>

---### Setting attributes

SET_FOO VS FOO? WHAT THE FOO? FIX THIS. The following route sets the =Rank= attribute to 5:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Setting an attribute"; \
     <span style="background-color: #FFCCFF;"><b>set_Rank = 5; \</b></span>
] 
</pre>

---### Setting attributes with !ClassAd expressions

To set an attribute to a !ClassAd expression that you want evaluated, use =set_eval=. The following route sets the =Experiment= attribute to =atlas.osguser= if the Owner of the incoming job is =osguser=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Setting an attribute with a !ClassAd expression"; \
     <span style="background-color: #FFCCFF;"><b>eval_set_Experiment = strcat("atlas.", Owner); \</b></span>
] 
</pre>

%STARTSECTION{"DebugRoutes"}%
---## Debugging Routes

First, set the debug mode for the !JobRouter by editing a file in =/etc/condor-ce/config.d/= to read

<pre class="file">
JOB_ROUTER_DEBUG = D_FULLDEBUG
</pre>

Then wrap the problematic attribute in =debug()=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     GridResource = "batch pbs"; \
     TargetUniverse = 9; \
     name = "Debugging a difficult !ClassAd expression"; \
     <span style="background-color: #FFCCFF;"><b>eval_set_Experiment = debug(strcat("atlas", Name)); \</b></span>
] 
</pre>
%ENDSECTION%

---# HTCondor Batch System Specific Routes

---## Setting Custom Attributes

If you're using a site-specific attribute on your HTCondor backend, say =Experiment=. You can do that with =set_= or =eval_set=:

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     TargetUniverse = 5; \
     name = "Setting custom attribute"; \
     <span style="background-color: #FFCCFF;"><b>/* Set the experiment to a string */ \
     set_Experiment = "atlas"; \
     /* The following evaluates to Experiment = 'atlasSetting custom attribute' */ \ 
     eval_set_Experiment = strcat("atlas", Name); \</b></span>
] 
</pre>

---## Setting Periodic Hold, Release or Remove

<pre class="file">
JOB_ROUTER_ENTRIES = [ \
     TargetUniverse = 5; \
     name = "Setting periodic statements"; \
     <span style="background-color: #FFCCFF;"><b>/* Puts the routed job on hold if the job's been idle and has been started at least once or if the job has tried to start more than once */ \
     set_Periodic_Hold = (NumJobStarts >= 1 && JobStatus == 1) || NumJobStarts > 1; \
     /* Remove routed jobs if their walltime is longer than 3 days and 5 minutes */ \ 
     set_Periodic_Remove = ( RemoteWallClockTime > (3*24*60*60 + 5*60); \
     /* Release routed jobs if the condor_starter couldn't start the executable and 'VMGAHP_ERR_INTERNAL' is in the HoldReason */ \        
     set_Periodic_Release = HoldReasonCode == 6 && regexp("VMGAHP_ERR_INTERNAL", HoldReason); \ </b></span>
] 
</pre>

---# Example Configurations

---## AGLT2's Job Routes

%TWISTY{%TWISTY_OPTS_OUTPUT% showlink="Click to expand full job route&hellip;"}%
<pre class="file">
JOB_ROUTER_ENTRIES = \
/* Still to do on all routes, get job requirements and add them here */ \
/* ***** Route no 1 ***** */ \
/* ***** Analysis queue ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue=="analy"; \
    Name = "Analysis Queue"; \
    TargetUniverse = 5; \
    eval_set_IdleMP8Pressure = $(IdleMP8Pressure); \
    eval_set_LastAndFrac = $(LastAndFrac); \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && (IfThenElse((Owner == "atlasconnect" || Owner == "muoncal"),IfThenElse(IdleMP8Pressure,(TARGET.PARTITIONED =!= TRUE),True),IfThenElse(LastAndFrac,(TARGET.PARTITIONED =!= TRUE),True))); \
    eval_set_AccountingGroup = strcat("group_gatekpr.prod.analy.",Owner); \
    set_localQue = "Analysis"; \
    set_IsAnalyJob = True; \
    set_JobPrio = 5; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 2 ***** */ \
/* ***** splitterNT queue ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue == "splitterNT"; \
    Name = "Splitter ntuple queue"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
    eval_set_AccountingGroup = "group_calibrate.muoncal"; \
    set_localQue = "Splitter"; \
    set_IsAnalyJob = False; \
    set_JobPrio = 10; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 3 ***** */ \
/* ***** splitter queue ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue == "splitter"; \
    Name = "Splitter queue"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
    eval_set_AccountingGroup = "group_calibrate.muoncal"; \
    set_localQue = "Splitter"; \
    set_IsAnalyJob = False; \
    set_JobPrio = 15; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 4 ***** */ \
/* ***** xrootd queue ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue == "xrootd"; \
    Name = "Xrootd queue"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
    eval_set_AccountingGroup = strcat("group_gatekpr.prod.analy.",Owner); \
    set_localQue = "Analysis"; \
    set_IsAnalyJob = True; \
    set_JobPrio = 35; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 5 ***** */ \
/* ***** Tier3Test queue ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue == "Tier3Test"; \
    Name = "Tier3 Test Queue"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && ( IS_TIER3_TEST_QUEUE =?= True ); \
    eval_set_AccountingGroup = strcat("group_gatekpr.prod.analy.",Owner); \
    set_localQue = "Tier3Test"; \
    set_IsTier3TestJob = True; \
    set_IsAnalyJob = True; \
    set_JobPrio = 20; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 6 ***** */ \
/* ***** mp8 queue ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue=="mp8"; \
    Name = "MCORE Queue"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && (( TARGET.Cpus == 8 && TARGET.CPU_TYPE =?= "mp8" ) || TARGET.PARTITIONED =?= True ); \
    eval_set_AccountingGroup = strcat("group_gatekpr.prod.mcore.",Owner); \
    set_localQue = "MP8"; \
    set_IsAnalyJob = False; \
    set_JobPrio = 25; \
    set_Rank = 0.0; \
    eval_set_RequestCpus = 8; \
    set_JobMemoryLimit = 33552000; \
    set_Slot_Type = "mp8"; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 7 ***** */ \
/* ***** Installation queue, triggered by usatlas2 user ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue is undefined && target.Owner == "usatlas2"; \
    Name = "Install Queue"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && ( TARGET.IS_INSTALL_QUE =?= True ) && (TARGET.AGLT2_SITE == "UM" ); \
    eval_set_AccountingGroup = strcat("group_gatekpr.other.",Owner); \
    set_localQue = "Default"; \
    set_IsAnalyJob = False; \
    set_IsInstallJob = True; \
    set_JobPrio = 15; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 8 ***** */ \
/* ***** Default queue for usatlas1 user ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue is undefined && regexp("usatlas1",target.Owner); \
    Name = "ATLAS Production Queue"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
    eval_set_AccountingGroup = strcat("group_gatekpr.prod.prod.",Owner); \
    set_localQue = "Default"; \
    set_IsAnalyJob = False; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 9 ***** */ \
/* ***** Default queue for any other usatlas account ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue is undefined && (regexp("usatlas2",target.Owner) || regexp("usatlas3",target.Owner)); \
    Name = "Other ATLAS Production"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
    eval_set_AccountingGroup = strcat("group_gatekpr.other.",Owner); \
    set_localQue = "Default"; \
    set_IsAnalyJob = False; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ] \
/* ***** Route no 10 ***** */ \
/* ***** Anything else. Set queue as Default and assign to other VOs  ***** */ \
  [ \
    GridResource = "condor localhost localhost"; \
    eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); \
    Requirements = target.queue is undefined && ifThenElse(regexp("usatlas",target.Owner),false,true); \
    Name = "Other Jobs"; \
    TargetUniverse = 5; \
    set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
    eval_set_AccountingGroup = strcat("group_VOgener.",Owner); \
    set_localQue = "Default"; \
    set_IsAnalyJob = False; \
    set_Rank = (SlotID + (64-TARGET.DETECTED_CORES))*1.0; \
    set_JobMemoryLimit = 4194000; \
    set_Periodic_Remove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || (ImageSize > JobMemoryLimit) ); \
  ]
</pre>
%ENDTWISTY%

---## BNL's Job Routes

%TWISTY{%TWISTY_OPTS_OUTPUT% showlink="Click to expand full job route&hellip;"}%
<pre class="file">
###############################################################################
#
# HTCondor-CE HTCondor batch system configuration file.
#
###############################################################################

# Submit the job to the site Condor

JOB_ROUTER_ENTRIES = \
   [ \
     GridResource = "condor localhost localhost"; \
     eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", "$(FULL_HOSTNAME)"); \
     TargetUniverse = 5; \
     name = "BNL_Condor_Pool_long"; \
     Requirements = target.queue=="analysis.long"; \
     eval_set_RACF_Group = "long"; \
     set_Experiment = "atlas"; \
     set_requirements = ( ( Arch == "INTEL" || Arch == "X86_64" ) && ( CPU_Experiment == "atlas" ) ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
     set_Job_Type = "cas"; \
     set_JobLeaseDuration = 3600; \
     set_PeriodicHold = (NumJobStarts >= 1 && JobStatus == 1) || NumJobStarts > 1; \
     eval_set_VO = x509UserProxyVOName; \
   ] \
   [ \
     GridResource = "condor localhost localhost"; \
     eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", "$(FULL_HOSTNAME)"); \
     TargetUniverse = 5; \
     name = "BNL_Condor_Pool_short"; \
     Requirements = target.queue=="analysis.short"; \
     eval_set_RACF_Group = "short"; \
     set_Experiment = "atlas"; \
     set_requirements = ( ( Arch == "INTEL" || Arch == "X86_64" ) && ( CPU_Experiment == "atlas" ) ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
     set_Job_Type = "cas"; \
     set_JobLeaseDuration = 3600; \
     set_PeriodicHold = (NumJobStarts >= 1 && JobStatus == 1) || NumJobStarts > 1; \
     eval_set_VO = x509UserProxyVOName; \
   ] \
   [ \
     GridResource = "condor localhost localhost"; \
     eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", "$(FULL_HOSTNAME)"); \
     TargetUniverse = 5; \
     name = "BNL_Condor_Pool_grid"; \
     Requirements = target.queue=="grid"; \
     eval_set_RACF_Group = "grid"; \
     set_Experiment = "atlas"; \
     set_requirements = ( ( Arch == "INTEL" || Arch == "X86_64" ) && ( CPU_Experiment == "atlas" ) ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
     set_Job_Type = "cas"; \
     set_JobLeaseDuration = 3600; \
     set_PeriodicHold = (NumJobStarts >= 1 && JobStatus == 1) || NumJobStarts > 1; \
     eval_set_VO = x509UserProxyVOName; \
   ] \
   [ \
     GridResource = "condor localhost localhost"; \
     eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", "$(FULL_HOSTNAME)"); \
     TargetUniverse = 5; \
     name = "BNL_Condor_Pool"; \
     Requirements = target.queue is undefined; \
     eval_set_RACF_Group = "grid"; \
     set_requirements = ( ( Arch == "INTEL" || Arch == "X86_64" ) && ( CPU_Experiment == "rcf" ) ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); \
     set_Experiment = "atlas"; \
     set_Job_Type = "cas"; \
     set_JobLeaseDuration = 3600; \
     set_PeriodicHold = (NumJobStarts >= 1 && JobStatus == 1) || NumJobStarts > 1; \
     eval_set_VO = x509UserProxyVOName; \
   ]
</pre>
%ENDTWISTY%