%META:TOPICINFO{author="BrianLin" date="1424973060" format="1.1" reprev="1.5" version="1.5"}%
%META:TOPICPARENT{name="WebHome"}%
---+ Submitting Jobs to an HTCondor CE

%TOC{depth="3"}%

---++ About This Guide

This document outlines methods of manual submission to an HTCondor CE. It is intended for site administrators wishing to verify the functionality of their HTCondor CE installation and developers writing software to submit jobs to an HTCondor CE (e.g., pilot jobs). 

%NOTE% Most incoming jobs are pilots from factories and that manual submission does not reflect the standard method that jobs are submitted to OSG CE&rsquo;s. 

---++ Submitting Jobs...

There are two main methods for submitting files to an HTCondor CE: using the tools bundled with the =htcondor-ce-client= package and using the =condor_submit= command with a submit file. Both methods will test end-to-end job submission but the former method is simpler while the latter will walk you through writing your own submit file. Unless otherwise specified, assume the following commands are run from your CE.

Before attempting to submit jobs, you will need to generate a proxy from a user certificate before running any jobs. To generate a proxy, run the following command:

<pre class="screen">%UCL_PROMPT% voms-proxy-init</pre>

---+++ Using HTCondor CE tools

There are two HTCondor CE tools that allow users to test the functionality of their HTCondor CE: [[Documentation.Release3/TroubleshootingHTCondorCE#condor_ce_run][condor_ce_run]] and [[Documentation.Release3/TroubleshootingHTCondorCE#condor_ce_trace][condor_ce_trace]]. The former is a tool that performs job submission, providing output on job completion whereas the latter tests other parts of the CE while providing verbose debugging output. 

---++++ condor_ce_run

=condor_ce_run= is a Python script that calls =condor_submit= on a generated submit file and tracks its progress with =condor_q=. To submit a job with =condor_ce_run=, run the following command:

<pre class="screen">%UCL_PROMPT% condor_ce_run -r <span style="background-color: #D1CAF2;">condorce.example.com</span>:9619 /bin/env</pre>

Replacing the <span style="background-color: #D1CAF2;">highlighted</span> text with the hostname of the CE. The command will not return any output until it completes and if you do not get the expected output, refer to the [[https://twiki.opensciencegrid.org/bin/view/Documentation/Release3/TroubleshootingHTCondorCE#condor_ce_run][troubleshooting guide]].

---++++ condor_ce_trace

=condor_ce_trace= is a Python script that uses HTCondor's Python bindings to run diagnostics, including job submission, against your HTCondor CE. To submit a job with =condor_ce_trace=, run the following command:

<pre class="screen">%UCL_PROMPT% condor_ce_trace --debug <span style="background-color: #D1CAF2;">condorce.example.com</span></pre>

Replacing the <span style="background-color: #D1CAF2;">highlighted</span> text with the hostname of the CE. On success, you should see =Job status: Completed= and the environment of the job on the worker node it landed on. If you do not get the expected output, refer to the [[https://twiki.opensciencegrid.org/bin/view/Documentation/Release3/TroubleshootingHTCondorCE#condor_ce_trace][troubleshooting guide]].

---+++ Using a submit file

For this method, you will need a functional HTCondor submit node. If you do not have one readily available, you can start one on your CE host by starting the =condor= service:

<pre class="rootscreen">%UCL_PROMPT_ROOT% service condor start</pre>

Once you have a submit node, you can start the manual submission process:

   1. Write a submit file, =ce_test.sub=: \
   <pre class="file">
universe = grid
grid_resource = condor <span style="background-color: #FFCCFF;">condorce.example.com</span> <span style="background-color: #FFCCFF;">condorce.example.com</span>:9619

executable = ce_test.sh
output = ce_test.out
error = ce_test.err
log = ce_test.log

ShouldTransferFiles = YES
WhenToTransferOutput = ON_EXIT
getenv = True

use_x509userproxy = true
+Owner = undefined
queue</pre> \
   <p>Replacing the <span style="background-color: #FFCCFF;">highlighted</span> text with the hostname of the CE.
   1. Write a test script, =ce_test.sh=:\
   <pre class="file">
#!/bin/bash

date
hostname
env </pre>
   1. Mark the test script executable: \
   <pre class="screen">%UCL_PROMPT% chmod +x ce_test.sh</pre>
   1. Submit the job: \
   <pre class="screen">%UCL_PROMPT% condor_submit ce_test.sub</pre>

When the job completes, stdout will be placed into =ce_test.out=, stderr will be placed into =ce_test.err=, and HTCondor logging information will be placed in =ce_test.log=. You can track job progress by looking at the condor queue:

<pre class="screen">%UCL_PROMPT% condor_q</pre>

Using the following table to determine job status:

| *This value in the =ST= column...* | *Means that the job is...* |
| I | idle |
| C | complete |
| X | being removed |
| < | transferring input |
| > | transferring output |

---++ Job-Route Interaction



---++ Reference

Here are some other HTCondor&nbsp;CE documents that might be helpful:

   * HTCondor&nbsp;CE overview and architecture (coming soon)
   * [[InstallHTCondorCE][Installing HTCondor CE]]
   * [[JobRouterRecipes][Configuring HTCondor&nbsp;CE job routes]]
   * [[TroubleshootingHTCondorCE][The HTCondor&nbsp;CE troubleshooting guide]]

---+++ Job attributes

The following table is a reference of job attributes that can be included in HTCondor submit files and their !GlobusRSL equivalents. A more comprehensive list of submit file attributes can be found in the [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#SECTION0012554000000000000000][HTCondor manual]].

| *HTCondor Attribute* | *Globus RSL* | *Summary* | 
| [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#82586][arguments]] | arguments | Arguments that will be provided to the executable for the job. |
| [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#82635][error]] | stderr | Path to the file on the client machine that stores stderr from the job. |
| [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#82641][executable]] | executable | Path to the file on the client machine that the job will execute. |
| [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#man-condor-submit-environment][environment]] | environment | Environment variables to add to the job's environment. |
| [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#82660][input]] | stdin | Path to the file on the client machine that stores input to be piped into the stdin of the job. |
| +maxMemory | maxMemory | The amount of memory you wish to allocate to the job. |
| +maxWallTime | maxWallTime | The maximum walltime the job is allowed to run before it is removed. |
| [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#82696][output]] | stdout| Path to the file on the client machine that stores stdout from the job. |
| +remote_queue | queue | Assign job to the target queue in the scheduler. |
| [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#82911][transfer_input_files]] | file_stage_in | A comma-delimited list of all the files and directories to be transferred into the working directory for the job, before the job is started. |
| [[http://research.cs.wisc.edu/htcondor/manual/v8.2/condor_submit.html#82919][transfer_output_files]] | transfer_output_files | A comma-delimited list of all the files and directories to be transferred back to the client, after the job completes. |
| +xcount | xcount | The number of cores to allocate for the job. |

-- Main.BrianLin - 08 Jan 2015
