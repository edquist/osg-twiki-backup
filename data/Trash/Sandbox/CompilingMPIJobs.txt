%META:TOPICINFO{author="AndrewHoward" date="1218812187" format="1.1" reprev="1.1" version="1.1"}%
---++ Picking A Site

The first step is to pick an OSG site that supports your VO and has an MPI version installed. The easiest way to do this is decide on an MPI implementation (MPICH, MPICH2, OpenMPI, etc.) and perform an LDAP query. For example, to see all of the MPICH versions installed on Purdue's Steele cluster, the following command can be used:

<verbatim>ldapsearch -x -l 60 -b mds-vo-name=Purdue-Steele,mds-vo-name=local,o=grid -h is.grid.iu.edu -p 2170 "GlueSoftwareName=MPICH" GlueSoftwareEnvironmentSetup</verbatim>

The "GlueSoftwareEnvironmentSetup" field shows what command to use in order to load the MPI version into your environment. This is important for compiling and running the application.

---++ Compiling MPI Jobs

Compiling the application can be done in one of two ways. If the site allows local logins, you can login directly to the server, run the command to load MPI into your environment, and compile your application. This is essentially the same workflow you would use to run the application on your own machine.

Since most sites don't allow local logins, however, another way to compile your application is to submit a batch job that will compile the application for you. This can be accomplished by writing a short script that will source the module and compile the application. The following is an example script that will compile the cpi program.
---+++ A Sample Compile Script

<verbatim>
#!/bin/bash
#
# Right now on Purdue's Steele cluster, the modules program is not in the user's
# path when a job is run. In order to ensure the module command works, we need
# to source the module setup script. For sites using softenv, sourcing
# /etc/profile.d/softenv.sh should work instead.

source /etc/profile.d/modules.sh
# This is where the command from GlueSoftwareEnvironmentSetup goes
module load mpich-gcc

mpicc -o cpi cpi.c

</verbatim>

---+++ A Sample Submit Script

Once you have a script that will compile your application, you can submit a Condor-G job to compile your application. For example, the following submit script will compile and return the working executable for the above compile script on Purdue's Steele cluster:

<verbatim>
Universe = grid
Grid_Resource = gt2 lepton.rcac.purdue.edu/jobmanager-pbs

Executable = compile.sh

Output = compile_job.out
Log    = compile_job.log
Error  = compile_job.error
WhenToTransferOutput = ON_EXIT
Transfer_Input_Files = cpi.c,compile.sh
Transfer_Output_Files = cpi

Queue </verbatim>

Once the Condor-G job ends, you'll most likely have to make your program executable by running:
<verbatim>chmod +x <program_name></verbatim> -- Main.AndrewHoward - 15 Aug 2008
