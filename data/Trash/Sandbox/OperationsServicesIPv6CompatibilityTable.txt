%META:TOPICINFO{author="TimCartwright" date="1410291483" format="1.1" version="1.13"}%
%META:TOPICPARENT{name="TomLeeSandbox"}%
<noautolink>
<!--
   * Local IPV6_YES = <span style="background-color: #008000; color: #FFFFFF; font-weight: bold;">&nbsp;Yes&nbsp;</span>
   * Local IPV6_YESBUT = <span style="background-color: #80C000; color: #FFFFFF; font-weight: bold;">&nbsp;Yes with Caveats&nbsp;</span>
   * Local IPV6_CLAIMED = <span style="background-color: #D0D000; color: #FFFFFF; font-weight: bold;">&nbsp;Claimed&nbsp;</span>
   * Local IPV6_CLAIMED_NO = <span style="background-color: #FF5000; color: #FFFFFF; font-weight: bold;">&nbsp;Claimed No&nbsp;</span>
   * Local IPV6_NO = <span style="background-color: #FF0000; color: #FFFFFF; font-weight: bold;">&nbsp;No&nbsp;</span>
   * Local IPV6_UNKNOWN = <span style="background-color: #808080; color: #FFFFFF; font-weight: bold;">&nbsp;Unknown&nbsp;</span>
-->
%DOC_STATUS_TABLE%
---+ OSG IPv6 Compatibility of Operations and Software Components 

The following is a table listing the services provided by the OSG Operations Center and denoting whether they are known to be compatible with IPv6.

%TOC{depth="2"}%

---++ About This Document

This document is intended to track the progress of the OSG Operations Center's transition from IPv4-only to IPv6-compatible services.  It should show at a glance which services need to be tested or made compatible (or replaced with equivalent compatible software).

---++ Definition of IPv6 Compatibility

One cannot properly state whether a service is "IPv6-compatible" without defining exactly what that means.  Here is the definition that this document will use.

Here at the OSG Operations Center, we will soon be configuring every machine, physical and virtual, so as to be "dual-stacked," with an IPv6 network stack added in addition to its existing IPv4 stack.  Each machine's network interface will thus have at least one IPv6 address on which it listens, in addition to whatever IPv4 addresses it is already listening on.  In this way we can continue to maintain each service at its current IPv4 address while adding the ability to also provide service via IPv6.  The system's routing table should be able to direct packets appropriately, and the DNS resolver routines should be able to properly look up both IPv4 and IPv6 addresses.  However, if the service's software is, in one way or another, written with the assumption that the only IP addresses will be IPv4 ones, it is likely to be incompatible with IPv6.

At the time of writing this, the OSG Operations servers are not yet all fully dual-stacked, but that is not what this table signifies.  For the purposes of this document, if a service could respond properly to requests from an IPv6 client if it were installed on a dual-stacked host of the sort that all OSG Operations machines will soon be, it is IPv6-compatible.  That is, the contents of this table refer to the IPv6 compatibility of the service and its software, not of the host or operating system.

---++ Legend of Compatibility Keywords

Under the "IPv6 Compatibility" column in the table below you'll see certain keywords.  These are their meanings.

   * %IPV6_YES%: We at OSG Operations have tested this service and found it to be IPv6-compatible to our satisfaction.
   * %IPV6_YESBUT%: We have tested this service and found it possible to use under IPv6, but there are shortcomings — special requirements on the client side, nonstandard OS configuration, an inability to be simultaneously IPv4- and IPv6-compatible, not all features IPv6-compatible, etc.
   * %IPV6_CLAIMED%: We have not yet tested this service, but someone else that we feel has some knowledge of the matter (perhaps at another site on the OSG, perhaps the software's developers) claims that it is IPv6-compatible.
   * %IPV6_CLAIMED_NO%: We have not yet tested this service, but someone else that we feel has some knowledge of the matter (perhaps at another site on the OSG, perhaps the software's developers) claims that it is not IPv6-compatible, at least not as it is currently installed.
   * %IPV6_NO%: We have tested this service and found it not to be IPv6-compatible, at least not as it is currently installed.
   * %IPV6_UNKNOWN%: To our knowledge, no one has tested this service for IPv6 compatibility yet.

---++ The Table

| *Service* | *Version* | *IPv6 Compatibility* |
| BDII | 4.0.2 | %IPV6_CLAIMED_NO% |
| Blogs | | %IPV6_UNKNOWN% |
| CE | | %IPV6_UNKNOWN% |
| Confluence | | %IPV6_UNKNOWN% |
| Data | | %IPV6_UNKNOWN% |
| Display | | %IPV6_UNKNOWN% |
| Event | | %IPV6_UNKNOWN% |
| GLOW GFactory | | %IPV6_UNKNOWN% |
| GratiaWeb | | %IPV6_UNKNOWN% |
| GUMS | | %IPV6_UNKNOWN% |
| JIRA | | %IPV6_UNKNOWN% |
| MIS-Submit | | %IPV6_UNKNOWN% |
| MyOSG | | %IPV6_UNKNOWN% |
| OASIS | | %IPV6_UNKNOWN% |
| OASIS Login | | %IPV6_UNKNOWN% |
| OASIS Replica | | %IPV6_UNKNOWN% |
| OIM | | %IPV6_UNKNOWN% |
| OSG TWiki | | %IPV6_UNKNOWN% |
| Perfsonar | | %IPV6_UNKNOWN% |
| Repo | | %IPV6_UNKNOWN% |
| RSV | | %IPV6_UNKNOWN% |
| RSV Client | | %IPV6_UNKNOWN% |
| RSV Process | | %IPV6_UNKNOWN% |
| Software | | %IPV6_UNKNOWN% |
| Ticket | | %IPV6_UNKNOWN% |
| TX | | %IPV6_UNKNOWN% |
| VOMS | | %IPV6_UNKNOWN% |
| Web | | %IPV6_UNKNOWN% |
| WN | | %IPV6_UNKNOWN% |

---++ IPv4-to-IPv6 Transition Process

The strategy used to transition a network from IPv4 to IPv6 depends on several factors, listed in decreasing order of the amount of control one usually has over the system:

   * IPv6 compatibility of the servers on the network (dependent on their OS)
   * IPv6 compatibility of the routers/switches/hubs to which the servers connect
   * IPv6 compatibility of the border routers between the network and the Internet
   * IPv6 compabilility of the routers/switches/hubs/servers at whatever site you want to communicate with

In this case, the IU network's equipment is compatible with both IPv4 and IPv6 all the way from the rack switches to the Internet.  It is thus a matter of the endpoints: the servers at the Operations Center and those of clients, plus whatever routers/switches they have, which are of course outside our realm of control.  Clients may be fully transitioned to IPv6, or they may be stalwartly supporting only IPv4, or anywhere in between, and ideally we should try to support whatever situation the clients find themselves in.

Thus we are choosing a dual-stacking strategy: servers will have both IPv4 and IPv6 network stacks and will thus have both IPv4 and IPv6 network addresses.  The only devices at the Operations Center that are not IPv6 compatible are devices that are for internal use only, and they can be gradually replaced with time, but in the meantime, supporting both IPv4 and IPv6 means that even those older devices will still be usable for now.

The steps we have been using in our transition to full dual-stacking capability are:

---+++ Firewall (Completed)

First of all, before one starts any form of networking, one should set up a firewall, to allow only desired packets in from the outside world but to allow unfettered flow of data from the network to the outside.  If one starts IPv6 networking and begins accepting packets from anywhere, one is open to attack by malicious users and cracking software.  The servers at the OSG Operations Center each run their own individual Netfilter firewalls, part of the Linux kernel, so it was a matter of setting up IPv6 firewalls similar to the existing IPv4 ones.

---+++ IPv6 Block Allocation (Completed)

Parallel to the firewall step, one must obtain a block of IPv6 addresses from whatever DNS authority exists at one's domain.  In the Operations Center's case, we requested and received a block of addresses from Indiana University's DNS administrators.

---+++ Infrastructure Test (Completed)

The networking infrastructure must be tested to make sure it can support IPv6.  Now, the following technique worked for the Operations Center because it had a preexisting unrouted private VLAN, but in most cases it would not be useful.  Assigning a Unique Local Address prefix for the Operations Center's private VLAN by generating five random octets and appending them to the "fd" prefix already defined for this purpose, we obtained an fdxx:xxxx:xxxx::/48 prefix and assigned two addresses within that range to two test virtual machines that were on hosts on separate racks (but still on the same VLAN).  Configuring those machines with their new IPv6 addresses, we were able to communicate from one to the other using ping6 and ssh.  The switching infrastructure is therefore proven to be IPv6-ready.

---+++ Underlying Code Updates (Ongoing)

The Operations Center uses a collection of scripts to automatically install services, allowing us to bring a service up on a new virtual machine in case of emergency.  The script that sets up the proper networking configuration on such a new VM is isolated in one script, which was updated to include the possibility of an IPv4/IPv6 dual-stacked machine: if an IPv6 DNS record were to exist for the hostname being installed, the script configures the machine's networking to use that IPv6 address, just as it already did with an IPv4 address when one existed.  It is also capable of setting the machine up to be IPv6-only, if only an IPv6 address is found, thinking toward the eventual future when this will be the case.

Likewise, any other underlying code that explicitly relies on IPv4 will need to be updated to include IPv6 support.

---+++ IPv6 Address Allocation (Ongoing)

One must then request that hostnames be assigned to addresses within the assigned block.  This is currently in progress.  Once at least some of those records exist within the DNS, one can proceed with limited testing.

The first step is to ensure that the existence of an IPv6 address for a hostname will not interfere with IPv4-only users' ability to contact the server.  It might be good to assign only a few IPv6 hostname records in DNS at first, for test VMs, to assess the impact of the appearance of these records on visitors to the test VM's services (a basic Apache server, perhaps).

---+++ Limited Testing

At this point, one can designate certain servers for dual-stack testing (or create virtual machines for this purpose).  We will enable IPv6 over the public network for certain test virtual machines whose failure, if it were to happen, would not affect any crucial services, or ideally, any services at all.  We will then test connectivity between those virtual machines and each other, and with known IPv6 sites on the Internet.

---+++ ITB Testing

We will then commence enabling IPv6 on the public network for ITB instances of services.  Such testing will likely not all be taking place at once, and progress will occur on a service-by-service basis.

---+++ Production Deployment

Once an ITB instance of a service has been determined to be IPv6 compatible to our satisfaction, we will then enable the production instance(s), during a production maintenance window.

---+++ Eventual Completion of Dual-Stack Transition

In time, all production services will have been transitioned to dual-stack operation.

---+++ IPv4 Attrition

There will come a time when we will be creating new services and instances thereof only on IPv6, not supporting IPv4 on these new instances at all.  Clients who wish to use these services would then be required to use IPv6.  The exact start date of this policy has, obviously, not yet been determined.  It is quite likely that this will affect ITB instances well before production instances.

---+++ IPv4 Turndown

At some point in the (probably distant) future, when the vast majority of clients are using IPv6 and IPv4 has largely become obsolete, the only services that support IPv4 will be aging older services.  We may decide to continue the attrition policy, or we may opt to disable IPv4 on a case-by-case basis.  This phase of the plan is obviously hugely dependent on many factors and may be subject to change.  It is possible that portions of the Indiana University network may cease to support IPv4 networking at some future date.  We frankly do not know.


---++ OSG Software Stack

The OSG Technology area is evaluating some components of the OSG software stack – which sites deploy as part of participating in the OSG – for IPv6 readiness. This evaluation is a separate project from the evaluation of OSG-hosted services (above), but the results will be reported here and in a common format.

---+++ OSG Software Compatibility Tests

Mostly, OSG software components will be tested according to OSG Operations Center’s definition of IPv6 compatibility (above). Specifically, we will test under two environments:

   A. Server is dual-stack, and client is dual-stack.
   A. Server is dual-stack, and client is IPv4 only

We have made some simplifying assumptions to reduce the amount of testin. We assume that the software works when both are IPv4-only and when the client is mixed-mode but the server is IPv4 only.  We will not be testing IPv6-only scenarios in this round of testing.

More information about the testing environments will be added later.

The three questions we want to answer for the software are:

   1. If client and server are mixed-mode, does the software still function?  (Environment "A" above)
   1. If client and server are mixed-mode, does the communication happen over IPv6? (Environment "A" above)
   1. If the client is IPv4-only and the server is mixed-mode, does the software still function? (Environment "B" above)


---+++ OSG Software Compatibility Table

Also, see [[http://hepix-ipv6.web.cern.ch/wlcg-applications][the HEPiX IPv6 table for WLCG applications]], for a similar effort.

|  *Component*  |  *Version*  |  *Dual-Dual*  | *D-D (Traffic over IPV6)*  |*Dual-IPv4*  |  *Notes*  |
| *Globus GRAM gatekeeper* | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% |%IPV6_UNKNOWN% | |
| *HTCondor CE* | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% |%IPV6_UNKNOWN% | |
|frontier-squid| | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|edg-mkgridmap | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|gip|| %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|osg-info-services|| %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|ndt| | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| RSV | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|*Tomcat*| | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| *GUMS* | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| *VOMS* ||||||||
| VOMS Admin| | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|VOMS Server | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| *Xrootd* | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| GridFTP | 6.14-5 | %IPV6_CLAIMED% | %IPV6_CLAIMED% | %IPV6_UNKNOWN% | Keith Chadwick at Fermilab has run gridftp server on itb|
| *bestman2* | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| *Gratia* | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|*HTCondor*||||||||
|HTCondor Schedd | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% |%IPV6_UNKNOWN% | |
|HTCondor Collector/Negotiator | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% |%IPV6_UNKNOWN% | |
|HTCondor Startd  | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% |%IPV6_UNKNOWN% | |
|*glideinWMS*||||||||
| glideinWMS FrontEnd | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% |%IPV6_UNKNOWN% | |
| glideinWMS Factory | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% |%IPV6_UNKNOWN% | |
| CVMFS | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| Fetch-crl | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| MyProxy | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
| Glexec (lcmaps-plugins-scas-client plugin)  | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|Uberftp | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|bwctl | | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|gsi-openssh| | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||
|owamp|  | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% | %IPV6_UNKNOWN% ||

%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = TomLee

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|General|Integration|Monitoring|Operations|Security|Storage|Tier3|User|VO)
   * Local DOC_AREA       = Operations

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (Developer|Documenter|Scientist|Student|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (HowTo|Installation|Knowledge|Navigation|Planning|Training|Troubleshooting)
   * Local DOC_TYPE       = Planning
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %NO%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = 
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %NO%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = 
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %NO%
############################################################################################################
-->
-- Main.TomLee - 10 Jun 2014
</noautolink>