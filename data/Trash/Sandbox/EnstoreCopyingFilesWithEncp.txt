%META:TOPICINFO{author="ForrestChristian" date="1173799784" format="1.1" version="1.4"}%
%META:TOPICPARENT{name="EnstoreIntro"}%
%LINKCSS%
---+!! Copying Files with encp
%TOC%

%STARTINCLUDE%
%EDITTHIS%

encp is an end-user command used to copy data files from disk to storage media and vice-versa. Its use is being discouraged in favor of the dCache, however we document it here for completeness. 

Encp is maintained in KITS and in AFS product space as a separate product from Enstore, and is designed to be used in conjunction with it. Encp does not support recursive copies of data to and from Enstore; ensync is provided as a wrapper to encp for that purpose when writing to Enstore, see [[EnstoreCopyingDirStructuresWithEnsync][Copying Directory Structures with Ensync]]. Encp can copy multiple files to a single directory only. Encp can be used only from on-site machines in the fnal.gov domain. For off-site use, see section [[Documentation.StorageDcacheCopying][Using the dCache to Copy Files to/from Enstore]]. 

In this chapter, we assume you have UPS/UPD running on your local machine. 


---+ Setup encp 
To setup encp, run the command: 

<verbatim>
setup -q <qualifier> encp
</verbatim>

where &lt;qualifier&gt; stands for one of the Enstore system hosts. Currently, these include: 

| *stken* | for general Fermilab (and CMS) users | 
| *d0en* | for D0 users |
| *cdfen* | for CDF users |

For example, a CDF experimenter would type: 

<pre class="screen">
$ <b>setup -q cdfen encp</b>
</pre>

If you don't specify the qualifier, the environment variable <code>ENSTORE_CONFIG_HOST</code> may get set to the wrong value (see [[#ImportantEnvironmentVariables][Important Environment Variables]]). Check that <code>ENSTORE_CONFIG_HOST</code> specifies the correct server. 


---+ Encp Command Syntax and Usage
=encp= plays the same role in the Enstore system that cp plays in UNIX. 

<verbatim>
 % encp [<options>] <source_file> <destination_file>
</verbatim>

With the exception of the option =--help=, we defer the list and definitions of options to [[EncpCommandOptions][encp Command Options]], and instead proceed with usage information. 

Use the =--help= option to request the option listing for encp (see [[EncpCommandOptions][encp Command Options]]), or the =--usage= option for syntax information: 

<pre class="screen">
% <b>encp --usage</b>

  encp [OPTIONS]... <source file> <destination file>
  encp [OPTIONS]... <source file> [source file [...]]\<destination>
</pre>


---+ Copy Files to and from Enstore Media 

---++ Run encp 
First, setup encp (using the -q flag). You can use filename expansion (wildcard characters to specify a group of files). We recommend, however, that you copy one file at a time. Run the command as follows to copy a file to Enstore: 

<verbatim>
encp [<options>] /<path-to>/.../<localfilename> \
  /pnfs/<storage-group>/.../<targetdir>/<remotefilename>
</verbatim>

The presence of /pnfs/ in the destination path indicates that this is a copy to the Enstore system (see section 1.2 PNFS Namespace). To copy from Enstore, change the source and destination file specifications, e.g.,: 

<verbatim>
% encp [<options>] /pnfs/<storage-group>/.../<targetdir>/<remotefilename> \ 
   /<path-to>/.../<localfilename> 
</verbatim>


---++ Examples 
Standard copy to Enstore; no options. Copy myfile to the directory <code>/pnfs/expt1/subdir/</code>: 

<pre class="screen">
% <b>encp /path/to/myfile /pnfs/expt1/subdir/</b>
</pre>

Standard copy; no options. Download <code>/pnfs/expt1/subdir/myfile</code> to a different local directory from the cwd, and change the filename: 

<pre class="screen"> 
% <b>encp /pnfs/expt1/subdir/myfile /other/local/dir/newfilename</b>
</pre>


Request the process to output some information to screen (--verbose). Again, copy myfile to the directory /pnfs/expt1/subdir/: 

<pre class="screen">
% <b>encp --verbose 3 /path/to/myfile /pnfs/expt1/subdir/</b>
</pre>

Copy all the files in the cwd starting with the string trigger1 to =/pnfs/expt1/subdir/=: 

<pre class="screen">
% <b>encp ./trigger1* /pnfs/expt1/subdir/</b>
</pre>

Copy all the files in =/pnfs/expt1/subdir/= starting with the string trigger1 to the cwd: 

<pre class="screen">
% <b>encp /pnfs/expt1/subdir/trigger1* .</b>
</pre>


---+ Additional Diagnostic Executables 
Packaged with encp are three executables:
   * ecrc: calculates the CRC of a file located on disk
   * ddencp: file to file copy using the same mechanism that encp uses.
   * en_check: reports if the specified file is on tape. 


---++ ecrc 
Usage: 

<verbatim>
   ecrc [-0 | -1] [-d | -h | -H | -a] [-v] <file_name>
</verbatim>

| *-0* | Use enstore's 0 seeded adler32 CRC algorithm. (default) |
| *-1* | Use the standardized 1 seeded adler32 CRC algorithm. The actual adler32 algorithm says that the CRC value shoule be initialized to 1. Enstore uses 0 for this value; not 1. | 
| *-d* | Display the output in decimal form (default). |
| *-h* | Display the output in lower case hexidecimal form. |
| *-H* | Display the output in upper case hexidecimal form. |
| *-a* | Display both the zero and one seeded CRCs in decimal and hexidecimal. |

For example,

<pre class="screen">
$ <b>ecrc -v ~/test_files/10MB_002</b>

  size 10485760 buf_size 1048576 blocks 10 rest 0 
  CRC 1294565006
</pre>

To see what CRC information Enstore knows, see EnstorePnfs, in particular the --xref option of the enstore pnfs command. 


---++ ddencp 
<code>ddencp</code> copies a local file to another local file. It uses the same mechanism that encp uses. Its uses include: measuring disk rates, checking for disk problems and determining which filesystems support different types of i/o. 

---+++ Usage 

<verbatim>
   ddencp [-cevt] [-a <# of buffers>] [-b <buffer size>] \
   [-l <mmap buffer size>] [-dmSDR] <source_file> [-dmSDR] \
   <dest_file>
</verbatim>

Where:
| *-c* | Remove the source file's contents from the filesystems buffer cache before performing the file transfer. This allows the user to always read from disk and get more accurate rates. This option does not work on all systems. | 
| *-e* | Performs a complete readback and CRC check of the destination file.  |
| *-v* | Print out verbose information. |
| *-t* | Use the multithreaded implementation. | 
| *-d* | Use direct i/o instead of POSIX i/o. This type of i/o bypasses the filesystem's buffer cache. | 
| *-m* | Use memmory mapped i/o instead of POSIX i/o. If -t is also specified the -t switch is ignored. | 
| *-S* | Use the O_SYNC option when opening the file. |
| *-D* | Use the O_DSYNC option when opening the file. |
| *-R* | Use the O_RSYNC option when opening the file. |
| *-a* | When used with -t, this option specifies the number of buffers that are used for the transfer. (default 3) |
| *-b* | This specifies the size of the transfer buffer. When used with the -t option, this is the size of each of the buffers. (default 256K) |
| *-l* | When using memmory mapped i/o, -m, this is the size of each segment of file that is mapped at one time. (default 256K) The position of the -d, -m, -S, -D and -R switches does effect the behavior. If the switch appears before the source_file, then it is active for just the source file. If it appears after the source file, but before the destination file then it only effects the destination file. To use the same switch for both the source and destination it must be specifed twice, once for each file. |


---++ en_check 
=en_check= determines if a file is on tape. 

---+++ Usage 

<pre class="screen">
en_check <pnfs_path>
</pre>

Results (exit statuses): 

| *0* | file is on tape |
| *1* | file is not on tape | 
| *2* | it was unable to determine (at this time) if it is on tape or is not on tape | 

 Reasons for exit status 2 include but are not limited to: 
    * Enstore is down for maintenance
    * the tape on which the file is believed to exist is in NOACCESS or NOTALLOWED state.

With the use of dCache, obtaining a non-success exit status is expected until dCache writes the file into Enstore. 


---+ More About encp 


---++ Preventing Unwanted Overwriting 
When an encp job starts, it first creates a zero length output file for every input file. In this way it reserves the necessary filenames and thus prevents another party from starting a competing encp process which would clobber the first. 


---++ Killing an encp Job 
There are four traditional ways to abort a process: 

   * Ctrl-C (SIGINT) 
   * Ctrl-\ (SIGQUIT) 
   * kill (SIGTERM) 
   * kill -9 (SIGKILL) 

The first three result in encp removing any remaining zero length files (as discussed directly above). With a &#8220;kill -9&#8221;, no cleanup occurs. For multi-file transfers, files successfully transferred before the signal is caught will be left alone. 


---++ Encp Transfer Rates Defined 
You can find out the network rates by running the command encp --verbose 1 or from the Encp History page (see section 10.10 Encp History). 

   $ *Network transfer rate*: The rate at which the file was transferred over the network between the encp node and the mover node, in megabytes per second. 

   $ *Transfer rate*: The rate measured when moving the file between the disk local to encp and the tape, in megabytes per second (includes reading file, network transfer of file and writing file, does not include tape mount or seek times). 

   $ *Drive rate*: The rate measured when reading/writing from/to the tape drive, in megabytes per second. 

   $ *Disk rate*: The rate of reading/writing the file from/to the disk local to encp, in megabytes per second. 

   $ *Overall rate*: The rate for the overall process (from when the mover connects to encp until the mover sends its final &#8220;success or failure&#8221; message to encp), including all encp and media overhead, in megabytes per second (this does not include time spent in the library manager queue). 


---++ Isolating Source of Bottlenecks 
Encp (as of v3_1) supports isolating the rate transfers in the tape, disk and network via the option --threaded used in conjunction with the option --verbose with a value of 1 or higher. If --threaded is not specified, then the network and disk rates are calculated the same way as before, and display the same value as one another. The various rates are defined in the online monitoring pages, under [[http://www-stken.fnal.gov/enstore/encpHelp.html][Encp History Help]].

Here is an example without =--threaded= (with off-topic output removed for brevity): 

<pre class="screen">
 % <b>encp --verbose 1 /pnfs/xyz/10MB_002 /tmp/myfile</b>
	...
  Transfer /pnfs/xyz/10MB_002 -> /tmp/myfile: 10485760 bytes

  copied from 'TEST01' at 1.57 MB/S 
  (1.67 MB/S network) (2.87 MB/S drive) (1.67 MB/S disk) 
  ... 
  Completed transferring 
  14.2875500917 sec. 
  10485760 bytes in 1 files in 
  Overall rate = 0.7 MB/sec. Drive rate = 2.87 MB/sec. 
  Network rate = 1.67 MB/sec. Exit status = 0. 
</pre>

Note in the above output, the network and disk rates are the same. Here is an example with =--threaded= and =--verbose 1= (abbreviated output); note that the rates are separated, so that you can see where the bottleneck is (the disk, in this case):

<pre class="screen">
% <b>encp --verbose 1 --threaded /pnfs/xyz/10MB_002 /tmp/myfile </b>
  ... 
  Transfer /pnfs/xyz/10MB_002 -> /tmp/myfile: 
  10485760 bytes copied from &#8216;TEST01&#8217; at 2.41 MB/S 
  (8.09 MB/S network) (9.36 MB/S drive) (2.71 MB/S disk) 
  ... 
  Completed transferring 
  14.9129179716 sec. 
  10485760 bytes in 1 files in 
  Overall rate = 0.671 MB/sec. Drive rate = 9.36 MB/sec. 
  Network rate = 8.09 MB/sec. Exit status = 0. 
</pre>

The network and drive each have rates above 8 MB/s, and the disk rate is only 2.71 MB/s. 

---++ Encp Error Handling 
<code>encp</code> has functionality to retry and resubmit requests, where we distinguish between these two terms. Encp will retry (i.e., resend) a request after an error occurs. Encp will resubmit a request if it has been waiting for a mover for over 15 minutes; this is not due to an error condition but rather to keep queues current regardless of the server condition. The encp exit statuses are zero (0) for success, one (1) for error. 

There are two general classifications of errors in encp: those that can be retried and those that can&#8217;t. Three &#8220;retriable&#8221; errors can occur before the error &#8220;TOO_MANY_RETRIES&#8221; occurs. 

The most common nonretriable errors include: 
   $ <code>NOACCESS</code>: the system has marked the volume as &#8220;potentially&#8221; bad 
   $ <code>NOTALLOWED</code>: an enstore administrator has marked a tape as unavailable for user access USERERROR usually is a file accessibility problem (doesn&#8217;t exist, has wrong permissions, etc.) 

Among the less common ones, there are: 

   $ <code>VERSION_MISMATCH</code>:  the encp version is no longer compatible with the running Enstore system 
   $ <code>CRC_MISMATCH</code>: indicates a corruption error 
   $ <code>FILE_WAS_MODIFIED</code>: encp determined that another file modified the file during the transfer 

Ask your Enstore administrator if you see others. 


---++ Finding files in different Enstore systems 
---+++ File reads
When reading from Enstore, encp can determine whether the current value of $ENSTORE_CONFIG_HOST (see section [[#ImportantEnvironmentVariables][Important Environment Variables]]) is pointing to the Enstore system that contains the requested file. If it points to the wrong one, encp will try the other Enstore installations to find the requested file. If the file is found, encp will retrieve the file; if the file is not found on any Enstore system, an error is returned to the user. 

---+++ File writes
When writing to Enstore; the value of $ENSTORE_CONFIG_HOST is always used.


---++ Order of Processing Queued Requests 
For reads, files are sorted out by volume. When all files from a single volume are complete, the next volume&#8217;s files are requested. 

For writes, one file at a time is submitted to the library manager. The order is that in which the files are specified on the command line. The tape is kept mounted during file writes on a best-effort basis. See Chapter 11: Job Priority and Queue Management for more information.


---++ NULL File Directories 
When encp accesses files via a null mover, a directory in the filepath must contain the name NULL, e.g., /pnfs/expt1/NULL/myfile. 


---++ Important Environment Variables 
There are two important environment variables that are generally set in the Enstore setup script. Users who work on more than one Enstore system (e.g., stken and cdfen) at a time in different windows may need to know about these in case they use the wrong window for a particular Enstore system! 

The variables are: 

   $ <code>&#36;ENSTORE_CONFIG_HOST</code>: points to the Enstore server that is running the configuration server (see section 8.6 Configuration Server).  %BR%  All production systems currently use srv2 (i.e., cdfensrv2, d0ensrv2 or stkensrv2) as the $ENSTORE_CONFIG_HOST computer. This is different from the computer from which the pnfs filesystem is mounted (which is srv1, i.e., cdfensrv1, d0ensrv1, stkensrv1). 
   $ <code>&#36;ENSTORE_CONFIG_PORT</code>: sets the port number; the value is (by convention) 7500 for all installations at Fermilab. 


---+ Encp Command Options
Options with %ICON{"stop"}% icons must be used with utmost care. These options, if misused, can adversely affect not only your jobs, but those of others. 
Options with %ICON{"warning"}% icons, if misused, may adversely affect your own job. They will not affect others' jobs. 

| %ICON{"stop"}% | --age-time &lt;AGE_TIME&gt;<sup> [[#FootnoteStop][&dagger;&dagger;]]</sup> | Specifies the time period, in minutes, after which the priority is eligible to change from the initial job priority. We recommend that you don&#8217;t set this, just use the default (which is &#8220;never&#8221;). |
| %ICON{"warning"}% | --array-size &lt;ARRAY_SIZE&gt; | Sets the number of buffers in the array. If --threaded is specified but this option is not, array-size defaults to 3. If this is used without --threaded, this value becomes 1 and is ignored. Changing this value for multi-threaded transfers may increase transfer speed. |
| %ICON{"warning"}% | --buffer-size &lt;BUFFER_SIZE&gt; | Sets the number of bytes of data to transfer at one time (default is 256k). Increasing this value may increase transfer speed. This value must remain lower than the available memory. |
| %ICON{"warning"}% | --bypass-filesystem-max-filesize-check | Disables the check to protect against the user reading from Enstore a file larger than the maximum size file the local filesystem supports. Use this switch with care. |
|  | --check | Checks that enstore is running, that the metadata is ok, and that encp would thus start. Running the encp command successfully using this switch is not sufficient to guarantee that a transfer would succeed.   %BR% Result of 0 is success, 1 is failure, 2 means indeterminable at this time. |
|  | --data-access-layer | Turns on special status printing; output has standardized format whether error occurred or not. |
| %ICON{"stop"}% | --delayed-dismout &lt; DELAY&gt; | Specifies time period in minutes to delay dismount of volume. Use this to tell Enstore: &#8220;More work is coming for the volume, don&#8217;t dismount the volume too quickly once the current transfer is completed.&#8221; |
| %ICON{"stop"}% | --delpri &lt;DELPRI&gt;<sup> [[#FootnoteStop][&dagger;&dagger;]]</sup> | Changes the initial job priority by specified value after a period given by the age-time switch. We recommend that you don&#8217;t set this, just use the default (1). |
| %ICON{"warning"}% | --direct-io | Uses direct I/O for disk access on supporting file systems[[#FootnoteDirectIo][&dagger;]]. Generally, direct I/O makes disk access slower. But when the size of the read/write buffer is made large enough, say, 64Mb or larger, direct I/O is faster because of the skipped memory-to-memory copy. |
|  | --ecrc | "Enstore crc". This can be used when reading from Enstore. After a file is written to disk, this causes Enstore to reread the disk copy of the file and recalculate the checksum on it. || 
| %ICON{"stop"}% | --ephemeral<sup>[[#FootnoteEphemeral][&dagger;]]</sup> | This option creates a temporary file family of name &#8220;ephemeral&#8221;, and copies files to this ephemeral file family on storage media in the order specified. Overrides file family tag in /pnfs destination directory. |
| %ICON{"stop"}% | --file-family &lt;FILE_FAMILY&gt;<sup>[[#FootnoteEphemeral][&Dagger;]]</sup> | This is used to write data on volumes assigned to specified file family. Overrides file family tag in /pnfs destination directory. |
|  | --help | Displays the list of options for encp. |
| %ICON{"warning"}% | --mmap-io | Uses memory-mapped I/O for disk access on supporting file systems (see the Enstore Glossary for an explanation). Make sure you have read and write permissions on the file. |
| %ICON{"warning"}% | --mmap-size &lt;MMAP_SIZE&gt; | The amount of data to map from the file to local memory at one time in bytes (default is 96Mb); use with --mmap-io. |
|  | --no-crc | Tells encp to bypass the crc1 on the local file. (For the minor performance enhancement that this affords, you lose both the encp crc and the one performed by the mover; we discourage use of this option.) |
|  | --pnfs-is-automounted | Typically, users should not automount pnfs. If you do, you can specify this option. It alerts encp to retry errors due to known OS automounting problems. Do not use this in non-automounted cases; it can slow the setup of the transfer. |
| %ICON{"stop"}% | --priority &lt;PRIORITY&gt;<sup> [[#FootnoteStop][&dagger;&dagger;]]</sup> | Sets the initial job priority to the specified integer value. We recommend that you don&#8217;t set this, just use the default. |
|  | --threaded | Multithreads the actual data transfer. |
|  | --usage | Displays information about the encp options. |
|  | --verbose &lt;LEVEL&gt; | Changes the amount of information printed about the transfer; provide an integer value. Default is 0. Larger integer numbers provide more &#8220;verbosity&#8221;. Largest meaningful number may change as development continues. |
|  | --version | Displays encp version information. |


#FootnoteDirectIo
 $ *<sup>&dagger;</sup>*: Direct I/O is not universally supported; some filesystems, versions of filesystems, kernels, etc. do not support it. If this doesn&#8217;t work for you, contact an enstore admin, and communicate your kernel, library versions, filesystem and filesystem version.
#FootnoteEphemeral
   $ *<sup>&Dagger;</sup>*: The options --ephemeral and --file-family require care when used so that tapes do not get mounted in a way that causes improper and/or inefficient tape usage. Beware of runaway scripts! |
#FootnoteStop
   $ *<sup>&dagger;&dagger;</sup>*: If you feel compelled to set =--age-time=, =--delpri= or =--priority=, please email =enstore-admin at fnal gov= first with an explanation, as the defaults should work in almost all cases and changing them may affect other users. Priority goes in strict number sequence, where a higher number means higher priority. Note that Enstore's selection of which file to transfer at a given time uses a much more complicated algorithm than simple priority, however. See Chapter 11: Job Priority and Queue Management. 

%STOPINCLUDE%

%BOTTOMMATTER%