%META:TOPICINFO{author="MarcoMambelli" date="1381056565" format="1.1" version="1.5"}%
<!-- conventions used in this document
   * Local UCL_HOST = %URLPARAM{"INPUT_HOST" encode="quote" default="hostname"}%
   * Local UCL_USER = %URLPARAM{"INPUT_USER" encode="quote" default="user"}%
   * Local UCL_DOMAIN = %URLPARAM{"INPUT_DOMAIN" encode="quote" default="opensciencegrid.org"}%
   * Set TWISTY_OPTS_DETAILED = mode="div" showlink="Show Detailed Output" hidelink="Hide" showimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleopen-small.gif" hideimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleclose-small.gif" remember="on" start="hide" 
   * Set TOC2 =<div style="float:right; margin-right:-1.015em; padding:0.5em; background-color:white;">%TOC%<p class="twikiClear" /></div>
-->


---+!! Connecting to OSG to analyze images

Let's assume I have a lot of scientific data to analyze, e.g. I want to count the cells in many images stored on my computer, and I don't have the computing power to complete in a timely manner.
Opportunistic resources on Open Science Grid and some tools available to its community can help me get the task done.
In this tutorial I will show:
   * how to register on OSG Connect to get access to OSG resources
   * how to easily move your data so that it can be available on the Web and used by your jobs
   * how to install and use BOSCO to submit the python jobs and retrieve the results on your laptop or workstation

---+ The task

I have several pictures like this:
     <img src="%ATTACHURLPATH%/cellimage.png" alt="cellimage.png" width='300' height='300' />    

These pictures look a bit like biological samples where cells (clusters of different luminosity) are visible on top of a background.
And I'd like to count the "cells" into the picture. 
This is done by a clusterization process illustrated in the following image and [[http://pythonvision.org/basic-tutorial][this tutorial]]:
     <img src="%ATTACHURLPATH%/segmentation_example.png" alt="segmentation_example.png" width='617' height='203' />    





---+ Register on OSG Connect

1. Go to the [[https://osgconnect.net/][OSG Connect web site]] and register by clicking on "Log In or Register" (upper right corner) and following the instructions. [[https://confluence.grid.iu.edu/display/CON/Registration+and+login+instructions][Here a document explaining the registration]].

2. [[https://portal.osgconnect.net/Groups][Join a project]] or [[https://confluence.grid.iu.edu/display/CON/Start+a+Project+with+OSG+Connect][create a new project]] (e.g.  one describing your research activity Test-CellCounting).

3. Login on =login.osgconnect.net= and start submitting your jobs. [[https://confluence.grid.iu.edu/display/CON/OSG+Connect+Quickstart][Here is a quickstart guide]] but you'll feel right at home if you are fmiliar with HTCondor. Just remember to specify a =ProjectName= in your jobs or to add a =$HOME/.osg_default_project= file with your default project name.

And there is much more: [[https://confluence.grid.iu.edu/display/CON/Home][ConnectBook]] is a collection of guides.

---+ Transfer the files

The directory ==~/data/public== is exported on the Web by stash as ==https://stash.osgconnect.net/+USER_NAME/== (where USER_NAME is your user name on OSG Connect)and you can use it to move your data. See [[https://confluence.grid.iu.edu/display/CON/Access+Stash+remotely+from+your+job+using+HTTP][Access Stash remotely from your job using HTTP]] for an example.

I will use this feature and transfer my files there using [[https://confluence.grid.iu.edu/display/CON/Using+Globus+Online+with+Stash][Globus Online]].

---+ Install and setup BOSCO

---++ Download & Install Bosco
This is a very abbreviated install document for Bosco.  For the full install document, view [[BoscoQuickStart][Bosco Quick Start Installer]].  

<literal>
 <a href="http://bosco.opensciencegrid.org/download/">
     <img src="https://raw.github.com/osg-bosco/bosco-download-images/master/images/download-orange.png" 
     alt="Bosco Download"
     style="border-width: 0;"/>
 </a>
</literal>

   
Visit the Bosco [[http://bosco.opensciencegrid.org/download/][download]] page.  Choose the Quick Start Installer.  After downloading the installer, from the terminal, untar it and run the installer as a regular user:
<pre class="screen">
%UCL_PROMPT% tar xvzf ./bosco_quickstart.tar.gz
%UCL_PROMPT% ./bosco_quickstart
</pre>


---++ Starting Bosco & adding your first cluster using the quick start

==login.osgconnect.net== is an HTCondor resource I can connect to BOSCO answering the questions:
   * login.osgconnect.net (FQDN of the cluster)
   * myuser (my user name)
   * condor (queue manager in the cluster)


---+ Run the code

You can test the job locally on your laptop/workstation or =login.osgconnect.net= but then all the jobs will run on different resources across OSG, all with different software stacks. So I don't know if the software I'm using will be available.

Anyway there are software packages like R and Anaconda (Python, !NumPy, ...) available across almost all of OSG thanks to [[https://twiki.grid.iu.edu/bin/view/CampusGrids/OsgPalms][PALMS]] and [[https://indico.cern.ch/contributionDisplay.py?contribId=277&sessionId=4&confId=214784][OASIS]]. 
And I can make sure that my job runs on a node where PALMS and OASIS are available.
See [[https://confluence.grid.iu.edu/display/CON/Software+access+using+OASIS][Software access using OASIS]] for detailed instructions on how to use PALMS and OASIS and for a list of the available software.

Python 2.7.5 with all the scientific libraries (the ones included in [[http://continuum.io/downloads][Anaconda]]) is all that I will need for my jobs.

Here is the python script counting the "cells" in the image. This is a simplified version. On a real analysys the treshold is more complex than a simple average and some pre-filtering of the image or pattern recognition are used to improve the results:
<pre>#!/bin/env python
# count_cells.py - script counting the cells in the image

import numpy as np
from scipy import ndimage
import Image
from scipy.misc import fromimage

# Import image
pic = Image.open("./cellimage.tiff")
im = fromimage(pic)

# Evaluate treshold and segment the image
T = im.mean()
mask = im > T
label_im, nb_labels = ndimage.label(mask)

# print result
print nb_labels
</pre>

Here is a wrapper script that downloads the image file, sets up the environment and launches the python script.
*Replace USER_NAME with your username on login.osgconnect.net*:
<pre>#!/bin/sh
# job_wrapper.sh - script guiding the job execution
IMAGE_FILE=cellimage.tiff
IMAGE_URL=http://stash.osgconnect.net/+%RED%USER_NAME%ENDCOLOR%/images/cellimage$1.tiff

# download the file
wget -O $IMAGE_FILE "$IMAGE_URL"  >&2
if [ ! $? -eq 0 ]; then
  echo "Wget failed. Trying curl." >&2
  curl -o $IMAGE_FILE  "$IMAGE_URL" >&2
  if [ ! $? -eq 0 ]; then
    echo "Also curl failed. Exiting." >&2
    ls -l >&2
    exit
  fi
fi
if [ ! -f ./$IMAGE_FILE ]; then
  echo "Missing image file ./$IMAGE_FILE. Exiting." >&2
  ls -l >&2
  exit
fi

# setup the environment
source /cvmfs/oasis.opensciencegrid.org/osg/palms/setup 1>&2
palmsdosetup anaconda 1>&2

python ./count_cells.py
</pre>

Here is the HTCondor submit file:
<pre># job.sub - HTCondor submit file
# If submitting from login.osgconnect.net use: universe = vanilla
# When submitting via BOSCO use:
universe = grid

# remember to create the batch1 directory
Error   = batch1/job.err.$(Cluster)-$(Process)
Output  = batch1/job.out.$(Cluster)-$(Process)
Log     = batch1/job.log.$(Cluster)

# Remember to set the job_wrapper.sh es executable (chmod +x):
Executable     = job_wrapper.sh
Arguments = $(Process)
Transfer_input_files = count_cells.py
ShouldTransferFiles = YES
When_to_transfer_output = ON_EXIT

Requirements = (HAS_CVMFS_oasis_opensciencegrid_org =?= TRUE) && (CVMFS_oasis_opensciencegrid_org_REVISION >= 729)
+ProjectName = "ConnectTrain"

# Submitting 100 jobs to analyze 100 different images
queue 100
</pre>

To submit the jobs I did the usual as documented in the [[https://twiki.grid.iu.edu/bin/view/CampusGrids/BoscoQuickStart#3_How_to_submit_a_job][BOSCO quickstart]]. condor_submit returns a job ID that you will then use for the following commands (referred as %RED%JOB_ID%ENDCOLOR% below). To be more precise the number returned is the job cluster ID, then within my cluster there are 100 job processes (0 to 99), each analyzing a different image:
   * to submit: =condor_submit job.sub=
   * then to monitor the jobs running: =watch -n 2 condor_q %RED%JOB_ID%ENDCOLOR%=

Once the jobs completed, the result (cells counted in the image) was returned in the jobs standard output that is copied locally. To sum all the cells I evaluated the total. Replace jour job ID (returned by condor_submit) in the command below:
<pre>
cat batch1/job.out.%RED%JOB_ID%ENDCOLOR%-* | paste -sd+ - | bc
</pre>



-- Main.MarcoMambelli - 26 Sep 2013



  

%META:FILEATTACHMENT{name="segmentation_example.png" attachment="segmentation_example.png" attr="" comment="" date="1380221443" path="segmentation_example.png" size="71697" stream="segmentation_example.png" tmpFilename="/usr/tmp/CGItemp64605" user="MarcoMambelli" version="1"}%
%META:FILEATTACHMENT{name="cellimage.png" attachment="cellimage.png" attr="" comment="" date="1380221571" path="cellimage.png" size="40904" stream="cellimage.png" tmpFilename="/usr/tmp/CGItemp64696" user="MarcoMambelli" version="2"}%
%META:FILEATTACHMENT{name="htcondor_job_times.png" attachment="htcondor_job_times.png" attr="" comment="" date="1381046748" path="htcondor_job_times.png" size="38000" stream="htcondor_job_times.png" tmpFilename="/usr/tmp/CGItemp2531" user="MarcoMambelli" version="3"}%
%META:FILEATTACHMENT{name="htcondor_job_times_22.png" attachment="htcondor_job_times_22.png" attr="" comment="" date="1381046371" path="htcondor_job_times_22.png" size="64898" stream="htcondor_job_times_22.png" tmpFilename="/usr/tmp/CGItemp2802" user="MarcoMambelli" version="1"}%
