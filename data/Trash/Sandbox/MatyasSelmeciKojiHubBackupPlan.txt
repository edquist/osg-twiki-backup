%META:TOPICINFO{author="MatyasSelmeci" date="1375400366" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="MatyasSelmeciSandbox"}%
---+ Koji backup plans

Parts of our build infrastructure that we need backed up:
   1. Configuration on the build server
   1. Existing packages that we've built
   1. Database of build metadata
   1. Configuration on the build host(s)
   1. Package signing key

---++ 1. Configuration on the build server (Priority: High)

Currently the configuration files on our primary build server are almost completely unmanaged.
Their backup status is also uncertain.
In case of a machine failure, restoring build services to full functionality would be based on 2-year-old documentation that has not been tested.
This is assuming all other data (database, packages) is recoverable, which is also uncertain (see later).
Modern configuration management tools are well understood by our sysadmins, and would be invaluable in both tracking changes to configuration, and restoring it in the event of a failure.
The Software team should migrate our existing configuration, and verify its functionality by setting up a clone of our build server using only these configuration management tools.
This requires the assistance of CHTC infrastructure staff so that they can integrate our configuration into their environment.

   * Estimated recovery time without backups: 1 FTE-week
   * Estimated time to implement backup: 0.5 FTE-weeks
   * Estimated time to implement configuration management: 0.5 FTE-weeks
   * Estimated recovery time with backups only: 1 FTE-day
   * Estimated recovery time with configuration management: 1&mdash;2 FTE-hours
   * User impact: no package updates until fixed

---++ 2. Existing packages that we've built (Priority: Critical)

The existing packages that we've built (and, partially, shipped) also have an uncertain backup status.
Though the repositories that the packages end up in are copied to the GOC, not all packages that we build or have built get copied.
Furthermore, the way our packages are organized in the Koji system is NOT saved at the GOC, and recreating that organization would be required before the Software team could continue work.
There are two failure cases:
   (a) Mirrors do not mirror failure
   (b) Mirrors mirror brokenness (happened to jPackage)
The Software team must ensure that proper backup and archival procedures are in place.
Backups of packages should be synchronized with database backups (see below).

   * Estimated recovery time without backups: %RED%1 FTE-month%ENDCOLOR% (failure case (a)) or %RED%2 FTE-months%ENDCOLOR% (failure case (b))
   * Estimated time to implement backup: 1&mdash;2 FTE-days
   * Estimated recovery time with backups: 1 FTE-day
   * User impact: no package updates until fixed (unless the mirrors also break, in which case no packages at all until fixed)

---++ 3. Database of build metadata (Priority: Critical)

The main build system database contains information on things like "which RPMs belong in which repositories" (or for that matter, "which RPMs exist").
Again, backup status is uncertain.
There are two failure cases:
   (a) Mirrors do not mirror failure
   (b) Mirrors mirror brokenness (happened to jPackage)
The Software team must ensure that proper backup and archival procedures are in place.
Backups of the database should be synchronized with package backups (see above).

   * Estimated recovery time without backups: %RED%1 FTE-month%ENDCOLOR% (failure case (a)) or %RED%2 FTE-months%ENDCOLOR% (failure case (b))
   * Estimated time to implement backup: 1&mdash;2 FTE-days
   * Estimated recovery time with backups: 1 FTE-day
   * User impact: no package updates until fixed (unless the mirrors also break, in which case no packages at all until fixed)

---++ 4. Configuration on the build host(s) (Priority: Low)

Currently we have one build host, not including our main server.
Again, unmanaged configuration that isn't backed up.
If the Software team implements configuration management of the main server, adding in configuration management of build hosts should be a small amount of extra work.
Furthermore, this task would allow us to create additional build hosts at minimal effort cost, increasing build throughput.

   * Estimated recovery time without config management: 1 FTE-day
   * Estimated time to implement config management: 1 FTE-day (if we also implement config management for the server. 0.5 FTE-weeks if we don't)
   * Estimated recovery time with config management: 1 FTE-hour
   * User impact: no package updates until fixed

---++ 5. Package signing key (Priority: Medium)

The package signing key is a private key that the Software team uses to ensure the integrity of packages that we build.
There are two disaster scenarios here: (a) loss (deletion/corruption) of private key, and (b) compromise of private key

(a) is less worrisome: after the key is lost, we create a new one, and use the new key to sign new packages.

(b) is much worse.
In addition to having to create a new key, we must revoke the old key and rebuild / re-sign all packages we ship with the new key.

The Software team (with assistance from the Security team?) must evaluate backups and vulnerability of the private key.

   * Estimated recovery time: ?
   * Estimated time to evaluate backups and security: ?
   * User impact:
      * No package updates until fixed
      * (a) and (b): Manual step required to obtain new key
      * (b) no way to verify packages until fixed

-- Main.MatyasSelmeci - 01 Aug 2013

   *  Set HTTP_EQUIV_ON_VIEW = <meta name="robots" content="noindex,nofollow">
