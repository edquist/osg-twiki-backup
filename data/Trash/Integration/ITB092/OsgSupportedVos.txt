%META:TOPICINFO{author="KyleGross" date="1328026225" format="1.1" version="1.22"}%
%META:TOPICPARENT{name="Trash.ReleaseDocumentationComputeElementAuthorization"}%
---+!! *<nop>%SPACEOUT{ "Validating Supported VOs and Unix Accounts" }%*

%TOC%

---++ Validating supported VOs and Unix accounts
An important question you should ask yourself is whether or not your site really supports the Virtual Organizations (VOs) you think it supports. How do you know? There are three files that give you insight into the underlying processes that set up the mappings from global identities (user certificate names) to local accounts, and therefore answer this question. Whether you used GUMS or edg-mkgridmap to handle these mappings, these files will help you verify if you are supporting the VOs you wish you support.

These three files are:
   * VDT_LOCATION/monitoring/osg-user-vo-map.txt
   * VDT_LOCATION/monitoring/osg-undefined-accounts.txt
   * VDT_LOCATION/monitoring/osg-supported-vos-list.txt

The _osg-user-vo-map.txt_ tells you for each account what VO is associated with that account. (By "each account", we just mean accounts used by GUMS or edg-mkgridmap, not other accounts on your system.) It is a critical component to the following services:
   * [[https://twiki.grid.iu.edu/twiki/bin/view/Accounting/WebHome][OSG Accounting Services (Gratia)]] - in accurately collecting grid resource usage and metrics by VO for jobs submitted using grid proxies or where voms proxy information is not available.   Note: This is the VO name collected by the Gratia probe is not necessarily the one displayed in Gratia reporting services.  Refer to the [[https://twiki.grid.iu.edu/twiki/bin/view/Accounting/WebHome][OSG Accounting Services]] for information on how it uses this value.
   * [[GenericInformationProvider][Generic Information Provider (GIP)]]: in advertising resource availability on a VO basis.
   * [[MonALISA][MonALISA]] - in reporting accounting information by VO.  Note: this is an optional component of an OSG CE installation.
   * In the configuration validation (using _configure-osg.py_ ) for your CE of any attributes that reference a VO name in the _config.ini_ file.

The _osg-undefined-accounts.txt_ file provides a list of those UNIX accounts that can be assigned by your authorization service, but have not been defined on your CE node. You can read this as "the list of accounts you should make, if you want to accept all the VOs you claim to accept".

The _osg-supported-vos-list.txt_ file provides an easy means of determining which VOs your sites will support based on your authorization service. If a VO isn't listed here, your site doesn't really support it, even if you think it should.

These files should never be manually modified if either the _edg-mkgridmap_ or _gums-host-cron_ are enabled (both are cron initiated processes).


---+++ osg-user-vo-map.txt
The _osg-user-vo-map.txt_ file provides the ability to map from a UNIX account (assigned by the CE's authorization service) back to  the grid user's VO.    There are actually 2 different forms of the VO name for reporting purposes:
   * a case sensitive VO name ( _#VOc_ line in the example below) used only by !MonALISA
   * a lower case VO name ( _#voi_ line in the example below) used by the other OSG services.

<pre class="programlisting">
<b>Example content: (this example will be referred to by the other subsections on this topic)</b>

#voi cdf fermilab  uscms  miniboone usatlas
#VOc CDF FERMILAB CMS FERMILAB USATLAS
cdf cdf
fnalgrid fermilab
uscms124 uscms
uscms132 uscms
minboone miniboone
</pre>
The file is interpreted as follows:
   * The uncommented lines are the mapping of UNIX account (token 1) to _#vo_ VO name (token 2).
   * The mapping from lower case VO name is performed using the tokens on the _#voi_ and _#VOc_ lines for which there is a one-to-one positional relation:%BR%
       - The _#voi_ lines represent the lower case VO name.%BR%
       - The _#VOc_ lines represent the case sensitive VO name used by !MonALISA

Thus, from the above example, the mappings would result in:
|  __UNIX%BR%Account__  |  __lower case%BR%VO Name__  |  __case sensitive%BR%VO Name__  |
|  cdf  |  cdf  |  CDF  |
|  fnalgrid  |  fermilab  |  FERMILAB  |
|  uscms124  |  uscms  |  CMS  |
|  uscms132  |  uscms  |  CMS  |
|  minboone  |  miniboone  |  FERMILAB  |

As mentioned earlier, those CE nodes using either the _edg-mkgridmap_ or _gums-host-cron_ cron processes will have the 3 files programmatically maintained based on these lines in the respective configuration files:

---++++ Using Gridmap authorization mode
For those sites using _grid-mapfile_ authorization mode (using the _edg-mkgridmap_ cron process), the __edg-mkgridmap.conf__ file is used to define the mappings found in the osg-user-vo-map.txt.
<pre class="programlisting">
# USER-VO-MAP cdf CDF 
group vomss://voms.cnaf.infn.it:8443/voms/cdf cdf
# USER-VO-MAP uscms CMS 
group vomss://voms.cnaf.infn.it:8443/voms/cms uscms01
</pre>%BR%
The _# USER-VO-MAP_ identifies this as a candidate for the _osg-user-vo-map.txt_ file%BR%
   * the 3rd token (_cdf_  and _uscms_ ) is the _#voi_ VO name
   * the 4th token (_CDF_ and _CMS) is the _#VOc_ VO name.
Any uncommented line(s) following the  _# USER-VO-MAP_ line identify the source of the VO membership (the VOMS server) and account to be assigned
   * the 3rd token (_cdf_ and _uscms01_) is the UNIX account.

The resulting _osg-user-vo-map.txt_ file would look like this:
<pre class="programlisting">
#voi cdf uscms
#VOc CDF CMS
cdf cdf
uscms01 uscms
</pre>

---++++ Using Full Privilege (GUMS) authorization mode
For those CE sites in Full Privilege (GUMS) authorization mode using the _gums-host-cron_ cron process, the _gums.config_ file is used to define these mappings.  

In the OSG _gums.template_ , it would look like this
<pre class="programlisting">
&lt;groupMapping name='cdf-cnaf' accountingVo='cdf' accountingDesc='CDF'&gt;
&lt;userGroup .... 
   &lt;accountMapping className='gov.bnl.gums.GroupAccountMapper'
    groupName='cdf' /&gt;
        :
&lt;groupMapping name='cmsuser' accountingVo='uscms' accountingDesc='CMS'&gt;
&lt;userGroup .... 
   &lt;accountMapping className='gov.bnl.gums.GroupAccountMapper'
    groupName='uscms01' /&gt;
</pre>

The _groupMapping_ element identifies this as a candidate for the _osg-user-vo-map.txt_ file%BR%
   * the _accountingVo_ attribute (_cdf_ and _uscms_) is the _#voi_ VO name.
   * the  _accountingDesc_ attribute (_CDF_ and _CMS_) is the _#VOc_ VO name.
   * the _groupName_  attribute (which is the UNIX account assigned) and the _accountingVO_ attribute provide the detail line mapping UNIX account to _#voi_ VO name.  Note: This example is simplified by using group accounts.  If pool accounts are used, it will create a detail line for each pool account assigned.

The resulting _osg-user-vo-map.txt_ file would look like this:
<pre class="programlisting">
#voi cdf uscms
#VOc CDF CMS
cdf cdf
uscms01 uscms
</pre>

A couple __real important__ points follow:
   1 If a group mapping is defined on the GUMS server but the group is currently empty, there will be __no detail line entry__ for that UNIX account to _#voi_ VO name in the osg-user-vo-map.txt.  The presence of a _UNIX account_ in the _osg-user-vo-map.txt_ as generated by GUMS means that there is at least one DN in the VO that can map to that group.  
   1 The above point is __especially important when pool accounts__ are used.  If a first time grid user (for the CE node) is assigned a new pool account __and__ the _gums-host-cron_ process has not run, the services that attempt to find the VO name will not be successful.  This is a timing issue and should not affect those service significantly __if__ the _gums-host-cron_ is run on a timely basis.
   1 Additionally, __a verification is made to determine if the UNIX account exists__ on that CE node.  If the UNIX account does not exist, that UNIX account is removed from the detail line of the  _osg-user-vo-map.txt_ file.  If a grid user is assigned that account, the service requested will never be able to successfully run. These discarded UNIX accounts are listed in the [[OsgSupportedVos#osg_undefined_accounts_txt][osg-undefined-accounts.txt]] files describe in a subsequent section.

The points, listed above, have an affect on the set of supported VOs the various services report on.

When all UNIX accounts have been validated, the _osg-user-vo-map.txt_ file is re-evaluated to determine the set of OSG VOs  that this CE node will support.  By that, it is meant that at least one VO's member can expect to the authorized and successfully assigned an account that will run for this CE node.  The [[OsgSupportedVos#osg_supported_vos_txt][osg-supported-vos-list.txt]] file contains this list of VOs.

This _osg-user-vo-map.txt_ file's timestamp will only change when the contents of the file changed. To assist in verifying the currency of the file, another file called _osg-user-vo-map.txt.last_checked_ is created ('touched')  each time the processes are run. 



---+++ osg-undefined-accounts.txt

This file contains a list of those UNIX accounts that have been eliminated from the _osg-user-vo-map.txt_ file because the UNIX account assigned by the authorization service does not exist.   This is for gridmap authorization mode using _edg-mkgridmap_ and for Full Privilege authorization mode using _gums-host-cron_

The test used to determine the UNIX account's existence is 'id -u &lt;account&gt;'.  However, there is __no__ verfication performed  to determine if a HOME directory exists for the account. This is because the check is done on the CE, but it's hard to check if the home directory really exists on the worker node.

<pre class="programlisting">
<b>Example content:</b>
# A list of accounts eliminated from the user-vo map.
uscms455
uscms456
usatlas
</pre>

This file's timestamp will only change when the contents of the file changed. To assist in verifying the currency of the file, another file called _osg-undefined-accounts.txt.last_checked_ is created ('touched')  each time the processes are run. 


---+++ osg-supported-vos-list.txt

This file contains a list of all VOs that this CE node will support.  It does not mean that all members of the these VOs will be able to run jobs here, but that at least one member will be capable. (Why not all? Perhaps not all members are authorized.) This is for gridmap authorization mode using _edg-mkgridmap_ and for Full Privilege authorization mode using _gums-host-cron_

<pre class="programlisting">
<b>Example content:</b>
# List of VOs this site claims to support
CDF
FERMILAB
CMS
</pre>

__Note__: The VO name currently populated in this file is the case sensitive _#VOc_ VO name.  Since this version of the VO name is only used by !MonALISA and does not use this file directly, this may change to using the _#voi_ name for OSG services.  This is possibly a future change.

This file's timestamp will only change when the contents of the file changed. To assist in verifying the currency of the file, another file called _osg-supported-vo-list.txt.last_checked_ is created ('touched')  each time the processes are run. 

---+++ Trash/Troubleshooting tips
The accuracy, timeliness and integrity of the  _osg-user-vo-map.txt_ file is a critical factor for several OSG services.

There are several things that can be looked at to verify it is being updated in addition to the [[OsgSupportedVos#osg_undefined_accounts_txt][osg-undefined-accounts.txt file]] and [[OsgSupportedVos#osg_supported_vos_txt][osg-supported-vos-list.txt]] files.
   1 The files are only updated when there has been a change detected.  So if you __know__ your authorization has been changes affecting any of these files, you can see if it as been effected on the CE node.
   1 Each of the files has a _.last_checked_ suffixed file that is touched whenever the cron scripts are run successfully.
   1 Both cron scripts have log files showing the results of their execution:
      * edg-mkgridmap - _$VDT_LOCATION/edg/log/edg-mkgridmap.log_
      * gums-host-cron - _$VDT_LOCATION/monitoring/log/gums-host-cron.log_

You can also run the scripts manually (since they are cron scripts you should __not__ have to source the _VDT_LOCATION/setup.sh_ script) and view the output on the screen:
<pre class="programlisting">
&gt; VDT_LOCATION/gums/scripts/gums-host-cron --gumsdebug

&gt; VDT_LOCATION/edg/sbin/edg-mkgridmap
</pre>





%BR%
%COMPLETE3% %BR%
%RESPONSIBLE% Main.JohnWeigand - 13 Feb 2009 %BR%
%REVIEW% Main.RobGardner -   %BR%
%REVCOM%  %BR%
%REVFLAG% %N% %BR%