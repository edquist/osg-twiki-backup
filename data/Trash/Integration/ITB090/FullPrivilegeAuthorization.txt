%META:TOPICINFO{author="KyleGross" date="1229445004" format="1.1" version="1.29"}%
%META:TOPICPARENT{name="ComputeElementAuthorization"}%
---+!! *<noop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%

---++ Introduction
In Full Privilege mode,  the PRIMA authorization module with a GUMS service is used for all authorizations and does not use a grid-mapfile.  The Globus gatekeeper and WS-GRAM  use a callout to PRIMA such that upon receipt of each request, PRIMA forwards the request to a GUMS service which performs the dynamic mapping of the user's certificate to a local Unix account. PRIMA and GUMS can process FQAN (Fully Qualified Attribute Names), thus enabling mappings based on VO groups and roles as defined in a VOMS server.   This removes the need for maintaining a =grid-mapfile= on each gatekeeper and/or gridftp server.   

Obviously, your site must run a GUMS server in order to run in Full Privilege mode. 

%RED% This section needs a rework because the flow is not good.  Some of the steps 
are before configure-osg.py and some are after, but configure-osg.py comes in the main 
document after full privilege is completely configured.  Also it's not clear when to run gums-host-cron %ENDCOLOR%

---++ Full Privilege Requirements
Here is a list of the requirements to implement the Full Privilege authorization mode:
   * A GUMS service. See the [[InstallConfigureAndManageGUMS][Install Configure And Manage GUMS]] topic of the %CACHE% documentation for information on installing GUMS. %BR%
      <b>Note:</b> The GUMS service should be installed on a host independent of any CE node.

   * Globus must be configured so that the PRIMA callout is activated and points to your GUMS service.

   * WS-GRAM uses a =sudoers= file which must be configured for the PRIMA callout.

   * The GUMS Client software, which is installed as a part of the %CACHE% CE software, must be configured to point to your GUMS service.

   * A cron process, =gums-host-cron= , must be activated to periodically update the =osg-user-vo-map.txt= file used by Gratia, <nop>MonaALISA and GIP.
  
   * Local accounts must be created on the CE and worker nodes for all potential accounts that will be assigned by your GUMS service.  Your local GUMS administrator can identify these for you.%BR%%BR%
   Alternatively, once you have configured Globus and your GUMS client, and run the =gums-host-cron=, there are two files created that can be reviewed to verify  you can get the list from the =$VDT_LOCATION/monitoring/osg-user-vo-map.txt= when the =gums-host-cron= service is run .  A listing of those local accounts that do not exist, but can be assigned by your GUMS service, can be seen in the =$VDT_LOCATION/monitoring/osg-undefined-accounts.txt= file which is also generated by the =gums-host-cron= script.

<b>Note:</b> If you are migrating from Compatibility authorization mode, the only configuration step you need to perform is the Globus configuration to use the PRIMA callout and the =sudoers= file modifications.


---++ Configure Globus to use the PRIMA callout
Templates for the necessary configuration files, =prima-authz.conf= and =gsi-authz.conf=,  are located in the =$VDT_LOCATION/post-install= directory.  Both files must be copied into =/etc/grid-security/=.  These are critical for both pre-ws and WS-GRAM.

For WS-GRAM, there are additional configuration files that must be set and the use of the =sudoers= file.

---+++!! gsi-authz.conf
The presence of an  =/etc/grid-security/gsi-authz= file, containing an entry for the PRIMA callout,  tells the Globus gatekeeper and gsiftp services to use PRIMA.  It does not need to be edited, just copied over to =/etc/grid-security/=.  The PRIMA callout is identified by this entry:
<pre>
globus_mapping /usr/local/osg-ce/prima/lib/libprima_authz_module_gcc32dbg globus_gridmap_callout
   <b>OR</b>
globus_mapping /usr/local/osg-ce/prima/lib/libprima_authz_module_gcc64dbg globus_gridmap_callout
</pre>
   *Note:* =gsi-authz.conf= is the key to the callout being invoked.  If you remove this file from =/etc/grid-security/= (or if you comment out the line for the PRIMA callout),  the Globus services will revert to local grid-mapfile mode.

---+++!! prima-authz.conf
This configuration file is used by the PRIMA callout and  identifies the GUMS service.  The appropriate line comes pre-configured with the CE hostname in the =imsContact= string.  For example, say one installed a *%CACHE% %VERSION%* CE on host =osg-ce.domain.org=, but the GUMS service was on host =gums.domain.org=.   Then, one would change the line
<pre>
imsContact <nop>https://osg-ce.domain.org:8443/gums/services/GUMSAuthorizationServicePort
    <b>TO</b>
imsContact <nop>https://gums.domain.org:8443/gums/services/GUMSAuthorizationServicePort
</pre>
and copy this file to =/etc/grid-security/=.   

By default, the installation has the =prima-authz.conf= file's log file verbosity set to 'debug'.  You may want to change the =logLevel= attribute  to 'info'.

If you are configuring for use of Full Privilege mode for the first time and have enabled WS-GRAM, you will need to run the =$VDT_LOCATION/monitoring/configure-osg.py= to get the web services configuration files updated correctly as described in the next section.

---+++!! Web services configuration files
The default authorization mode for WS_GRAM is Local or Compatibility.  It uses the =/etc/grid-security/grid-mapfile= as the basis for authorization.  

To enable Full Privilege mode you must run the =$VDT_LOCATION/monitoring/configure-osg.py= script after you have completed the previous configuration steps. During the execution of this script, a check is made to determine if you have already configured your node to use the Full Privilege authorization mode.  It does this by looking for the existence of the =/etc/grid-security/prima-authz.conf= file.

If that file exists, the script extracts <i>Your-GUMS-Server</i> information from the file and executes the command:

   * <pre class="screen"> $VDT_LOCATION/vdt/setup/configure_prima_gt4 --enable -gums-server <i>Your-GUMS-Server</i> </pre>

The script modfies four WS-GRAM security configuration files,  activating the PRIMA callout functionality for the Full Privilege authorization mode, in =$VDT_LOCATION/globus/etc/=:
   * =globus_delegation_service/factory-security-config.xml=
   * =globus_wsrf_core/global_security_descriptor.xml=
   * =globus_wsrf_rft/factory-security-config.xml=
   * =gram-service/managed-job-factory-security-config.xml=

---++ WS-GRAM services sudoers file
WS-GRAM is a CE service that submits user jobs from the grid to an underlying local batch system. Users present their grid identities (user proxy) to WS-GRAM. This identity is mapped to a local user (UNIX username), for example using a gridmap-file (as explained above). Jobs are run in the batch system using this local identity. Pre-WS-GRAM and WS-GRAM use two different mechanisms to switch to the appropriate local user.

The <i>pre-WS</i> GRAM processes run as privileged user (root) and can, therefore, change to any local unprivileged user. This mechanism, however, may present security risks: bugs in the code, which runs as root, may be exploited to gain privileged access to the machine.

To mitigate this risk, WS-GRAM processes run as an unprivileged user (either <b>globus</b> or <b>daemon</b>, depending on the local configuration). In order for these users to be able to switch to another local unprivileged user, though, the local =sudo= service must be appropriately configured. The configuration requires editing the =/etc/sudoers= file manually.  

In =$VDT_LOCATION/post-install/README=, the section <i>Globus-Base-WSGRAM-Server</i> describes the modifications to =/etc/sudoers= necessary for the web services GRAM to function properly.  To facilitate the necessary modification, the =configure-osg.py= script produces the necessary additions for the =/etc/sudoers= file and writes them into a new file =$VDT_LOCATION/monitoring/sudo-setup.txt= . The administrator should simply copy and paste the content of that file into the =/etc/sudoers= file using =visudo=.
*Note the following:*
   * You __must__ use the same authorization mode for pre-ws and web services.
   * This must be done manually.
   * The path defined in =/etc/sudoer= cannot be soft links. Use full paths only. Therefore, if you have your $VDT_LOCATION (e.g. /opt/local/ce-0.8/) soft linked from a generic directory (e.g. /opt/local/ce), it is the explicit path (ce-0.8) that *must* used in the =/etc/sudoers= file. If you install another version of the software into a different directory, you must change the =/etc/sudoers= to reflect the new installation since making a softlink will not work.
   * Use the =visudo= command to modify the =/etc/sudoer= file. 
   * Beware of extra whitespace when modifying the =sudoers= file, especially at the end of a line.

Make these changes now, keeping in mind the user under which VDT determined your container will run.

In the example (for Full Privilege mode) that follows, the web services user is the <i>daemon</i> user and the real path to the VDT_LOCATION is =/usr/local/osg-ce=:
<pre class="programlisting">
Runas_Alias GLOBUSUSERS = ALL, !root
daemon ALL=(GLOBUSUSERS) \
     NOPASSWD: \
     /usr/local/osg-ce/globus/libexec/globus-job-manager-script.pl *
daemon ALL=(GLOBUSUSERS) \
     NOPASSWD: \
     /usr/local/osg-ce/globus/libexec/globus-gram-local-proxy-tool *
</pre>

---++ GUMS client software on the CE
The GUMS-Client package is installed as part of the %CACHE% CE install  The essential configuration files are located in the =$VDT_LOCATION/gums/scripts= directory.

You will need to configure these for Full Privilege authorization mode.

---+++!! gums-client.properties file
You need to edit the =$VDT_LOCATION/gums/config/gums-client.properties= configuration file to point to the appropriate GUMS server.   Upon installation, the file contains two entries both populated with the hostname of the CE node you are configuring, in the following example, the GUMS node is on =gums.domain.org= .  For Full Privilege mode, only the =gums.location= property needs to be changed to the hostname of your GUMS server.   If you set the VDT_GUMS_HOST variable when you installed the VDT these changes will have been made automatically for you already.

<pre class="programlisting">
gums.location=https://gums.domain.org:8443/gums/services/GUMSAdmin
gums.authz=https://gums.domain.org:8443/gums/services/GUMSAuthorizationServicePort
</pre>

The =gums.authz= entry is only used if you wish to use the  client tool to test specific mappings from this host.  Documentation of this client is found at the [[https://www.racf.bnl.gov/Facility/GUMS/1.2/use_test.html][GUMS web site]].  This same functionality can be executed using the GUMS web UI.

---+++ !!gums-host command
In Full Privilege mode, the =$VDT_LOCATION/gums/scripts/gums-host= command is used to generate one essential files:
   * =$VDT_LOCATION/monitoring/osg-user-vo-map.txt=

This command is run  by the =gums-host-cron= cron service, which is addressed in more detail in later a section of this document.

For Full Privilege mode,  you will need to test the generation of this file.

---++++!! Test osg-user-vo-map generation
To test the =osg-user-vo-map= generation, you need to run as <i>root</i>.  This uses the CE host certificate.
<pre class="screen">
 $ <b>source $VDT_LOCATION/setup.sh </b>
 $ <b>cd $VDT_LOCATION/gums/scripts </b>
 $ <b>./gums-host generateGrid3UserVoMap</b>   <em>(output goes  to stdout. To get a
                                        file: either redirect stdout or use 
                                        '--file file_name')</em>
    <em>...output  should look similar to the following dependent on you GUMS 
    server mappings..</em>
  #User-VO map
  # #comment line, format of each regular line line: account VO
  # Next 2 lines with VO names, same order, all lowercase, with case (lines starting with #voi, #VOc)
  #voi xxx test3
  #VOc OSG TEST3
  #---- accounts for vo: osg ----#
  osg01 xxx
  #---- accounts for vo: Test3userGroup ----#
  osg01account test3
    <em>.... and so on</em>
</pre>

If gums-host generateGrid3UserVoMap fails, the GUMS server configuration may not be correct.  Please contact your administrator, or if you are the administrator, make sure you have the following elements in your gums.config (which can be easily configured from the web interface):
   * A hostToGroupMapping element which matches the host name from which you are issuing the request
   * A groupToAccountMapping (referenced by the hostToGroupMapping) element which contains a user group and account mapper
   * A userGroup element (referenced by the groupToAccountMapping) to validate membership of the requested DN
   * A accountMapper element (referenced by the groupToAccountMapping) to return the account for the requested DN

---++ Enable the gums-host-cron service
To keep the  =osg-user-vo-map.txt= file up to date, a cron file script (=gums-host-cron=) was  installed but not  activated. The activation of this service is *critical* in Full Privilege authorization mode.  This is discussed in the [[GumsHostCron][Gums Host Cron]] topic of the documentation.. %RED% again an order question here.  This configuration should be moved up before all the discussion of /etc/sudoers and configure-osg.py.  SCT %ENDCOLOR%

---++ Validating Full Privilege Configuration
You can verify  you are configured correctly in both pre-ws and WS-GRAM mode by submitting a job to each GRAM and reviewing their respective log files looking for the PRIMA  callout messages.  This is a test to verify that you are configured correctly to contact your GUMS service and <b>not</b> that your GUMS service is assigning the correct UNIX account.  That aspect must be addressed by the GUMS administrator.

<b>Note:</b>  You may think that you can now remove your =/etc/grid-security/grid-mapfile=.  <b>Do not.</b>  An =/etc/grid-security-mapfile= must exist for CEMon to work correctly.  You _can_ empty or create an empty =grid-mapfile= if you like.

---+++!! Pre-ws validation 
Verify your =gatekeeper= service is up.  Then run a simple simple job.
<pre class="screen">
 $ source $VDT_LOCATION/setup.sh    <em>OR $VDT_LOCATION/setup.<b>csh</b> </em>
 $ grid-proxy-init 
    <em>(enter your passphrase)</em>
 $ globus-job-run <em>your-ce-host</em>:2119/jobmanager-fork /usr/bin/id 
</pre>

When  authorizing in Full Privilege mode, you will see the following new entries in your =$VDT_LOCATION/globus/var/globus-gatekeeper.log= file when jobs are submitted:
<pre class="programlisting">
<i><b>This line indicates that an authorization request is being sent to the GUMS server.... </b></i>
 PID: 7074 -- PRIMA INFO ts=2007-11-08T01:15:02-06:00 event=org.osg.prima.authz.start 
    DN="/DC=org/DC=doegrids/OU=People/CN=John Weigand 458491" 
    FQAN="/cms/uscms/Role=cmsuser/Capability=NULL" 
    FQAN_Issuer="/DC=ch/DC=cern/OU=computers/CN=lcg-voms.cern.ch" 
    Service_URL="https://cms-xen4.fnal.gov:8443/gums/services/GUMSAuthorizationServicePort"

<i><b>This line is the response to the authorization request from the GUMS service....</b></i>
 PID: 7074 -- PRIMA INFO ts=2007-11-08T01:15:03-06:00 
    event=org.osg.prima.authz.end status=0 decision=PERMIT 
    DN="/DC=org/DC=doegrids/OU=People/CN=John Weigand 458491"
    FQAN="/cms/uscms/Role=cmsuser/Capability=NULL" 
    FQAN_Issuer="/DC=ch/DC=cern/OU=computers/CN=lcg-voms.cern.ch" 
   Service_URL="https://cms-xen4.fnal.gov:8443/gums/services/GUMSAuthorizationServicePort" 
   local_user=uscms699
</pre>

---+++!! WS-GRAM validation 
Verify your =globus-ws= service is up.  Then run a simple simple web services job.
<pre class="screen">
 $ source $VDT_LOCATION/setup.sh    <em>OR $VDT_LOCATION/setup.<b>csh</b> </em>
 $ grid-proxy-init 
    <em>(enter your passphrase)</em>
 $ globusrun-ws -s -submit -F <em>your-ce-host</em>:9443 -Ft Fork -c /usr/bin/id 
</pre>

When  authorizing in Full Privilege mode, you will see the following new entries in your =$VDT_LOCATION/globus/var/container-real.log= file when jobs are submitted:
<pre class="programlisting">
<i><b>This line indicates that an authorization request is being sent to the GUMS server.... </b></i>
2007-11-08 10:21:37,869 INFO  gt4.OSGAuthorization [ServiceThread-21,isPermitted:134] PRIMA: 
    Contacting  authz service (https://cms-xen4.fnal.gov:8443/gums/services/GUMSAuthorizationServicePort) for for -
    UserDN:/DC=org/DC=doegrids/OU=People/CN=John Weigand 458491 - 
    HostDN/DC=org/DC=doegrids/OU=Services/CN=cms-xen9.fnal.gov - 
    FQAN:/cms/uscms/Role=cmsuser/Capability=NULL - 
    FQANIssuer:CN=lcg-voms.cern.ch, OU=computers, DC=cern, DC=ch

<i><b>This line is the response to the authorization request from the GUMS service....</b></i>
2007-11-08 10:21:38,464 INFO  gt4.OSGAuthorization [ServiceThread-21,isPermitted:154] PRIMA: 
   PERMIT - for - 
   UserDN:/DC=org/DC=doegrids/OU=People/CN=John Weigand 458491 - 
   HostDN/DC=org/DC=doegrids/OU=Services/CN=cms-xen9.fnal.gov - 
   FQAN:/cms/uscms/Role=cmsuser/Capability=NULL - 
   FQANIssuer:CN=lcg-voms.cern.ch, OU=computers, DC=cern, DC=ch 
   from authz service (https://cms-xen4.fnal.gov:8443/gums/services/GUMSAuthorizationServicePort)  
   is assigned local account (uscms699)
</pre>

---++ Retest the authorization mode using site verify
Run the [[ValidateSiteVerify][Site Verification]] script again locally (as a regular user, not root) and verify that the authorization still works. 

---++ Important notes on the PRIMA callout
---+++!! RHEL4/SL4/Rocks 4 sites
In RHEL4/SL4/Rocks 4, the PRIMA callout  requires a shared library =/usr/lib/libcom_err.so.3.0.0= which is not part of most default Redhat-like installations.  It's provided by the rpm package =compat-libcom_err=.

---+++!! prima-authz.conf's verifyAC attribute 
This is just a comment about the behavior of the =verifyAC= attribute in the =prima-authz.conf= file that should be addressed in the future.  To avoid any problems, this attribute should never be changed from the installed setting of =false=.

When the =verifyAC= attribute is set to 'true' (the CE installation sets this to 'false'), it checks the directory specified by the =issuerCertDir= attribute (set to  =/etc/grid-security/vomsdir=) for a certificate of trusted VOMSes.

If the submitter's proxy is not from one of the trusted VOMS, it is treated as a grid proxy and the FQAN in the proxy is ignored. The authorization request is still forwarded to the GUMS authorization service. If the submitter exists in a VO that allows grid proxies, the authorization service will return a =PERMIT=.

This behavior is the same for pre-ws (gatekeeper) and WS-GRAM authorizations.

At least one certificate must exist in this directory regardless of the =verifiyAC= setting. Your host cert will make do, but =verifyAC= _must_ be set to =false=. At least this way, VOMS and GRID proxies will be treated correctly. This is the same behavior as with pre-ws PRIMA. The only difference is that pre-ws PRIMA does not require the directory to exist with any certificate in it.  The problem is that both ws and WS-GRAM should function identically when the =verifyAC= is set to false. The ws PRIMA should not require the existence of the directory and any certificate to function properly.

%BR%

%COMPLETE1% %BR%
%RESPONSIBLE% Main.JohnWeigand %BR%
%REVIEW% Main.StevenTimm  - 05 Jun 2008 %BR%
%REVCOM% Orphan?  %BR%
%REVFLAG%

%META:TOPICMOVED{by="AnneHeavey" date="1192818627" from="Integration/ITB_0_7.OsgCEAuthFullPriv" to="Integration/ITB_0_7.FullPrivilegeAuthorization"}%
