%META:TOPICINFO{author="MaximPotekhin" date="1280252348" format="1.1" reprev="1.16" version="1.16"}%
%META:TOPICPARENT{name="PlansTimelines"}%
%RED% Draft Page%ENDCOLOR%
%TOC%

---++ Next Meeting (TBA)
   * 605-475-4800 883253#

---++ Requirements

I believe we have a consistent set of requirements:

   * Status with Pass/Fail
   * A list of key/value pairs
   * Optional debugging output

%TWISTY{
showlink="Show extracts from mail about requirements..."
hidelink="Hide extracts..."
}%

June 28th, Igor wrote:
<pre style="margin-left:2em" class="screen">
So the data you want is similar to what I (glideinWMS) am interested in:
a) Pass/Fail,
b) list of (key,value) pairs

PS: Just don't call it CONDOR_AD:*... should be framework neutral.
</pre>

June 28th, Mats Ryne wrote:
<pre style="margin-left:2em" class="screen">
We *need* debugging output. Yes, the tests are going to be used
*mostly* in automated fashion, but once they fail we need information.
If the tests do not have enough debugging output, we will probably
write our own tests again just to get that information.
</pre>

June 28th, Doug Strain wrote:
We'd like:
<pre style="margin-left:2em" class="screen">
- Test status:  Preferably not only PASS/FAIL, but a general string, such as Warning, 
  Not run, Not available, or other status 
  (though I think it would be sufficient to push this to a different field if necessary)
- Human-readable Description or an error code, for further information
- A long description, with details, like stdout/stderr of the commands run, logfile, etc.
- Hostname of target, as well as the hostname of the source (where the test is run), as well as a srm url.
- Optional extensible fields (could be key/value pairs) to return other information.  Ie, for a "srmping" test, return the backendtype (dcache, bestman, etc) if it is given.

As RSV comes very close to solving our issues and we already use it for other probes, this format suits us well.
I think we are also amenable to other formats if it is accepted as standard.
</pre>

%ENDTWISTY%

---++ Desires 

   * [Igor] It would be nice to be easy to process with command-line tools. (We refer to this colloquially as "greppable" output)
   * [Maxim, Robert] It would be nice to have have a standard format (XML, JSON) for which there exist good, well supported and documented parsers.
   * [Alain] It would be nice to be able to easily re-use these tests within RSV if we wish.
   * [Alain] It would be nice if the output format was easily convertible to other formats to assist with these. (For instance, if we have XML format, it would be nice to convert it to RSV. Or vice-versa for the benefit of people that want XML.

---++ References 
   * [[https://twiki.cern.ch/twiki/bin/view/LCG/GridMonitoringProbeSpecification][WLCG Grid Monitoring Probe Specification]] a.k.a. RSV probe format.
   * [[http://en.wikipedia.org/wiki/JSON][JSON background from Wikipedia]]
   * [[http://www.json.org/][JSON homepage]]
   * [[http://docs.python.org/library/xml.dom.minidom.html][Python minidom documentation]]

---++ Examples
Sample test output from one of Derek Weitzel's experiments:

<pre>
metricName: org.osg.wn.osgdata-available
timestamp: 2010-07-02T15:05:29.0CDT
metricType: status
metricStatus: PASSED
detailsData: 
EOT
</pre>

The equivalent in JSON, by Maxim:

<pre>
{
  "name": "org.osg.wn.osgdata-available",
  "time": "2010-07-02T15:05:29.0CDT ",
  "type": "status",
  "result": "PASSED",
  "detailsData": ""
}
</pre>

A possible equivalent in XML (by Igor):

<pre>
&lt;OSGTestResult&gt;
  &lt;description&gt;
   &lt;property name="id" value="org.osg.wn.osgdata.probe"/&gt;
   &lt;property name="started" value="2010-07-02T15:05:29-05:00"/&gt;
  &lt;/description&gt;
  &lt;result&gt;
   &lt;status value="OK"/&gt;
   &lt;metric name="org.osg.wn.osgdata-available" collected="2010-07-02T15:05:29-05:00" uri="local" value="PASSED"/&gt;
   &lt;detail&gt;&lt;/detail&gt;
  &lt;/result&gt;
&lt;/OSGTestResult&gt;
</pre>

---++ Current proposals

   * Use XML.  One _test_ result can contain multiple _metrics_, which with a different result. 
   * Each element should be on a separate line for ease of cmdline parsing. (See example below) _But note_: This is not a hard requirement because tools like =xmlline --format= can be used when necessary. However, it is recommended for purposes of readability. 
   * There are some mandatory fields:
      * test unique name
      * timestamp: ISO8601
      * test result
   * Optional fields are possible:
      * metrics results
   * While this stage of discussions and design concentrates on the format of a single test entry, we envisage serializing results of a few test in a single document, with an appropriate collection tag.

Other constraints:
   *  None yet

---+++ Igor's proposal
XML example:
<pre>
&lt;OSGTestResult&gt;
  &lt;description&gt;
   &lt;property name="id" value="org.osg.wn.glexec.probe"/&gt;
   &lt;property name="version" value="1.2"/&gt;
   &lt;property name="command" value="/usr/bin/perl /raid2/osg-data/osg/ttk/filesystem/permissions.pl /osg/data"/&gt;
   &lt;property name="started" value="2010-07-02T15:05:00-05:00"/&gt;
   &lt;property name="ended" value="2010-07-02T15:08:22-05:00"/&gt;
  &lt;/description&gt;
  &lt;result&gt;
   &lt;status value="OK"/&gt;
   &lt;metric name="org.osg.wn.glexec.location" collected="2010-07-02T15:05:29-05:00" uri="local" value="/usr/bin/glexec"/&gt;
   &lt;metric name="org.osg.wn.glexec.version" collected="2010-07-02T15:05:29-05:00" uri="local" value="1.2.3.foo"/&gt;
   &lt;metric name="org.osg.wn.glexec.GUMS.version" collected="2010-07-02T15:05:33-05:00" uri="https://gums.fnal.gov/gums" value="1.3.1"/&gt;
   &lt;detail&gt;Discovered glexec binary in /usr/bin.
   Version appears to be 1.2.3.foo
   glexec mapping for pilot proxy PASSED.
   &lt;/detail&gt;
  &lt;/result&gt;
&lt;/OSGTestResult&gt;
</pre>

---+++ Maxim's proposal (Version 1)

The examples below are based upon most accessible sources, about best practices in XML design, -- however, it's true that this is a "grey area"  and there is no definitive "best". It is possible that this format has better readability than the above example, and is still
reasonably easy to parse with Unix filters if needed. The format of the "result" section is an example of a compromise, to make it so. The "detail" was put it in the same level as other sections (then, the "result" is just a collection of metrics and 
this is simpler). Detail characterizes the outcome of the whole test.

<pre class="file">
&lt;OSGTestResult id="org.osg.wn.glexec.probe" version="1.2"&gt;
  &lt;test&gt;
     &lt;cmd&gt;/usr/bin/perl /raid2/osg-data/osg/ttk/filesystem/permissions.pl /osg/data&lt;/cmd&gt;
     &lt;tStart&gt;2010-07-02T15:05:29-05:00&lt;/tStart&gt;
     &lt;tEnd&gt;2010-07-02T15:05:29-05:01&lt;/tEnd&gt;
  &lt;/test&gt;
  &lt;result&gt;
     &lt;metric name="location" ts="2010-07-02T15:05:33-05:00" uri="local"&gt;/usr/bin/glexec&lt;/metric&gt;
     &lt;metric name="version"  ts="2010-07-02T15:05:33-05:00" uri="local"&gt;1.2.3foo&lt;/metric&gt;
     &lt;metric name="GumsVer"  ts="2010-07-02T15:05:33-05:00" uri="https://gums.fnal.gov/gums"&gt;1.3.1&lt;/metric&gt;
  &lt;/result&gt;
  &lt;detail&gt;Discovered glexec binary in /usr/bin. Version appears to be 1.2.3.foo. glexec mapping for pilot proxy PASSED&lt;/detail&gt;
&lt;/OSGTestResult&gt;
</pre>

---+++ Maxim's Proposal (Version 2)
<pre class="file">
&lt;OSGTestResult&gt;
  &lt;id version="1.2"&gt;org.osg.wn.glexec.probe&lt;/id&gt;
  &lt;test tStart="2010-07-02T15:05:29-05:00" tEnd="2010-07-02T15:05:29-05:01"&gt;/usr/bin/perl /raid2/osg-data/osg/ttk/filesystem/permissions.pl /osg/data&lt;/test&gt;
  &lt;result&gt;
     &lt;metric name="location" ts="2010-07-02T15:05:33-05:00" uri="local"&gt;/usr/bin/glexec&lt;/metric&gt;
     &lt;metric name="version"  ts="2010-07-02T15:05:33-05:00" uri="local"&gt;1.2.3foo&lt;/metric&gt;
     &lt;metric name="GumsVer"  ts="2010-07-02T15:05:33-05:00" uri="https://gums.fnal.gov/gums"&gt;1.3.1&lt;/metric&gt;
  &lt;/result&gt;
  &lt;detail&gt;Discovered glexec binary in /usr/bin. Version appears to be 1.2.3.foo. glexec mapping for pilot proxy PASSED&lt;/detail&gt;
&lt;/OSGTestResult&gt;
</pre>

---+++ Maxim's proposal (Version 3)
More info added based on Robert's suggestions.

<pre class="file">
&lt;OSGTestResult id="org.osg.wn.glexec.probe" version="1.2"&gt;
  &lt;host&gt;
     &lt;site&gt;BNL&lt;/site&gt;
     &lt;hostname&gt;acas0059&lt;/hostname&gt;
     &lt;cwd&gt;/tmp&lt;/cwd&gt;
  &lt;/host&gt;
  &lt;test&gt;
     &lt;cmd&gt;/usr/bin/perl /raid2/osg-data/osg/ttk/filesystem/permissions.pl /osg/data&lt;/cmd&gt;
     &lt;tStart&gt;2010-07-02T15:05:29-05:00&lt;/tStart&gt;
     &lt;tEnd&gt;2010-07-02T15:05:29-05:01&lt;/tEnd&gt;
  &lt;/test&gt;
  &lt;result&gt;
     &lt;metric name="location" ts="2010-07-02T15:05:33-05:00" uri="local"&gt;/usr/bin/glexec&lt;/metric&gt;
     &lt;metric name="version"  ts="2010-07-02T15:05:33-05:00" uri="local"&gt;1.2.3foo&lt;/metric&gt;
     &lt;metric name="GumsVer"  ts="2010-07-02T15:05:33-05:00" uri="https://gums.fnal.gov/gums"&gt;1.3.1&lt;/metric&gt;
  &lt;/result&gt;
  &lt;detail&gt;Discovered glexec binary in /usr/bin. Version appears to be 1.2.3.foo. glexec mapping for pilot proxy PASSED&lt;/detail&gt;
&lt;/OSGTestResult&gt;
</pre>

---+++ Maxim's Parser demo
---++++Input
We chose of a variation of "Version 2" example above as input for a parser based on Python *minidom*. There is more than one *OSGTestResult* in the document, and so the tag of the collection was named *OSGTestSuite* (provisionally and open to discussions).
<pre class="file">

&lt;?xml version="1.0"?&gt;
&lt;OSGTestSuite&gt;
   &lt;OSGTestResult&gt;
      &lt;id version="1.2"&gt;org.osg.wn.glexec.probe&lt;/id&gt;
      &lt;test tStart="2010-07-02T15:05:29-05:00" tEnd="2010-07-02T15:05:29-05:00"&gt;/usr/bin/perl /raid2/osg-data/osg/ttk/filesystem/permissions.pl /osg/data&lt;/test&gt;
      &lt;result&gt;
         &lt;metric name="location" ts="2010-07-02T15:05:33-05:00" uri="local"&gt;/usr/bin/glexec&lt;/metric&gt;
         &lt;metric name="version"  ts="2010-07-02T15:05:33-05:00" uri="local"&gt;1.2.3foo&lt;/metric&gt;
         &lt;metric name="GumsVer"  ts="2010-07-02T15:05:33-05:00" uri="https://gums.fnal.gov/gums"&gt;1.3.1&lt;/metric&gt;
      &lt;/result&gt;
      &lt;detail&gt;Discovered glexec binary in /usr/bin. Version appears to be 1.2.3.foo. glexec mapping for pilot proxy PASSED&lt;/detail&gt;
   &lt;/OSGTestResult&gt;
   &lt;OSGTestResult&gt;
      &lt;id version="1.0"&gt;org.osg.wn.pwd&lt;/id&gt;
      &lt;test tStart="2010-07-02T15:05:40-05:00" tEnd="2010-07-02T15:05:41-05:00"&gt;/bin/pwd&lt;/test&gt;
      &lt;result&gt;
         &lt;metric name="pwd" ts="2010-07-02T15:05:40-05:00" uri="local"&gt;/u/tmp_a5007&lt;/metric&gt;
      &lt;/result&gt;
   &lt;/OSGTestResult&gt;
&lt;/OSGTestSuite&gt;
</pre>

---++++Python code
Python code that parses documents in the above format:
<pre class="file">
from xml.dom.minidom import parse, parseString
#...
testDom = parse('/tmp/'+filename)
     
txt=''
for tr in testDom.getElementsByTagName('OSGTestResult'):
    e=tr.getElementsByTagName('id')[0]
    txt+='id: '+e.firstChild.nodeValue+' version:'+e.getAttribute("version")+'&lt;br/&gt;'

    e=tr.getElementsByTagName('test')[0]
    txt+='test: "'+e.firstChild.nodeValue+'"     tStart:'+e.getAttribute("tStart")+' tEnd:'+e.getAttribute("tEnd")+'&lt;br/&gt;'

    txt+='Metrics:&lt;br/&gt;*** *** ***&lt;br/&gt;'
    for m in tr.getElementsByTagName('result')[0].getElementsByTagName('metric'):
        attrs=m._get_attributes()
        for key in attrs.keys():
            txt+= key+':'+ attrs[key].nodeValue+'&lt;br/&gt;'

        txt+='Result: '+m.firstChild.nodeValue+'&lt;br/&gt;*** *** ***&lt;br/&gt;'
    txt+='&lt;hr/&gt;'
print txt
</pre>

---++++Output
%RED%
<pre>
id: org.osg.wn.glexec.probe version:1.2
test: "/usr/bin/perl /raid2/osg-data/osg/ttk/filesystem/permissions.pl /osg/data"     tStart:2010-07-02T15:05:29-05:00 tEnd:2010-07-02T15:05:29-05:00
Metrics:
*** *** ***
uri:local
name:location
ts:2010-07-02T15:05:33-05:00
Result: /usr/bin/glexec
*** *** ***
uri:local
name:version
ts:2010-07-02T15:05:33-05:00
Result: 1.2.3foo
*** *** ***
uri:https://gums.fnal.gov/gums
name:GumsVer
ts:2010-07-02T15:05:33-05:00
Result: 1.3.1
*** *** ***
_____________________________________________________
id: org.osg.wn.pwd version:1.0
test: "/bin/pwd"     tStart:2010-07-02T15:05:40-05:00 tEnd:2010-07-02T15:05:41-05:00
Metrics:
*** *** ***
uri:local
name:pwd
ts:2010-07-02T15:05:40-05:00
Result: /u/tmp_a5007
*** *** ***
_____________________________________________________
</pre>
%ENDCOLOR%
This parser demo was installed as a part of  a Django application, which makes it easy to experiment with test data
persistence in the database, if needed.

---+++ Robert's Proposal

My proposal is based on Maxim's Version 1. 

   * move _start_ and _end_ time to be attributes to *cmd*
   * add the current working directory of the test _cwd_ as a new attribute to *cmd*
   * add entity *user* with attributes _dn_ and _local_
   * add entity *host* with attributes _name_ , _fqdn_ and _identifier_

<pre class="file">
&lt;OSGTestResult id="org.osg.wn.glexec.probe" version="1.2"&gt;
  &lt;test&gt;
     &lt;cmd cwd="/home/ligo" start="2010-07-02T15:05:29-05:00" end="2010-07-02T15:05:29-05:00"&gt;/usr/bin/perl /raid2/osg-data/osg/ttk/filesystem/permissions.pl /osg/data&lt;/cmd&gt;
     &lt;user dn="/DC=org/DC=doegrids/OU=People/CN=Robert Engel 392994" local="uid=506(ligo) gid=506(ligo) groups=506(ligo)"&lt;/user&gt;
     &lt;host name="node321" fqdn="node321.ligo.caltech.edu" identifier="LIGO_CIT"&gt;
  &lt;/test&gt;
  &lt;result&gt;
     &lt;metric name="location" ts="2010-07-02T15:05:33-05:00" uri="local"&gt;/usr/bin/glexec&lt;/metric&gt;
     &lt;metric name="version"  ts="2010-07-02T15:05:33-05:00" uri="local"&gt;1.2.3foo&lt;/metric&gt;
     &lt;metric name="GumsVer"  ts="2010-07-02T15:05:33-05:00" uri="https://gums.fnal.gov/gums"&gt;1.3.1&lt;/metric&gt;
  &lt;/result&gt;
  &lt;detail&gt;Discovered glexec binary in /usr/bin. Version appears to be 1.2.3.foo. glexec mapping for pilot proxy PASSED&lt;/detail&gt;
&lt;/OSGTestResult&gt;
</pre>


---++ Open Questions

   * Should we have a standard for naming our metrics, similar to the WLCG probe output? (Such as Igor's example of "org.osg.wn.glexec"?)
      <br>Igor: Maybe for the OSG standard tests, but VO provided ones should have no restrictions.
   * Should we declare standard command-line parameters for our tests, similar to the WLCG probe output?
      <br>Igor: Yes... but that should be a different thread.
