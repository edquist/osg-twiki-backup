%META:TOPICINFO{author="RobertEngel" date="1314512785" format="1.1" version="1.79"}%
%META:TOPICPARENT{name="WebHome"}%
%DOC_STATUS_TABLE%
---+!! %BESTMAN%-gateway on top of Xrootd FS Installation Guide 
%TOC{depth="3"}%

%STARTINCLUDE%
%BR%

---+ About this Document

%ICON{hand}% This document is for Storage System Administrators. It contains the installation procedure for a %LINK_BESTMAN% in gateway-mode using %LINK_XROOTD% for the distributed file-system backend. Both installations (%BESTMAN% and xrootd) will be addressed in this document.

This document applies to the latest release OSG-%VERSION%.

---+ Conventions Used in this Document
%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="Header"}%
%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="CommandLine"}%



---+ Introduction
This document describes installation and configuration procedure of the Storage Element that consists of SRM end point (%LINK_BESTMAN% -gateway) and distributed storage system (%LINK_XROOTD% ). %BESTMAN%, developed by the [https://sdm.lbl.gov/][Scientific Data Management Group]] of [[http://www.lbl.gov][Lawrence Berkeley National Laboratory]], is a generic [[https://sdm.lbl.gov/srm-wg/doc/SRM.v2.2.html][SRM v2.2]] load balancing front-end for transfer servers and disk-based storage systems. It works on top of POSIX-compliant file systems.  %LINK_XROOTD%  is a high performance network storage system widely used in high energy physics experiments such as [[http://atlas.ch/][ATLAS]] and [[http://aliceinfo.cern.ch/Collaboration/index.html][ALICE]]. The underlying xroot data transfer protocol is designed to provide efficient access to ROOT based data files. Please see [[#References][these]] references for more information.

For general information on storage software architecture, implementations and use, please read [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/StorageInfrastructureSoftware][StorageInfrastractureSoftware]]. For information on planning, installing and validating storage software, please follow this link to [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/StorageSiteAdministrator][StorageSiteAdministrator]].


---+ Engineering Considerations
%BESTMAN%-gateway/Xrootd Storage Element requires at least three nodes. The following components have to be installed on the first node:

   * %BESTMAN%-gateway is an implementation of SRM v2.2 for essential interfaces to disk based storage systems - [[http://sdm.lbl.gov/bestman][BeStMan Home Page]] 
   * !GridFTP-Xrootd  package that contains  !GridFTP server and Data Storage Interface (DSI) module for Xrootd/Posix. !GridFTP provides a high-performance, secure, reliable data transfer [[http://www.globus.org/toolkit/docs/4.2/4.2.1/data/gridftp/][GridFTP documentation]]. The Xrootd preload library allows standard POSIX I/O calls to xrootd served files instead of calls to the local file system.
   * If you want %BESTMAN%  to use GUMS for authorization, you should be able to access existing GUMS server  or install it yourself on a different node, following [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/InstallConfigureAndManageGUMS][GUMS Server Installation Guide ]]. If you choose to use grid-mapfile for authorization you may generate it during the installation.  
   * !XrootdFS is a Posix filesystem  that allows !GridFTP, %BESTMAN% and other grid applications to work with Xrootd storage system. !XrootdFS works on top of !FUSE.
   * optional package
      * Gratia gridftp transfer probe - cron job that reports all the file transfers to [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/GratiaSiteCollector Gratia collector]]
!Xrootd should be installed on two or more nodes. One node should be configured as a head node (redirector node), and all the other nodes will serve as data servers. 
 
<img src="%ATTACHURLPATH%/betsman_gateway_xrootd.jpeg" alt="betsman_gateway_xrootd_architecture" width='384' height='288' align="center"/>

 

The following questions should be answered before you can proceed with installation and configuration of %BESTMAN%-gateway/Xrootd Storage solution: 

   $ Q. _What authorization mechanism do you prefer?_ : You need to decide if you want to use grid-mapfile or !GUMS server for user authentication and authorization. More details about !GUMS could be found at [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/InstallConfigureAndManageGUMS GUMS Installation Guide]]. %BR% We currently recommend using GUMS as it provides superior flexibility and allows a site to manage all of its mappings in one central location; most large sites use GUMS.

   $ Q. _Do you need to support space tokens?_ : %BESTMAN%-gateway supports pre-defined, static space tokens that should be included in configuration. It doesn't enforce allocation in the space with the static space tokens, nor keep track of contents in the space with the space tokens.  If you want to partition your storage space and have a “designated” space for some VOs or users, you can choose to use space tokens. You will have to decide the names and descriptions of the tokens as well as the size of the area. This information will be used in %BESTMAN%  configuration, and Xrootd server configuration on data server and redirector nodes.  
 
   $ Q. _ Do you need multiple !GridFTP servers?_: You will need to install additional servers if your Storage Element:
   * is serving data to more than 250 cores for a VOs that use storage heavily (e.g. CMS, ATLAS, CDF, and D0)
   * is managing more than 50 TB of disk space
   * has more than 1Gbps bandwidth: plan on at least one !GridFTP-Xrootd server for each 4Gbps of available bandwidth (assuming you have 10Gbps interfaces on the server) if you want to maximize throughput. 

   $ Q. _How to partition storage areas on Xrootd redirector and data server nodes_?: !Xrootd is using two storage areas. One storage area (referred as ==storage_path==) could be accessed by clients using Xroot protocol. This area contains symbolic links to the data files that are located in the cache storage area (referred as  ==storage_cache==).
The Xrootd developers recommended to use a separate partition for each storage area, but  in principal for ==storage_path== a directory can be used as well. In Xrootd 
production installation at SLAC an ext3 partition is used for  ==storage_path==. This storage area requires a significant amount of inodes. However, too many inodes 
means small block size. For real files, that means a limit of file size (though not clear about sym linked files, which are big in size but are filled with empty holes). At 
SLAC, the block size is set to 1k (thus put a limit of real file size at ~256GB). 
 

   $ Q. _Do you want to enable Gratia gridftp-transfer probes_?: If you want to report all the transfers in and out of your storage, you would need to install or enable Gratia gridftp-transfer probes. More details should be found at [[https://twiki.grid.iu.edu/bin/view/Accounting/WebHome  Gratia Home Page]]. The reported information will include the source and destination of transfer, certificate subject of transfer initiator, size and status of the transferred file.   
 
---+ How to get Help?

If a problem occurs during installation or verification of the service, see [[#DebugInfo][Troubleshooting]].

If you cannot resolve the problem, the best way to get help is by following  [[HelpProcedure][this page]]. 

If you cannot find answers, please send all your questions to: osg-storage@opensciencegrid.org

---+ Requirements

   1. You will need at least 3 nodes to install the software (see [[#Engineering_Considerations][Engineering Considerations]])
   1. [[ReleaseDocumentation/PacmanInstall][pacman]] version >= %PACMAN_VERSION% is required
   1. The server must have a fully qualified domain name and a valid [[ReleaseDocumentation/GetGridCertificates][grid host certificate]] installed in =/etc/grid-security/=
   1. %BESTMAN% server needs to have a valid service certificate. The certificate should be own by a user that is running %BESTMAN%  server.
   1. A working GUMS server or a grid-mapfile are needed for authorization using grid certificates.
   1. The firewall must allow incoming connections to the %BESTMAN%-gateway ports (default:10080,10443)
   1. The firewall must allow incoming connections to the !GridFTP port (default 2811). Outgoing connections must be allowed from high ports ( typically in range 32769-65535 ). We recommend to consult the [[ReleaseDocumentation/ComputeElementFirewalls][Firewall Guide]] if you install the !GridFTP server for the first time.
   1. The firewall must allow multiple ports to be opened for Xrootd daemons on redirector and data server nodes. See detailed information [[#XrootdFirewall][here]].
   1. You  will need a non-privileged Xrootd user account on the redirector and on all data server nodes. This user account must have a login shell on these nodes.
   1. FUSE should be installed on the node where %BESTMAN%-gateway and !XrootdFS are installed.  

<!-- conventions used in this document
   * Local INST_DIR = /opt/osg-%VERSION%
   * Local BESTMAN_HOST = bestman
   * Local BESTMAN_PROMPT_ROOT=[root@%BESTMAN_HOST% %INST_DIR%-bestman ]
   * Local XRDR_HOST= xrdr
   * Local XRD_DATA_HOST= xrd-data
   * Local XRDR_PROMPT=[root@%XRDR_HOST%]
   * Local XRDR_PROMPT_ROOT=[root@%XRDR_HOST% %INST_DIR%-xrootd ]
   * Local XRD_DATA_PROMPT_ROOT=[root@%XRD_DATA_HOST% %INST_DIR%-xrootd ]
-->
---+ %BESTMAN%-XrootdFS Installation Procedure 

The installation procedure consists of the following steps:
   * select the node where  %BESTMAN% will be installed
   * verify fuse installation on that node
   * verify existence and permission of a service certificate for %BESTMAN% server
   *  create an installation directory
   * use Pacman to install the !XrootdFS
   * use Pacman to install %BESTMAN%
   * install the CA Certificates and the Certificate Revocation List
   * execute the post installation script 
   * use Pacman to install  !GridFTP-Xrootd

%BESTMAN%, !GridFTP-Xrootd, !XrootdFS  and !FUSE should be installed on the same node. 
---++ Verify FUSE Installation

FUSE is a kernel module that intercepts and services user requests to the !XrootdFS. !FUSE can be installed via “yum install” or rpms. You will need two packages for SL5: 
   * fuse
   * fuse-libs
and additional package kernel-module-fuse  if you are using SL4.
To verify that you have fuse installed on your node do:
<pre class="screen">
<code>%UCL_PROMPT_SHORT%yum list *fuse*</code>
Loaded plugins: kernel-module
fuse.i386                                2.7.4-8.el5                                                      installed
fuse-libs.i386                         2.7.4-8.el5                                                      installed
</pre>
It is essential that FUSE version ( &gt; 2.7.3). Contact your sys admin if you have any questions.

---++ Verify Service Certificate for %BESTMAN%
By default %BESTMAN% is using a service certificate =/etc/grid-security/http/httpcert.pem= and certificate key =/etc/grid-security/http/httpkey.pem=.  

%ICON{warning}% For the time being  %BESTMAN% should be configured with host certificate in order to be able to handle requests from !LCG-Utils tools. This is mandatory for at least all %BESTMAN% servers that support ATLAS experiment. A lot of users/scripts are using [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/LCGUtils][lcg-utils]] commands to access SE. If %BESTMAN% is configured to use a default (service) certificate then ==lcg-cp== command  fails because the certificate service name (which looks like http/hostname instead of just hostname or host/hostname) doesn't match the hostname.  That is why we do not recommend to configure %BESTMAN% with a service certificate. 

There are two ways to solve this problem:
   * If you don't have a service certificate in the =/etc/grid-security/http== directory then  copy ==hostcert.pem==, ==hostkey.pem== into ==/etc/grid-security/http== and rename these two files to ==httpcert.pem==, ==httpkey.pem== respectively. Change ownership of these files and directory to ==600==.
<pre class="rootscreen">
<code>%UCL_PROMPT_ROOT%cd /etc/grid-security
%UCL_PROMPT_ROOT%mkdir  http
%UCL_PROMPT_ROOT%cp hostcert.pem http/httpcert.pem
%UCL_PROMPT_ROOT%cp hostkey.pem http/httpkey.pem
%UCL_PROMPT_ROOT%chown -R http
%UCL_PROMPT_ROOT%chmod 600 http/httpcert.pem http/httpkey.pem</code>
</pre>
OR  
   * if you are already using a service certificate for some other purpose then create a directory  ==/etc/grid-security/bestmancert== and copy ==hostcert.pem==, ==hostkey.pem== into this directory under these names ==bestmancert.pem==, ==bestmankey.pem== respectively. Change the ownership of these files and directory. You will need to use relevant options to specify the certificate and the certificate key while configuring %BESTMAN%.
<pre class="rootscreen">
<code>%UCL_PROMPT_ROOT%
%UCL_PROMPT_ROOT%cd /etc/grid-security
%UCL_PROMPT_ROOT%mkdir  bestmancert
%UCL_PROMPT_ROOT%cp hostcert.pem bestmancert/bestmancert.pem
%UCL_PROMPT_ROOT%cp hostkey.pem bestmancert/bestmankey.pem
%UCL_PROMPT_ROOT%chown -R bestmancert
%UCL_PROMPT_ROOT%chmod 600 bestmancert/bestmancert.pem  bestmancert/bestmankey.pem</code>
</pre>

---++ Create the  Installation Directory

Next,  create the installation directory and change to this directory.  This directory will be used for installation of all the packages described in this section.
<pre class="rootscreen">
<code>%UCL_PROMPT_ROOT%mkdir -p %INST_DIR%-bestman
%UCL_PROMPT_ROOT%cd %INST_DIR%-bestman/</code>
</pre>

---++ !XrootddFS Installation
In the next step we will use the =pacman= command line tool to install the !XrootdFS package from the %CACHE%. %LINK_PACMAN% will ask whether you want to "trust the caches and accept the license", answer =yall= and =y= to install the !XrootdFS package. 
<pre class="rootscreen">
<code>
%BESTMAN_PROMPT_ROOT%pacman -get %CACHE%:XrootdFS</code>
</pre>

%TWISTY{%TWISTY_OPTS_OUTPUT%}%
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%pacman -get %CACHE%:XrootdFS</code>
Do you want to add [http://software.grid.iu.edu/osg-1.2] to [trusted.caches]? (y/n/yall): yall
Beginning VDT prerequisite checking script vdt-common/vdt-prereq-check...

All prerequisite checks are satisfied.
</pre>
%ENDTWISTY%

---++ %BESTMAN% Installation
Next, you will need to install %BESTMAN%  in the same directory. If you are using [[InstallConfigureAndManageGUMS][Grid User Management System (GUMS)] as a Grid Identity Mapping Service, you will need to setup _VDT_GUMS_HOST_ environment variable first. If you are using  grid-mapfile, please proceed to [[#SkipThisStep1][the next step]].
<pre class="rootscreen"> 
<code>%BESTMAN_PROMPT_ROOT%export VDT_GUMS_HOST=&lt;GUMS hostname&gt;</code>
</pre>

#SkipThisStep1
Next, execute %LINK_PACMAN% to get the %BESTMAN%  package from the %CACHE% cache. %LINK_PACMAN% will ask whether you want to "trust the caches and accept the license", answer =yall= and =y= to install the %BESTMAN% package. 
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%pacman -get %CACHE%:Bestman</code>
</pre>
%TWISTY{%TWISTY_OPTS_OUTPUT%}%
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%pacman -get %CACHE%:Bestman</code>

========== IMPORTANT ==========
Most of the software installed by the VDT *will not work* until you install
certificates.  To complete your CA certificate installation, see the notes
in the post-install/README file.

</pre>
%ENDTWISTY%

To reflect the changes update the environment:
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%. setup.sh</code>
</pre>
You will have to install CA Certificate and other related packages next. 

---+++ Install a Certificate Authority Package 
Before you proceed to install a Certificate Authority Package you should decide which of the available packages to install. Please consult [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/CaCertificatesInstall][this document]] before you proceed. 

It is possible to install the Certificate Authority Package without sharing it other VDT installations on the same host. 
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%vdt-ca-manage setupca --location local --url osg
Setting CA Certificates for VDT installation at ...
</code>
</pre>
Setup completed successfully.

After a successful installation the certificates will be installed in ==%INST_DIR%/globus/share/certificates==.
---+++ Post-Install Script
Now run the post installation script:
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%vdt-post-install
Starting...
Configuring PRIMA... Done.
Configuring EDG-Make-Gridmap... Done.
Done.</code>
</pre>


---++ !GridFTP-Xrootd Installation

The generic [[http://www.globus.org/toolkit/data/gridftp][GridFTP server]] comes with  the %BESTMAN% package but you will need to install additional package in order for !GridFTP to work with %LINK_XROOTD%. This package should be installed in the same directory where %BESTMAN% was installed.  You can choose to have multiple !GridFTP servers for load balancing (please see [[#Engineering_Conciderations][ Engineering Considerations Section]]). Please follow [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/GridFTPXrootd][this]] instruction to install additional !GridFTP servers on other nodes.

<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%pacman -get %CACHE%:Xrootd-GridFTP</code> 
</pre>

This completes the installation of the %BESTMAN%, !Xrootd-GridFTP, !XrootdFS packages. Move to the next section to configure the %BESTMAN%, !Xrootd-GridFTP and !XrootdFS.


---+ %BESTMAN%-XrootdFS Configuration 

You have just finished with installation on the various software packages on %BESTMAN% node.Now you will need to configure all these services so they can communicate with each other and %LINK_XROOTD%. The configuration procedure consists of the following steps:
   * configure !XrootdFS 
   * configure %BESTMAN%
   * configure !GridFTP-Xrootd

---++ Configure !XrootdFS
In order to configure !XrootdFS you will need to do the following: 
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%$VDT_LOCATION/vdt/setup/configure_xrootdfs \</br>
--user %RED%username%ENDCOLOR% \</br>
--cache %RED%mountpoint%ENDCOLOR%  \</br>
--xrdr-host %RED%hostname%ENDCOLOR%  \</br>
--xrdr-storage-path %RED%storage_path%ENDCOLOR%</code> 
</pre>
 
In order to execute configuration command you have to replace command options arguments (highlighted in red) with the approriate values:

==username== of the non-privileged user login running xrootdfs daemon process (==daemon==) %BR%
==mountpoint== is  the !XrootdFS mount point that will be created for you, it has to be the same as the xrootd ==storage_path== (see below)%BR%
==hostname== is a FQDN of Xrootd redirector host name%BR%
==storage_path== is the name of  storage area on the !Xrootd redirector. Usually the same name used on the data nodes.%BR%

%ICON{"warning"}%The ==storage_path== is used throughout this document, and it refers to the path that has to be provided while accessing %BESTMAN%-gateway, !GridFTP, !XrootdFS and Xrootd. For !XrootdFS, the ==storage_path== is a !XrootdFS mount point that is mapped to  ==&lt;xrdr_host&gt;:&lt;xrdr_port&gt;:storage_path==. 

On the node where !XrootdFS is installed you can access data files directly. For !GridFTP the ==storage_path== is virtual mount point that allows to redirect user requests to  ==&lt;xrdr_host&gt;:&lt;xrdr_port&gt;:storage_path==.  The  ==storage_path== should be the same for !GridFTP and !XrootdFS in order for %BESTMAN%  to operate correctly.
For Xrootd the ==storage_path== is a directory that various clients (e.g users , !XrootdFS, !GridFTP) can access using xroot protocol directly. This directory contains the symbolic links to the actual data files that is stored in ==storage_cache== area (Xrootd cache partition that should exist on every Xrootd node).   

---++ Configure %BESTMAN%
Next, you will need to configure %BESTMAN%-gateway to work with !XrootdFS.  In order to do so you will need to specify ==use-xrootd== option.

%ICON{warning}% Remember  that %BESTMAN%   will run in ==gateway== mode and will  not manage the space and dynamic reservation. It will rely on !Xrootd to do manage space on the disks. 

%ICON{warning}% You will need to use the same authorization mechanism you have selected during the installation procedure.

At this time  you need to decide if you would like to use static space token reservation, and in this case to come up with a list of token  names, description and size of space allocated for each token. 

Please re-read [[#Engineering_Considerations][this section]] if you don't know what option to choose.


 The example below shows how to configure%BESTMAN%  in gateway mode, enable !GUMS and space token usage: 
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%$VDT_LOCATION/vdt/setup/configure_bestman --server y \</br>
 --user %RED%username%ENDCOLOR% \</br>
 --cert  %RED%service_cert%ENDCOLOR% \</br>
 --key  %RED%service_key%ENDCOLOR% \</br>
 --http-port  %RED%public_port%ENDCOLOR% \</br>
 --https-port  %RED%secure_port%ENDCOLOR% \</br>
 --gums-host  %RED%GUMS_hostname%ENDCOLOR% \</br>
 --gums-port  %RED%GUMS_port%ENDCOLOR% \</br>
 --use-xrootd  \</br>
 --globus-tcp-port-range %RED%low_port,high_port%ENDCOLOR% \</br>
 --with-tokens-list  %RED%"TOKEN_1_NAME%ENDCOLOR%[desc:%RED%TOKEN_1_DESC%ENDCOLOR%][%RED%TOKEN_1_SIZE_GB%ENDCOLOR%];%RED%TOKEN_2_NAME%ENDCOLOR%[desc:%RED%TOKEN_2_DESC%ENDCOLOR%][%RED%TOKEN_2_SIZE%ENDCOLOR%]" \</br>
 --with-transfer-servers %RED%GridFTP_servers_list%ENDCOLOR%</code>
</pre> 

Where:

  ==user name== is the non-privileged user login running %BESTMAN%  server process%BR%
  ==service_cert==  path is the service certificate (the certificate file should belong to the ==username==)%BR%
  ==service_key==  path is the service certificate private key (the certificate key file should belong to the ==username==)%BR%
%ICON{"warning"}% *The certificate and key files  should belong to the user*.
Please, see [[#Requirements][Requirements]] and [[#Verify_Service_Certificate_for_B][Verify Service Certificate]] section for more details
 
==public_port== http public port (default port: 10080) %BR%
==secure_port== http  private port (default port: 10443) %BR%
==GUMS hostname== the name of  !GUMS server, %BR%
==GUMS port number== the port of !GUMS  server, %BR%
==low_port,high_port== controls all outbound globus connections for gridftp (e.g GLOBUS_TCP_PORT_RANGE=40000,49150) %BR%
token list example:
"ATLASDATADISK[desc:ATLASDATADISK][40000];ATLASPRODDISK[desc:ATLASPRODDISK][30000];ATLASGROUPDISK[desc:ATLASGROUPDISK][30000]" %BR%

==GridFTP_servers_list==  is a list !FQDN of your !GridFTP servers, separated by ==;==  e.g. 
“gsiftp://host1.domain.tld;gsiftp://host2.domain.tld”
 
If you want to use grid-mapfile for user authentication and authorization do not specify 
the following options: %BR%
--gums-host   %BR%
--gums-port %BR%
   
 
If you do not want to use statically reserved space tokens do not specify the following 
options: %BR%
--with-tokens-list 
 
If you don't have a firewall, do not specify the following options:</br>
--globus-tcp-port-range

%INCLUDE{"Bestman" section="SudoersFile"}%
%TWISTY{%TWISTY_OPTS_REVIEW%}%
  * When would I want to choose a more restrictive policy?
%ENDTWISTY%
-

---++ Configure !GridFTP-Xrootd
Now, you have to configure  !GridFTP to work with !Xrootd. Please see [[#Engineering_Considerations][this section]] for detailed explanation.

<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%$VDT_LOCATION/vdt/setup/configure_gridftp --use-xrootd \</br>
 --xrootd-host %RED%hostname%ENDCOLOR% \</br>
 --xrootd-mount-point  %RED%lstorage_path%ENDCOLOR% \</br>
 --xrootd-storage-path %RED%lstorage_path%ENDCOLOR% </code>
</pre>
Where:

==hostname== is a FQDN of the Xrootd redirector host %BR%
==storage_path== is a !GridFTP virtual mount point and storage area on redirector node 

---+++ Dealing with firewall while configuring !GridFTP-Xrootd 
If you have a firewall, the gridftp port range should be properly set. In order to do so you will have to modify ==$VDT_LOCATION/vdt/etc/vdt-local-setup.sh== and ==$VDT_LOCATION/vdt/etc/vdt-local-setup.csh== scripts. Edit these scripts by adding the following lines:
<pre class="file">
GLOBUS_TCP_SOURCE_RANGE=%RED%low_port,high_port%ENDCOLOR%</br> 
GLOBUS_TCP_PORT_RANGE=%RED%low_port,high_port%ENDCOLOR%</br> 
export GLOBUS_TCP_SOURCE_RANGE</br> 
export GLOBUS_TCP_PORT_RANGE</code>
</pre>

Where ==low_port,high_port== controls all outbound globus connections for gridftp (e.g GLOBUS_TCP_PORT_RANGE=40000,49150). Please check [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/ComputeElementFirewalls][Firewall Documents]] for more details
 
---+++ Configuring  !GridFTP-Xrootd with !GUMS 
If you are not using GUMS  for authorization please go to the [[#Gratia_GridFTP_Transfer_Probe][next section]].


<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%cp $VDT_LOCATION/post-install/prima-authz.conf /etc/grid-security 
%BESTMAN_PROMPT_ROOT%cp $VDT_LOCATION/post-install/gsi-authz.conf /etc/grid-security</code>
</pre> 

---+++ Gratia !GridFTP Transfer Probe
You may want to configure and enable Gratia !GridFTP transfer probe (see  [[#Engineering_Considerations][this section]] for detailed explanation). In order to so you will need to perform the actions described in [[GratiaTransferProbe][Preparing, Installing and Validating Gratia transfer probe]].

Congratulation, you are done with %BESTMAN%-gateway node configuration! Now you can proceed with %LINK_XROOTD% installation.

---+ Xrootd Installation 

You will have to install Xrootd package on the redirector node and each data server node. You will need at least two nodes in order to do so. Durining the installation you should do the following steps:
   * select the node for  xrootd-redirector (head node) 
   * select the node(s) for xrootd data server(s)
   * verify/create  non-privileged Xrootd user account on each node
   *  create an installation directoryon each node
   * use Pacman to install the xrootd

---++ Verify/create  non-privileged Xrootd user account
The installation described here is done as root, even though the services do not  run as root. You need a non-privileged Xrootd user account on the redirector and on all data servers, and that user account must have a login shell. 
Check if the user (for example ==xrootd==) exists on  all xrootd nodes:
<pre class="rootscreen">
<code>%XRDR_PROMPT%id xrootd 
uid=500(xrootd) gid=500(xrootd) groups=500(xrootd)</code>
</pre>

If user exists then verify that he has a login directory:
<pre class="rootscreen">
<code>%XRDR_PROMPT%su - xrootd </code>
</pre>

If user doesn't exist and  you manage your accounts by hand (rather than using a service such as LDAP) you would, on your management node:
<pre class="rootscreen">
<code>%XRDR_PROMPT%/usr/sbin/groupadd -g <gid> xrootd 
%XRDR_PROMPT%/usr/sbin/useradd -u %RED%uid%ENDCOLOR% -g xrootd -d /home/xrootd xrootd</code>
</pre>
and copy ==/etc/passwd==, ==/etc/shadow==, ==/etc/group==, and ==/etc/gshadow== to each of the xrootd nodes. 


---++ Create the  Installation Directory
Next,  create the installation directory on every node and change to this directory.  This directory will be used for installation of all the packages described in this section.

On xrootd redirector do the following:
<pre class="rootscreen">
<code>%XRDR_PROMPT%mkdir -p %INST_DIR%-xrootd
%XRDR_PROMPT_ROOT%cd %INST_DIR%-xrootd/</code>
</pre>

Install the !Xrootd package from the %CACHE% cache.  Pacman will ask whether you want to trust the cache (answer =yall=).
<pre class="rootscreen">
<code>%XRDR_PROMPT_ROOT%pacman -get %CACHE%:Xrootd</code>
</pre>

Update the environment and run the post installation script:
<pre class="rootscreen">
<code>%XRDR_PROMPT_ROOT%source setup.sh
%XRDR_PROMPT_ROOT%vdt-post-install</code>
</pre>

You have to repeat the same procedure on ever xrootd data server node:
%TWISTY{%TWISTY_OPTS_OUTPUT%}%
<pre class="rootscreen">
<code>%XRD_DATA_PROMPT_ROOT%mkdir -p %INST_DIR%-xrootd
%XRD_DATA_PROMPT_ROOT%cd %INST_DIR%-xrootd/</code>
</pre>

<pre class="rootscreen">
<code>%XRD_DATA_PROMPT_ROOT%pacman -get %CACHE%:Xrootd</code>
</pre>

Update the environment and run the post installation script:
<pre class="rootscreen">
<code>%XRD_DATA_PROMPT_ROOT%source setup.sh
%XRD_DATA_PROMPT_ROOT%vdt-post-install</code>
</pre>
%ENDTWISTY%

---+ Xrootd  Configuration 
You will need to configure xrootd on redirector and data server nodes. Let's start with data server node configuration.

---++ Configuration on data server node 
To configure Xrootd on each data server node you have to login to the node as root and perform the following actions:

<pre class="rootscreen">
<code>%XRD_DATA_PROMPT_ROOT%source setup.sh
%XRD_DATA_PROMPT_ROOT%$VDT_LOCATION/vdt/setup/configure_xrootd \</br>
 --server y \</br>
 --user %RED%username%ENDCOLOR% \</br>
 --xrdr-host  %RED%hostname%ENDCOLOR% \</br>
 --storage-path %RED%storage_path%ENDCOLOR% \</br>
 --storage-cache %RED%storage_cache%ENDCOLOR% \</br>
 --with-tokens-list "%RED%TOKEN_1_NAME%ENDCOLOR%[desc:%RED%TOKEN_1_DESC%ENDCOLOR%][%RED%TOKEN_1_SIZE_GB%ENDCOLOR%];%RED%TOKEN_2_NAME[desc:%RED%TOKEN_2_DESC%ENDCOLOR%][%RED%TOKEN_2_SIZE_GB%ENDCOLOR%]"%ENDCOLOR% \</br>
 --enable-cnsd</code>
</pre>
Where 

==username== name of the non-privileged user login running Xrootd (this user SHOULD have a login shell) %BR%
==hostname== is the FQDN of redirector host %BR%
==storage_cache== is the name of a directory that hosts actual data. Files under ==storage_cache== is not visible to users%BR%
==storage_path== is the name of a directory that contains symbolic links to actual files in ==storage_cache==. Xrootd clients have access to ==storage_path==.%BR%
==TOKEN_NAME_,_TOKEN_SIZE== should match tokens described in the %BESTMAN%  configuration . If you  are not using static space tokens you should skip this option

You will need to create ==%RED%storage_path%ENDCOLOR%== and ==%RED%storage_cache%ENDCOLOR%==  directory if they don't exist. The directory should belong to user %RED%username%ENDCOLOR%.
---++ Configuration on redirector node 
To configure Xrootd on redirector node you have to login to the node as root and perform the following actions:
<pre class="rootscreen">
<code>%XRD_DATA_PROMPT_ROOT%source setup.sh </code>
<code>%XRD_DATA_PROMPT_ROOT%$VDT_LOCATION/vdt/setup/configure_xrootd \</br>
 --server y \</br>
 --user %RED%username%ENDCOLOR% \</br>
 --this-is-xrdr \</br>
 --storage-path %RED%storage_path%ENDCOLOR% \</br>
 --storage-cache %RED%storage_cache%ENDCOLOR% \</br>
 --with-tokens-list "%RED%TOKEN_1_NAME%ENDCOLOR%[desc:%RED%TOKEN_1_DESC%ENDCOLOR%][%RED%TOKEN_1_SIZE_GB%ENDCOLOR%];%RED%TOKEN_2_NAME%ENDCOLOR%[desc:%RED%TOKEN_2_DESC%ENDCOLOR%][%RED%TOKEN_2_SIZE_GB%ENDCOLOR%]" \</br>
 --enable-cnsd</code>
</pre>
 
Where:

==username== name is the non-privileged user login running Xrootd (this user SHOULD have a login shell) %BR%
==storage_cache== is the name of a directory that hosts actual data. Files under ==storage_cache== is not visible to users.%BR%
==storage_path== is the name of a directory that hosts  symbolic links to actual files in ==storage_cache==.  Xrootd clients have access to  ==storage_path==.%BR%
==TOKEN_NAME_,_TOKEN_SIZE== should match tokens described in the %BESTMAN% configuration.If you  are not using static space tokens you should skip this option.   
You will need to create ==%RED%storage_path%ENDCOLOR%== and ==%RED%storage_cache%ENDCOLOR%==  directory if they don't exist. The directory should belong to user %RED%username%ENDCOLOR%
 
#XrootdFirewall
---+++ Check firewall rules
It is important to make sure your firewall (if any) isn't blocking the ports that Xrootd uses for communication.  Otherwise, it becomes difficult to diagnose errors, and failures may occur.  Xrootd uses the following ports:

| *Host* | *Port Number* | *Protocol* |
|!Xrootd data server| random ports selected by the OS |tcp|
|!Xrootd redirector|1094|tcp|
||2094|tcp|
||1213|tcp|

Check the firewall rules with =/etc/init.d/iptables status=.   See below for more information on firewall configuration settings for Xrootd.
---++++ !!Firewall configuration for the Xrootd redirector

Edit the ==/etc/sysconfig/iptables== file on the redirector node to add these lines ahead of the REJECT line (if your host has reject rules in its iptables configuration):
<pre class="file">
# Xrootd connections  (from anywhere) 
-A RH-Firewall-1-INPUT -m state --state NEW,ESTABLISHED -p tcp -m tcp --dport 1094 -j ACCEPT 
-A RH-Firewall-1-INPUT -m state --state NEW,ESTABLISHED -p tcp -m tcp --dport 1213 -j ACCEPT 
-A RH-Firewall-1-INPUT -m state --state NEW,ESTABLISHED -p tcp -m tcp --dport 2094 -j ACCEPT 
-A RH-Firewall-1-INPUT -m state --state NEW,ESTABLISHED -p tcp -m tcp --dport 2525 -j ACCEPT 
# 
</pre>
Check the status of iptables:
<pre class="rootscreen">
<code>%XRDR_PROMPT%/etc/init.d/iptables status</code>
</pre>

Restart iptables:
<pre class="rootscreen">
<code>%XRDR_PROMPT%/etc/init.d/iptables restart</code>
</pre>

Check the status of the iptables to see the changes:
<pre class="rootscreen">
<code>%XRDR_PROMPT%/etc/init.d/iptables status</code>
</pre>

---+++ !!Firewall configuration for an Xrootd data server
Edit the /etc/sysconfig/iptables file on each data server node and add these lines ahead of the REJECT line:
<pre class="file">
# Xrootd connections  (from anywhere) 
-A RH-Firewall-1-INPUT -m state --state NEW,ESTABLISHED -p tcp -m tcp --dport 2525 -j ACCEPT 
# 
</pre>
Check the status of iptables:
<pre class="rootscreen">
<code>%XRD_DATA_PROMPT%//etc/init.d/iptables status</code>
</pre>

Restart iptables:
<pre class="rootscreen">
<code>%XRD_DATA_PROMPT%/etc/init.d/iptables restart </code>
</pre>

Check the status of the iptables to see the changes:
<pre class="rootscreen">
<code>%XRD_DATA_PROMPT%/etc/init.d/iptables status</code>
</pre>

Now edit the file ==$VDT_LOCATION/xrootd/etc/xrootd.cfg== and add the following  line   ==xrd.port 2525==: 
<pre class="file">
#COMMON INFORMATION
...
if $(xrdr)
    .....
else
       xrd.port 2525
</pre>

Now, you have finished the installation and configuration of xrootd on redirector  and all data server nodes. There are just few things you have to do!

---+ Enabling the Services
The detailed documentation on how to enable/disable VDT registered software is provided in [[StartingServices#Enable_a_Service][this document]].

---++ Enabling services on %BESTMAN%-gateway node
You can use the _vdt-control -list_ command to see all services that are installed as part of the install, and whether or not they are enabled or disabled. 
You will need to enable the following services:
   * fetch-crl   
   * vdt-rotate-logs  
   * vdt-update-certs              
   * gsiftp
   * gratia-gridftp-transfer  %ICON{warning}% In case you want to run Gratia !GridFTP transfer probe
   * gums-host-cron   %ICON{warning}% In case you want to run Gratia !GridFTP transfer probe and are using !GUMS for authorization
   * edg-mkgridmap     %ICON{warning}% In case you want to use grid-mapfile for authorization 

First, login to %BESTMAN%-gateway node as root. You can execute _vdt-control -enable_ command and list all services you want to enable:
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%source setup.sh
%BESTMAN_PROMPT_ROOT%vdt-control --enable fetch-crl vdt-rotate-logs vdt-update-certs gsiftp</code>
</pre> 

If you have decided to use grid-map file for authorization and would like that it has been automatically generated for you do the following:
<pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%source setup.sh
%BESTMAN_PROMPT_ROOT%vdt-control -enable edg-mkgridmap
%BESTMAN_PROMPT_ROOT%edg/sbin/edg-mkgridmap</code>
</pre> 

---+ Services Startup/Shutdown 
The detailed documentation on how to activate/deactivate VDT registered software is provided in [[StartingServices#Service_Activation][this document]].
You have to be root to start/stop each service. You have to start all the components in the 
following order: 
   1. Start Xrootd redirector. Login on redirector node,  then: <pre class="rootscreen">
<code>%XRDR_PROMPT_ROOT%source setup.sh
%XRDR_PROMPT_ROOT%vdt-control –on</code>
</pre> 
   1. Start Xrootd on all data server nodes. Login on each Xrootd data server node, then:<pre class="rootscreen">
<code>%XRD_DATA_PROMPT_ROOT%source setup.sh
%XRD_DATA_PROMPT_ROOT%vdt-control –on</code>
</pre> 
   1. Start !XrootdFS,!GridFTP and  %BESTMAN%. Login on %BESTMAN% node, then: <pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%source setup.sh
%BESTMAN_PROMPT_ROOT%vdt-control-on</code>
</pre> 

You have to be root to stop each service. You have to stop all the components in the 
following order (this is order is optional but seems logical): 
 
   1. Stop !XrootdFS,!GridFTP and %BESTMAN%. Login on %BESTMAN%  node, then: <pre class="rootscreen">
<code>%BESTMAN_PROMPT_ROOT%source setup.sh
%BESTMAN_PROMPT_ROOT%vdt-control-off</code>
</pre> 
   1. Stop Xrootd on all data server nodes. Login on each Xrootd data server node, then:<pre class="rootscreen">
<code>%XRD_DATA_PROMPT_ROOT%source setup.sh
%XRD_DATA_PROMPT_ROOT%vdt-control –off</code>
</pre> 
   1. Stop Xrootd redirector. Login on redirector node,  then: <pre class="rootscreen"><code>%XRDR_PROMPT_ROOT%source setup.sh
%XRDR_PROMPT_ROOT%vdt-control –on</code>
</pre> 

---+ System Validation 

%TWISTY{%TWISTY_OPTS_REVIEW%}%
   * this is better all said in a storage user guide - which will be useful for other purposes as well. See https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/CESimpleTest
   * What about SESimpleTest?
%ENDTWISTY%

---+ Validation of Service Operation 
In order to verify that the system is functional, you will need to have access to srm client commands, be able to create a proxy certificate (_grid-proxy-init_ or _voms_proxy_init_ command) and have access to your certificate and private key.

There are multiple ways of doing this.

---++ Preparing to run srm-client command on the %BESTMAN%  node
Running commands on the node you have just installed %BESTMAN%. 
   * Login on this node as "yourself"
   * Setup location of %BESTMAN%  installation
<pre class="screen">
cd &lt;VDT_LOCATION&gt;
. setup.sh
</pre>
   * Make sure that you have access to your certificate and private key files on that node, you will need it to create a proxy certificate. Execute grid-proxy-init:
<pre class="screen">
grid-proxy-init
Your identity: .....
Enter GRID pass phrase for this identity:
</pre>
   * You will need to add the path to all the srm client commands to your _PATH_ environment variable. You will need to have your proxy certificate to run srm clients.
<pre class="screen">
cd &lt;VDT_LOCATION&gt;
. setup.sh
export PATH=$PATH:$VDT_LOCATION/bestman/bin
</pre>

---++ Preparing to run srm-client command from the different node

Install client command on the node where you have your certificate and public key files. The detailed instruction is provided in [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/ClientInstallationGuide][in the installation guide]]. Then generate a proxy certificate by issuing _grid_proxy_init or _voms_proxy_init_:
<pre class="screen">
. &lt;VDT_LOCATION&gt;/setup.sh
grid-proxy-init
Your identity: .....
Enter GRID pass phrase for this identity:
</pre>

or

<pre class="screen">
. &lt;VDT_LOCATION&gt;/setup.sh
voms-proxy-init -voms  &lt;voms_name&gt;
Enter GRID pass phrase for this identity:
</pre>
Where  &lt;VDT_LOCATION&gt; is the directory where you installed the client.

---++ Executing SRM-client commands 
After you manage to get proxy certificate and access to srm commands you may try to verify %BESTMAN%:

Execute srm-ping: 
<pre class="screen">
 srm-ping srm://&lt;BeStMan_host&gt;:&lt;secured_port_http&gt;/srm/v2/server 
 </pre>

Expected results: 
<pre class="screen">
########################################### 
SRM_HOME is /usr/local/osg-client/srm-client-lbnl 
JAVA_HOME is /usr/local/osg-client/jdk1.5 X509_CERT_DIR = 
/usr/local/osg-client/globus/TRUSTED_CA 
GSI_DAEMON_TRUSTED_CA_DIR = /usr/local/osg-client/globus/TRUSTED_CA 
########################################### 
%TWISTY{%TWISTY_OPTS_OUTPUT%}% 
SRM-CLIENT: got remote srm object 
 
SRM-PING: Thu Sep 18 11:55:50 CDT 2008 Calling SrmPing Request... 
Ping versionInfo=v2.2 
 
Extra information 
        Key=backend_type 
        Value=BeStMan 
        Key=backend_version 
        Value=2.2.1.1 
        Key=GatewayMode 
        Value=Enabled 
        Key=gsiftpTxfServers 
        Value=gsiftp://osg-ress-2.fnal.gov 
        Key=clientDN 
        Value=/DC=org/DC=doegrids/OU=People/CN=Tanya Levshina 508821 
        Key=localIDMapped 
        Value=fnalgrid 
        Key=staticToken(0) 
        Value=DISK1 desc=DATA1 size=1073741824 
        Key=staticToken(1) 
        Value=DISK2 desc=DATA2 size=2147483648
%ENDTWISTY% 
</pre> 


If you have reasonable result, you may try srm copy. First, create a file _test1_ in _/tmp_ directory and execute: 
<pre class="screen"> 
srm-copy   file:////tmp/test1 srm://&lt;BeStMan_host&gt;:&lt;secured_port_http&gt;/srm/v2/server\?SFN=&lt;storage_path&gt;/test1 -spacetoken &lt;TOKEN_1_NAME&gt; 
</pre> 

You should get back something similar to the following: 

<pre class="screen"> 
########################################### 
SRM_HOME is /usr/local/osg-client/srm-client-lbnl 
JAVA_HOME is /usr/local/osg-client/jdk1.5 X509_CERT_DIR = 
/usr/local/osg-client/globus/TRUSTED_CA 
GSI_DAEMON_TRUSTED_CA_DIR = /usr/local/osg-client/globus/TRUSTED_CA 
########################################### 
SRM-CLIENT: Thu Sep 18 11:57:09 CDT 2008 Connecting to 
httpg://cmswn086.fnal.gov:8443/srm/v2/server 
%TWISTY{%TWISTY_OPTS_OUTPUT%}% 
 SRM-CLIENT: Thu Sep 18 11:57:10 CDT 2008 Calling SrmPrepareToPutRequest 
now ... 
request.token=put:0 
status=SRM_SUCCESS 
explanation=null 
 
SRM-CLIENT: RequestFileStatus for SURL=file:////tmp/test1 is Ready. 
SRM-CLIENT: received TURL=gsiftp://osg-ress- 
2.fnal.gov//storage/local/data1/testxrootfs/test36 
 
SRM-CLIENT: Thu Sep 18 11:57:14 CDT 2008 start file transfer. 
SRM-CLIENT:Source=file:////tmp/test1 
SRM-CLIENT:Target=gsiftp://osg-ress- 
2.fnal.gov//storage/local/data1/testxrootfs/test36 
 
SRM-CLIENT: Thu Sep 18 11:57:22 CDT 2008 end file transfer. 
 
SRM-CLIENT: Thu Sep 18 11:57:22 CDT 2008 Calling putDone for 
srm://cmswn086.fnal.gov:8443/srm/v2/server?SFN=/storage/local/data1/tes 
txrootfs/test36 
 
SRM-CLIENT: Thu Sep 18 11:57:27 CDT 2008 end file transfer. 
 
SRM-CLIENT: Request completed with success 
 
SRM-CLIENT: Printing text report now ... 
 
SRM-CLIENT*REQUESTTYPE=put 
SRM-CLIENT*TOTALFILES=1 
SRM-CLIENT*TOTAL_SUCCESS=1 
SRM-CLIENT*TOTAL_FAILED=0 
SRM-CLIENT*REQUEST_TOKEN=put:0 
SRM-CLIENT*REQUEST_STATUS=SRM_SUCCESS 
SRM-CLIENT*SOURCEURL[0]=file:////tmp/test1 
SRM- 
CLIENT*TARGETURL[0]=srm://cmswn086.fnal.gov:8443/srm/v2/server?SFN=/sto 
rage/local/data1/testxrootfs/test36 
SRM-CLIENT*TRANSFERURL[0]=gsiftp://osg-ress- 
2.fnal.gov//storage/local/data1/testxrootfs/test36 
SRM-CLIENT*ACTUALSIZE[0]=15 
SRM-CLIENT*FILE_STATUS[0]=SRM_SUCCESS 
SRM-CLIENT*EXPLANATION[0]=SRM-CLIENT: PutDone is called successfully 
 
SRM-CLIENT: Thu Sep 18 11:57:27 CDT 2008 end file transfer. 
ExitCode=0 
%ENDTWISTY%
</pre> 


If you turn on Gratia !GridFTP transfer probes, you should be able to see the accounting information by accessing your Gratia collector. See details in  [[GratiaTransferProbe][Preparing, Installing and Validating Gratia transfer probe]].

 
#DebugInfo
---+ Troubleshooting
---++ File Locations
If any of the tests described above have failed or you are just curious to see what’s going 
on, you could find log and configuration files for each of the module in the following 
location on a relevant node: 
|*Module Name*|*Configuration files*| *Log files*| 
|%BESTMAN%| $VDT_LOCATION/bestman/conf/bestman.rc |$VDT_LOCATION/vdt-app-data/bestman/logs/event.srm.log</br>$VDT_LOCATION/vdt-app-data/bestman/logs/bestman.log| 
|!GridFTP|$VDT_LOCATION/vdt/services/vdt-run-gsiftp.sh.env | $VDT_LOCATION/globus/var/log/gridftp.log <br/>$VDT_LOCATION/globus/var/log/gridftp-auth.log | 
|!XrootdFS |$VDT_LOCATION/xrootdfs/start.sh <br/>$VDT_LOCATION/xrootdfs/stop.sh |NA| 
|Xrootd – redirector |$VDT_LOCATION/xrootd/etc/xrootd.cfg  <br/>$VDT_LOCATION/xrootd/etc/xrootd_2.cfg  <br/>$VDT_LOCATION/xrootd/etc/StartXRD.cf  <br/>|$VDT_LOCATION/xrootd/var/logs/xrdlog  <br/>$VDT_LOCATION/xrootd/var/logs/cmslog  <br/>$VDT_LOCATION/xrootd/var/logs/ xrootd_cnd/xrdlog |
|Xrootd – data server| $VDT_LOCATION/xrootd/etc/xrootd.cfg  <br/>$VDT_LOCATION/xrootd/etc/StartXRD.cf |$VDT_LOCATION/xrootd/var/logs/xrdlog  <br/>$VDT_LOCATION/xrootd/var/logs/cmslog |

---++ Open Ports
|*Module Name*|*Port Number*| *Protocol*|
|%BESTMAN%| 8080 (default 10080)| tcp|
||8443 (default 10443)|tcp|
|!GridFTP|2811|tcp|
||lowPort,maxPort if needed to control outbound globus connections|tcp|
|!Xrootd redirector|1094|tcp|
||2094|tcp|
||1213|tcp|
|!Xrootd data server| opens random port selected by OS;|tcp|
|^|replace "xrd.port any" with a particular port in $VDT_LOCATION/xrootd/etc/xrootd.cfg| |
---++ Debugging Procedure
If   sanity checks failed you would probably need to check the each component in order 
to verify what went wrong with your installation. In order to do so you should ,probably, 
check all them in the following order: 
   * Xrootd 
   * !XroodFS 
   * !GUMS (if in use) 
   * !GridFTP 
   * %BESTMAN% 

%TWISTY%
---++++ !!Verifying Xrootd 
Login on the node where you have installed %BESTMAN% , then 
<pre class="screen">
cd $VDT_LOCATION
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$VDT_LOCATION/xrootd/lib 
export LD_PRELOAD=$VDT_LOCATION/xrootd/lib/libXrdPosixPreload.so 
echo “This is a test” >/tmp/test 
cp /tmp/test xroot://&lt;XRDR_host&gt;:1094//&lt;XRDR_storage_path&gt;/test 
cp xroot://&lt;XRDR_host&gt;:1094//&lt;XRDR_storage_path&gt;/test /tmp/test1 
diff /tmp/test1 /tmp/test 
</pre>

---++++ !!Verifying !XrootdFS 
Login on the node where you have installed !XrootdFS, then 
<pre class="screen">
cd &lt;storage_path&gt;
echo “This is a test” >test1 
ls –l test1 
cat test1 
</pre>

---++++ !!Verifying !GUMS 
Make sure that the service certificate you are specified for %BESTMAN%   configuration with  
--cert &lt;service_cert&gt; , --key  &lt;service_key&gt;  options and !GridFTP service certificate are 
accepted by !GUMS  (see [[http://vdt.cs.wisc.edu/releases/1.10.1/notes/GUMS.html GUMS Installation Documentation]])   
 
Get mapping _uid_ for your certificate and verify that this _uid_ exists on %BESTMAN%  and !GridFTP node. 
 
---++++ !!Verifying !GridFTP 
Login on the node where you have installed have your certificate installed and  access to %CACHE%:client.

You will need to get your voms-proxy certificate: 
<pre class="screen">
voms-proxy-init –voms &lt;voname&gt;:/&lt;voname&gt; 
</pre>

Then test !GridFTP: 

<pre class="screen">
cd $VDT_LOCATION 
. setup.sh 
echo “This is a test” >/tmp/test 
globus-url-copy -dbg file:///tmp/test gsiftp://&lt;GridFtp_host&gt;/tmp/test 
</pre>

---++++ !!Verifying %BESTMAN% 
Make sure that %BESTMAN%  is running and there is no error in the log file (_$VDT_LOCATION/vdt-app-data/bestman/logs/event.srm.log_). Login on the node where you have installed %BESTMAN% then

<pre class="screen">
[root@cmswn085 itb_bestman]# ps auxww|grep $VDT_LOCATION/bestman|grep -v grep
daemon   27648  0.0  0.0  4944 1168 pts/2    S    07:46   0:00 /bin/sh /usr/local/itb_bestman/bestman/sbin/bestman.server
daemon   27676  3.3  7.4 715240 155208 pts/2 Sl   07:46   1:59 /usr/local/itb_bestman/jdk1.6/bin/java -server -Xmx512m -Dorg.globus.tcp.port.range=20000,25000 -DX509_CERT_DIR=/usr/local/itb_bestman/globus/TRUSTED_CA -Daxis.ServerConfigFile=/usr/local/itb_bestman/bestman/conf/server-config.wsdd gov.lbl.srm.server.Server /usr/local/itb_bestman/bestman/conf/bestman.rc
</pre>
%ENDTWISTY%
---+++ Known issues
   * None


---+ References
There are lots of references in this twiki to Bestman and Xrootd.
   * [[http://indico.fnal.gov/getFile.py/access?contribId=15&sessionId=26&resId=0&materialId=slides&confId=2538][Xrootd presentation on OSG Storage Forum, June 2009]]
    * [[http://indico.fnal.gov/getFile.py/access?contribId=5&sessionId=16&resId=0&materialId=slides&confId=3377][Xrootd presentation on OSG Storage Forum, September 2010]]
   * [[http://xrootd.slac.stanford.edu/doc/dev/xrd_config.htm][Xrootd XRD Config Reference]]
   * [[http://xrootd.slac.stanford.edu/doc/dev/cms_config.htm][Xrootd CMS Config Reference]] 
   * [[http://fuse.sourceforge.net  FUSE]]
   * [[http://wt2.slac.stanford.edu/xrootdfs/xrootdfs.html  XrootdFS]]
   * [[http://sdm.lbl.gov/bestman BeStMan]]  
   * [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/BestmanGateway BeStMan-gateway Installation/Configuration Reference]]
   * [[https://twiki.grid.iu.edu/bin/view/Storage/SEToolsTipsFAQs][Tips and FAQ]]
   * [[http://www.globus.org/toolkit/docs/3.2/gridftp  GridFTP]]
   * [[http://xrootd.slac.stanford.edu/papers/Scalla-Intro.htm  Xrootd]]
   * [[http://vdt.cs.wisc.edu/index.html current VDT cache]]
   * [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/BestmanGatewayXrootdUseCases][MWT2 BeStMan-Xrootd Use Cases]]
 

---+Screen Dump of the Complete Install Process 
---++ Basic Installation and Configuration
Below is a screen dump of basic installation and configuration of %BESTMAN%-gateway/XrootdFS/Xrootd:
   * using gridmap file
   * running on specified ports
   * using specified certificate and key files
   * configuring static space token
   * not enabling gratia probe services
%TWISTY%
<pre classs="screen">
####Login on xrootd  node as root

# . /usr/local/pacman-3.28/setup.sh
# mkdir -p /opt/osg_1.2.8-xrootd
# cd /opt/osg_1.2.8-xrootd
# pacman -get http://software.grid.iu.edu/osg-1.2:Xrootd
Do you want to add [http://software.grid.iu.edu/osg-1.2] to [trusted.caches]? (y/n/yall): yall
Beginning VDT prerequisite checking script vdt-common/vdt-prereq-check...

All prerequisite checks are satisfied.
# . setup.sh
# vdt-post-install
Starting...
Nothing needs to be done at this time.
# vdt-version

You have installed a subset of VDT version 2.0.0p15:

Software                                                 Status              
--------                                                 ------              
Xrootd 20091028-1003                                     OK                  


Status legend:
OK: Software is up to date with the latest release in VDT version 2.0.0
- : Not enough information to determine if updates are available.
See man page for more information.
### ON REDIRECTOR NODE use this configurationuse this configuration command

# $VDT_LOCATION/vdt/setup/configure_xrootd --server y --user xrootd --this-is-xrdr --xrdr-storage-path /data/xrootdfs/public xrootdfs --xrdr-storage-cache /data/xrootdfs/spacetokens --with-tokens-list "FermiDATADISK[desc:FERMIDATADISK][40000];FermiGROUPDISK[desc:FERMIGROUPDISK][30000]" --public-cache-size 50


##### ON ALL DATA SERVER NODES use this configuration command
# $VDT_LOCATION/vdt/setup/configure_xrootd --server y --user xrootd --xrdr-host gw016k0.fnal.gov --xrdr-storage-path /data/xrootdfs/public --xrdr-storage-cache /data/xrootdfs/spacetokens --with-tokens-list "FermiDATADISK[desc:FERMIDATADISK][40000];FermiGROUPDISK[desc:FERMIGROUPDISK][30000]" --public-cache-size 50


# vdt-control --list
Service                 | Type   | Desired State
------------------------+--------+--------------
xrootd                  | init   | enable

# vdt-control -on
enabling init service xrootd... ok

#### LOGIN on BeStMan node

# . /usr/local/pacman-3.28/setup.sh
# mkdir -p /opt/osg_1.2.8-bestman/
# cd  /opt/osg_1.2.8-bestman/
# pacman -get http://software.grid.iu.edu/osg-1.2:XrootdFS
Do you want to add [http://software.grid.iu.edu/osg-1.2] to [trusted.caches]? (y/n/yall): yall
Beginning VDT prerequisite checking script vdt-common/vdt-prereq-check...

All prerequisite checks are satisfied.
# export VDT_GUMS_HOST=gums.fnal.gov
# pacman -get http://software.grid.iu.edu/osg-1.2:Bestman
                                                                                


========== IMPORTANT ==========
Most of the software installed by the VDT *will not work* until you install
certificates.  To complete your CA certificate installation, see the notes
in the post-install/README file.



# . setup.sh                                      
# $VDT_LOCATION/vdt/bin/vdt-ca-manage setupca --location local -url osg
Setting CA Certificates for VDT installation at '/opt/osg_1.2.8-bestman'

Setup completed successfully.

# vdt-post-install
Starting...
Configuring PRIMA... Done.
Configuring EDG-Make-Gridmap... Done.
Completed all configuration.
# pacman -get http://software.grid.iu.edu/osg-1.2:Xrootd-GridFTP
# . setup.sh
# vdt-version

You have installed a subset of VDT version 2.0.0p15:

Software                                                 Status              
--------                                                 ------              
Berkeley Storage Manager (BeStMan) 2.2.1.3.8             OK                  
vdt-ca-manage 1.1                                        OK                  
vdt-update-certs 2.5                                     OK                  
CA Certificates 1.13 (includes IGTF 1.34 CAs)            -                   
EDG Make Gridmap 3.0.0                                   OK                  
Fetch CRL 2.6.6                                          OK                  
GPT 3.2-4.0.8p1                                          OK                  
Gratia GridFTP Probe 1.06.15h-1                          OK                  
Grid User Management System (GUMS) Client 1.3.17         OK                  
Java 5 SDK 1.5.0_22                                      OK                  
Java 6 SDK 1.6.0_17                                      OK                  
Logrotate 3.7                                            OK                  
PRIMA Authorization Module 0.8.4                         OK                  
pyOpenSSL module 0.9                                     OK                  
VOMS Client 1.8.8-2p1                                    OK                  
Wget 1.12                                                OK                  
XrootdFS 3.0rc3                                          OK                  


Status legend:
OK: Software is up to date with the latest release in VDT version 2.0.0
- : Not enough information to determine if updates are available.
See man page for more information.

# vdt-control --list
Service                 | Type   | Desired State
------------------------+--------+--------------
xrootdfs                | init   | enable
fetch-crl               | cron   | do not enable
vdt-rotate-logs         | cron   | do not enable
vdt-update-certs        | cron   | do not enable
gsiftp                  | inetd  | enable
gratia-gridftp-transfer | cron   | do not enable
gums-host-cron          | cron   | do not enable
edg-mkgridmap           | cron   | do not enable

# vdt/setup/configure_xrootdfs --user daemon --cache /data/xrootdfs/public --xrdr-host gw016k0.fnal.gov --xrdr-storage-path /data/xrootdfs/public
# vdt/setup/configure_bestman --server y --user daemon --cert /etc/grid-security/bestman_cert/bestmancert.pem --key /etc/grid-security/bestman_cert/bestmankey.pem --http-port 8080 --https-port 8443 --gums-host gums.fnal.gov --gums-port 8443 --use-xrootd --globus-tcp-port-range 40000,49150 --with-tokens-list "FermiDATADISK[desc:FERMIDATADISK][40000];FermiGROUPDISK[desc:FERMIGROUPDISK][30000]"

# vi /etc/sudoers
....
Cmnd_Alias SRM_CMD = /bin/rm, /bin/mkdir, /bin/rmdir, /bin/mv, /bin/ls 
Runas_Alias SRM_USR = ALL, !root 
<user_name> ALL=(SRM_USR) NOPASSWD: SRM_CMD 

# vdt/setup/configure_gridftp --use-xrootd --xrootd-host gw016k0.fnal.gov --xrootd-mount-point /data/xrootdfs/public  --xrootd-storage-path /data/xrootdfs/public
# cp $VDT_LOCATION/post-install/prima-authz.conf /etc/grid-security 
# cp /opt/osg_1.2.8-bestman/post-install/gsi-authz.conf /etc/grid-security 
# vi $VDT_LOCATION/vdt/etc/vdt-local-setup.sh 
# This file is sourced by setup.sh.  Use it for any custom setup for this site.
# This file will be preserved across VDT installations if OLD_VDT_LOCATION is set.
GLOBUS_TCP_SOURCE_RANGE=40000,49150
GLOBUS_TCP_PORT_RANGE=40000,49150
export GLOBUS_TCP_SOURCE_RANGE
export GLOBUS_TCP_PORT_RANGE

#  vdt-control -enable fetch-crl vdt-rotate-logs vdt-update-certs gsiftp
running 'vdt-register-service --name fetch-crl --enable'... ok
running 'vdt-register-service --name vdt-rotate-logs --enable'... ok
running 'vdt-register-service --name vdt-update-certs --enable'... ok
running 'vdt-register-service --name gsiftp --enable'... ok
# vdt-control --list
Service                 | Type   | Desired State
------------------------+--------+--------------
xrootdfs                | init   | enable
fetch-crl               | cron   | enable
vdt-rotate-logs         | cron   | enable
vdt-update-certs        | cron   | enable
gsiftp                  | inetd  | enable
gratia-gridftp-transfer | cron   | do not enable
gums-host-cron          | cron   | do not enable
edg-mkgridmap           | cron   | do not enable
bestman                 | init   | enable


# vdt-control -on
enabling init service xrootdfs... ok
enabling cron service fetch-crl... ok
enabling cron service vdt-rotate-logs... ok
enabling cron service vdt-update-certs... ok
enabling inetd service gsiftp... ok
skipping cron service 'gratia-gridftp-transfer' -- marked as disabled
skipping cron service 'gums-host-cron' -- marked as disabled
skipping cron service 'edg-mkgridmap' -- marked as disabled
enabling init service bestman... ok

# df
Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/xvda1             9934940   8991124    431000  96% /
xrootdfs             706938732  82582596 624356136  12% /data/xrootdfs/public


</pre>
%ENDTWISTY%

---+ Comments

| PM2RPM_TASK = SE | Main.RobertEngel | 28 Aug 2011 - 05:49 |
%COMMENT{type="tableappend"}%


<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = TanyaLevshina

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = Storage

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = AlexSim
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = MarcoMambelli
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %YES%
############################################################################################################
-->

%META:FILEATTACHMENT{name="betsman_gateway_xrootd.jpeg" attachment="betsman_gateway_xrootd.jpeg" attr="" comment="BeStMan-gateway/Xrootd architecture" date="1235141572" path="betsman_gateway_xrootd.jpeg" size="35418" stream="betsman_gateway_xrootd.jpeg" tmpFilename="/usr/tmp/CGItemp11241" user="TanyaLevshina" version="1"}%
%META:FILEATTACHMENT{name="bestman-gateway-xrootd-howitworks.jpg" attachment="bestman-gateway-xrootd-howitworks.jpg" attr="" comment="!BeStMan Gateway with Xrootd - How it works" date="1237495053" path="bestman-gateway-xrootd-howitworks.jpg" size="52148" stream="bestman-gateway-xrootd-howitworks.jpg" tmpFilename="/usr/tmp/CGItemp8893" user="AlexSim" version="1"}%
