%META:TOPICINFO{author="RobGardner" date="1248217132" format="1.1" version="1.2"}%
%META:TOPICPARENT{name="TestingAndValidation"}%
---+!! *<nop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%

%STARTINCLUDE%
%BR%
---+ _%INCLUDEHEADING%   gPlazma interoperability testing_
_This page explains how to configure and test the XACML authorization plugin for gPlazma in dCache._

%EDITTHIS%
%BR%

---++ Introduction
Starting with dCache 1.9.2, a new authorization plugin is available for gPlazma, which allows communication with a mapping service using XACML embedded in SOAP messages. A XACML profile for Grid Services has been defined, see http://www.fnal.gov/docs/products/voprivilege/focus/AuthZInterop/info.html. The XACML standard allows gPlazma to obtain a mapping from any service which has implemented the profile. At this point, there are mapping service implementations for GUMS and SCAS. The GUMS services maps DN and FQAN to a username, and the SCAS service maps DN and FQAN to a UID, primary GID, and secondary GIDs.


---++ Installation

If you have not installed dCache using the VDT package, please follow the directions at

http://vdt.cs.wisc.edu/vdt/extras/InstallingDcacheForOSG.html

Otherwise, download and unpack the tarball

http://vdt.cs.wisc.edu/software/dcache/server/<VERSION>/vdt-dcache-SL4_32-<VERSION>.tar.gz for Scientific Linux 4 on 32-bit processors

and use vdt-dcache-SL4_32-<VERSION>/install/install.sh to install or upgrade your dCache installation to 1.9.2 on every node of the storage system.

If the installation is a new one, create a storage-authzdb file on the node running gPlazma, as described in the dCache book  http://www.dcache.org/manuals/Book/config/cf-gplazma-authzdb.shtml.

If the installation is an upgrade it will change /opt/d-cache/config/gPlazma.batch. It is normally not necessary to change this file, but if you have customized the previous copy, transfer your changes to the new batch file. The upgrade will also place a file in /opt/d-cache/etc named dcachesrm-gplazma.policy.rpmnew. Make a copy of your dcachesrm-gplazma.policy and rename dcachesrm-gplazma.policy.rpmnew to dcachesrm-gplazma.policy. Then transfer the customizations of your previous dcachesrm-gplazma.policy to the new one. Notice that there is a new gPlazma plugin in the policy file, named xacml-vo-mapping, for the new GUMS service.

---++ Test gPlazma with the old GUMS

If you have not yet upgraded GUMS, or have an endpoint that is running the old GUMS, verify that authorization using the new gPlazma still works.

---+++ The SAML plugin

The gPlazma plugin for using the non-XACML GUMS is called the "saml-vo-mapping". Turn on the plugin and turn off all other in gPlazma by setting the following switches in /opt/d-cache/etc/dcachesrm-gplazma.policy.

<verbatim>
# Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="ON"
kpwd="OFF"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"
</verbatim>

Also ensure that the endpoint is correct. The corresponding lines in the policy file are

<verbatim>
# SAML-based grid VO role mapping
mappingServiceUrl="https://gums.oursite.edu:8443/gums/services/GUMSAuthorizationServicePort"
# Time in seconds to cache the mapping in memory
saml-vo-mapping-cache-lifetime="0"
</verbatim>

Note that for testing purposes, caching has also been turned off. It is not necessary to restart gPlazma in order to pick up the changes to the policy file.

With these settings, make a proxy with DN (and optionally, role) that is known to be authorized by the GUMS service. Then run the set of fermi client tests as described on the ITB twiki <fix link> https://twiki.grid.iu.edu/bin/view/Integration/DCacheVTB. If the tests succeed, check that the ownership of the files is as expected. If the tests do not succeed and authorization is the cause, it should be reflected in the error messages printed by the test script.

---++ Test gPlazma with the new GUMS

After upgrading to or installing the new GUMS, a XACML mapping service will be available. The new service relies on the same database and mapping configuration as the legacy GUMS service.

---+++ The XACML plugin

To test the new XACML plugin in gPlazma, turn it on and the other plugins off by setting the plugin switches in /opt/d-cache/etc/dcachesrm-gplazma.policy to the following values.

<verbatim>
# Switches
xacml-vo-mapping="ON"
saml-vo-mapping="OFF"
kpwd="OFF"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"
</verbatim>

You will also need to set the endpoint for the xacml plugin by changing the line for <nop>XACMLmappingServiceUrl.

<verbatim>
# XACML-based grid VO role mapping
XACMLmappingServiceUrl="https://gums.oursite.edu:8443/gums/services/GUMSXACMLAuthorizationServicePort"
# Time in seconds to cache the mapping in memory
xacml-vo-mapping-cache-lifetime="0"
</verbatim>

If you are running the new GUMS as the result of an upgrade, the URL will be the same as the old GUMS URL, except for the different service name. Again, for testing purposes, caching has also been turned off. With these settings, and the same proxy created in the previous test, run the set of fermi client tests as described on the ITB twiki <fix link> https://twiki.grid.iu.edu/bin/view/Integration/DCacheVTB.

---+++ The SAML plugin

The new GUMS with XACML also supports the older SAML callout. After testing the new XACML plugin, verify that the saml-vo-mapping (old GUMS service) is still functional with the new GUMS. To do this, set the plugin switches to the following values.

<verbatim>
# Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="ON"
kpwd="OFF"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"
</verbatim>

Also ensure that the endpoint is correct. For the saml-vo-mapping, you will continue to use the same endpoint as before the upgrade. The corresponding lines will be the same as they were in the old policy file.

<verbatim>
# SAML-based grid VO role mapping
mappingServiceUrl="https://gums.oursite.edu:8443/gums/services/GUMSAuthorizationServicePort"
# Time in seconds to cache the mapping in memory
saml-vo-mapping-cache-lifetime="0"
</verbatim>

For testing purposes, again have the caching off by setting the lifetime to zero. Then with the same proxy as before, run the set of fermi client tests again.

---++ Test gPlazma with SCAS

A development SCAS test service is available from NIKHEF on a best effort basis. Prior to testing, please send your DN to the ITB so that a mapping for it can be configured on the test service. 

---+++ The XACML plugin

Only the XACML plugin will work with SCAS. Turn it on and the other plugins off by setting the plugin switches in /opt/d-cache/etc/dcachesrm-gplazma.policy to the following values.

<verbatim>
# Switches
xacml-vo-mapping="ON"
saml-vo-mapping="OFF"
kpwd="OFF"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"
</verbatim>

Set the endpoint to the NIKHEF SCAS endpoint.

<verbatim>
# XACML-based grid VO role mapping
XACMLmappingServiceUrl="https://eir.nikhef.nl:8443"
# Time in seconds to cache the mapping in memory
xacml-vo-mapping-cache-lifetime="0"
</verbatim>

Note that the SCAS implementation does not have a service name, because it is not implemented as a web service. Whereas GUMS returns a username for its mapping, SCAS returns a UID, a primary GID, and secondary GIDs. For dCache, a rootpath is also needed. For GUMS, gPlazma maps the username to the UID, GIDs, and rootpath through a line in /etc/grid-security/storage-authzdb such as

<verbatim>
authorize testuser read-write 9811 5063,5066 / /pnfs/fnal.gov/data /
</verbatim>

for username "testuser". With SCAS, there is no username. In order to use the same scheme for storage-authzdb, gPlazma constructs a username from the UID and primary GID returned by SCAS by concatenating them with a colon separator. For example, for when SCAS returns UID=5005 and primary GID=502, the line in storage-authzdb to assign a rootpath is

<verbatim>
authorize 5005:502 read-write 5005 502 / /pnfs/fnal.gov/data /
</verbatim>

This line must be inserted by hand, so it is necessary to know the SCAS mappings before the authorization setup can be completed.


---++ Known issues/Troubleshooting

If the above tests fail, to troubleshoot check the GUMS output in the tomcat log directory. Also, check the gPlazma log at /var/log. If it is not clear whether authorization is the cause of the problem, try another gPlazma plugin, for example by using the switches

<verbatim>
# Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="OFF"
kpwd="OFF"
grid-mapfile="ON"
gplazmalite-vorole-mapping="OFF"
</verbatim>

Further configuration files will be needed for the other plugins. Please see the gPlazma chapter of the dCache book http://www.dcache.org/manuals/Book/config/cf-gplazma.shtml for instructions.

---++ More information

Please see the above embedded links.


%STOPINCLUDE%
%BR%
%COMPLETE2% %BR%
%RESPONSIBLE% Main.TedHesselroth - 01 Dec 2008 %BR%
%REVIEW% Main.SuchandraThapa - 21 Jul 2009 %BR%
%REVFLAG% %X% %BR%


---++ *Comments*
%COMMENT{type="tableappend"}%
