%META:TOPICINFO{author="SuchandraThapa" date="1245272429" format="1.1" version="1.49"}%
%META:TOPICPARENT{name="ComputeElementInstall"}%
---+!! *<nop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%

%STARTINCLUDE%
%BR%
---+ _%INCLUDEHEADING%  %SPACEOUT{ "%TOPIC%" }%_
%EDITTHIS%
%BR%

---++ Overview of OSG Configuration

Setting OSG attributes and configuring the CE for deployment in the OSG is now done via a configuration script =configure-osg.py= installed in =$VDT_LOCATION/monitoring/=.  Use of this script and its input configuration file is discussed in detail below.  It is now no longer necessary to do a ==vdt-control --on== before executing the =configure-osg.py=.

%NOTE%  Prior to OSG 1.0, configuration was done via and interactive set of shell scripts, =configure-osg.sh=.  That script is still available and should work, though it has limited functionality compared with the now released =configure-osg.py=.  The =configure-osg.sh= script will be deprecated. 

%STARTOSG12%
Note, in OSG 1.2 and later versions, =configure-osg.py= is now called =configure-osg= and is automatically in your path when you source =setup.sh=.  In addition, the files in =$VDT_LOCATION/monitoring= are now in =$VDT_LOCATION/osg/etc= or =$VDT_LOCATION/osg/bin= depending on whether they are scripts (e.g. =configure-osg=, =extract-config=) or configuration files (e.g. =config.ini=).  A symlink from =monitoring= to =osg/etc= is present for backward compatibility.
%ENDOSG12%

The =configure-osg.py= script takes an input configuration file (by default =$VDT_LOCATION/monitoring/config.ini=) and runs the configuration process in batch mode (without user interaction).  Details about the syntax and formatting of the input configuration file can be found in  [[ConfigurationFileFormat][ Configuration File Format]] documentation with additional discussions of configuration options in the [[ConfigurationFileHelp][Configuration file help]] document.   Briefly,  

   * The general format of the configuration file is a list of variable assignments (varname = value) broken into subsections delineated by square brackets ( [x] denotes subsection x).  
   * =extract-config.ini= can also be found in the =$VDT_LOCATION/configure-osg-templates= directory but this is used as a template when extracting configuration information from an old installation and should not be modified
   * =configure-osg.py= can extract a configuration from an existing installation 
 
Running the =configure-osg.py= script with a suitable input file will:

   * Sets attributes described in [[PrepareForComputeElementConfigure][CE Site Administrator Overview]]
   * Runs post-VDT-installation configuration of standard services: 
      *  GIP
      *  Gratia probes
      *  RSV  (if specified)
      *  WS GRAM (if enabled)
   * Runs additional configration of optional services
      * Squid (if on same node as CE - not recommended)
      * <nop>MonALISA 
   * On first execution only, it copies the =$VDT_LOCATION/monitoring/locations/grid3-locations.txt= to =$OSG_APP/etc= with 666 permissions 
   * It writes warnings and messages to the =$VDT_LOCATION/vdt-install.log= file.  (Verbosely with the <b>-d</b> option)
   * If the -v option is used (to verify a configuration file), any warnings or errors will be written to the console through =stderr=.

%NOTE% The <nop>MonALISA configuration script is run regardless of whether <nop>MonALISA is used.  However, it is only configured for use if requested. 


---++ Options for Running =configure-osg.py=

The script is installed as =$VDT_LOCATION/monitoring/configure-osg.py= and runs in reference to an OSG installation.  Typically run after =$VDT_LOCATION/setup.(c)sh= is sourced, $VDT_LOCATION defines the target OSG installation.  Alternatively, the <b>-D</b> option can be used to point to the target installation.  When run to extract a configuration file, either setting =OLD_VDT_LOCATION= or using the <b>-D</b> option will specify a target OSG installation.   The following table shows the basic methods assuming the simplest setup.  

| Invocation | Action |
| =./configure-osg.py  -c= | Executes the script in configure mode using the configuration file at =$VDT_LOCATION/monitoring/config.ini= and writes attribute files to =$VDT_LOCATION/monitoring/= |
| =./configure-osg.py  -v= | Executes the script in verify mode using the configuration file specified by =$VDT_LOCATION/monitoring/config.ini=|
| =./configure-osg.py  -e=   |Extracts configuration from an existing install located at =$OLD_VDT_LOCATION= and writes a configuration file for it at  =./extracted-config.ini=|
              
%STARTOSG12% 
In this release, configure-osg no longer supports the -e option.  Instead you should use the =extract-config= program which looks at the directory given in the =OLD_VDT_LOCATION= environment variable and then generates a file in the current directory called =extracted-config.ini= if possible.
%ENDOSG12%

With each successful execution of the =configure-osg.py= script in configure mode:
   * the =osg-attributes.conf= file is updated   
   * the =osg-job-environment.conf= file is updated   
   * the =osg-local-job-environment.conf= file is updated   

%NOTE% You can rerun the configure-osg.py script at a later time to reconfigure your settings or if the initial configuration did not complete successfully.

%STARTOSG12%
As of OSG 1.2, the configure-osg script will also enable services on your installation after being run in configure mode.
%ENDOSG12%

The full set of options that configure-osg.py supports are as follows:

| Option | Explanation|
| -c | This runs configure-osg.py in configure mode.  Mutually exclusive with -v and -e.   <br> Configure mode reads a configuration file, verifies the settings in the file, configures the install, and writes out the various osg attribute files. |
| -v | This runs configure-osg.py in verify mode. Mutually exclusive with -c and -e.  <br> Verify mode reads a configuration file, verifies the settings and outputs any problems or errors found. |
| -e | This runs configure-osg.py in extract mode. Mutually exclusive with -c and -v.  <br> Extraction mode reads the attributes files found in =$OLD_VDT_LOCATION/monitoring= for OSG 0.6.0, and then parses and writes out a configure to =./extracted-config.ini=.   *For OSG 0.8.0 and OSG 1.0.0, the extract mode will use =$OLD_VDT_LOCATION/monitoring/config.ini= to obtain it's configuration information. For OSG 1.2 and later, this is no longer supported and this functionality has been moved to the extract-config program.*|
| -d | This enables debugging output, which increases the verbosity of log messages being written to $VDT_LOCATION/vdt-install.log |

---++ Typical Configuration Steps 

There are three typical use cases for using the configure-osg.py script:  moving/upgrading an existing installation, configuring a brand new installation,  modifying the configuration of a working installation.  The workflows for these three cases are listed here.

   * Moving/upgrading an existing installation not configured using configure-osg.py
      * Source =setup.sh= from the new installation
      * export OLD_VDT_LOCATION pointing to source installation.
      * Extract the old configuration by running =configure-osg.py -e= . This will produce a configuration file, =extracted-config.ini=.
      * Edit the extracted-config.ini to correct any mistakes, change any references to the original installation, and to add any missing options.  Then backup =$OSG_LOCATION/monitoring/config.ini=, and then copy =extracted-config.ini= to =$OSG_LOCATION/monitoring/config.ini=
      * <b>Test</b> the configuration by running =configure-osg.py -v=. 
      * Configure the new installation by running =configure-osg.py -c=
   * Moving/upgrading an existing installation configured using configure-osg.py
      * Source =setup.sh= from the new installation
      * Locate the ini file used to configure the old installation and copy it to =$OSG_LOCATION/monitoring/config.ini=
      * Change any path references in the config.ini from the old installation location to the current installation location
      * <b>Test</b> the configuration by running =configure-osg.py -v=. 
      * Configure the new installation by running =configure-osg.py -c=
   * Configuration of a brand new installation:
      * Source =setup.sh= from the new installation
      * Create or copy a  =$VDT_LOCATION/monitoring/config.ini= with information that is required for your site 
      * <b>Test</b> the configuration by running =configure-osg.py -v=.
      * Configure the new installation by running =configure-osg.py -c=
   * Modify the configuration of a working installation
      * edit =$VDT_LOCATION/monitoring/config.ini= file with changes (e.g. new SE, number of nodes in cluster, ...)
      * <b>Test</b> the configuration by running =configure-osg.py -v=.
      * Configure the new installation by running =configure-osg.py -c= 

---++ Steps to configure a simple site from scratch

This section gives the steps need to configure for a basic resource (no SE, minimal services, etc.) using the config.ini template provided.

   * Source =$VDT_LOCATION/setup.sh=
   * Edit =$VDT_LOCATION/monitoring/config.ini=  and do the following:
      * Fill in the =admin_email= and =localhost= settings in the =[Default]= section
      * Go to the =[Site Information]= section and fill in the settings that are listed as needing to be changed
      * Go to the section for your batch manager (e.g. PBS, SGE, LSF, Condor, etc.):
         * Set =enabled= to =True= or =%(enable)s=
         * Set =home= to your home directory location
         * Set =wsgram= to  =True= or =%(enable)s= if you are planning on providing WS-GRAM services
      * In =[Managed Fork]=, set =enabled= to =True= or =%(enable)s= if you are using !ManagedFork and set the =condor_location= and =condor_config= if you haven't set =VDT_CONDOR_LOCATION= or =CONDOR_LOCATION= in your environment
      * In =[Misc Services]=, set the =glexec_location= if using !GLExec and set =use_syslog_ng= to =True= or =%(enabled)s= if you want to use syslog-ng
      * In =[Storage]=, you will need to set the settings that are indicated as needing to be changed
      * In =[GIP]=, you will need to change the following settings:
         * =batch= should be set to the name of your batch manager in lower case (e.g. =pbs=, =sge=, =condor=)
         * =gsiftp_path= should be set to the =osg_data= directory that you specified in the =[Storage]= section
         * the settings for the subcluster should be filled in
      * If you are using RSV, you will need to do the following the in =[RSV]= section:
         * Set =enabled= to =True= or =%(enable)s=
         * Fill in the =rsv_user= if rsv should not run using the =rsvuser= unix account
         * Enable the appropriate probes on your system
         * If you are using a service certificate:
            * Set =use_service_cert= to =True= or =%(enabled)s= 
            * Set =rsv_cert_file=, =rsv_key_file=, =rsv_proxy_file= if the defaults aren't appropriate
         * Otherwise set =proxy_file= to point to the proxy that RSV should use to submit jobs (*This file must exist*)
   * Run =configure-osg.py -v= to see if any errors occur
   * Provided no errors appear in the last step, run =configure-osg.py -c= to configure your system


%STARTOSG12%
   * Source =$VDT_LOCATION/setup.sh=
   * Edit =$VDT_LOCATION/osg/etc/config.ini=  and do the following:
      * Fill in the =admin_email= and =localhost= settings in the =[Default]= section
      * Go to the =[Site Information]= section and fill in the settings that are listed as needing to be changed
      * Go to the section for your batch manager (e.g. PBS, SGE, LSF, Condor, etc.):
         * Set =enabled= to =True= or =%(enable)s=
         * Set =home= to your home directory location
         * Set =wsgram= to  =True= or =%(enable)s= if you are planning on providing WS-GRAM services
      * In =[Managed Fork]=, set =enabled= to =True= or =%(enable)s= if you are using !ManagedFork and set the =condor_location= and =condor_config= if you haven't set =VDT_CONDOR_LOCATION= or =CONDOR_LOCATION= in your environment
      * In =[Misc Services]=, set the =glexec_location= if using !GLExec and set =authorization_method= to =prima=, =xacml=, or =gridmap= 
      * In =[Storage]=, you will need to set the settings that are indicated as needing to be changed
      * In =[GIP]=, you will need to change the following settings:
         * =batch= should be set to the name of your batch manager in lower case (e.g. =pbs=, =sge=, =condor=)
         * =gsiftp_path= should be set to the =osg_data= directory that you specified in the =[Storage]= section
      * In the =[Subcluster CHANGEME= the settings for the subcluster should be filled in and =CHANGEME= should be changed to the subcluster's name
      * If you are using RSV, you will need to do the following the in =[RSV]= section:
         * Set =enabled= to =True= or =%(enable)s=
         * Fill in the =rsv_user= if rsv should not run using the =rsvuser= unix account
         * Enable the appropriate probes on your system
         * If you are using a service certificate:
            * Set =use_service_cert= to =True= or =%(enabled)s= 
            * Set =rsv_cert_file=, =rsv_key_file=, =rsv_proxy_file= if the defaults aren't appropriate
         * Otherwise set =proxy_file= to point to the proxy that RSV should use to submit jobs (*This file must exist*)
   * Run =configure-osg -v= to see if any errors occur
   * Provided no errors appear in the last step, run =configure-osg -c= to configure your system

%ENDOSG12%
%STOPINCLUDE%
%BR%
%COMPLETE3% %BR%
%RESPONSIBLE% Main.SuchandraThapa - 16 May 2008 %BR%
%REVIEW% Main.JeffPorter -  12 Jun 2008 %BR%
%REVCOM% Restructured a bit into Overview, Running Options, Use cases. Example steps could be more detailed.   Jeff Porter  OK with all ITBers?

%META:TOPICMOVED{by="ForrestChristian" date="1166046785" from="Integration.ConfigureOSGAttributes050" to="Integration/ITB_0_5.ConfigureOSGAttributes"}%
