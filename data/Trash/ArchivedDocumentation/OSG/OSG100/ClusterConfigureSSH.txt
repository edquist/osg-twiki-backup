%META:TOPICINFO{author="RobGardner" date="1256554929" format="1.1" reprev="1.9" version="1.9"}%
%META:TOPICPARENT{name="GridColombiaWorkshop2009"}%
---+!! *<nop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%

---++ Introduction
   * To make our cluster secure we'll use a host-based SSH key infrastructure.
   * Here we want to setup host authentication for the root account such that:
      * SSH for the root user on the management node to access each of the other nodes on the cluster
      * SSH for the root user works without complaint between all head nodes on the cluster
      * SSH for the root user works without complaint between the head nodes and compute nodes on the cluster                                                                         


*NOTE - DISCLAIMER*:
   * The configuration described here is suggestive of what could be done for a test cluster and depicts one approach to handling access by root and user accounts.  Many universities or laboratories will have specific policies in place as to which types of access is permitted with varying degrees of restrictiveness depending on the desired security level. 


---++ Set configuration in sshd_config 

All hosts must have the following lines in their =/etc/sshd_config= file: <pre> 
Protocol 2

# No passwords
PermitRootLogin without-password
PasswordAuthentication no
PermitEmptyPasswords no
UsePAM no

# Hostbased and pubkey yes
PubkeyAuthentication yes
ChallengeResponseAuthentication no
X11Forwarding no

# Hostbased
HostbasedAuthentication yes
IgnoreRhosts no

#OPTIONALLY DON'T CHECK gethostbyaddr(), TRUST CLIENT
#HostbasedUsesNameFromPacketOnly yes
</pre>


---++ Distributing valid host keys in the cluster 
All hosts must have a valid host key for all the other hosts in the cluster.

   * Find all hosts from the file ssh_hosts which have new or different keys from those in the sorted file ssh_known_hosts:<pre>ssh-keyscan -t rsa,dsa -f ssh_hosts | \
            sort -u - ssh_known_hosts | diff ssh_known_hosts</pre>
   * The permissions on =$HOME/.ssh/authorized_keys= must be correct.


---++ Distributing valid host keys in the cluster (alternative method)
   * One easy way to accomplish this is to assemble a list of all hosts in the cluster.  Include all aliases for each host as a separate line.  Make sure you are root.  Delete =/root/.ssh/known_hosts=. 
   * Then =cat= this host list file into the  =make_known_hosts.sh= script to connect to each and pull the SSH key.  <pre>
#!/bin/sh
# make_known_hosts.sh
for host in $*; do
        expect - &lt;&lt;EOF
spawn ssh $host hostname
expect yes/no
send -- "yes\r"
expect yes
expect $host
exit
EOF
done
</pre> 
   * This will append all the keys to =/root/.ssh/known_hosts=. 
   * Copy this file into =/etc/ssh/ssh_known_hosts= on each host in the cluster using scp from the management node.
   * Create a list of head nodes for which you want to enable host-based access.  
   * Copy it into =/etc/ssh/shosts.equiv= on each host in the cluster.  
   * Also copy it into =/root/.shosts= on each host in the cluster.  This enables root login explicitly from these hosts. 
   
Now all root logins should work across the cluster from the head nodes.

---++ Authentication for users
The following is an easy way to add ssh key authentication for a (non root) user on all nodes that share the same home directory exported by =gc1-nfs=.

   * Login to your user account on the user interface machine (*gc1-ui*):
   * In the home directory of your account, do: <pre>cd ~/.ssh/
ssh-keygen -t dsa
# respond enter to all questions (defaults and enter a passphrase)
# this will generate id_dsa and id_dsa.pub files 
cat id_dsa.pub >> authorized_keys
chmod go-rwx authorized_keys           </pre>


   * You can also use ssh-agent from a client machine where your private key is stored.


%BR%
%COMPLETE3% %BR%
%RESPONSIBLE% Main.RobGardner - 23 Oct 2009 %BR%
%REVIEW%

---++ Comments
%COMMENT{type="tableappend"}%


<!--
   * Set USERSTYLEURL = https://twiki.grid.iu.edu/twiki/pub/ReleaseDocumentation/GridColombiaWorkshop2009/centerpageborder.css
-->
