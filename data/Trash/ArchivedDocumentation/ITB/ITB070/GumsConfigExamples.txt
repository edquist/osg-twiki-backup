%META:TOPICINFO{author="KyleGross" date="1229444353" format="1.1" version="1.12"}%
%META:TOPICPARENT{name="DocumentationTable"}%
---+!! *<noop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%

---++Introduction

This  page illustrates some possible authorization configurations possible in the gums.config file.
To minimize confusion (especially by the author), only those attributes relevant to the desired behavour will be shown.
The _missing_ elements/attributes are still required and are:
<noautolink>
| *Element* | *Attribute* |
| groupMapping | accounting, accountDesc |
| userGroup | className, url, persistenceFactory, sslCertfile, sslKey |
</noautolink>   

---++Grid vs. VOMS proxy authorization
The key attribute to authorization for the basic grid proxy (Globus grid-proxy-init with no extended attributes) or the VOMS proxy (voms-proxy-init with extended attributes)  is based on the ==ignoreFQAN== attribute of the <b>userGroup</b> element.

An ==ignoreFQAN== value of ==true== will only take into account the user's DN, as shown below, regardless of whether the proxy contains extended attributes (voms proxy) or not (grid proxy).  In the example below, all members in the ==/uscms== group  will be assigned using the same account mapping rules regardless of the proxy type (voms/grid) used.
<verbatim>
<groupMappings >
  <groupMapping name=uscms ..... > 
     <userGroup className='gov.bnl.gums.VOMSGroup'
        name='uscms'
        voGroup='/uscms'
        ignoreFQAN='true'
      />
     <accountMapping ....... />
  </groupMapping>
</groupMappings>
</verbatim>
If the ==ignoreFQAN==  attribute was ==false==, then only those users in the ==/uscms== group  using   voms proxies would be assigned an account.  Those users using grid proxies would be ==Denied== authorization.



---+++Supporting both grid and voms proxy
To support both the grid and voms type proxies, you need to create 2 ==groupMapping(s)==, one with ==ignoreFQAN='true'== (for grid) and one with 
==ignoreFQAN='false'== (for voms).  The order that these groups appear in the ==hostGroup== section is important, because the groups are searched from first to last. The group for voms proxies must appear before the group for grid proxies in the ==hostGroup== section, otherwise the grid proxy group would match the voms proxies, and the voms proxy group would effectivebly be ignored.

<verbatim>
<groupMappings >
  <groupMapping name='uscmsGRID' ..... > 
     <userGroup className='gov.bnl.gums.VOMSGroup'
        name='uscmsGRID'
        voGroup='/uscms'
        ignoreFQAN='true'
      />
     <accountMapping ....... />
  </groupMapping>
</groupMappings>

<groupMappings >
  <groupMapping name='uscmsVOMS' ..... > 
     <userGroup className='gov.bnl.gums.VOMSGroup'
        name='uscmsVOMS'
        voGroup='/uscms'
        ignoreFQAN='true'
      />
     <accountMapping ....... />
  </groupMapping>
</groupMappings>

<hostGroups>
   <hostGroup.. wildcard='your_ce_host' groups='uscmsVOMS,uscmsGRID' />
  </hostGroups>
</verbatim>


---++Group vs Pool Account mapping
==Group Mappings==  are used for mapping all users of a VO/subgroup to a single account.

==Pool Account Mappings== are used for  mapping each  user to  unique individual accounts.

The key attributes to this are in the ==account Mapping== element with the ==className== attribute  specified as the ==GroupAccountMapper== class and the ==groupName== attribute specifying the ==UNIX user acccount== assigned.

All users in the group ==/uscms== of the VO will be mapped to the ==uscms01== account.
<verbatim>
<groupMappings >
  <groupMapping name=uscms ..... > 
     <userGroup className='gov.bnl.gums.VOMSGroup'
         name='uscms01'
         voGroup='/uscms'
         ignoreFQAN='true'  .......
      />
     <accountMapping className='gov.bnl.gums.GroupAccountMapper' 
         groupName='uscms01' />
  </groupMapping>
</groupMappings>
</verbatim>

Pool accounts are configured using an ==AccountPoolMapper== and an ==accountMapping==

<verbatim>
<groupMappings >
  <groupMapping name=uscms ..... > 
     <userGroup className='gov.bnl.gums.VOMSGroup'
         name='uscms01'
         voGroup='/uscms'
         ignoreFQAN='true'  .......
      />
     <accountMapping className='gov.bnl.gums.AccountPoolMapper' 
         groupName='uscmsPool' />
  </groupMapping>
</groupMappings>

<accountMapping className='gov.bnl.gums.AccountPoolMapper' 
         persistenceFactory='mysql'  
        name='uscmsPool'/>
</verbatim>

The pool account names must still be defined using the ==gums== command line tool.  See InstallConfigureAndManageGUMS#Using_pool_accounts for more details on using account pools.

---++CE-1 accepts cms, atlas and sdss users .... CE-2 accepts only cms and atlas users
CE-1 gatekeepers authorizes cms, atlas and sdss accounts.CE-2 gatekeeper authorizes only cms and atlas. Both gatekeepers will use the same account mappings for cms and atlas.

  <verbatim>
<groupMappings ... >
  <groupMapping name=cms ....  > </groupMapping>
  <groupMapping name=atlas...   > </groupMapping>
  <groupMapping name=sdss....  > </groupMapping>
</groupMappings>

<hostGroups>
   <hostGroup.. wildcard='ce1.domain' groups='cms,atlas,sdss' />
   <hostGroup.. wildcard='ce2.domain' groups='cms,atlas' />
</hostGroups>
  </verbatim>

---++General Guidelines
The <b>gums.config</b> can get pretty cumbersome to edit and verify for correctness, especially as the number of VOs and the use of extended attributes increases.

Here is a short list of general guidelines for some of the attributes that can cause some subtle mapping problems.  Treat it as a KISS set of guidelines.

   1. The ==groupMapping==     ==name==     attribute  must be unique for all ==groupMapping== elements.
      * This value is used in the ==hostGroup==     ==groups==   attribute. All  ==groupMapping== elements must be accounted for in one of the ==hostGroup== elements or a miconfiguration error will occur. 
      * If you have more than 1 ==groupMapping== with the same ==name==, when GUMS performs the update from all the VO VOMS servers, it will process the first one it finds populating the database and then when it hits the 2nd with the same name, it will overwrite the 1st.
   1. Make the ==userGroup== element  ==name==  attribute the  same as the ==groupMapping==  ==name== attribute.
      * Currently, there can be only one ==userGroup== for each ==groupMapping==.  The  ==userGroup name== populates the ==userGroup== column of the ==User== table in the GUMS database.  This will allow you to more easily correlate the database ==User== table entry with the configuration entries.
   1. The ==hostGroup groups==  attribute must contain all ==groupMapping==  ==name==  attribute values. If not, a misconfiguration error will likely occur
   1. When you populate the ==hostGroup groups==    attribute, the ==groupMapping==  for voms proxies <b>must</b> precede the ==groupMapping== for grid proxies.  If not, all your authorizations will be based on grid proxies. The extended attributes of voms proxies will never get evaluated.  
      * The order of the names in the ==hostGroup groups==    attributes is the order in which GUMS evaluates an authorization request.
      * If you are supporting both voms and grid proxies, you should have 2 ==groupMapping== elements: one with ==ignoreFQAN='true'==  (grid proxy) and one with ==ignoreFQAN='false'==  (voms proxy). 
      * To  facillitate identifying these in the ==hostGroup groups==   attribute, a naming convention for the  ==groupMapping name==    attribute might be ==[vo_name]-voms== and ==[vo_name]-grid==.
   1. In all of the above cases where you are creating a name, <b>do not</b> use case sensitivity to distinguish.  In several cases, these ==names== are used in the !MySql GUMS database and 'MyVO' is treated the same as 'myvo' on queries and updates.

Remember, this is just a general set of guidelines.
%BR%
%COMPLETE2% %BR%
%RESPONSIBLE% Main.RobGardner - 17 Oct 2007 %BR%
%REVIEW% Main.RobGardner - 17 Oct 2007

%META:TOPICMOVED{by="ForrestChristian" date="1166051053" from="Integration.GumsConfigExamples050" to="Integration/ITB_0_5.GumsConfigExamples"}%
