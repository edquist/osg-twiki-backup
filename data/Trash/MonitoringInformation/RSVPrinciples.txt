%META:TOPICINFO{author="AlainRoy" date="1266449034" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="RSV"}%
---+ !RSV Principles

!RSV was designed with two main principles in mind. Inasmuch as you think !RSV doesn't live up to these principles, you should report it as a bug--they are the goals underlying the !RSV implementation. 

---++ Principle 1: No central monitoring: sites monitor themselves

!RSV is a tool for sites to be able to monitor themselves. We do not run !RSV tests from a central location (such as the GOC) on behalf of the sites. It sure would be convenient for sites if we did so--why don't we?

*MORE DETAIL SOON*


---++ Principle 2: !RSV monitoring should be managed and not affect the resources it runs on.

!RSV is a monitoring system. It should in no way affect the system that it is monitoring. If !RSV generates a large load, consumes a lot of memory, or uses too much network bandwidth, it's a problem. !RSV should limit itself to avoid these problem. 

---++ Implementation note: Cron vs. Condor Cron

Some people are surprised that !RSV isn't implemented with cron, but instead uses "Condor Cron". !RSV runs monitoring jobs periodically; cron can run processes periodically; why doesn't !RSV use cron?

Our goal is that !RSV should be able to ensure that it does not interfere with the operation of the system it is testing. We think that it's much harder to do that with cron than with Condor Cron.

In some sense, cron and Condor can be thought of as two examples of batch job systems. All the details are different, but they both have a mechanism to specify and run jobs.

Cron does very little management of jobs. Other than controlling when a process is started, all policy decisions are left to the processes themselves. Cron doesn't attempt to do anything to control them. It does not:

   * Ensure there aren't too many processes running<br>You can put as many cron jobs on a system as you like, and cron will happily start all of them.
   * Ensure that a recurring job doesn't overlap itself<br>For example, if one cron job hangs while running a test, cron is perfectly happy to start up that cron job again and again when the schedule indicates it is time.
   * Attempt to control the impact of the processes on the system load<br>Cron is "fire and forget". If a process consumes too much of the system's CPU time or memory or network bandwidth, cron doesn't care. It was only responsible for starting the process.

If you want any of those management features, it is up to the individual cron jobs to implement them. 

With Condor's cron implementation we can handle all of those things without pushing the management logic into the tests themselves. Condor cron can:

   * Control the number of !RSV processes running
   * Ensure !RSV jobs don't overlap
   * Kill !RSV processes that take too many system resources
