%META:TOPICINFO{author="ScotKronenfeld" date="1285951490" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="RSV33"}%
---+++ How to write an !RSV probe:

---++++ Language constraints:
   * can be written in any standard language that will be universally available (e.g. sh, perl, python)


---++++ Probe output:
   * must return status and details on STDOUT (see Example Outputs below) 
   * Should write any other debugging info to STDERR.  STDERR can come before/after/in-the-middle of STDOUT

---++++ Return code:
   * always return 0 if the job produced a status and details (even if the status is not OK)
   * return non-zero if the job fails for a different reason (such as bad inputs, missing exes, etc)

---++++ New types of metrics:
In order to simplify probe development we have added a concept of 'local' and 'remote' metrics:
   * local
      * The probe will execute on the same computer !RSV is running on.  
      * This is the method that all RSV probes are currently using  
      * The probe must use the appropriate commands to monitor the remote host (e.g. =globus-url-copy=, =srm-ping=).  
      * If the probe is going to run =globus-job-run= to execute some code on the remote computer, it is a good candidate to use the 'remote' universe below instead.  Many of the existing RSV probes could be converted.
   * remote
      * The !RSV infrastructure will execute the probe via =globus-job-run= on the host being monitored.  
      * This means that when the probe starts executing it will already be on the remote host with the appropriate environment set (e.g. OSG_LOCATION).
      * Some good candidates for this type of probe would be checking the osg-version, CA Certificates, or CE directory permissions.
      * This simplifies the probe development significantly since it does not need to understand Globus, proxies, authentication, etc.  
      * Note: this might be switched from using =globus-job-run= to using Condor-G in the future, but this should not affect the probes.
   * remote-batch? - This is not supported yet, but we may add a way to run a metric on the remote batch system

---++++ How to install probes
   * put probe in bin/probes directory
   * make a symlink for each metric that the probe implements in bin/metrics directory pointing at probe
   * create a meta file in meta/metrics (more to write here)

---+++ Example metric output

Metric run resulting in 'OK' status:
<pre class="screen">
JOB RESULTS:
OK
Ping succeeded
</pre>

Metric run resulting in a non-OK status:
<pre class="screen">
JOB RESULTS:
CRITICAL
Ping unsuccessful against host foo.cs.wisc.edu

Troubleshooting tips:
 - Is the network available?
 - Is the remote computer available?

Ping output:
ping: unknown host foo
</pre>

-- Main.ScotKronenfeld - 01 Oct 2010
