%META:TOPICINFO{author="X509_2fDC_3dorg_2fDC_3ddoegrids_2fOU_3dPeople_2fCN_3dDoug_20Strain_20834323" date="1291912674" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="RSV33"}%
---+!! *<noop>%SPACEOUT{ "RSV Storage Probes" }%*
%DOC_STATUS_TABLE%

---++ About this Document

This document explains how to configure and use RSV Storage Probes.


---++ Requirements

You will need to  [[RSV33Install][install RSV]] first.


---++ SRM Client Probes

Included in the optional SRM probes are two types of probes.  The first will begin with "org.osg.srm.srmclient-".
These will use SRM client commands to connect to your storage facility and run commands to check basic 
functionality connected to the SRM storage protocol.  Each probe will return a status:

  * OK (Green): This means the test was successful.
  * Warning (Yellow): This means that the server returned "Not supported".  This operation does not work, but only because it is not supported by your storage element.
  * Critical (Red):  The test has failed.  Click on the link (in html consumer) for more details.

These probes have to use either the Fermi SRM client (srmping, srmcp, etc) or the lbnl client (srm-ping, srm-copy, etc).  
If the probe is failing because it is using the wrong type, you may have to specify the "srm-client-type" option in the configure line above.

Description of the functionality for each probe is below:

   * *org.osg.srm.srmclient-copy:* Tests a SRM copy operation on the remote server.  First, uploads a file using srmcp/srm-copy from a local file to a file named like 1274991241-srmclient-probe-test-file-remote.14288 in the remote directory (numbers differ based on time and process id).  It then copies it to a new file called 1274991241-srmclient-probe-test-file-remote.142881274991241-srmclient-probe-test-file-remote.14288.copy.  It uses a srmls/ssrm-ls to verify that the copy has occurred.  Lastly, it performs a srmrm/srm-rm to clean up both copies.
   * *org.osg.srm.srmclient-get:* Tests SRM copy to get a file from the server.  Use srmcp/srm-copy to copy a file to the remote server.  Use srmcp/srm-copy to retrieve the file from the server.  Compares the two copies using the unix diff command.
   * *org.osg.srm.srmclient-mkdir:*  This command uses srmmkdir/srm-mkdir to create a directory on the storage element.  It uses srmls/srm-ls to verify that the directory exist.  The cleanup uses srm-rmdir/srm-rmdir to remove the temporary directory.
   * *org.osg.srm.srmclient-rmdir:* This command uses srmmkdir/srm-mkdir to create a directory, then uses srmrmdir/srm-rmdir to delete it.  It uses srmls/srm-ls to verify both that the directory was created and then that it also was later removed.
   * *org.osg.srm.srmclient-mv:* Tests the srmmv or srm-mv command.  This first copies a file to the storage element using srmcp/srm-copy.  It then moves it to a new name using srmmv/srm-mv.  It then uses srmrm/srm-rm to clean both the old name and new name off the server (in case the mv failed).
   * *org.osg.srm.srmclient-ping:* Pings a server using srmping/srm-ping.  Uses the exit status to verify whether the command was successful.
   * *org.osg.srm.srmclient-put:* Tests srmcp/srm-copy.  Put a file onto the server using srmcp/srm-copy, then use srmls/srm-ls to verify that the file was copied successfully.  Lastly, srmrm/srm-rm is used to clean this file off the storage element.
   * *org.osg.srm.srmclient-reservespace:* Test srm-reserve-space command to reserve a space.
   * *org.osg.srm.srmclient-releasespace:* Test srm-reserve-space then srm-reserve-space it.
   * *org.osg.srm.srmclient-rm:* Use srmcp/srm-copy to copy a file to the server then remove it using srmrm/srm-rm.  Use srmls/srm-ls to verify the file has been removed.


---++ SRM tester Probes


Included in the optional SRM probes are two types of probes.  The second will begin with "org.osg.srm.srmtester-".
These will use the Bestman "srm-tester" command to connect to your storage facility and run commands to check basic 
functionality connected to the SRM storage protocol.  Each probe will return a status:

  * OK (Green): This means the test was successful.
  * Warning (Yellow): This means that the server returned "Not supported".  This operation does not work, but only because it is not supported by your storage element.
  * Critical (Red):  Either the test failed, or it was not tested, due to a dependent operation failing (i.e. if a put fails, then there is no file to get).  Click on the link (in html consumer) for more details.

Each probe runs one "operation", which corresponds to a common task, such as getting a file.  Each test calls srm-tester with a different value in the "-op" parameter.  Some of these operations actually comprise multiple SRM commands or tests, so it is possible that one test fails, causing the subsequent tests to be not completed.  This would register as a failure.  In the case of a "critical" result, you can view the details, which will include a summary of all commands performed, and which have failed.  It will also show the detailed output of the srm-tester, which may give some clues as to why the operation failed.

Description of the functionality for each probe is below:


   * *org.osg.srm.srmtester-bringonline:* Test bringonline functionality.  This test will put a file, try to bring it to ONLINE latency, then will remove it.  This operation uses the following SRM operations:srmPrepareToPut, srmStatusOfPutRequest, gsiftp-put, srmPutDone, srmBringOnline, srmStatusOfBringOnlineRequest, srmLs, srmRm.  This test will only succeed if the srmBringOnline operation succeeds.
   * *org.osg.srm.srmtester-get:*  Test getting a file from the server.  This will put a file on the server, then get it using gsiftp.  It uses the SRM operations: srmPrepareToPut, srmStatusOfPutRequest, gsiftp-put, srmPutDone, srmPrepareToGet, srmStatusOfGetRequest, gsiftp-get, srmReleaseFiles, srmLs, srmRm.
   * *org.osg.srm.srmtester-getspacemeta:* This operation tests getting the meta-data attributes of a reserved space.  It reserves a space, then gets the meta-data, then releases the space.  It uses srmReserveSpace, srmGetSpaceMetadata, srmReleaseSpace.
   * *org.osg.srm.srmtester-getspacetokens:* This operation tests retrieving space tokens.  It uses the following SRM functionality: srmReserveSpace, srmGetSpaceTokens, srmReleaseSpace
   * *org.osg.srm.srmtester-gettransferprotocols:*  This tests the srmGetTransferProtocols operation.  It should return all valid protocols for returning data.
   * *org.osg.srm.srmtester-gsiftp:*  This tests getting a file via the gsiftp protocol.  It uses srmPrepareToPut, srmStatusOfPutRequest, gsiftp-put, srmPutDone, srmLs, srmRm, srmCopy-pull-gsiftp, srmStatusOfCopyRequest-pull-gsiftp.
   * *org.osg.srm.srmtester-ls:*  This tests browsing a directory.  It uses the srmLs functionality.
   * *org.osg.srm.srmtester-mkdir:*  This tests making a directory on the remote storage element.  This uses the operations srmMkdir and srmRmdir.
   * *org.osg.srm.srmtester-mv:* This tests moving a file from one location to a different location while on the remote storage element.  This operation actually calls srm-tester twice.  The first it calls with the operation put, in order to first prepare a file on the remote storage,  It then calls with the operation mv, which uses the srmMv, then srmRm to clean-up.
   * *org.osg.srm.srmtester-ping:*  This operation pings a server to see if it responds.  It only uses the srmPing operation.
   * *org.osg.srm.srmtester-pull:* This tests getting a file in "pull" mode.  This uses srmCopy-pull and srmStatusOfCopyRequest-pull.
   * *org.osg.srm.srmtester-push:* This tests putting a file onto the remote storage in "push" mode.  This uses srmCopy-push and srmStatusOfCopyRequest-push.
   * *org.osg.srm.srmtester-put:*  This tests copying a file onto the remote storage.  It uses a srmls in order to verify it.  The operations used are srmPrepareToPut, srmStatusOfPutRequest, gsiftp-put., srmPutDone, srmLs, srmRm.
   * *org.osg.srm.srmtester-release:*  This tests releasing a reserved space.  First, it must reserve a space where the release operation can be tested.  It uses srmReserveSpace, srmReleaseSpace.
   * *org.osg.srm.srmtester-reserve:*  This tests reserving a space on the storage element with which to put files.  This tests the srmReserveSpace operation.
   * *org.osg.srm.srmtester-rmdir:*  This tests removing a directory from the storage element.  It will need to create a directory first..  This uses the operations srmMkdir and srmRmdir.
   * *org.osg.srm.srmtester-srmrm:*  This tests removing a file from the storage element.  It will first copy a file to the server for testing.

For more information, see the Bestman srm-tester documentation.

---++ Enabling SRM client probes

You can enable the probes using....

---++ Enabling SRM tester probes

You can enable the probes using....

Don't forget to add extra options about the configuration.


---+++ Comments
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
   DEAR DOCUMENT OWNER
   ===================

   Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER          = DouglasStrain

   Please define the document area, choose one of the defined areas from the next line
   DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       =  Storage

   define the primary role the document serves, choose one of the defined roles from the next line
   DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager|Documenter)
   * Local DOC_ROLE       = SysAdmin

   Please define the document type, choose one of the defined types from the next line
   DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Installation
   
   Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

   Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

   change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %NO%

   change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

   change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


   DEAR DOCUMENT REVIEWER
   ======================

   Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = TanyaLevshina
  
   Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


   DEAR DOCUMENT TESTER
   ====================

   Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         =  NehaSharma
  
   Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
-->




-- Main.DouglasStrain - 09 Dec 2010
