%META:TOPICINFO{author="X509_2fDC_3dorg_2fDC_3ddoegrids_2fOU_3dPeople_2fCN_3dDoug_20Strain_20834323" date="1295972344" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="RSV33"}%
---+!! *<noop>%SPACEOUT{ "RSV Storage Probes" }%*
%DOC_STATUS_TABLE%
%TOC{depth="2"}%

---++ About this Document

This document explains how to configure and use RSV Storage Probes.  Two types of probes are listed under this document: SRM client probes and SRM-tester probes.
This document is intended for site administrators who want to use these probes to monitor their storage elements.  They are intended to test and monitor SRM endpoints.
This document also gives some information on the default storage probes.

---++ Requirements

You will need to [[RSV][install RSV]] first.  Refer to the main page on how to do this.  
These instructions only cover how to configure SRM probes once RSV is installed.

---++ SRM Client Probes

Included in the optional SRM probes are two types of probes.  The first will begin with "org.osg.srm.srmclient-".
These will use SRM client commands to connect to your storage facility and run commands to check basic 
functionality connected to the SRM storage protocol.  Each probe will return a status:

   * *OK (Green)*: This means the test was successful.
   * *Warning (Yellow)*: This means that the server returned "Not supported".  This operation does not work, but only because it is not supported by your storage element.
   * *Critical (Red)*:  The test has failed.  Click on the link (in html consumer) for more details.

These probes have to use either the Fermi SRM client (srmping, srmcp, etc) or the lbnl client (srm-ping, srm-copy, etc).  These are included by default in the RSV installation.

If the probe is failing because it is using the wrong type, you may have to change the "srm-client-type" in the configuration files manually (below) or to change 
it in ==$VDT_LOCATION/osg-rsv/bin/probes/RSVProbeBase.pm==.


Description of the functionality for each probe is below:

   * *org.osg.srm.srmclient-copy:* Tests a SRM copy operation on the remote server.  First, uploads a file using srmcp/srm-copy from a local file to a file named like 1274991241-srmclient-probe-test-file-remote.14288 in the remote directory (numbers differ based on time and process id).  It then copies it to a new file called 1274991241-srmclient-probe-test-file-remote.142881274991241-srmclient-probe-test-file-remote.14288.copy.  It uses a srmls/ssrm-ls to verify that the copy has occurred.  Lastly, it performs a srmrm/srm-rm to clean up both copies.
   * *org.osg.srm.srmclient-get:* Tests SRM copy to get a file from the server.  Use srmcp/srm-copy to copy a file to the remote server.  Use srmcp/srm-copy to retrieve the file from the server.  Compares the two copies using the unix diff command.
   * *org.osg.srm.srmclient-mkdir:*  This command uses srmmkdir/srm-mkdir to create a directory on the storage element.  It uses srmls/srm-ls to verify that the directory exist.  The cleanup uses srm-rmdir/srm-rmdir to remove the temporary directory.
   * *org.osg.srm.srmclient-rmdir:* This command uses srmmkdir/srm-mkdir to create a directory, then uses srmrmdir/srm-rmdir to delete it.  It uses srmls/srm-ls to verify both that the directory was created and then that it also was later removed.
   * *org.osg.srm.srmclient-mv:* Tests the srmmv or srm-mv command.  This first copies a file to the storage element using srmcp/srm-copy.  It then moves it to a new name using srmmv/srm-mv.  It then uses srmrm/srm-rm to clean both the old name and new name off the server (in case the mv failed).
   * *org.osg.srm.srmclient-ping:* Pings a server using srmping/srm-ping.  Uses the exit status to verify whether the command was successful.
   * *org.osg.srm.srmclient-put:* Tests srmcp/srm-copy.  Put a file onto the server using srmcp/srm-copy, then use srmls/srm-ls to verify that the file was copied successfully.  Lastly, srmrm/srm-rm is used to clean this file off the storage element.
   * *org.osg.srm.srmclient-reservespace:* Test srm-reserve-space command to reserve a space.
   * *org.osg.srm.srmclient-releasespace:* Test srm-reserve-space then srm-reserve-space it.
   * *org.osg.srm.srmclient-rm:* Use srmcp/srm-copy to copy a file to the server then remove it using srmrm/srm-rm.  Use srmls/srm-ls to verify the file has been removed.


---++ SRM tester Probes

Included in the optional SRM probes are two types of probes.  The second will begin with "org.osg.srm.srmtester-".
These will use the LBNL Bestman "srm-tester" command to connect to your storage facility and run commands to check basic 
functionality connected to the SRM storage protocol.  Each probe will return a status:

   * *OK (Green)*: This means the test was successful.   
   * *Warning (Yellow)*: This means that the server returned "Not supported".  This operation does not work, but only because it is not supported by your storage element.
   * *Critical (Red)*:  Either the test failed, or it was not tested, due to a dependent operation failing (i.e. if a put fails, then there is no file to get).  Click on the link (in html consumer) for more details.

Each probe runs one "operation", which corresponds to a common task, such as getting a file.  Each test calls srm-tester with a different value in the "-op" parameter.  Some of these operations actually comprise multiple SRM commands or tests, so it is possible that one test fails, causing the subsequent tests to be not completed.  This would register as a failure.  In the case of a "critical" result, you can view the details, which will include a summary of all commands performed, and which have failed.  It will also show the detailed output of the srm-tester, which may give some clues as to why the operation failed.

Description of the functionality for each probe is below:

   * *org.osg.srm.srmtester-bringonline:* Test bringonline functionality.  This test will put a file, try to bring it to ONLINE latency, then will remove it.  This operation uses the following SRM operations:srmPrepareToPut, srmStatusOfPutRequest, gsiftp-put, srmPutDone, srmBringOnline, srmStatusOfBringOnlineRequest, srmLs, srmRm.  This test will only succeed if the srmBringOnline operation succeeds.
   * *org.osg.srm.srmtester-get:*  Test getting a file from the server.  This will put a file on the server, then get it using gsiftp.  It uses the SRM operations: srmPrepareToPut, srmStatusOfPutRequest, gsiftp-put, srmPutDone, srmPrepareToGet, srmStatusOfGetRequest, gsiftp-get, srmReleaseFiles, srmLs, srmRm.
   * *org.osg.srm.srmtester-getspacemeta:* This operation tests getting the meta-data attributes of a reserved space.  It reserves a space, then gets the meta-data, then releases the space.  It uses srmReserveSpace, srmGetSpaceMetadata, srmReleaseSpace.
   * *org.osg.srm.srmtester-getspacetokens:* This operation tests retrieving space tokens.  It uses the following SRM functionality: srmReserveSpace, srmGetSpaceTokens, srmReleaseSpace
   * *org.osg.srm.srmtester-gettransferprotocols:*  This tests the srmGetTransferProtocols operation.  It should return all valid protocols for returning data.
   * *org.osg.srm.srmtester-gsiftp:*  This tests getting a file via the gsiftp protocol.  It uses srmPrepareToPut, srmStatusOfPutRequest, gsiftp-put, srmPutDone, srmLs, srmRm, srmCopy-pull-gsiftp, srmStatusOfCopyRequest-pull-gsiftp.
   * *org.osg.srm.srmtester-ls:*  This tests browsing a directory.  It uses the srmLs functionality.
   * *org.osg.srm.srmtester-mkdir:*  This tests making a directory on the remote storage element.  This uses the operations srmMkdir and srmRmdir.
   * *org.osg.srm.srmtester-mv:* This tests moving a file from one location to a different location while on the remote storage element.  This operation actually calls srm-tester twice.  The first it calls with the operation put, in order to first prepare a file on the remote storage,  It then calls with the operation mv, which uses the srmMv, then srmRm to clean-up.
   * *org.osg.srm.srmtester-ping:*  This operation pings a server to see if it responds.  It only uses the srmPing operation.
   * *org.osg.srm.srmtester-pull:* This tests getting a file in "pull" mode.  This uses srmCopy-pull and srmStatusOfCopyRequest-pull.
   * *org.osg.srm.srmtester-push:* This tests putting a file onto the remote storage in "push" mode.  This uses srmCopy-push and srmStatusOfCopyRequest-push.
   * *org.osg.srm.srmtester-put:*  This tests copying a file onto the remote storage.  It uses a srmls in order to verify it.  The operations used are srmPrepareToPut, srmStatusOfPutRequest, gsiftp-put., srmPutDone, srmLs, srmRm.
   * *org.osg.srm.srmtester-release:*  This tests releasing a reserved space.  First, it must reserve a space where the release operation can be tested.  It uses srmReserveSpace, srmReleaseSpace.
   * *org.osg.srm.srmtester-reserve:*  This tests reserving a space on the storage element with which to put files.  This tests the srmReserveSpace operation.
   * *org.osg.srm.srmtester-rmdir:*  This tests removing a directory from the storage element.  It will need to create a directory first..  This uses the operations srmMkdir and srmRmdir.
   * *org.osg.srm.srmtester-srmrm:*  This tests removing a file from the storage element.  It will first copy a file to the server for testing.

For more information, see the Bestman srm-tester documentation.

---++ Configuring RSV for storage

As part of the RSV installation, configure-osg uses a config.ini file to initialize RSV (see the requirements above).  In order to use storage probes, you will need to specify three attributes in the config.ini.

<pre class="file">
srm_hosts = host1:port1,host2:port2
srm_dir = /mount/point/for/host1,/mount/point/for/host2
srm_webservice_path = srm/v2/server,srm/managerv2
</pre>

After setting these appropriately, run the following (as root):

<pre class="rootscreen">
configure-osg -v
configure-osg -c
</pre>

---++ Configuring Probe variables manually (optional)

The above section will create configuration files for each probe.
However, if you do not wish to follow the above method, or you need to change the 
mount points or paths without running the configure-osg program, you can also manually modify the configuration scripts.
(This is also needed for certain srmtester probes, see below).

For each host, there will be one file per storage probe with the name ==$VDT_LOCATION/osg-rsv/etc/HOST:PORT/probename.conf==.
Each file will have the mount point as srm-destination-dir and the webservice (usually "srm/v2/server" for bestman or "srm/managerv2" for dcache) as srm-webservice-path.  Certain srmtester probes that test 3rd party copies also have the "copysource" argument.

<pre class="file">
[org.osg.srm.srmtester-put args]
srm-destination-dir=/example/mount/point/dir
srm-webservice-path=srm/managerv2
</pre>



---++ Enabling SRM client probes

SRM Client probes are optional RSV probes.  They are not enabled by default in a RSV installation.
You can enable the probes using [[RSV33RsvControl][rsv-control]] below, with COMMAND being one of the probes listed above.

<pre class="rootscreen">
rsv-control --enable --host HOSTNAME org.osg.srm.srmclient-COMMAND
</pre>

If you have not configured this host in the config.ini file (see above), you will need to add the webservice path and mount point manually as in the previous section.


---++ Enabling SRM tester probes

SRM Client probes are optional RSV probes.  They are not enabled by default in a RSV installation.
You can enable the probes using [[RSV33RsvControl][rsv-control]] below, with COMMAND being one of the probes listed above.

<pre class="rootscreen">
rsv-control --enable --host HOSTNAME org.osg.srm.srmtester-COMMAND
</pre>

If you have not configured this host in the config.ini file (see above), you will need to add the webservice path and mount point manually as in the previous section.

*NOTE: If you are enabling the gsiftp, push, or pull metrics, you will need to perform an extra step.*

The probes org.osg.srm.srmtester-gsiftp, org.osg.srm.srmtester-pull, and org.osg.srm.srmtester-push test 3rd party copies by using another server to copy a test file from.  Note that not all SRM servers (e.g. Bestman gateway) support this kind of copy, so you may not want to enable these probes for those sites.  To test this, you will need another server to copy a file from.  You will need to add this location in the copysource parameter in the file ==$VDT_LOCATION/osg-rsv/etc/HOST:PORT/org.osg.srm.srmtester-CMD.conf== (where CMD is either pull, push, or gsiftp):

<pre class="file">
[org.osg.srm.srmtester-put args]
srm-destination-dir=/example/mount/point/dir
srm-webservice-path=srm/managerv2
copysource=gsiftp://someserver:port/withapath/of/a/test-file
</pre>

---++ Default storage probes

Several other simple storage probes are also shipped with RSV.  They are listed here with a short description.

   * srm-ping-probe: This probe will use the srm-ping command to test a server using the SRM protocol.  It is similar to the srmclient-ping probe.
   * srmcp-srm-probe: This probe will copy a file to and from an SRM endpoint using the SRM protocol.  It is similar to the srmclient-get probe.
   * gridftp-simple-probe:  This probe tests a gridftp server.  This is useful if you do not have a full SRM-endpoint and use a classic storage element (gridftp on the head node) or just have a standalone gridFTP server.  This probe will attempt to put a file a file on a gridftp server using gsiftp (globus-url-copy).  It will then retrieve the file using gsiftp and verify that it was transferred correctly.  It then uses UberFTP to clean up the file.




---+++ Comments
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
   DEAR DOCUMENT OWNER
   ===================

   Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER          = DouglasStrain

   Please define the document area, choose one of the defined areas from the next line
   DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       =  Storage

   define the primary role the document serves, choose one of the defined roles from the next line
   DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager|Documenter)
   * Local DOC_ROLE       = SysAdmin

   Please define the document type, choose one of the defined types from the next line
   DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Installation
   
   Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

   Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

   change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

   change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

   change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


   DEAR DOCUMENT REVIEWER
   ======================

   Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = TanyaLevshina
  
   Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


   DEAR DOCUMENT TESTER
   ====================

   Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         =  NehaSharma
  
   Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
-->




-- Main.DouglasStrain - 09 Dec 2010
