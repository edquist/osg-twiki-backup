%META:TOPICINFO{author="AlainRoy" date="1265310850" format="1.1" version="1.8"}%
%META:TOPICPARENT{name="RSV"}%
---++ Organization of the !RSV Subversion repository

Before proceeding, make sure that you have [[RsvRepoAccess][gotten access to the RSV Subversion repository]].

The repository is located at:

=https://vdt.cs.wisc.edu/svn/rsv/=

Internally, the repository is divided into a set of branches:

| *Branch name* | *Purpose* |
| rsv-prod | The current production release of !RSV | 
| rsv-test | The current test release of !RSV (for VTB/ITB testing) |
| rsv-GROUP | A branch for development by GROUP |

rsv-GROUP is not a single branch, but a set of branches, one for each of the following groups. (The set of groups may evolve). There is one group per owner, as [[RSVOwners][listed in the RSV ownership page]].

For most of the group branches (except for the VDT), there is a *subset* of probes on the branch, not the complete set. It is only be the set of probes owned by that group. This is just to keep things simple. 

Currently, the set of groups are:

| *Group* | *Notes* |
| vdt | The complete set of metrics |
| goc | Just the metrics owned by the GOC |
| security | The metrics own by the security group| 
| gums | The metric owned by the GUMS development group. |
| storage | The metrics owned by the VDT Storage group, to test storage elements. |
| ress | The metrics owned by the Resource Selection Service (!ReSS) group |
| gratia | The metrics owned by the Gratia accounting group |
| info | The (as of yet uncreated) metrics for the GIP and information services |

For now, this is the complete set of branches, but should we undertake major new development in !RSV, we will duplicate these branches, splitting between rsv-prod and rsv-old-prod as well as rsv-test and rsv-old-test. (Or some similar convention.) 

As of January 2010, rsv-prod refers to !RSV 3.1. 

---++ Visual aid: the !RSV Subversion repository

<img src="%ATTACHURLPATH%/rsv-svn.jpg" alt="rsv-svn.jpg" width='479' height='278' />    

---++ Access control for the !RSV Subversion Repository

We have not currently enabled any access control for branches, so technically anyone with write access can commit to any of the !RSV branches. (This keeps our Subversion setup simple.) However, to avoid confusion, please only commit to the branch that you own. We do monitor all commits to the repository, so we should notice any incorrect commits. 

---++ Development Process

When you are developing changes to RSV, whether you are adding, removing, or editing an existing metric, feel free to commit any and all changes to your branch. The branch is your world. However, you should realize that OSG is conservative about pushing out new changes, so you should either keep your changes minimal, or you should discuss the scope of your changes with the Software Tools Group. It's better to have the discussion up front about what changes are happening instead of surprising people at the last minute with a large set of changes. 

Your branch contains more than your probes--it also contains the core !RSV infrastructure, like the common module, !RSVProbeBase.pm. Should this change in another branch, the VDT team will make sure the changes are merged into your branch and we will let you know. Most of the time, you will not need to edit this file. Please work with the VDT team if you do so, so we can ensure that changes are properly coordinated.

---++ Release process for !RSV

When you have a set of changes in your group branch that you are satisfied with, please contact the VDT team (vdt-support@opensciencegrid.org) and let us know. Please give us a set of release notes that contain the user-visible set of changes you made. We will merge your branch into the rsv-test branch and cut a new test release. (Note: we do not expect you to do the merge yourself.) This release may not happen immediately--it may be timed to include other RSV updates. This test release will then undergo up to three rounds of testing:

   1. Testing in the VDT nightly test suite. This is rather light testing, but it does catch some basic errors. 
   1. Testing in the Validation Testbed. 
   1. Testing in the Integration Testbed. 

In some cases (such as the need for an urgent bug fix), we may shorten or skip the testing, but we usually go through all three steps. When the testing is complete, the VDT team will merge the test branch to the production branch, verify that everything looks as it should, and cut a new production release. 

---++ Creating a tarball for the !RSV release

Most people will not need to do this, because normally the VDT team will do this. 

   * Merge changes into the appropriate branch - rsv-test for a !VTB/ITB release, or rsv-prod for a production release.
   * If this is a production release, make a tag:
<pre class="screen">
svn cp $SVN/rsv/branches/rsv-prod $SVN/rsv/tags/rsv-VERSION
</pre>
   * Create the tarballs by running the script provided in the top-level of the checkout.  This will generate a tarball for the metrics, and a tarball for the infrastructure (core).
<pre class="screen">
./make-tarballs
</pre>

%META:FILEATTACHMENT{name="rsv-svn.jpg" attachment="rsv-svn.jpg" attr="" comment="" date="1264097279" path="rsv-svn.jpg" size="31734" stream="rsv-svn.jpg" tmpFilename="/usr/tmp/CGItemp21689" user="AlainRoy" version="1"}%
