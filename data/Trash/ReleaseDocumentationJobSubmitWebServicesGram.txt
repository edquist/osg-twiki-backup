%META:TOPICINFO{author="SuchandraThapa" date="1275675629" format="1.1" version="1.4"}%
%META:TOPICPARENT{name="ValidateGramWebServices"}%
---+!! *<nop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%

---++ Introduction

WS GRAM (like <i>pre-</i>WS GRAM) provides the implementation of a suite of protocols useful for getting work done on the GRID. These tools can be used in a variety of ways for performing complex workflows.  In this document, however, we want to simply provide the basic examples for setting up simple job submission modes accessing web services with OSG Client software.  Here we'll only provide examples using either globus command line tools (=globusrun-ws=) or Condor-G submission.   It's assumed that the reader has access to a OSG Client installation (see Trash.IntegrationClientInstallationGuide and ValidateClients) and a working target WS GRAM service (see ValidateGramWebServices).


---++ Type I: simple submit, no I/O involved

In this mode, no data is transfered. Only information about the status of the job from submission-to-completion is tracked.

   * via gt4 client tools <pre class=screen><b>globusrun-ws -submit -F osp1.lbl.gov:9443 -Ft PBS -c /bin/hostname</b>
Submitting job...Done.
Job ID: uuid:a691a4a0-9483-11dc-b76f-00304889717e
Termination time: 11/17/2007 20:36 GMT
Current job state: Pending
Current job state: Active
Current job state: CleanUp
Current job state: Done
Destroying job...Done.
</pre>
   * via Condor-g <pre class=screen><b>$cat test.submit </b>
Universe        = grid
grid_resource = gt4 https://osp1.lbl.gov:9443 PBS
Executable          = /bin/hostname
Transfer_Executable = false
#local log file for job
log    = test.log
#email notification?
notification=Never
#submit job
Queue

<b>$condor_submit test.submit</b>
Submitting job(s).
Logging submit event(s).
1 job(s) submitted to cluster 422.

<b>$condor_q </b>
 
-- Submitter: osp2.lbl.gov : <128.3.30.237:20027> : osp2.lbl.gov
 ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               
 422.0   qwerty       11/16 12:42   0+00:00:00 I  0   9.8  hostname          
 423.0   qwerty       11/16 12:42   0+00:00:00 R  0   0.0  gridftp_wrapper.sh
 
4 jobs; 1 idle, 1 running, 0 held

<b>$tail -f test.log | grep 422 </b>
000 (422.000.000) 11/16 12:42:21 Job submitted from host: <128.3.30.237:20027>
017 (422.000.000) 11/16 12:42:43 Job submitted to Globus
027 (422.000.000) 11/16 12:42:43 Job submitted to grid resource
001 (422.000.000) 11/16 12:43:03 Job executing on host: gt4 https://osp1.lbl.gov:9443 PBS
005 (422.000.000) 11/16 12:43:18 Job terminated.
</pre>


---++ Type II: data-producing job: return data to user's submit host

   * For =globusrun-ws= commands, one needs to specify detailed job instructions via RSL file. The directives for an executable with output is done via: <pre class=screen> <b> cat test_rsl.xml </b><verbatim> <job> 
<executable>/osg-apps/porter/Test/data_crunch.pl</executable>
      <fileStageOut>
         <transfer>
          <sourceUrl>file:///${GLOBUS_USER_HOME}/dcrunch_69.out</sourceUrl>
          <destinationUrl>gsiftp://osp4.lbl.gov:2811/scratch/porter/outputFiles/dcrunch_69.out</destinationUrl>
         </transfer>
      </fileStageOut>
</job> 
</verbatim>

<b>globusrun-ws -submit -F osp1.lbl.gov:9443 -Ft PBS -S -f test_rsl.xml </b>
</pre>


   * for Condor-g add the following type of instructions to the submit file: <pre class=screen>should_transfer_files = YES
when_to_transfer_output = ON_EXIT
transfer_output_files = /path-to-output/reduceddata_$(Process).dat
</pre>

---++ Type III: data-producing job: transfer data to some other designated storage area

   * For =globusrun-ws= commands, Type II job specifications are general to include Type III jobs as long as the destination has a gsiftp service.

   * For Condor-g and GT4, a general method is to include the RSL in the submit file via the directive <pre class=screen> globus_xml = <i>your-xml-file</i>
</pre>

---++ Type IV: data-consuming job, transfer input data form users's submit host

   * The RSL directives for input files are general (arbitrary endpoints) and mimick the output files: <pre class=screen> <verbatim> <fileStageIn><transfer> ... </transfer></fileStageIn> </verbatim></pre>
   * Condor-g may include the RSL file directly but can also add <pre class=screen>should_transfer_files = YES
transfer_input_files = /path-to-output/inputdata_mydata.dat
</pre>

---++ Type V: data-consuming job, transfer input data from some other designated storage area

   * The remainder of the Types follow the Type IV directives as these include arbitrary endpoints 
   * Condor-g includes the RSL file directly and include arbitrary endpoints

---++ Type VI: data-consuming/data-producing job, to and from the submit host

---++ Type VII: data-consuming/data-producing job, from arbitrary endpoints


%STOPINCLUDE%
%BR%
%COMPLETE2% %BR%
%RESPONSIBLE% Main.JeffPorter - 25 Oct 2007 %BR%
%REVIEW% Main.CharlesBacon