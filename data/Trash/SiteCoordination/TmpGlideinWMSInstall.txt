%META:TOPICINFO{author="MarcoMambelli" date="1301330585" format="1.1" version="1.8"}%
%LINKCSS%

---+!! !GlideinWMS VO Frontend Installation
%TOC%

---+ About This Document

This document describes how to install the Glidein Workflow Managment System (!GlideinWMS) VO Frontend on a single host using the RPM package distributed by OSG.  The VO Frontend is the minimum required software for a Virtual Organization to submit grid jobs using the !GlideinWMS system.  

The Glidein WMS VO Frontend has 3 main components: User Pool Collector, User Pool Schedd and Glidein Frontend. The installation documented here includes all three on the same host: it is simpler than other alternatives and will works for small to medium VOs (see the Hardware Requirements below). For bigger installations where the components are on different hosts please consult the [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/install.html][Glidein WMS reference documentation]].
You should follow the [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/install.html][Glidein WMS reference documentation]] also if you cannot use the RPM installation and prefer to use a TAR-files based installation.


---+ How to get Help?

To get assistance please use [[ReleaseDocumentation.HelpProcedure][this page]]. 


---+ Requirements
 
---++ Hardware requirements
The Glidein WMS VO Frontend  has moderate CPU requirements (1 or 2 modern CPUs will suffice).

User Pool Collector and Glidein frontend have moderate memory requirements (will fit in 1-2GB, together with other machine services). The User Pool Schedd requires more memory depending on the amount of jobs min 2GB (16GB recommended for bigger pools). For the whole VO Frontend plan on 1GB plus about 1.5MB per running job (e.g. 4GB for 2000 running jobs).

Also the amount of disk needed depends on the user jobs. Less than 30GB will fit all the binaries, config and log files (5 for the User Pool Collector, 20 for the Glidein frontend, 5 for the User Pool Collector). Simple jobs will require few MB but the staging in and out of files using Condor may increase notably the required space (on the User Pool Schedd). E.g. 1000 jobs that produce 2GiB total in output and log files, consume 750MiB of input files, plus require inputs from a dataset 5TiB big, they will need (2+.75)GiB*1000+5TiB=7.75TiB (I'm using GiB/TiB instead of GB/TB to simplify math). 

The VO frontend must have reliable network connectivity and must be on the public internet, possibly with no Firewalls or with the ports below open; all worker nodes will be continuously sending UDP packets to the User Pool Collector.
   * Non-Firewalled ports from 9618 to 9660 for both TCP connections and UDP packets.


---++ Operating system

The RPM distribution is for SL 5 (RHEL 5), x86_64 architecture.  It has been tested on SL5.5. A source RPM is available.
It should be easy to adapt to a reasonably recent Linux OS that is a  [[http://www.cs.wisc.edu/condor/manual/v7.4/1_5Availability.html][Condor-supported OS]], since the VO frontend software is almost all pure Python.


---++ Required software
The required software is:
   * Condor v7.5 or later
   * OSG Client (without Condor)
   * Httpd server
   * Python 2.3.4 or later with M2Crypto
   * Perl with Time::HiRes
   * RRD Tools
   * javascriptRRD v0.5 or later with flot (a pure Javascript plotting library)

Condor is available as RPM (via Yum, for some OS/architecture combinations) or as TAR file.
   * Check if you have condor already installed<pre class="screen">$ which condor
/usr/sbin/condor
$ condor -version
$CondorVersion: 7.5.5 Jan 26 2011 BuildID: 308936 $
$CondorPlatform: X86_64-LINUX_x86_64_rhap_5 $</pre>
   * If you have no Condor, [[http://twiki.grid.iu.edu/bin/view/Tier3/CondorRPMInstall][install RPM distribution of Condor]] (this requires root and a supported platform). Here in brief the yum commands. 
%TWISTY{%TWISTY_OPTS_OUTPUT%}%
<pre class="rootscreen">
%UCL_PROMPT_ROOT% cd /etc/yum.repo.d/
%UCL_PROMPT_ROOT% wget http://www.cs.wisc.edu/condor/yum/repo.d/condor-development-rhel5.repo
%UCL_PROMPT_ROOT% yum install condor.x86_64
</pre>
%ENDTWISTY%
   * If you cannot use the recommended yum installation, the [[http://twiki.grid.iu.edu/bin/view/Tier3/WebHome][OSG Tier 3 Web]] explains different possible [[http://twiki.grid.iu.edu/bin/view/Tier3/ModulesIntro#Phase_2_Quick_guide_for_setting][installations of Condor]]. [[http://www.cs.wisc.edu/condor/downloads-v2/download.pl][Here]] is the download page for Condor. 

Install OSG Client 1.2 without Condor. Condor included with OSG Client is v7.4, not sufficient for the VO Frontend
   * Set these environment variable to point to your Condor installation. For the RPM installation:<pre class="screen">%UCL_PROMPT% export VDTSETUP_CONDOR_LOCATION=/usr/
%UCL_PROMPT% export VDTSETUP_CONDOR_CONFIG=/etc/condor/condor_config
</pre>
   * Then [[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/ClientInstallationGuide][install OSG Client]]
   * This is in brief:<pre class="rootscreen">
%UCL_PROMPT_ROOT% export VDTSETUP_CONDOR_LOCATION=/usr   # &lt;Path to Condor&gt;
%UCL_PROMPT_ROOT% export VDTSETUP_CONDOR_CONFIG=/etc/condor/condor_config # &lt;Path to Condor configuration file&gt;
pacman -get http://software.grid.iu.edu/osg-1.2:client
. ./setup.sh 
vdt-ca-manage setupca --location local --url osg
vdt-control --enable fetch-crl vdt-update-certs
vdt-control --on
</pre>

Apache httpd is probably already on your system or easily available.  
   * On RHEL/SL you can install it via yum and enable with chkconfig:<pre class="rootscreen">
%UCL_PROMPT_ROOT% yum install httpd
%UCL_PROMPT_ROOT% chkconfig --add httpd
%UCL_PROMPT_ROOT% chkconfig httpd on</pre>
   * [[http://www.stllinux.org/meeting_notes/2001/0719/tux/intro.html][TUX]] HTTP server is another possibility

Python 2.x interpreter, version 2.3.4 or above (no Python 3). It is probably already on your system or easily available.
   * Check if you have it<pre class="screen">%UCL_PROMPT% python -V
Python 2.4.3</pre>  
   * On RHEL/SL you can install it via yum (=yum install python=)
   * Else it is available from [[http://www.python.org/download/][python.org]]
The [[http://freshmeat.net/projects/m2crypto][M2Crypto python library]] v0.17 or later. It is probably already on your system.
   * Check using <pre class="screen">%UCL_PROMPT% python 
Python 2.4.3 (#1, Sep 10 2009, 18:34:35) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-46)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import M2Crypto
>>> M2Crypto.version
'0.16'</pre>
   * On RHEL/SL you can install it via yum (=yum install m2crypto=)
   * Expand here to see the instructions to install it from scratch
%TWISTY{%TWISTY_OPTS_OUTPUT%}%
If your system does not come with m2crypto package, or you do not can/want install it as root, compile it from source as the glidein factory user.
The source code can be downloaded from: http://chandlerproject.org/Projects/MeTooCrypto#Downloads

The build process is very easy:<pre class="rootscreen">
#  python setup.py build
#  python setup.py install --root %lt;base dir> 
</pre>
Finally add !M2Crypto site-packages into the =PYTHONPATH=, possibly in the =.profile=, =.bashrc= and/or in the =.cshrc= files.
The exact path is system specific. On a 32bit system with python 2.3.x it will look like this:<pre class="file">
    export PYTHONPATH=$PYTHONPATH:<base dir>/usr/lib/python2.3/site-packages/
</pre>
 %ENDTWISTY%

The Perl interpreter and the Perl module =Time::HiRes= are required by the RRDTools. They are probably already on your system.
   * Check typing <pre class="screen">%UCL_PROMPT% perldoc Time::HiRes
x86_64-linux-thread-muUser:Contributex86e64-linux-thread-multi::Time::HiRes(3)
...</pre>

The [[http://oss.oetiker.ch/rrdtool/][RRDTool package]] v1.2.18 or later and the rrdtool-python bindings.
   * You may have it already on your system or should be able to install it via yum after adding standard add-on repositories such as [[http://fedoraproject.org/wiki/EPEL][EPEL]] ([[http://fedoraproject.org/wiki/EPEL/FAQ#howtouse][EPEL repo Install instructions]]): <pre class="screen">%UCL_PROMPT_ROOT% yum install rrdtool-python</pre>
   * Other RPM packages are available from http://packages.sw.be/rrdtool/ 
   
The [[http://sourceforge.net/projects/javascriptrrd/][javascriptRRD]] package v0.5 or later with [[http://code.google.com/p/flot/][flot]] (a pure Javascript plotting library) contains the javascript libraries needed by the monitoring. 
   * The RPM is available [[http://t2.unl.edu/store/repos/nebraska/5/nebraska/x86_64/javascriptrrd-0.5.0-3.noarch.rpm][here]]
   * Else just download the tarball (with flot), and untar it. You will need to point the VO Frontend to this directory.<pre class="rootscreen">
%UCL_PROMPT_ROOT% wget http://sourceforge.net/projects/javascriptrrd/files/javascriptrrd/0.5.0/javascriptrrd-0.5.0-with-flot-0.6.tgz/download
%UCL_PROMPT_ROOT% cd /opt
%UCL_PROMPT_ROOT% tar xzf ~/javascriptrrd-0.5.0-with-flot-0.6.tgz 
</pre>

---++ Users

The RPM distribution of the VO Frontend runs the Glidein Frontend as user =nobody=. This is the user that owns the certificate forwarded to the factory to use for the glideins.
Condor can be installed as =root= and run as =condor= (e.g. via the recommended RPM installation) or as the same user of the frontend (=nobody=).


---++ Certificates

CA certificates and CRL must be installed and updated (OSG Client is taking care of this).

The VO Frontend will use two certificates:
   * Glidein Frontend Condor cert/proxy - The use of a service certificate is recommended. The Frontend will use a proxy from the certificate (cannot use directly the certificate)
   * User Submitter cert/proxy - This proxy is used to submit the glidein jobs, therefore must have access to the CEs where jobs are submitted
It is possible also to use a single certificate/proxy for both functions.


<!--
The installer will ask for several DNs for GSI authentication. You have the option of using a service certificate or a proxy. These should be created and put in place before running the installer. The following is a list of DNs the installer will ask for:

    * WMS Collector cert/proxy DN
    * User Pool Collector cert/proxy DN
    * User Submitter cert/proxy DN
    * Glidein Frontend Condor cert/proxy DN (cannot use a cert here)

%RED%Some questions:
   * How is that 4 certificates are mentioned while only 2 are used (this is from the VO frontend installation doc)?
   * What means "Glidein Frontend Condor cert/proxy DN (cannot use a cert here)" cert/proxy and cannot use cert means only proxy or this refers to personal/service certs?
%ENDCOLOR%

Note: In some places the installer will also ask for nicknames to go with the DNs. For the most part the name given doesn't really matter. There is one case where is does matter. If you are using privilege separation, then, on the WMS Collector, the nickname for each Glidein Frontend must be the username that you created for the frontend.
Note 2: The installer will ask if these are trusted Condor Daemons. Answer 'y'. 
-->

<!--
When installing the Glidein Frontend you will be presented with a question asking for the directory location for various items. The example below puts many of them in /var. All the directories in /var have to be created as root. Therefore, if you intend on using /var, you will have to create the directories ahead of time.

Note: The web data must be stored in a directory served by the HTTP Server.

Example:

Where will the web data be hosted?: [/var/www/html/glidefactory] /var/www/html/glidefactory

Misc

At some point the installer will prompt you for the OSG VDT Client location or if you want to install it. The installer will install the client for you. (See GlideinWMS Component Install)

When asked if you want OSG_VDT_BASE defined globally? Answer 'y' unless you want to force your users to find and hard code the location.

When asked if you want to enable Match authentication, if you are using Condor 7.1.3 or later, answer 'y' unless you have a reason not to.

%RED%Why not use OSG_LOCATION or VDT_LOCATION but OSG_VDT_BASE?%ENDCOLOR%
-->




---+ Installation Procedure
After making sure that you satisfy all the pre-requisites (install all the missing software, prepare accounts and certificates, ...) you can proceed with the installation of Glidein WMS RPM.

---++ Download and install the VO Frontend RPM

The RPM is currently available from [[http://koji.hep.caltech.edu/public/packages/GlideinWMSFrontend/2.5.1/9/noarch/GlideinWMSFrontend-2.5.1-9.noarch.rpm][the glideinWMS project]].  The source RPM is available at [[http://koji.hep.caltech.edu/public/packages/GlideinWMSFrontend/2.5.1/6/src/GlideinWMSFrontend-2.5.1-9.src.rpm][the glideinWMS project]] also.

   1. Download/Install the RPM
   <pre class="screen">
$ rpm -Uvh http://koji.hep.caltech.edu/public/packages/GlideinWMSFrontend/2.5.1/9/noarch/GlideinWMSFrontend-2.5.1-9.noarch.rpm</pre>
   %TWISTY{
mode="div"
showlink="Click to show output"
hidelink="Click to hide output"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
   <pre class="screen">
 --11:44:53--  http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/RPMS/GlideinWMSFrontend-2.4.2-2.x86_64.rpm
           => `GlideinWMSFrontend-2.4.2-2.x86_64.rpm'
Resolving www.uscms.org... 131.225.70.20
Connecting to www.uscms.org|131.225.70.20|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 342,901 (335K) [text/plain]

100%[====================================>] 342,901       --.--K/s             

11:44:53 (11.62 MB/s) - `GlideinWMSFrontend-2.4.2-2.x86_64.rpm' saved [342901/342901]
  </pre>
   %ENDTWISTY%
   1. Install the RPM.  During installation, the rpm will check for dependencies.
   <pre class="screen">
rpm -i GlideinWMSFrontend-2.4.2-2.x86_64.rpm</pre>
   If the install succeeded, then there will be no output from the command.


---+ Configuration Procedure 
After installing the RPM you need to configure the components of the Glidein WMS VO Frontend:
   1. Edit Frontend configuration options
   1. Edit Condor configuration options
   1. Create a Condor grid map file
   1. Reconfigure and Start frontend



---++ Configuring the Frontend

The configuration file is =/etc/gwms-frontend/frontend.xml=.  The next steps will describe each line that you will need to edit.  The portions to edit are highlighted in red font.

   1. The VO you are affiliated with, also called your "Security name".
   <pre class="file">
&lt;factory query_expr='((stringListMember("%RED%VO%ENDCOLOR%", GLIDEIN_Supported_VOs)))'></pre>
   1. The username that you are assigned from the factory (email osg-gfactory-support@physics.ucsd.edu) (scroll right), also the "identity" provided by the factory (fechicago@glidein-1.t2.ucsd.edu).
   <pre class="file">
&lt;collector DN="/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu" comment="Define factory collector globally for simplicity" factory_identity="gfactory@glidein-1.t2.ucsd.edu" my_identity="%RED%username%ENDCOLOR%@glidein-1.t2.ucsd.edu" node="glidein-1.t2.ucsd.edu"/>
   </pre>
   1. The Schedd information.  The Cert DN is the DN specified in the GSI_DAEMON_PROXY or GSI_DAEMON_CERT when condor is configured.  A secondary schedd is optional.  You will need to delete the secondary schedd line if you are not using it.
   <pre class="file">
&lt;schedds>
   &lt;schedd DN="%RED%Cert DN used by the schedd at fullname:%ENDCOLOR%" fullname="%RED%Hostname of the schedd%ENDCOLOR%"/>
   &lt;schedd DN="%RED%Cert DN used by the second Schedd at fullname:%ENDCOLOR%" fullname="%RED%schedd name%ENDCOLOR%@%RED%Hostname of second schedd%ENDCOLOR%"/>
&lt;/schedds></pre>
   1. The DN of the cert that the frontend will use to communicate with the factory and use to submit to the factory, and the Security name identifying this frontend with the Factory.
   <pre class="file">
&lt;security classad_proxy="/tmp/x509up_u99" proxy_DN="%RED%DN of proxy owned by user nobody%ENDCOLOR%" proxy_selection_plugin="ProxyAll" security_name="%RED%The security name, this is used by factory%ENDCOLOR%" sym_key="aes_256_cbc"> </pre>
   1. The hostname of the frontend.
   <pre class="file">
&lt;stage base_dir="/usr/share/gwms-frontend/www/stage" use_symlink="True" web_base_url="http://%RED%hostname of frontend%ENDCOLOR%/vofrontend/stage"/> </pre>
   1. The hostname of the collectors.
   <pre class="file">
&lt;collector DN="DN of main collector" node="%RED%hostname of collector%ENDCOLOR%" secondary="False"/>
&lt;collector DN="DN of secondary collectors (usually same as DN in line above)" node="%RED%hostname of secondary collectors (usually same as hostname in line above)%ENDCOLOR%:9620-9660" secondary="True"/>
</pre>

---++ Configuring Condor
In versions of Condor 7.4.4 and above, the condor configuration for the frontend is placed in =/etc/condor/config.d/00_frontend.config=.  If you have a version less than 7.4.4, a local condor configuration file is located at =/etc/condor/condor_config.local=.  Adding the following to the bottom of =condor_config.local= will pick up the !GlideinWMS condor configuration.
<pre class="file">
LOCAL_CONFIG_DIR = /etc/condor/config.d</pre>

After configuring condor, be sure to restart condor:
<pre class="screen">
service condor restart</pre>

The lines you have to edit:
   1. Credentials of the machine.  You can either run using a proxy, or a service certificate.  It is recommended to use a service certificate, which uses the variables GSI_DAEMON_CERT and GSI_DAEMON_KEY.  The proxy and certificate files should be owned by user =condor=.
   <pre class="file">
############################
# Credentials
############################
#GSI_DAEMON_PROXY = /tmp/x509up_u1349

# EDIT THESE VALUES
# If you ever decide to use a Certificate, see below
GSI_DAEMON_CERT = /etc/grid-security/glideincert.pem
GSI_DAEMON_KEY  = /etc/grid-security/glideinkey.pem </pre>
   1. Location of the condor grid map (description in the next section)
   <pre class="file">
#################################
# Where to find ID->uid mappings EDIT THIS
#################################
CERTIFICATE_MAPFILE=/opt/glidecondor/certs/condor_mapfile </pre>
   1. Add the DN's for the certificates that your daemons will use.  Examples are placed below.
   <pre class="file">
#####################################
# Add whitelist of condor daemon DNs EDIT THIS
#####################################
GSI_DAEMON_NAME=/DC=org/DC=doegrids/OU=People/CN=Derek Weitzel 285345,/DC=org/DC=doegrids/OU=People/CN=Derek Weitzel 285345/CN=993078166,/DC=org/DC=doegrids/OU=Services/CN=host/glidein.unl.edu,/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu </pre>


---++ Create a Condor grid map file.
The condor grid map file is used for authentication between the glidein running on a remote worker node, and the local collector.  Condor uses the mapfile to map certificates to users on the local machine.  It is important that you map the DN's of:
   * Each schedd that the frontend talks to
   * The DN that the frontend uses

Below is an example mapfile:
   <pre class="file">
GSI "^\/DC\=org\/DC\=doegrids\/OU\=People\/CN\=Derek\ Weitzel\ 285345$" frontend
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/hcc\-grid\.unl\.edu$" dweitzel
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/cpass\.unl\.edu$" dweitzel
GSI (.*) anonymous
FS (.*) \1 </pre>


---++ Proxy Configuration
By default, the frontend will run as user =nobody=.  In order for the frontend to use the certificate for user =nobody=, it has to exist and be owned by the user =nobody=.
   1. Create the proxy
   <pre class="screen">
user> $ voms-proxy-init -valid &lt;hours_valid> -voms &lt;vo> </pre>
   1. Copy the proxy to the correct name
   <pre class="screen">
user> $ cp /tmp/x509up_u`id -u` /tmp/x509up_u`id -u nobody` </pre>
   1. Change ownership of the proxy
   <pre class="screen">
root> $ chown nobody: /tmp/x509up_u`id -u nobody` </pre>


---++ Reconfigure and verify installation
In order to use the frontend, first you must reconfigure it.

<pre class="screen">
/etc/init.d/frontend_startup reconfig </pre>

After reconfiguring, you can start the frontend:
<pre class="screen">
/etc/init.d/frontend_startup start </pre>


---+ Service Activation and Deactivation (Optional)

%GRAY%
If applicable, this section contains steps required to activate and deactivate the software. Please reuse the material that has been written on the topic here [[ReleaseDocumentation/StartingServices][About VDT Services]]. For example like this:

<verbatim>
%INCLUDE{"ReleaseDocumentation/StartingServices" section="Activate" TOC_SHIFT="" INPUT_SERVICE="mysql"}%
%INCLUDE{"ReleaseDocumentation/StartingServices" section="Deactivate" TOC_SHIFT="" INPUT_SERVICE="mysql"}%
</verbatim>

The =INPUT_SERVICE= variable is optional.

This section may also contain the location of a log file that allows the reader to quickly verify the operation of the service.
%ENDCOLOR%


---+ Validation of Service Operation (Optional)

%GRAY%
Occasionally the steps to validate the success and correct operation of an installation may be _non-trivial_. Please use this _optional_ section to describe how the user can verify the success of the installation.

%NOTE% This section should not become a user guide! Please link to the applicable sections of the user documentation if the service validation requires the reader to execute a user command.
%ENDCOLOR%

---+ Troubleshooting (Optional)

---++ File Locations

|  *File Description*  |  *File Location*  |
|Configuration file | /etc/gwms-frontend/frontend.xml |
|Logs | /var/log/gwms-frontend/ |
|Startup script | /etc/init.d/frontend_startup |
|Web Directory | /usr/share/gwms-frontend/www |
|Working Directory | /usr/share/gwms-frontend/frontend-temp/ |

---++ &lt;How can I resolve this Problem?&gt;
<!--
%GRAY%
Use sub-sections for each problem you want to address in particular. Link to HelpProcedure at the end if the problem could not be resolved.
%ENDCOLOR%
-->

---+ References
Definition:
   * VO http://www.opensciencegrid.org/About/Learn_About_Us/OSG_Organization/VOs
   * http://twiki.grid.iu.edu/bin/view/Documentation/UsingTheGrid
   * http://twiki.grid.iu.edu/bin/view/Documentation/CondorGToGlidein
   * http://twiki.grid.iu.edu/bin/view/Engagement/EngageNewUserGuide

Documents about the VO frontend:
   * http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/
   * http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/manual/
   * http://twiki.grid.iu.edu/bin/view/Documentation/GlideinWMSVOFrontendInstall

Other examples:
   * http://home.fnal.gov/~weigand/weigand/www/glideinWMS_rpm/index.shtml

M2Crypto:
   * http://www.heikkitoivonen.net/blog/2008/10/14/ssl-in-python-26/
   * http://chandlerproject.org/bin/view/Projects/MeTooCrypto
   * http://freshmeat.net/projects/m2crypto
RRDTools:
   * http://packages.sw.be/rrdtool/
javascriptRRD:
   * http://sourceforge.net/projects/javascriptrrd/

Other documents
   * RRD tools: http://segfault.in/2010/03/python-rrdtool-tutorial/
   * RRD tools: http://sourceforge.net/projects/py-rrdtool/
   * http://oss.oetiker.ch/rrdtool/download.en.html
   * http://www.express.org/~wrl/rrdtool/
   * Downloads from Nebraska: http://t2.unl.edu/store/repos/nebraska/5/nebraska/x86_64/
<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = DerekWeitzel

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|General|Integration|Monitoring|Operations|Security|Storage|Tier3|User|VO)
   * Local DOC_AREA       = General

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (Developer|Documenter|Scientist|Student|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (HowTo|Installation|Knowledge|Navigation|Planning|Training|Troubleshooting)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = BurtHolzman
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = DerekWeitzel
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
-->

-- Main.MarcoMambelli - 10 Feb 2011
