%META:TOPICINFO{author="BrianBockelman" date="1486500227" format="1.1" version="1.16"}%
%META:TOPICPARENT{name="Trash.ReleaseDocumentationGridColombiaWorkshop2009"}%
---+!! *<nop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%

---++ Introduction
   * To make our cluster secure we'll use a host-based SSH key infrastructure.
   * Here we want to setup host authentication for the root account such that:
      * SSH for the root user on the management node to access each of the other nodes on the cluster
      * SSH for the root user works without complaint between all head nodes on the cluster
      * SSH for the root user works without complaint between the head nodes and compute nodes on the cluster                                                                         
   * We use host-based ssh for root logins and pubkey-based ssh for user logins.  Either or both of these can be enabled separately depending on the desired site policy. 

*NOTE - DISCLAIMER*:
   * The configuration described here is suggestive of what could be done for a test cluster and depicts one approach to handling access by root and user accounts.  Many universities or laboratories will have specific policies in place as to which types of access is permitted with varying degrees of restrictiveness depending on the desired security level. 


---++ Set configuration in sshd_config 

All hosts must have the following lines in their =/etc/ssh/sshd_config= file: <pre> 
Protocol 2

# No passwords
PermitRootLogin without-password
PasswordAuthentication no
PermitEmptyPasswords no
UsePAM no

# Pub keys configuration
RSAAuthentication yes
DSAAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
KerberosAuthentication no
GSSAPIAuthentication no
GSSAPICleanupCredentials no

# Hostbased and pubkey yes
PubkeyAuthentication yes
ChallengeResponseAuthentication no
X11Forwarding no

# Hostbased
HostbasedAuthentication yes
IgnoreRhosts no

#OPTIONALLY DON'T CHECK gethostbyaddr(), TRUST CLIENT
#HostbasedUsesNameFromPacketOnly yes
</pre>


---++ Host-based access for root:
 
For host-based authentication, all hosts must have a valid host key for all the other hosts in the cluster. The =ssh-keyscan= utility can be used to construct the =ssh_known_hosts= file, but you need to provide a list of hostnames.

   * Here's a way you can use =/etc/hosts= to generate this list:<pre>
 ssh-keyscan -t rsa,dsa `grep -v \# /etc/hosts` > ssh_known_hosts
</pre>
This just removes comment lines from the /etc/hosts file, which
confuse =ssh-keyscan=.  Any hosts in /etc/hosts which are not found
will result in an error message, but this will go to stderr not 
stdout so anything written to the output file ssh_known_hosts is OK.  
   * Then you copy this file to =/etc/ssh/ssh_known_hosts=.
   * Copy this file into =/etc/ssh/ssh_known_hosts= on each host in the cluster
   * You also need to list the hosts in =/root/.shosts=, without the keys.  You can construct
this file by hand, or from the =/etc/hosts= file, or from the =ssh_known_hosts= file we just created:<pre>
cut -d' ' -f1 < /etc/ssh/ssh_known_hosts|sort -u | grep -v ,  > /root/.shosts
</pre> *This =/root/.shosts= file must be present on all target machines.*
   * Now all root logins should work across the cluster from the head nodes.

---+++ Group of hosts with regular names
If the hosts have a regular naming scheme, you can use a for-loop instead of the /etc/hosts file:
   *  eg. if they are <pre>host01,host02,....host08</pre>: then
<pre>
 for x in {1..8} ; do
    hostname=$(printf host%02d $x)
    ssh-keyscan -t dsa,rsa $hostname
 done
</pre>

---+++ Adding new hosts
If there are some hosts that got missed, or new hosts added, you can do:
<pre>
 ssh-keyscan -t rsa,dsa <i>HOSTNAME</i>
</pre>
for the new host or hosts, and append that to the =ssh_known_hosts=

---+++ Multiple host names
Also note that if you access the host via multiple names - e.g.
=uct2-c001, uct2-c001.mwt2.org= and =uct2-c001.uchicago.edu=, you
have to have records in ssh_known_hosts for each of the hostnames.
In this case, you would do:

<pre>
 ssh-keyscan -t rsa,dsa uct2-c001 uct2-c001.mwt2.org uct2-c001.uchicago.edu
</pre>

---+++ Changes to host names
If hosts are changed or replaced, or their ssh host key changes,
the corresponding entry in =/etc/ssh/ssh_known_hosts= must be updated.




---++ Pubkey-based access for non-root users

Simply add the user's ssh pubkey into =$HOME/.ssh/authorized_keys=
This file must not be group- or world- readable (mode 600) and the directory
=$HOME/.ssh= must be mode 700 (drwx------)


---++ Authentication for users
The following is an easy way to add ssh key authentication for a (non root) user on all nodes that share the same home directory exported by =gc1-nfs=. It also makes sure that permissions are correct.

   * Login to your user account on the user interface machine (*gc1-ui*):
   * In the home directory of your account, do: <pre>cd ~/.ssh/
ssh-keygen -t dsa
# respond enter to all questions (defaults and make sure to enter a passphrase)
# this will generate id_dsa and id_dsa.pub files 
cat id_dsa.pub >> authorized_keys
chmod 600 authorized_keys           
chmod 600 id_dsa
chmod 700 ~/.ssh
</pre>


   * You can also use ssh-agent from a client machine where your private key is stored.


%BR%
%COMPLETE3% %BR%
%RESPONSIBLE% Main.RobGardner - 23 Oct 2009 %BR%
%REVIEW%

---++ Comments
%COMMENT{type="tableappend"}%


<!--
   * Set USERSTYLEURL = https://twiki.grid.iu.edu/twiki/pub/Trash/ReleaseDocumentationGridColombiaWorkshop2009/centerpageborder.css
-->
%META:TOPICMOVED{by="BrianBockelman" date="1486500227" from="ReleaseDocumentation.ClusterConfigureSSH" to="Trash.ReleaseDocumentationClusterConfigureSSH"}%
