%META:TOPICINFO{author="SuchandraThapa" date="1365003949" format="1.1" reprev="1.6" version="1.6"}%
%META:TOPICPARENT{name="SkeletonKey"}%
<!-- conventions used in this document
   * Local UCL_HOST = %URLPARAM{"INPUT_HOST" encode="quote" default="hostname"}%
   * Local UCL_USER = %URLPARAM{"INPUT_USER" encode="quote" default="user"}%
   * Local UCL_DOMAIN = %URLPARAM{"INPUT_DOMAIN" encode="quote" default="opensciencegrid.org"}%
   * Set TWISTY_OPTS_DETAILED = mode="div" showlink="Show Detailed Output" hidelink="Hide" showimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleopen-small.gif" hideimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleclose-small.gif" remember="on" start="hide" 
   * Set TOC2 =<div style="float:right; margin-right:-1.015em; padding:0.5em; background-color:white;">%TOC%<p class="twikiClear" /></div>
-->

---+!! !SkeletonKey Tutorial 1: Installation
%TOC{depth="3"}%


---++ Introduction
This page introduces the user to SkeletonKey and guides the user through installing the SkeletonKey software and setting up SkeletonKey up for initial use.  After completing the guide, the user should be able to install !SkeletonKey, start and stop the chirp server, and create a simple job to be run using Parrot and Chirp.

---++ Prerequisites
The following items are needed in order to complete this tutorial:
   * Webserver where the user can place files to access using the web
   * HTCondor Cluster (optional)

---++ Installation
!SkeletonKey uses a python script to install and set things up for the user.  The installation procedure is as outlined below:

   1. First download the  SkeletonKey installer script <pre class="screen">
%UCL_PROMPT% wget uc3-data.uchicago.edu/sk/install-skeletonkey.py
</pre>
   1. Pick a directory to install the CCTools and SkeletonKey binaries in (e.g. =bin= in your home directory).  Ideally this directory should be in =$PATH=.  <pre class="screen">
%UCL_PROMPT% mkdir ~/bin
</pre>
   1. Pick a directory to export from Chirp (for now the tutorial will use /tmp)
   1. Run the installer, specifying the directory to install and the  directory to export from Chirp: <pre class="screen">
%UCL_PROMPT% python install-skeletonkey.py -b ~/bin -e /tmp
</pre>
   1. Add the directory specified in =-b= option (e.g. =~/bin=) to =$PATH=: <pre class="screen">
%UCL_PROMPT% PATH=$PATH:~/bin
</pre>
   1. Edit =~/.profile= and append the following line: <pre class="file">export PATH=$PATH:~/bin</pre>

---++ Hello World example
The first example in this guide is will a simple hello world example. This example will just go through the mechanics of running skeleton key and generating a job wrapper.
---+++ Setting up binaries
In order for the job wrapper that SkeletonKey provides to work correctly, you'll need to make the cctools binaries available on a webserver.  The !SkeletonKey installer created a file called =parrot.tar.gz= in the =~/bin= that you'll need to copy to your webserver and make available over http.

---+++ Creating the job wrapper
You'll need to do the following on the machine where you installed SkeletonKey
   1. Open a file called =hello-world.ini= and add the following lines: <pre class="file">
[Parrot]
location = http://your.host/parrot.tar.gz

[Application]
location = 
script = /bin/hostname
</pre>
   1. In =hello-world.ini=, change the url =http://your.host/parrot.tar.gz= to point to the url of the parrot tarball that you copied previously.
   1. Run SkeletonKey on =hello_world.ini=: <pre class="screen">
%UCL_PROMPT% skeleton_key -c hello_world.ini
</pre>
    1. Finally, run the job wrapper to verify that it's working correctly <pre class="screen">
%UCL_PROMPT% sh ./job-script.sh
</pre>

---+++ Using the job wrapper
---++++ Standalone
Once the job wrapper has been verified to work, it can be copied to another system and run: 
<pre class="screen">
%UCL_PROMPT% scp job-script another_host:~/
%UCL_PROMPT% ssh another_host
[user@another_host] sh ./job-script
</pre>

---++++ Submitting to HTCondor (Optional)
The following part of the tutorial is optional and will cover using a generated job wrapper in a !HTCondor submit file.  
   1. On your !HTCondor submit node, create a file called sk.submit with the following contents <pre class="file">
universe = vanilla
notification=never
executable = ./job_script.shs
output = /tmp/sk/test_$(Cluster).$(Process).out
error = /tmp/sk/test_$(Cluster).$(Process).err
log = /tmp/sk/test.log
ShouldTransferFiles = YES
when_to_transfer_output = ON_EXIT
queue 10
</pre>
   1. Next, create =/tmp/sk= for the log and output files for condor <pre class="screen">
[user@condor-submit-node] mkdir /tmp/sk
</pre>
   1. Then copy the job wrapper to the !HTCondor submit node <pre class="screen">
%UCL_PROMPT% scp job-script.sh condor-submit-node:~/
</pre>
   1. Finally submit the job to !HTCondor and verify that the jobs ran successfully<pre class="screen">
[user@condor-submit-node] condor_submit sk.submit
</pre>

-- Main.SuchandraThapa - 02 Apr 2013
