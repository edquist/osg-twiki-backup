%META:TOPICINFO{author="MarcoMambelli" date="1372366475" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="Integration.MinutesCampusItb130627"}%
<!-- conventions used in this document
   * Local UCL_HOST = %URLPARAM{"INPUT_HOST" encode="quote" default="hostname"}%
   * Local UCL_USER = %URLPARAM{"INPUT_USER" encode="quote" default="user"}%
   * Local UCL_DOMAIN = %URLPARAM{"INPUT_DOMAIN" encode="quote" default="opensciencegrid.org"}%
   * Set TWISTY_OPTS_DETAILED = mode="div" showlink="Show Detailed Output" hidelink="Hide" showimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleopen-small.gif" hideimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleclose-small.gif" remember="on" start="hide" 
   * Set TOC2 =<div style="float:right; margin-right:-1.015em; padding:0.5em; background-color:white;">%TOC%<p class="twikiClear" /></div>
-->


---+!! !BOSCO-R

Here is an tutorial using BOSCO-R to .
BOSCO-R is currently in alpha, so some glitches are possible.  
I will be running form my Mac. But you can run on any platform that's supported by both BOSCO and R (e.g. Mac OSX, RHEL5, RHEL6, Debian6)
   * First we install BOSCO as shown in CampusGrids.BoscoQuickStart
   * Then we install R as shown in the [[http://cran.rstudio.com/][R Website]]
   * Last we install a modified version of !GridR as documented in CampusGrids.BoscoR.

---+ Getting Started

Login in the host where you want to run BOSCO-R.
You can run R via its GUI or CLI depending on what is available to you.

In this tutorial I will be using =bash= shell. If =echo $SHELL= returns something different from =/bin/bash= then run =/bin/bash= to start a Bash session.

%NOTE% You will need to install Bosco on a Mac OSX or !RedHat (Or !CentOS or Scientific Linux) computer.  It must also not have HTCondor already running.

---+ Let's start with Bosco

If you have already BOSCO installed and configured you can skip this step. BOSCO-R requires BOSCO 1.2.

---++ Download & Install Bosco
This is a very abbreviated install document for Bosco.  For the full install document, view [[BoscoQuickStart][Bosco Quick Start Installer]].  

<literal>
 <a href="http://bosco.opensciencegrid.org/download/">
     <img src="https://raw.github.com/osg-bosco/bosco-download-images/master/images/download-orange.png" 
     alt="Bosco Download"
     style="border-width: 0;"/>
 </a>
</literal>

   
Visit the Bosco [[http://bosco.opensciencegrid.org/download/][download]] page.  Choose the Quick Start Installer.  After downloading the installer, from the terminal, untar it and run the installer as a regular user:
<pre class="screen">
%UCL_PROMPT% tar xvzf ./bosco_quickstart.tar.gz
%UCL_PROMPT% ./bosco_quickstart
</pre>


---++ Starting Bosco & adding your first cluster using the quick start

Supposing to have a ==boscopbs.opensciencegrid.org== PBS cluster I'm connecting it to BOSCO answering the questions:
   * boscopbs.opensciencegrid.org (FQDN of the cluster)
   * myuser (my user name)
   * pbs (queue manager in the cluster)

---+ Download and install R

Follow the instructions off the [[http://cran.rstudio.com/][R Website]]:
   * on a Mac you can download and install the binary package (I used R-3.0.1.pkg for OS 10.6 or higher) 
   * on RHEL you can install the RPM or the tarball
   * on Debian the DEB or the tarball

---+ Download and install the modified !GridR

This is explained in CampusGrids.BoscoR . Here is a summary:
   * Download [[https://www.dropbox.com/s/n5144nnyod5l3ll/GridR_0.9.5.tar.gz][GridR]].  
   * Install with the command line:<pre class="screen">%UCL_PROMPT% R CMD INSTALL --build Downloads/GridR_0.9.5.tar.gz 
</pre>

---+ Example

Thank you to Lincoln to prepare this [[https://wiki.uchicago.edu/display/uc3jam201305/Application+Example+-+R][example for the UC3 Jamboree]]. Here I will run on R interactive instead or using scripts.

---++Background
Some background is useful here. We define a square inscribed by a unit circle. We randomly sample points, and calculate the ratio of the points outside of the circle to the points inside for the first quadrant. This ratio approaches pi/4.

(See also: [[http://math.fullerton.edu/mathews/n2003/montecarlopimod.html]])

This method converges extremely slowly, which makes it great for a CPU-intensive exercise (but bad for a real estimation!).
<img src="http://upload.wikimedia.org/wikipedia/commons/8/84/Pi_30K.gif">
_(Source: [[http://en.wikipedia.org/wiki/Monte_Carlo_method]] )_


---++ Starting BOSCO and R

Be sure to have bosco running.  To ensure that Bosco is running, you can run, from the command line:
<pre class="screen">
%UCL_PROMPT% source ~/bosco/bosco_setenv;
%UCL_PROMPT% bosco_start
</pre>

Start R, or RStudio, or whatever R environment you prefer.  

---++ Running R code
Now that we can run R, let's try using the Pi estimation code:

<pre class="file">montecarloPi <- function(trials) {
  count = 0
  for(i in 1:trials) {
    if((runif(1,0,1)^2 + runif(1,0,1)^2)<1) {
      count = count + 1
    }
  }
  return((count*4)/trials)
}

montecarloPi(10000000)
</pre>

---++ Run and analyze on BOSCO-R

---+++ Initialize the use of BOSCO-R (via !GridR)

First, you need to load the !GridR library: <pre class="screen">
> library("GridR")
Loading required package: codetools
</pre>

Then, you need to specify a temporary directory and initialize !GridR to use Bosco:
<pre class="screen">
> grid.init(service="bosco.direct", localTmpDir="tmp")
</pre>

The function =montecarloPi= should be already defined from above.

Before sending the jobs to the remote cluster I will initialize the variables. If a job fails, grid.apply will not do the assignment and the variable would remain undefined:
<pre class="screen">
> i <- 1
> while (i<=100) {
+ assign(paste("xvec",i,sep=""), NA)
+  i <- i+1
+ }
</pre>


To send it to the remote cluster you could use =grid.apply("x", montecarloPi, 10000000)= but we want to run it many times so we'll do it within a loop:
<pre class="screen">
> i <- 1
> while (i<=100) {
+ grid.apply(paste("xvec",i,sep=""), montecarloPi, 10000000)
+  i <- i+1
+ }
starting bosco.direct mode
...
</pre>

You can check on the status of the job with the command grid.printJobs():<pre class="screen">
> grid.printJobs()

Running jobs:
1:xvec1 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-04-30
2:xvec2 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-04-31
3:xvec3 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-05-32
4:xvec4 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-05-33
5:xvec5 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-06-34
6:xvec6 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-07-35
7:xvec7 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-07-36
8:xvec8 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-08-37
9:xvec9 --- grid-nsit-dhcp-250-247.uchicago.edu-1654-2013-06-27-15-07-09-38
...
</pre>

On the shell you can see your jobs also with condor_q (on linux you can use also =watch -n2 condor_q=) <pre class="screen">$ condor_q
-- Submitter: nsit-dhcp-250-247.uchicago.edu : <128.135.250.247:11000?sock=401_bc74_3> : nsit-dhcp-250-247.uchicago.edu
 ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD
  82.0   marco           6/27 15:07   0+00:00:06 R  0   0.0  R-bootstrap.py CMD
  83.0   marco           6/27 15:07   0+00:00:06 R  0   0.0  R-bootstrap.py CMD
  84.0   marco           6/27 15:07   0+00:00:06 R  0   0.0  R-bootstrap.py CMD
  85.0   marco           6/27 15:07   0+00:00:06 R  0   0.0  R-bootstrap.py CMD
  86.0   marco           6/27 15:07   0+00:00:06 R  0   0.0  R-bootstrap.py CMD
  87.0   marco           6/27 15:07   0+00:00:06 R  0   0.0  R-bootstrap.py CMD
  88.0   marco           6/27 15:07   0+00:00:06 R  0   0.0  R-bootstrap.py CMD
  89.0   marco           6/27 15:07   0+00:00:00 I  0   0.0  R-bootstrap.py CMD
  90.0   marco           6/27 15:07   0+00:00:00 I  0   0.0  R-bootstrap.py CMD
  91.0   marco           6/27 15:07   0+00:00:00 I  0   0.0  R-bootstrap.py CMD
  92.0   marco           6/27 15:07   0+00:00:00 I  0   0.0  R-bootstrap.py CMD
  93.0   marco           6/27 15:07   0+00:00:03 R  0   0.0  R-bootstrap.py CMD
  94.0   marco           6/27 15:07   0+00:00:03 R  0   0.0  R-bootstrap.py CMD
  95.0   marco           6/27 15:07   0+00:00:03 R  0   0.0  R-bootstrap.py CMD
  96.0   marco           6/27 15:07   0+00:00:00 I  0   0.0  R-bootstrap.py CMD
...
</pre>

If there are some failed jobs, you can rerun them individually. E.g. if xvec55 is NA, i.e. job with xvec55 failed, it can rerun: 
<pre class="screen">
grid.apply("xvec55", montecarloPi, 10000000)
</pre>

Once all the jobs are completed I want to copy the values in a vector:
<pre class="screen">
> res = numeric(length=100)
> i <- 1
> while (i<=100) {
+ res[i] <- get(paste("xvec",i,sep=""))
+ i <- i+1
+ }
</pre>

Here is the result:
<pre class="screen">
> res
  [1] 3.141751 3.141460 3.140470 3.141612 3.142488 3.141636 3.141662 3.142013 3.141848 3.142024 3.141577 3.141547
 [13] 3.141194 3.141072 3.140782 3.142148 3.141735 3.141789 3.141955 3.141768 3.140644 3.141398 3.142140 3.141162
...
</pre>

Now we have all the results in a vector and we can check the average:
<pre class="screen">
> mean(res, na.rm=TRUE)
[1] 3.141604
</pre>

And we can also estimate the error and plot the results:<pre class="screen">
> sd(res, na.rm=TRUE)
[1] 0.0004287374
> hist (res, breaks=20, main=name, xlab=name)
</pre>
<!-- 
n.breaks <- seq(min(res), max(res)+5, by = 5)
hist(res, breaks = n.breaks)
> median(res)
> var(res)
> sd(res)
-->

Here is the plot:
<img src="%ATTACHURLPATH%/tmp130627-iforum_pi.png" alt="tmp130627-iforum_pi.png" width='776' height='784' />    

-- Main.MarcoMambelli - 26 Jun 2013

%META:FILEATTACHMENT{name="tmp130627-iforum_pi.png" attachment="tmp130627-iforum_pi.png" attr="" comment="" date="1372366033" path="tmp130627-iforum_pi.png" size="31802" stream="tmp130627-iforum_pi.png" tmpFilename="/usr/tmp/CGItemp20474" user="MarcoMambelli" version="1"}%
