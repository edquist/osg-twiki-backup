%META:TOPICINFO{author="KyleGross" date="1481047997" format="1.1" version="1.5"}%
<!-- conventions used in this document
   * Local UCL_HOST = %URLPARAM{"INPUT_HOST" encode="quote" default="bosco"}%
   * Local UCL_USER = %URLPARAM{"INPUT_USER" encode="quote" default="user"}%
   * Local UCL_DOMAIN = %URLPARAM{"INPUT_DOMAIN" encode="quote" default="opensciencegrid.org"}%
   * Set TWISTY_OPTS_DETAILED = mode="div" showlink="Show Detailed Output" hidelink="Hide" showimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleopen-small.gif" hideimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleclose-small.gif" remember="on" start="hide" 
   * Set TOC2 =<div style="float:right; margin-right:-1.015em; padding:0.5em; background-color:white;">%TOC%<p class="twikiClear" /></div>
-->

---+!! Bosco Quick Start Guide
%DOC_STATUS_TABLE%
%TOC{depth="3"}%

---# Introduction
This is a quick introduction to your personal Bosco installation. Check the [[BoSCO][main document]] to find out more about what Bosco is and how it works. Check the [[BoscoInstall][Install document]] for detailed installation requirements and all the install options. 

Quickstart is a script that will guide through the installation and setup of BOSCO.
The script will take care of:
   1. Installing BOSCO in =~/bosco= if it is not already installed
   1. Connect one cluster with BOSCO
   1. Send a test job to verify the cluster
And will suggest you what to use in your submit file


Download the [[][quickstart script]] from this page or from the BOSCO website.

Invoke the quickstart script:
<pre class=screen>
%UCL_PROMPT% ./bosco_quickstart
</pre>

If BOSCO was not installed, when asked "Do you want to install Bosco? Select y/n and press [ENTER])", answer "y" and press ENTER to confirm that you'd like to continue installing BOSCO. The quickstart script will print some information while downloading and installing BOSCO.

Then the quickstart script will ask you three questions about the cluster you want to connect to BOSCO. Follow each answer by pressing ENTER:
   * "Type the cluster name and press [ENTER]:" This is the full name of the cluster login node, e.g. =submit.mycluster.mydomain=
   * "Type your name at AAA (default CURRENT_NAME) and press [ENTER]:" This is the username that you use to login in the cluster you want to connect. If you leave this empty BOSCO will assume that it is the same as your current username on the BOSCO host
   * "Type the queue manager for AAA (pbs, condor, lsf, sge, slurm) and press [ENTER]" This is the program that is used to manage the jobs in the cluster you want to connect. E.g. of such programs are PBS, HTCondor, LSF, SGE. If you don't know what is installed, ask the sysadmin of the cluster.
   * Last but not least you'll be prompted for the password that you use when logging in in the cluster that you are connecting to BOSCO. If you are using ssh keys to connect to that cluster please see the section [[][login with ssh keys]] below.

Here is an example of a quickstart execution:
<pre class=screen>
nsit-dhcp-250-247:bosco12 marco$ ./bosco_quickstart
Bosco is not installed. You need Bosco to run this quickstart.
Do you want to install Bosco? Select y/n and press [ENTER]):
Do you want to install Bosco? Select y/n and press [ENTER]): y
********************** Installing Bosco: ***********
--2013-05-15 18:40:13--  ftp://ftp.cs.wisc.edu/condor/bosco/1.2_beta1/boscoinstaller
           => ‘/Users/marco/boscoinstaller’
Resolving ftp.cs.wisc.edu (ftp.cs.wisc.edu)... 128.105.2.28
Connecting to ftp.cs.wisc.edu (ftp.cs.wisc.edu)|128.105.2.28|:21... connected.
Logging in as anonymous ... Logged in!
==> SYST ... done.    ==> PWD ... done.
==> TYPE I ... done.  ==> CWD (1) /condor/bosco/1.2_beta1 ... done.
==> SIZE boscoinstaller ... 8968
==> PASV ... done.    ==> RETR boscoinstaller ... done.
Length: 8968 (8.8K) (unauthoritative)

100%[========================================================================================================================================================>] 8,968       58.4KB/s   in 0.2s

2013-05-15 18:40:13 (58.4 KB/s) - ‘/Users/marco/boscoinstaller’ saved [8968]

Downloading BOSCO from ftp://ftp.cs.wisc.edu/condor/bosco/1.2/bosco-1.2-x86_64_MacOSX7.tar.gz
Installing BOSCO in ~/bosco
Installing Condor from /private/var/folders/LR/LRzFvTFxGqSROUnZ7M+AsE+++TI/-Tmp-/tmpSbEhkl/condor-7.9.5-127231-x86_64_MacOSX7-stripped to /Users/marco/bosco

Condor has been installed into:
    /Users/marco/bosco

Configured condor using these configuration files:
  global: /Users/marco/bosco/etc/condor_config
  local:  /Users/marco/bosco/local.bosco/condor_config.local
Created a script you can source to setup your Condor environment
variables. This command must be run each time you log in or may
be placed in your login scripts:
   source /Users/marco/bosco/bosco_setenv

Congratulations, you installed BOSCO succesfully!
********************** Starting Bosco: ***********
BOSCO Started
********************** Adding one cluster: ***********
Hit [CTRL+C] to interrupt.

Type the cluster name and press [ENTER]: midway-login1.rcc.uchicago.edu
Type your name at midway-login1.rcc.uchicago.edu (default marco) and press [ENTER]: mmb
Type the queue manager for midway-login1.rcc.uchicago.edu (pbs, condor, lsf, sge, slurm) and press [ENTER]: pbs
Enter the password to copy the ssh keys to marco@midway-login1.rcc.uchicago.edu:
marco@midway-login1.rcc.uchicago.edu's password:
...
Sending libraries to mmb@midway-login1.rcc.uchicago.edu.
Creating BOSCO for the WN's.................................................
Installing on cluster mmb@midway-login1.rcc.uchicago.edu.....
Installation complete
The cluster mmb@midway-login1.rcc.uchicago.edu has been added to BOSCO
It is available to run jobs submitted with the following values:
> universe = grid
> grid_resource = batch pbs mmb@midway-login1.rcc.uchicago.edu
OR to run load balanced job on all available clusters with:
> universe = vanilla
********************** Testing the cluster: ***********
Testing ssh to mmb@midway-login1.rcc.uchicago.edu...Passed!
Testing bosco submission...Passed!
Submission and log files for this job are in /Users/marco/bosco/local.bosco/bosco-test/boscotest.LxhEN
Waiting for jobmanager to accept job...Passed
Checking for submission to remote pbs cluster (could take ~30 seconds)...Passed!
Waiting for job to exit... this could take a while (waiting 60 seconds)...Failed
The job did not end in 60 seconds.  This is not always a bad thing...
Maybe condor is waiting longer to poll for job completion?
Here is the current status of the job:


-- Submitter: nsit-dhcp-250-247.uchicago.edu : <128.135.250.247:11000?sock=30013_960d_3> : nsit-dhcp-250-247.uchicago.edu
 ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD
   1.0   marco           5/15 18:46   0+00:00:00 I  0   0.0  echo Hello
********************** Congratulations, Bosco is now setup to work with midway-login1.rcc.uchicago.edu! ***********
You are ready to submit jobs with the \"condor_submit\" command.
Remember to setup the environment all the time you want to use Bosco:
source ~/bosco/bosco_setenv

Here is a quickstart guide (we took care of most of the section 3):
https://twiki.grid.iu.edu/bin/view/CampusGrids/BoscoQuickStart

To remove Bosco you can run:
source ~/bosco/bosco_setenv; bosco_uninstall --all

Here is a submit file example (supposing you want to run "myjob.sh"):
universe = grid
Executable = myjob.sh
arguments =
output = myjob.output.txt
error = myjob.error.txt
log = myjob.log
transfer_output_files =
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
queue 1
%UCL_PROMPT%
</pre>


---# How to use Bosco
%INCLUDE{"BoscoInstall" section="BoscoUseShort"}%

---# How to submit a job
Here is a simple example to submit your first Bosco job.
For more examples and options check the [[BoSCO][main Bosco document]].

In order to send a job with Bosco you must:
   1. Have an executable
   1. Prepare a submit file
   1. Submit the job
 
---## The Executable
This is a simple bash script, called =myjob.sh=: <pre class="file">
#!/bin/bash

# Prepare for the execution

# Run the actual applications
hostname 
date 
id 
whoami 


# Final steps

</pre>

Make sure that the file is executable: <pre class="screen">%UCL_PROMPT%  chmod +x myjob.sh</pre>

You can run it locally to test it and see the output: <pre class="screen">%UCL_PROMPT%  ./myjob.sh</pre>


---## The Submission File
This submission file will submit your job directly to the remote cluster, using the HTCondor "Grid" universe.  Copy it to a file, =example.condor=
<pre class="file">
universe = grid
Executable     = myjob.sh
arguments = 
output = output
error = error
log = myjob.log
transfer_output_files = 
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
queue 1
</pre>

The type of cluster that you are submitting to, pbs, lsf, sge, or condor, must be supplied on the grid_resource line.

---## Job Submission
Submit the job in the file =example.condor= with the =condor_submit= command: <pre class="screen">
%UCL_PROMPT% condor_submit example.condor
</pre>

---## Job Monitoring
Monitor the job with =condor_q=.  For example, the job when idle is: <pre class="screen">
%UCL_PROMPT% condor_q

-- Submitter: uc3-c001.mwt2.org : <10.1.3.101:45876> : uc3-c001.mwt2.org
 ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               
  12.0   marco           7/6  13:45   0+00:00:00 I  0   0.0  short2.sh 10      

1 jobs; 0 completed, 0 removed, 1 idle, 0 running, 0 held, 0 suspended
</pre>


The job could be idle if it is currently idle at the remote cluster.  When the job is being executed on the remote cluster, the =ST= (State) will change to =R=, and the =RUN_TIME= will grow.

Another method of monitoring a job is to check the job's =log=, a human readable (for the most part) time line of actions relating to the job.  The =logfile= was specified in the submission script, for example =logfile= in the example above.  You can view the log file by using =cat=: <pre class="screen">
%UCL_PROMPT% cat *.log*
</pre>

---## Job output
Once the job completes BOSCO will transfer back standard output, standard error and the output files (if specified in the submit file), e.g. the job above will create stdout and stderr files (unique for each submission) and a file named starting with =myout-file= (e.g. =myout-file-12-0=) in the directory where the =condor_submit= command was executed.


---# What's next
You can submit your job by modifying the example above.

If you have more complex jobs, here are some pages that describe more in detail how to submit HTCondor jobs. Bosco jobs are the same as HTCondor jobs:
   * Tutorial: http://research.cs.wisc.edu/htcondor/tutorials/alliance98/submit/submit.html
   * Condor manual: http://research.cs.wisc.edu/htcondor/manual/v7.6/2_5Submitting_Job.html

To learn more about Bosco check the following pages:
   * [[http://bosco.opensciencegrid.org/][BoSCO Web site]]
   * [[BoSCO][Using Bosco (v1.1)]]
   * [[BoscoInstall][Installing BoSCO]]
   * [[BoscoMultiUser][Installing BoSCO Multi User]]
   * [[TestBoSCO][BOSCO tests for developers and testers]]


---# Get Help/Support
To get assistance you can send an email to bosco-discuss@opensciencegrid.org

---+ Comments
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
   * Local OWNER = MarcoMambelli

 DOC_AREA = (ComputeElement|General|Trash/Integration|Monitoring|Operations|Security|Storage|Trash/Tier3|User|VO)
   * Local DOC_AREA       = General
 DOC_ROLE = (Developer|Documenter|Scientist|Student|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin
 DOC_TYPE = (HowTo|Installation|Knowledge|Navigation|Planning|Training|Troubleshooting)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%
   * Local INCLUDE_TEST   = %YES%
   * Local REVIEW_READY   = %YES%
   * Local TEST_READY     = %YES%
   * Local RELEASE_READY  = %YES%

status for this document: in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )

   * Local REVIEWER       = 
   * Local REVIEW_PASSED  = %YES%

   * Local TESTER         = 
   * Local TEST_PASSED    = %YES%
############################################################################################################
-->
