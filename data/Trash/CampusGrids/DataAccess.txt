%META:TOPICINFO{author="SuchandraThapa" date="1365000939" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="SkeletonKey"}%
<!-- conventions used in this document
   * Local UCL_HOST = %URLPARAM{"INPUT_HOST" encode="quote" default="hostname"}%
   * Local UCL_USER = %URLPARAM{"INPUT_USER" encode="quote" default="user"}%
   * Local UCL_DOMAIN = %URLPARAM{"INPUT_DOMAIN" encode="quote" default="opensciencegrid.org"}%
   * Set TWISTY_OPTS_DETAILED = mode="div" showlink="Show Detailed Output" hidelink="Hide" showimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleopen-small.gif" hideimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleclose-small.gif" remember="on" start="hide" 
   * Set TOC2 =<div style="float:right; margin-right:-1.015em; padding:0.5em; background-color:white;">%TOC%<p class="twikiClear" /></div>
-->

---+!! !SkeletonKey Tutorial 2: Data Access
%TOC{depth="3"}%


---++ Introduction
This page introduces the user to SkeletonKey accessing remote data using SkeletonKey.   After reading through this page, the user should be able to setup jobs that access data being shared by a Chirp server.

---++ Prerequisites
The following items are needed in order to complete this tutorial:
   * Webserver where the user can place files to access using the web 
   * Familiarity with basic usage of !SkeletonKey (the [[CampusGrids/Quickstart][first tutorial]] is sufficient)


---++ Chirp Data Server
---+++ Starting and stopping Chirp
!SkeletonKey installs =chirp-control= to so that the user can control the Chirp data server that is installed.  In order to start Chirp, run =chirp_control start= .  The user can run =chirp_control stop= to stop Chirp.  

---+++ Configuration 
The user can modify the directory that Chirp exports by editing =~/.chirp/chirp_options= and change =EXPORT_DIR= to point to the directory that Chirp should export.  If Chirp will be used to export a HDFS filesystem, =EXPORT_DIR= should be replaced with =HDFS_URI= set to the URI that should be exported (e.g. =hdfs://hdfs-namenode:9000/user_directory=).

---++ Data access example
The next example will be guide the user through creating a job that will read and write from a filesystem exported by Chirp.  

---+++ Creating a job wrapper
You'll need to do the following on the machine where you installed SkeletonKey
   1. Open a file called =data-access.ini= and add the following lines: <pre class="file">
[Directories]
export_base = /tmp
read = /
write = /

[Parrot]
location = http://your.host/parrot.tar.gz

[Application]
location = http://your.host/data-access.tar.gz
script = ./data_access/run.sh
</pre>
   1. In =data-access.ini=, change the url =http://your.host/parrot.tar.gz= to point to the url of the parrot tarball that you copied previously.  The read and write 
   1. Run SkeletonKey on =data-access.ini=: <pre class="screen">
%UCL_PROMPT% skeleton_key -c data-access.ini
</pre>
    1. Run the job wrapper to verify that it's working correctly <pre class="screen">
%UCL_PROMPT% sh ./job-script.sh
</pre>
    1. 
---++ Verification
   1. On the system running Chirp, run the following following to verify that the file was written correctly: <pre class="screen">
%UCL_PROMPT% cat /tmp/data_test
sample data
</pre> The output should match the output given in the example above.
    

-- Main.SuchandraThapa - 03 Apr 2013
