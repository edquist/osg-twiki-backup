%META:TOPICINFO{author="DerekWeitzel" date="1329784351" format="1.1" version="1.2"}%
---+!! BOSCO: BLAHP Over Ssh Condor Overlay


%TOC{depth="2"}%


<!-- conventions used in this document
   * Local UCL_HOST = %URLPARAM{"INPUT_HOST" encode="quote" default="bosco"}%
   * Local UCL_USER = %URLPARAM{"INPUT_USER" encode="quote" default="user"}%
   * Local UCL_DOMAIN = %URLPARAM{"INPUT_DOMAIN" encode="quote" default="opensciencegrid.org"}%
   * Set TWISTY_OPTS_DETAILED = mode="div" showlink="Show Detailed Output" hidelink="Hide" showimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleopen-small.gif" hideimgleft="/twiki/pub/TWiki/TWikiDocGraphics/toggleclose-small.gif" remember="on" start="hide" 
-->


---+ Introduction 

BOSCO (BLAHP Over Ssh Condor Overlay) is a job submission manager designed to help researchers manage large numbers (~1000s) of job submissions to 
the different resources that they can access on a campus (initially a PBS cluster running Linux).

It offers the following capabilities: 
   * Job submissions are automatically resubmitted when they fail. The researcher does not need to    baby sit their jobs                                                                                       
   * Job submissions can be throttled to meet batch scheduler settings (e.g. only 10 jobs running     concurrently). The researcher does not need to make multiple submissions. BOSCO handles that for them.    
   * BOSCO is designed to be flexible and will in the next version (v1) allow jobs to be submitted    to multiple clusters, perhaps with different job schedulers (e.g. PSS, LSF). The primary advantage for    
the researcher is that they only need to learn one job scheduler environment even if the clusters         utilize different native environments.                                                                    


<!--
Design goal is to manage 1000 jobs against a batch system that can only support 100 jobs running at a time
   * Universal front-end makes it easy to manage multiple job submissions 
   * Enables jobs to be submitted independent of remote batch queue size
   * We will help a researcher take a submit file from PBS and turn it into a Bosco submit file. Help will be in the form of documentation with sample files (e.g. maybe how to run R jobs or other common applications such as GROMACS) as well as hands on support when needed.
-->

More in detail the initial feature set is:
   * Simple installation and configuration via separate package and bosco_* command wrappers.
   * The installation can be on a user’s desktop or on another machine that they log into.
   * The package physically resides in the OSG VDT
   * Installs in user’s home directory
   * Does not require root access for installation or configuration
   * Submit node job queue size independent from remote batch queue size
   * Rebooting submit machine will not impact queued jobs
   * User can obtain some information about job positions in the batch queue
   * Package available as simple web-based download
And the current limitations:
   * Bosco package must be staged on submit node before installing
   * Submit node and cluster head node must be same HW/OS architecture and version.
   * No file I/O is provided between submit node and cluster head node – executable and data must be staged in and out manually

%TWISTY{%TWISTY_OPTS_DETAILED% showlink="Click to see the format conventions used in this document" }%   
%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="Header"}%
%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="CommandLine"}%
%ENDTWISTY%


---+ Requirements
   $ Submit-node: Any PBS and Condor supported Linux platform
   $ Cluster head-node: Any PBS and Condor supported Linux platform
   $ Condor version: 7.7.6+
   $ PBS flavors: Torque and PBSPro


---+ Installation Procedure

   1. Download BOSCO 
      * [[ftp://ftp.cs.wisc.edu/condor/temporary/bosco/2012-02-20/condor-7.7.6-UW_development-rhel5.7-stripped.tar.gz][right click here and select "save as" and save it in your home directory]]
      * Else you can use =wget=:<pre class="screen">
wget ftp://ftp.cs.wisc.edu/condor/temporary/bosco/2012-02-20/condor-7.7.6-UW_development-rhel5.7-stripped.tar.gz
</pre>
   1. Unpack the tar file and Install BOSCO: <pre class="screen">
cd ~
tar xvzf 
cd 
bosco_install
</pre>

Now BOSCO is installed. To use it:
   1. Add all the desired clusters (at least one)
   1. Start BOSCO
   1. Submit a test job

---++ Add a cluster to BOSCO
To add a new cluster to the resources you will be using through BOSCO:
   1. Setup the environment appropriate for your shell (if you did not already): <pre class="screen">
cd ~
source bosco_setenv.[csh|sh]
</pre>
   1. For the cluster %RED%mycluster%ENDCOLOR% with submit host %RED%mycluster-submit.mydomain%ENDCOLOR% (FQDN) and queue managet %RED%PBS%ENDCOLOR%. Replace the parts in red: <pre class="screen">
bosco_cluster --add %RED%mycluster-submit.mydomain%ENDCOLOR%
</pre>

You can see a list of the current clusters in BOSCO by typing:<pre class="screen">
bosco_cluster --list
</pre>

---+ Setup
Since BOSCO is not installed in the system path. An environment file must be sourced all the times you use BOSCO (start/stop/job submission or query, anything):<pre class="screen">
source ~/bosco_setenv.[csh|sh]
</pre>

---+ Services 
BOSCO has some persistent services that must be running. You'll have to start it at the beginning and probably after each reboot of your host.
You should stop BOSCO before an upgrade and possibly before a shutdown of your host.
If you will not use BOSCO anymore, uninstall will remove it from your system.

To start BOSCO:<pre class="screen">
bosco_start
</pre>

To stop BOSCO:<pre class="screen">
bosco_stop
</pre>

To uninstall BOSCO:<pre class="screen">
bosco_uninstall
</pre>



---+ Validation of Service Operation 


---+ Command summary
| *Action*	| *Arguments*	| *Input* |	*Output* |
| bosco_install | | | Success/Fail |
| source bosco_setenv.[csh|sh] | | |
| bosco_start | | Success/Failure |
| bosco_stop | | Success/Failure |
| bosco_uninstall | | Success/Failure |
| bosco_cluster | -add Hostname… | | Success/Fail, entry in head node table |
| | -list | Head-node table | List of –add’d head nodes and their status |
| | -test [jobcnt] | Submit file | Status of submitted jobs |
| | -remove Hostname | | Success/Fail, head node table with Hostname removed, delete if empty |
| condor-* | Various | Various | Various see the [[http://research.cs.wisc.edu/condor/manual/][Condor manual]] | 
Manually transfer output data from batch system.


---+ Troubleshooting


---++ Useful Configuration and Log Files
I
---++ Known Issues


---++ &lt;How can I resolve this Problem?&gt;

%GRAY%
Use sub-sections for each problem you want to address in particular. Link to ReleaseDocumentation.HelpProcedure at the end if the problem could not be resolved.
%ENDCOLOR%

---+ Get Help/Support
To get assistance you can send an email to bosco-discuss@opensciencegrid.org

---+ References 
   * https://twiki.grid.iu.edu/bin/view/CampusGrids
   * Condor manual: http://research.cs.wisc.edu/condor/manual/


---+ Comments
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = MarcoMambelli

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|General|Integration|Monitoring|Operations|Security|Storage|Tier3|User|VO)
   * Local DOC_AREA       = General

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (Developer|Documenter|Scientist|Student|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (HowTo|Installation|Knowledge|Navigation|Planning|Training|Troubleshooting)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = 
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = 
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %YES%
############################################################################################################
-->
