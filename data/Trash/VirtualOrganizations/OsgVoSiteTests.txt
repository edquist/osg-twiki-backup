%META:TOPICINFO{author="ChrisGreen" date="1190905267" format="1.1" reprev="1.29" version="1.29"}%
%META:TOPICPARENT{name="WebHome"}%
<style type="text/css">
  pre.code { border-style: solid; border-color: black; border-width: thin; background-color: #eeeeee; color: blue }
  pre.command { color: blue }
  span.comment { color: red; font-weight: bold }
  span.command { font-family: courier; color: blue }
  span.code-snippet { font-family: courier; color: blue; background-color: #eeeeee }
  span.command-output { font-family: courier; color: blue }
  span.env-var { font-family: courier; font-size: larger }
  span.filename { font-family: courier; font-style: italic; font-weight: bold; padding-right: 0.7em }
  span.arg { font-family: courier; font-style: italic }
  span.paren01 { font-weight: 500; color: #d03000 }
  span.paren02 { font-weight: 500; color: #30d000 }
  span.paren03 { font-weight: 600; color: #d03010 }
  span.paren04 { font-weight: 600; color: #30d010 }
  span.paren05 { font-weight: 700; color: #d03020 }
  span.paren06 { font-weight: 700; color: #30d020 }
  span.paren07 { font-weight: 800; color: #d03030 }
  span.paren08 { font-weight: 800; colo#30d030 }
  span.paren09 { font-weight: 900; color: #d03040 }
  span.paren10 { font-weight: 900; color: #30d040 }
  span.hash-key { font-weight: bold; color: #555555  }
  span.hash-value { font-weight: bold; color: #007722 }
  span.boiler-plate { background-color: #a0a0a0 }
</style>

---+ An extensible VO-centric Site Test package.

<!-- Set location of auxiliary web pages.
   * Set UserSupportAux = http://user-support.opensciencegrid.org/
   * Set VOTestWWW = %UserSupportAux%osg-vo-tests/
   * Set VOTestExamples = %VOTestWWW%site-test-examples/fermilab/20070927_004422/
   * Set VOTestVersion = 0.13
-->

%TOC%

<hr />

---++ Overview

This package is an attempt to allow <em>application owners</em> (by which I mean people responsible for running an application on OSG) to characterize OSG sites from the point of view of being able to run your application. Questions can be asked of each site in multiple ways, for instance:

   * Command line, eg: <pre class="command">ping <span class="arg">my-ce.my-domain</span></pre>

   * Fork job, eg: <pre class="command">globus-job-run <span class="arg">my-ce.my-domain</span> /usr/bin/printenv</pre>

   * Batch job via !CondorG.

   * !ReSS, the <strong>Re</strong>source <strong>S</strong>election <strong>S</strong>ystem.

   * VORS, the <strong>VO</strong> <strong>R</strong>esource <strong>S</strong>elector.

The results are presented primarily in the form of an [[%VOTestExamples%fermilab_summary.html][HTML table]] with results columns (possibly multiple columns per test), with a link to more detailed information for the test.

In addition, the summary results are available in [[%VOTestExamples%fermilab_summary.csv][<tt>.CSV</tt> format]] for machine readability; a true XML format may be forthcoming if there is enough demand.

The application owner can write new test modules inheriting from the old; for more details, see [[#Making_your_own_test_module][Making your own module]].

You may also find instructive my [[%ATTACHURL%/2007_07_26_Discovering_site_env.ppt][presentation at the OSG Users' Meeting at FNAL 2007/07/26-27]].

---++ Requirements

Any UNIX-like system with Perl and enough of an OSG client to be able to find <span class="command">condor_submit</span>, <span class="command">condor_status</span>, <span class="command">globus-job-run</span>, <span class="command">voms-proxy-init</span> and <span class="command">voms-proxy-info</span>.

---++ Download Source

The source is available as a tar-file: <span class="filename">[[%VOTestWWW%/osg-vo-tests-%VOTestVersion%.tar.bz2][osg-vo-tests-%VOTestVersion%.tar.bz2]]</span>. You will probably wish to customize modules yourself; please inherit where possible rather than cut-and-paste, since there could be several updates to the package, certainly in the early stages. You may wish to take advantage of the package's ability to be configured to find modules and scripts in other directories to separate your code from the package's code for ease of updating.

---++ Feedback and questions

If you have feedback on the documentation or the package itself, anything from bug reports to documentation typos to questions about why this package might be useful for you: please [[mailto:osg-user-group?subject=osg-vo-tests][email the OSG User Support Group]].

---++ Installation

   * Expand the tar file.

   * Add <span class="filename">osg-vo-tests-<span class="arg">&lt;version&gt;</span>/bin</span> to your <span class="env-var">PATH</span>, or link <span class="filename">osg-vo-tests-<span class="arg">&lt;version&gt;</span>/bin/gridSiteTest</span> to somewhere that is in <span class="env-var">PATH</span>.

   * If you intend to run the tests with a common subset of options, you may wish to set up a shell alias or function. A future version may support an options file if there is demand.

---++ Getting Started

---+++ Pre-requisites

   * Make sure you are able to obtain a VOMS-proxy.

---+++ Running the basic test set

<dl><dt><span class="command">gridSiteTest -V <span class="arg">myvo:/myvo</span></span></dt>
<dd>
<ul>
  <li>Screen output (where FQAN = <span class="arg">fermilab:/fermilab</span>)</li>
  <li>Summary page</li>
</ul>
</dd>
</dl>

---+++ Exploring and tweaking the output

   * Click on a test result in the !ReSS results group column: you will be taken to the test details.
   * Pick an interesting GLUE Schema item from the details.
   * Make a copy of <span class="filename">control/default-tests.dat</span>.
   * Edit the copy to make the specification for the !ReSS test read: <pre class="code">
<span class="paren01">{</span> <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::ReSS"</span>,
  <span class="hash-key">results</span> => <span class="paren02">[</span> <span class="paren03">{</span> <span class="hash-key">"default-results"</span> => <span class="hash-value">1</span> <span class="paren03">}</span>,
               <span class="paren03">{</span> <span class="hash-key">"attribute-name"</span> => <span class="hash-value">"my-favorite-GLUE-schema-entry"</span>,
                 <span class="hash-key">"column-title"</span> => <span class="hash-value">"My Name"</span> <span class="paren03">}</span>
             <span class="paren02">]</span>
<span class="paren01">}</span>,</pre>
   * Re-run the tests: <span class="command">gridSiteTest -V <span class="arg">myvo:/myvo</span></span>

----++ More details

----+++ Invoking the test program

   * See the automatically-generated [[%VOTestWWW%gridSiteTest.html][usage documentation]] for <span class="command">gridSiteTest</span> for full details of all options

----+++ General test configuration details

   * The test configuration file is in the format of a Perl hash:<pre class="code">
<span class="paren01">(</span> <span class="comment"># Hash open</span>
  <span class="paren02">{</span> <span class="comment"># Anonymous hash representing a single test</span>
%STARTSECTION{"ExPing" }%    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::Ping"</span> <span class="comment"># Test Module (no other configuration)</span> %ENDSECTION{"ExPing"}%
  <span class="paren02">}</span>, <span class="comment"># Close test hash; comma separates test specs</span>
  <span class="paren02">{</span> <span class="comment"># New test spec</span>
%STARTSECTION{"ExVORS" }%    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::VORS"</span>,
    <span class="comment"># Module-specific attributes (see detailed docs for each module)</span>
    <span class="hash-key">attributes</span> => <span class="paren03">{</span> <span class="hash-key">results</span> => <span class="paren04">[</span> <span class="comment"># An array of hashes specifying the results</span>
                                 <span class="paren05">{</span> <span class="hash-key">"default-results"</span> => <span class="hash-value">1</span> <span class="paren05">}</span>, <span class="comment"># Produce the default set, and add ...</span>
                                 <span class="paren05">{</span> <span class="comment"># Specify an extra result column</span>
                                   <span class="hash-key">"column-title"</span> => <span class="hash-value">"Sponsoring VO(s)"</span>, <span class="comment"># Column title</span>
                                   <span class="hash-key">"attribute-name"</span> => <span class="hash-value">"sponsor_vo"</span> <span class="comment"># Column contents</span>
                                 <span class="paren05">}</span> <span class="comment"># Close column spec</span>
                               <span class="paren04">]</span> <span class="comment"># Close results array</span>
                  <span class="paren03">}</span> <span class="comment"># Close attributes hash</span> %ENDSECTION{"ExVORS"}%
  <span class="paren02">}</span>, <span class="comment"># Close test hash</span>
  <span class="paren02">{</span> <span class="comment"># New test spec</span>
%INCLUDE{"ExCondorGTest" section="ExCondorGTestResults" ExCondorGTestResultDetail="Condor output file"}%
  <span class="paren02">}</span> <span class="comment"># Close test hash</span>
<span class="paren01">)</span> <span class="comment"># Hash close</span></pre>
   * One can "include" control files within one another as follows:<pre class="code">
<span class="paren01">(</span> <span class="comment"># Hash open</span>
  process_module_list_file("control-file-1.dat"},
  process_module_list_file("control-file-2.dat"}
<span class="paren01">)</span> <span class="comment"># Hash close</span></pre>Up to ten levels of recursion may be used before the program aborts due to a suspected infinite recursion.
   * Errors in one or other module list file are trapped and cause test execution to abort.
   * The search path for module list files may be extended by an appropriate command-line option; please see the section, "[[%VOTestWWW%gridSiteTest.html#information_source_control][Information source control]]" in the <span class="command">gridSiteTest</span> [[%VOTestWWW%gridSiteTest.html][usage documentation]] for more details.

---+++ Options common to all modules.

   * The <a href="#code-bm-args"><span class="hash-key">args</span></a> specification for a test is an array of options to send to the particular module's constructor (<span class="code-snippet">new</span> function). What those options mean is defined by that module.
   * The <a href="#code-bm-attributes"><span class="hash-key">attributes</span></a> specification contains general and test-specific keys which alter module behavior. One such key that is recognized by all modules is <a href="#code-bm-results"><span class="hash-key">results</span></a>, which is used to specify results columns where that is appropriate for the module. This key points to an anonymous array of hashes describing results columns. Unless overridden by modules, the hash looks like this: <a name="results-hash-example"/><pre class="code"><span class="paren01">{</span>
 <span class="hash-key">"column-title"</span> => <span class="hash-value"><span class="arg">"My Column Title"</span></span>, <span class="comment"># Column title</span>
 <span class="hash-key">"detail-key"</span> => <span class="hash-value"><span class="arg">'Output'</span></span>, <span class="comment"># Detail field to match (default Output)</span>
 <span class="hash-key">"match-operator"</span> => <span class="hash-value"><span class="arg">'=~'</span></span>, <span class="comment"># Match operator (default =~)</span>
 <span class="hash-key">"match-regex"</span> => <span class="hash-value"><span class="arg">'/blah/'</span></span>, <span class="comment"># Match expression (default "")</span>
 <span class="hash-key">"match-value"</span> => <span class="hash-value"><span class="arg">'$1'</span></span>, <span class="comment"># Desired result (default '$1')</span>
 <span class="hash-key">"match-flag"</span> => <span class="hash-value"><span class="arg">'($1 eq "OK")?$self->{SUCCESS}:$self->{FAILURE}'</span></span>, <span class="comment"># Label for result (default none)</span>
 <span class="hash-key">"append-result"</span> => <span class="hash-value"><span class="arg">1</span></span>, <span class="comment"># Append result to column? (default false (replace))</span>
 <span class="hash-key">"nomatch-value"</span> => <span class="hash-value"><span class="arg">'"NO-MATCH"'</span></span>, <span class="comment"># Value for no match (default 'undef')</span>
 <span class="hash-key">"nomatch-flag"</span> => <span class="hash-value"><span class="arg">'$self->{FAILURE}'</span></span> <span class="comment"># Flag for no match (default none)</span>
<span class="paren01">}</span></pre>

---+++ Packaged test modules

---++++ Ping

   * This is a standalone module with no options.
   * Invoke it to check a gatekeeper is alive. First it sends an ICMP ping; if this fails, it tries a <span class="command">globusrun -r -a</span>. Of course, the latter will fail even if the gatekeeper is up if the tester's VO is not supported.
   * Example control script: <pre class="code">  <span class="paren02">{</span>
%INCLUDE{"OsgVoSiteTests" section="ExPing"}%
  <span class="paren02">}</span></pre>
   * Example [[%VOTestExamples%FNAL_FERMIGRID_00_CE_ping_test.txt][results file]].

---++++ VORS

   * Use to interface with the [[http://vors.grid.iu.edu/cgi-bin/index.cgi][VORS]] [[http://vors.grid.iu.edu/cgi-bin/tindex3.cgi][programmatic interface]].
   * Configurable: various VORS attributes can be selected as results columns displayed in the summary.
   * Default set of information may be overridden or extended.
   * Example control script:<pre class="code">  <span class="paren02">{</span>
%INCLUDE{"OsgVoSiteTests" section="ExVORS"}%
  <span class="paren02">}</span></pre>
   * Example [[%VOTestExamples%FNAL_FERMIGRID_01_VORS_info.txt][results file]].

---++++ !ReSS

   * Use to interrogate the [[ResourceSelection.%HOMETOPIC%][Resource Selection System] servers ([[https://osg-ress-1.fnal.gov:8443/cgi-bin/main.cgi][Production]], [[https://osg-ress-4.fnal.gov:8443/cgi-bin/main.cgi][Integration]]).
   * Configurable:
      * specify particular GLUE attributes to display as a summary result column;
      * Specify <span class="command">condor_status</span>-style <a href="code-bm-contraints"><strong><em>constraints</em></strong></a>, the results of which are presented as a summary result column.
   * As for the [[#VORS][VORS]] module, the default set of information may be overridden or extended.
   * Example control script:<pre class="code">  <span class="paren02">{</span>
%STARTSECTION{"ExReSS" }%    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::ReSS"</span>,
    <span class="comment"># Module-specific attributes (see detailed docs for each module)</span>
    <span class="hash-key">attributes</span> => <span class="paren03">{</span> <span class="hash-key">results</span> => <span class="paren04">[</span> <span class="comment"># An array of hashes specifying the results</span>
                                 <span class="paren05">{</span> <span class="hash-key">"default-results"</span> => <span class="hash-value">1</span> <span class="paren05">}</span>, <span class="comment"># Produce the default set, and add ...</span><!-- ################################################################# -->
                                 <span class="paren05">{</span> <span class="comment"># Open column spec</span>
                                   <span class="hash-key">"column-title"</span> => <span class="hash-value">"Total jobs"</span>, <span class="comment"># Column title</span>
                                   <span class="hash-key">"attribute-name"</span> => <span class="hash-value">"GlueCEStateTotalJobs"</span> <span class="comment"># Column contents</span>
                                 <span class="paren05">}</span>, <span class="comment"># Close column spec</span><!-- ################################################################# -->
                                 <span class="paren05">{</span> <span class="comment"># Open column spec</span>
                                   <span class="hash-key">"column-title"</span> => <span class="hash-value">"Running jobs"</span>, <span class="comment"># Column title</span>
                                   <span class="hash-key">"attribute-name"</span> => <span class="hash-value">"GlueCEStateRunningJobs"</span> <span class="comment"># Column contents</span>
                                 <span class="paren05">}</span>, <span class="comment"># Close column spec</span><!-- ################################################################# -->
                                 <span class="paren05">{</span> <span class="comment"># Open column spec</span>
                                   <span class="hash-key">"column-title"</span> => <span class="hash-value">"Waiting jobs"</span>, <span class="comment"># Column title</span>
                                   <span class="hash-key">"attribute-name"</span> => <span class="hash-value">"GlueCEStateWaitingJobs"</span> <span class="comment"># Column contents</span>
                                 <span class="paren05">}</span>, <span class="comment"># Close column spec</span><!-- ################################################################# -->
                                 <span class="paren05">{</span> <span class="comment"># Open column spec</span>
                                   <span class="hash-key">"column-title"</span> => <span class="hash-value">"Total CPUs &gt; 250"</span>, <span class="comment"># Column title</span>
                                   <span class="hash-key">"constraint"</span> => <span class="hash-value">"GlueCEInfoTotalCPUs &gt; 25"</span> <span class="comment"># Column contents</span>
                                 <span class="paren05">}</span>, <span class="comment"># Close column spec</span><!-- ################################################################# -->
                               <span class="paren04">]</span> <span class="comment"># Close results array</span>
                  <span class="paren03">}</span> <span class="comment"># Close attributes hash</span> %ENDSECTION{"ExReSS"}%
  <span class="paren02">}</span></pre>
   * Example [[%VOTestExamples%FNAL_FERMIGRID_02_ReSS_info.txt][results file]].

---++++ Command

   * A basic test module for logging the output of commands executed from the test machine (eg <span class="command">ping <span class="arg">&lt;gatekeeper&gt;</span></span>).
   * Constructor takes arguments:
      * test description;
      * command to execute and arguments (all remaining constructor arguments);
   * Example control script:<pre class="code">  <span class="paren02">{</span>
%STARTSECTION{"ExCommand" }%    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::Command"</span>,
    <span class="comment"># Module-specific attributes (see detailed docs for each module)</span>
    <span class="hash-key">args</span> => <span class="paren03">[</span> # An array of arguments to pass to gridSiteTest::Command::new()
             <span class="hash-value">"My Special Command",
             "/path/to/command",
             "arg1",
             "arg2"</span>
            <span class="paren03">]</span> <span class="comment"># Close args array</span> %ENDSECTION{"ExCommand"}%
  <span class="paren02">}</span></pre>
   * See [[#Making_your_own_test_module][Making your own module]] for details of how to inherit from this module for your own purposes.

---++++ !ForkCommand

   * A basic test module for executing commands on the remote gatekeeper via <span class="command">globus-job-run</span> and logging their output.
   * Constructor takes arguments:
      * test description;
      * command to execute and arguments (all remaining constructor arguments):
<pre class="code">  <span class="paren02">{</span>
    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::ForkCommand"</span>,
    <span class="comment"># Module-specific attributes (see detailed docs for each module)</span>
    <span class="hash-key">args</span> => <span class="paren03">[</span> # An array of arguments to pass to gridSiteTest::ForkCommand::new()
             <span class="hash-value">"Mapped ID on CE",
             "/usr/bin/id"</span>
            <span class="paren03">]</span>, <span class="comment"># Close args array</span>
    <span class="hash-key">attributes</span> => <span class="comment"># Module-specific attributes</span>
    <span class="paren03">{</span> <span class="hash-key">"stage-command"</span> => <span class="hash-value">undef</span>, <span class="comment">Stage local command to remote node (1, "True", "Yes" or "-s") or not (undef, default)</span>
      <span class="hash-key">"fork-options"</span> =>  <span class="paren04">[</span> <span class="hash-value">"-globus-opt", "&lt;globus-arg&gt;"</span> <span class="paren04">]</span>, <span class="comment"># Extra options for globus-job-run (default undef)</span>
%INCLUDE{"ExCondorGTest" section="ExCondorGTestResults" ExCondorGTestResultDetail="Output"}%
    <span class="paren03">}</span> <span class="comment"># Close attributes hash</span>
  <span class="paren02">}</span></pre>
   * Example [[%VOTestExamples%FNAL_FERMIGRID_04_CE_user_check.txt][results file]].
   * See [[#Making_your_own_test_module][Making your own module]] for details of how to inherit from this module for your own purposes.

---+++++ Environment

   * A simple module inheriting from <span class="code-snippet">[[#ForkCommand][ForkCommand]]</span> to get the environment from a fork job, test for the presence of three commonly required variables and provide those results as summary columns.
   * Not configurable.
   * Example control script:<pre class="code">  <span class="paren02">{</span>
    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::Environment"</span>
  <span class="paren02">}</span></pre>
   * Example [[%VOTestExamples%FNAL_FERMIGRID_03_CE_environment_test.txt][results file]].

---+++++ !CEGridFTPCheck

   * A simple module inheriting from <span class="code-snippet">[[#ForkCommand][ForkCommand]]</span> to check <span class="code-snippet">GridFTP</span> to and from the CE.
   * Constructor takes an optional argument specifying the remote destination directory (default <span class="filename">/tmp</span>); the directory must already exist on the remote end.
   * Example control script:<pre class="code">  <span class="paren02">{</span>
    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::CEGridFTPCheck"</span>
  <span class="paren02">}</span></pre>
   * Example [[%VOTestExamples%FNAL_FERMIGRID_05_CE_GridFTP_check.txt][results file]].

---+++++ !CEGUMSDetector

   * A simple module inheriting from <span class="code-snippet">[[#ForkCommand][ForkCommand]]</span> to check whether the CE is configured to use GUMS.
   * Not configurable.
   * Example control script:<pre class="code">  <span class="paren02">{</span>
    <span class="hash-key">command</span> => <span class="hash-value">"gridSiteTest::CEGUMSDetector"</span>
    <span class="hash-key">args</span> => <span class="paren03">[</span> # An array of arguments to pass to gridSiteTest::Command::new()
             <span class="hash-value">"/tmp"</span> <span class="comment"># Remote destination directory for test files (default "/tmp")</span>
            <span class="paren03">]</span> <span class="comment"># Close args array</span>
  <span class="paren02">}</span></pre>
   * Example [[%VOTestExamples%FNAL_FERMIGRID_06_CE_GUMS_check.txt][results file]].

---++++ !CondorGTest

   * A module to allow execution of arbitrary batch jobs and interrogation of the output.
   * Configurable: expects an attribute <span class="code-snippet"><span class="hash-key">jdl</span></span> to be defined describing the parameters for condor_submit. Compulsory properties:
      * <span class="code-snippet"><span class="hash-key">universe</span></span> (default = <span class="code-snippet"><span class="hash-value">globus</span></span>)
      * <span class="code-snippet"><span class="hash-key">executable</span></span>
   * Batch jobs are automatically managed and killed after a configurable timeout. When using this module, forking into the background is advisable. See the [[%VOTestWWW%gridSiteTest.html][<span class="command">gridSiteTest</span> usage documentation]], specifically the <span class="arg">--batch-timeout</span>, <span class="arg">--fork</span>, <span class="arg">--log</span> and <span class="arg">--error</span> options.
   * Example control script:<pre class="code">  <span class="paren02">{</span>
%INCLUDE{"ExCondorGTest" section="ExCondorGTest"}%
  <span class="paren02">}</span></pre>
   * Example [[%VOTestExamples%FNAL_FERMIGRID_08_WN_SQUID_presence_test.txt][results file]].

---++ Making your own test module

%INCLUDE{"OsgVoSiteTestNewModule"}%

-- Main.ChrisGreen - 27 Sep 2007

%META:FILEATTACHMENT{name="2007_07_26_Discovering_site_env.ppt" attachment="2007_07_26_Discovering_site_env.ppt" attr="" comment="Presentation of the OSG VO site test kit given at the OSG Users' Meeting, FNAL 2007/07/26-27." date="1186775886" path="2007_07_26_Discovering_site_env.ppt" size="127488" stream="2007_07_26_Discovering_site_env.ppt" user="Main.ChrisGreen" version="1"}%
