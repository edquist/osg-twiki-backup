%META:TOPICINFO{author="ChrisGreen" date="1187110944" format="1.1" reprev="1.5" version="1.5"}%
%META:TOPICPARENT{name="WebHome"}%
---+ An extensible VO-centric Site Test package.

<!-- Set location of auxiliary web pages.
   * Set UserSupportAux = http://user-support.opensciencegrid.org/
   * Set VOTestWWW = %UserSupportAux%osg-vo-tests/
-->
d10 14
<style type="text/css">
  pre.code { border-style: solid; border-color: black; border-width: thin; background-color: #eeeeee; color: blue }
  pre.command { color: blue }
  span.comment { color: red; font-weight: bold }
  span.command { font-family: courier; color: blue }
  span.code-snippet { font-family: courier; color: blue; background-color: #eeeeee }
  span.env-var { font-family: courier; font-size: larger }
  span.filename { font-family: courier; font-style: italic; padding-right: 0.4em }
  span.arg { font-family: courier; font-style: italic; padding-right: 0.4em }
  span.paren01 { font-weight: bold; color: #d03000 }
  span.paren02 { font-weight: bold; color: #30d000 }
  span.paren03 { font-weight: bold; color: #d03010 }
  span.paren04 { font-weight: bold; color: #30d010 }
  span.paren05 { font-weight: bold; color: #d03020 }
  span.paren06 { font-weight: bold; color: #30d020 }
  span.paren07 { font-weight: bold; color: #d03030 }
  span.paren08 { font-weight: bold; color: #30d030 }
  span.paren09 { font-weight: bold; color: #d03040 }
  span.paren10 { font-weight: bold; color: #30d040 }
  span.hash-key { font-weight: bold: color: #dddddd }
  span.hash-value { font-weight: bold: color: #007722 }
  span.filename { font-family: courier; font-style: italic }
  span.arg { font-family: courier; font-style: italic }
</style>

%TOC%

<hr>

---++ Overview

This package is an attempt to allow <em>application owners</em> (by which I mean people responsible for running an application on OSG) to characterize OSG sites from the point of view of being able to run your application. Questions can be asked of each site in multiple ways, for instance:

   * Command line, eg: <pre class="command">ping <span class="arg">my-ce.my-domain</span></pre>

   * Fork job, eg: <pre class="command">globus-job-run <span class="arg">my-ce.my-domain</span> /usr/bin/printenv</pre>

   * Batch job via !CondorG.

   * !ReSS, the <strong>Re</strong>source <strong>S</strong>election <strong>S</strong>ystem.

   * VORS, the <strong>VO</strong> <strong>R</strong>esource <strong>S</strong>elector.

The results are presented primarily in the form of an HTML table with results columns (possibly multiple columns per test), with a link to more detailed information for the test.

In addition, the summary results are available in =.CSV= format for machine readability; a true XML format may be forthcoming if there is enough demand.

Please see my [[%ATTACHURL%/2007_07_26_Discovering_site_env.ppt][presentation at the OSG Users' Meeting at FNAL 2007/07/26-27]].

---++ Requirements

Any UNIX-like system with Perl and enough of an OSG client to be able to find =condor_submit=, =condor_status=, =globus-job-run=, =voms-proxy-init= and =voms-proxy-info=.

---++ Source

The source is available as a tar-file: <span class="filename">[[%VOTestWWW/osg-vo-tests-%VOTestVersion.tar.bz2][osg-vo-tests-%VOTestVersion.tar.bz2]]</span>. You will probably wish to customize modules yourself; please inherit where possible rather than cut-and-paste, since there could be several updates to the package, certainly in the early stages. You may wish to take advantage of the package's ability to be configured to find modules and scripts in other directories to separate your code from the package's code for ease of updating.
The source is available as a tar-file. You will probably wish to customize modules yourself; please inherit where possible rather than cut-and-paste, since there could be several updates to the package, certainly in the early stages. You may wish to take advantage of the package's ability to be configured to find modules and scripts in other directories to separate your code from the package's code for ease of updating.

---++ Installation

   * Expand the tar file.
   * Add <span class="snippet">osg-vo-tests-<em>&lt;version&gt;</em>/bin</span> to your =PATH=, or link <tt>osg-vo-tests-<em>&lt;version&gt;</em>/bin/gridSiteTest</tt> to somewhere that is in =PATH=.
   * Add <span class="filename">osg-vo-tests-<span class="arg">&lt;version&gt;</span>/bin</span> to your <span class="env-var">PATH</span>, or link <span class="filename">osg-vo-tests-<span class="arg">&lt;version&gt;</span>/bin/gridSiteTest</span> to somewhere that is in <span class="env-var">PATH</span>.

   * If you intend to run the tests with a common subset of options, you may wish to set up a shell alias or function. A future version may support an options file if there is demand.

---++ Getting Started

---+++ Pre-requisites

   * Make sure you are able to obtain a VOMS-proxy.

---+++ Running the basic test set
<dl><dt><tt>gridSiteTest -V <em>myvo:/myvo</em></tt></dt>
<dl><dt><span class="command">gridSiteTest -V <span class="arg">myvo:/myvo</span></span></dt>
<dd>
  <li>Screen output (where FQAN = <em>fermilab:/fermilab</em>)</li>
  <li>Screen output (where FQAN = <span class="arg">fermilab:/fermilab</span>)</li>
  <li>Summary page</li>
</ul>
</dd>
</dl>

---+++ Exploring and tweaking the output

   * Click on a test result in the !ReSS results group column: you will be taken to the test details.
   * Make a copy of =control/default-tests.dat=
   * Edit the copy to make the specification for the !ReSS test read: <pre class="code">{ command => "gridSiteTest::ReSS",
  results => [ { "default-results" => 1 },
               { "attribute-name" => "my-favorite-GLUE-schema-entry",
                 "column-title" => "My Name" }
             ]
},</pre>
   * Re-run the tests: <tt>gridSiteTest -V <em>myvo:/myvo</em></tt></dt>
   * Re-run the tests: <span class="command">gridSiteTest -V <span class="arg">myvo:/myvo</span></span>

----++ More details

----+++ Invoking the test program
   * See the automatically-generated [[%VOTestWWW%gridSiteTest.html][usage documentation]] for <tt>gridSiteTest</tt> for full details of all options
   * See the automatically-generated [[%VOTestWWW%gridSiteTest.html][usage documentation]] for <span class="command">gridSiteTest</span> for full details of all options

----+++ General test configuration details

( <span class="comment"># Hash open</span>
  { # Anonymous hash representing a single test
    command => "gridSiteTest::Ping" # Test Module (no other configuration)
  }, # Close test hash; comma separates test specs
  { # New test spec
    command => "gridSiteTest::VORS",
    # Module-specific attributes (see detailed docs for each module)
    attributes => { results => [ # An array of hashes specifying the results 
                                 { "default-results" => 1 }, # Produce the default set, and add ...
                                 { # Specify an extra result column
                                   "column-title" => "Sponsoring VO(s)", # Column title
                                   "attribute-name" => "sponsor_vo" # Column contents
                                 } # Close column spec
                               ] # Close results array
                  } # Close attributes hash
  }, # Close test hash
  { command => "gridSiteTest::CondorGTest",
    args => [ "Job JDL test" ],
    attributes =>
    { jdl => <<'EOF'
    <span class="paren03">{</span> <span class="hash-key">jdl</span> => <span class="hash-value">&lt;&lt;'EOF' <span class="comment">JDL for condor_submit of batch job</span>
transfer_executable = false
EOF
EOF</span>
      results =>  [ { "column-title" => "User",
                      "detail-key" => 'Condor output file',
                      "match-operator" => '=~',
                      "match-regex" => 'm&uid=\d+\(([^\)]+)&',
                      "match-value" => '$1'
                    },
                    { "column-title" => "Group",
                      "detail-key" => 'Condor output file',
                      "match-operator" => '=~',
                      "match-regex" => 'm&gid=\d+\(([^\)]+)&',
                      "match-value" => '$1'
                    }
                  ]
    }
  },
) # Hash close
<span class="paren01">)</span> <span class="comment"># Hash close</span>
</pre>
----+++ Packaged test modules
---+++ Options common to all modules.

   * Invoke it to check a gatekeeper is alive. First it sends an ICMP ping; if this fails, it tries a <span class="command">globusrun -r -a</span>. Of course, the latter will fail even if the gatekeeper is up if the tester's VO is not supported.

---++++ VORS

---++++ !ReSS
---++++ Command

---++++ Command

---++++ !ForkCommand

---+++++!! Environment

---+++++!! !CEGridFtpCheck

---+++++!! !CEGUMSDetector

---++++ !CondorGTest


-- Main.ChrisGreen - 10 Aug 2007

%META:FILEATTACHMENT{name="2007_07_26_Discovering_site_env.ppt" attachment="2007_07_26_Discovering_site_env.ppt" attr="" comment="Presentation of the OSG VO site test kit given at the OSG Users' Meeting, FNAL 2007/07/26-27." date="1186775886" path="2007_07_26_Discovering_site_env.ppt" size="127488" stream="2007_07_26_Discovering_site_env.ppt" user="Main.ChrisGreen" version="1"}%
