%META:TOPICINFO{author="KyleGross" date="1225985921" format="1.1" version="1.8"}%
%META:TOPICPARENT{name="ATLAS"}%
---++ Quick links
   * [[http://gridui02.usatlas.bnl.gov:25880/server/pandamon/query?job=*&site=CHARMM][Panda CHARMM job queue monitor]]
   * [[http://gridui02.usatlas.bnl.gov:25880/server/pandamon/query?tp=main][Scheduler/pilot monitor]]
      * [[http://gridui02.usatlas.bnl.gov:25880/server/pandamon/query?tp=queues&tag=charmm][CHARMM-tagged queues]] (an arbitrary assortment at the moment)
   * The code:
      * [[http://www.usatlas.bnl.gov/twiki/bin/view/AtlasSoftware/TestPilot][TestPilot wiki page]]
      * [[http://svn.tjweb.org/TestPilot/][TestPilot scheduler/pilot system]]
      * [[http://svn.tjweb.org/CHARMM/][CHARMM area in the subversion repository]] (I can provide you commit access, or you can use some other 'web home' of your choosing; subversion (or webdav) is very convenient, I recommend it)
      * Panda [[http://atlas-sw.cern.ch/cgi-bin/viewcvs-atlas.cgi/offline/Production/panda/][cvs]], [[http://atldbdev01.cern.ch:20081/lxr/source/atlas/Production/panda/][lxr]]
      * !AutoPilot [[https://svn.usatlas.bnl.gov/svn/panda/autopilot/trunk/][Subversion server]] at BNL
      * SubversionClientSetup.  

---++ Submitting CHARMM jobs to Panda

__Setup procedure:__
<pre>
wget http://svn.tjweb.org/TestPilot/charmmSetup.sh
chmod +x charmmSetup.sh
./charmmSetup.sh
</pre>

__Submitting a job:__
The charmmJob.sh script sets up environment and input parameters for a CHARMM job and submits the job to Panda. An automation layer from you to define and submit jobs would replace charmmJob.sh with an automated submitter script that sets up the job inputs as shown in the example.
<pre>
## Set up job parameters in charmmJob.sh, then this submits the job...
./charmmJob.sh
</pre>

---++ Monitoring jobs

   * The Panda CHARMM job queue can be monitored at http://gridui02.usatlas.bnl.gov:25880/server/pandamon/query?job=*&site=CHARMM
      * Click on a PandaID number to see the Panda job information page
      * From the Panda job information page click on the pilotID to see the TestPilot page for that job (if it's a real job; fake jobs for debugging will have a pilotID of tpid1 or similar).
   * From the TestPilot page for the job you can see pilot submission information and you can click on pilot.out which contains the stdout output of the job.

---++ Scheduling pilots

The CHARMM pilot scheduler is set up at UW Madison on condor-g-1.cs.wisc.edu. The procedure to run the pilot submission is as follows:
   * copy ~wenaus/panda_setup.sh to your home directory
   * source this file in your .bashrc
   * create a file mycron containing <code>0 3,9,15,21 * * *  /home/wenaus/panda-osg/TestPilot/pilotCron.sh --tag=charmm --pandasite=CHARMM</code>
   * register this as your cron: <code>crontab mycron</code>
   * Do an initial launch of the scheduler; the cron will take care of it thereafter. Snip out the command part of the cron and run it in background: <code>/home/wenaus/panda-osg/TestPilot/pilotCron.sh --tag=charmm --pandasite=CHARMM &</code>
That should be it.
<p>
Scheduler instances and pilots can be monitored via the TestPilot interface
http://gridui02.usatlas.bnl.gov:25880/server/pandamon/query?tp=main

---++ What's going on
   * charmmJob.sh/.py sets up a Panda job specification for a CHARMM job
      * CHARMM job specs come in via the PANDA_JOB_PARAMS env variable set up in charmmJob.sh
      * part of the spec is specification of the script that Panda runs as the job payload. This is currently [[http://svn.tjweb.org/TestPilot/trans-charmm-1.sh][trans-charmm-1.sh]] in the TestPilot svn repository
      * the job spec is sent to Panda as an http message; Panda queues it with the CHARMM label (currently a 'site' label; we will later have a VirtualOrganizations/VOInfo label) that is used to match it to CHARMM pilots
   * where CHARMM jobs are sent is controlled by where CHARMM-specific pilots are scheduled. cf. the section above on scheduling pilots. Note the specification of the CHARMM pandasite label.
      * pilotScheduler.py sends pilot jobs to the specified queue(s). Queues are Condor (local Condor queue) or Condor-G. Direct submission to LSF local queues is partially implemented. PBS will be added later.
      * the script actually submitted to the queue is [[http://svn.tjweb.org/TestPilot/pilotWrapper.sh][pilotWrapper.sh]] which does some environment validation (is curl present; can the Panda server and svn repository be contacted with curl)
      * pilotWrapper.sh invokes SimplePilot.py which
         * messages the Panda server, asking for a job. It informs the Panda server it wants a CHARMM job in your case.
            * Panda server picks up the next CHARMM job (FIFO) and sends it to the pilot.
         * invokes the payload script specified in the job spec, feeding it the CHARMM parameters set up in the job spec.
         * the payload script [[http://svn.tjweb.org/TestPilot/trans-charmm-1.sh][trans-charmm-1.sh]] executes to run the job
         
---++ Data handling
   * the example is set up to use an area in BNL dCache as the data sink/source, accessed with globus-url-copy.

-- Main.TorreWenaus - 30 Oct 2006