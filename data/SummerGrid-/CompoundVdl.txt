%META:TOPICINFO{author="ForrestChristian" date="1172614986" format="1.1" version="1.1"}%
%META:TOPICPARENT{name="LectureEightTutorial"}%
%LINKCSS%

---+!! Compound VDL
%STARTINCLUDE%
%EDITTHIS%

In this exercise, you will combine the transforms of the previous section into a single compound transform. When you have done this, you will be able to invoke the entire analysis process using  a single derivation.


The files for this exercise are in the =/opt/vdltut/COMPOUNDVDL/= directory.

<pre class="screen">
$ <span class="in">cp -av /opt/vdltut/COMPOUNDVDL/ ~</span>
$ <span class="in">cd ~/COMPOUNDVDL/ ~</span>

$ <span class="in">ls</span>
<span class="out">compound.vdl.template  transformations.vdl</span>
</pre>

The most interesting file here is =compound.vdl=. This  takes the various different transformations that we did separately in the previous exercise, and makes a single transform. Then instead of specifying many derivations, we can specify just a single derivation to run the whole analysis.

Copy the =compound.vdl.template= template file, and substitute in =@USER@= at each occurence.

<pre class="screen">
$ <span class="in">cp compound.vdl.template compound.vdl</span>
$ <span class="in">vim compound.vdl</span>

$ <span class="in">vdlc compound.vdl transformations.vdl</span>
<span class="out">20060531T121629.999: [app] using label "compound"
20060531T121630.011: [app] using output file "compound.dax"</span>
</pre>

At this point, a file called =compound.dax= should have  been generated. Look inside and see that it is very similar to =biggervdl.dax=, the DAX file from the earlier section.

Now plan and run the workflow:

<pre class="screen">
$ <span class="in">vds-plan --pegasus -g QuarkCode --option pools=local --option output=local --option force compound.dax --base ./dags</span>
[...] <span class="out">
2006.06.11 17:22:28.471 PDT: [INFO] Time taken to execute is 1.091 seconds

I have concretized your abstract workflow. The workflow has been entered
into the workflow database with a state of "planned". The next step is 
to start or execute your workflow. The invocation required is

vds-run  /home/train99/COMPOUNDVDL/dags/QuarkCode/compound/run0002</span>
</pre>

<pre class="screen">
$ <span class="in">vds-run /home/train99/COMPOUNDVDL/dags/QuarkCode/compound/run0002</span>
<span class="out">I have started your workflow, committed it to DAGMan, and updated its
state in the work database. A separate daemon was started to collect
information about the progress of the workflow. The job state will soon
be visible. Your workflow runs in base directory

cd /home/train99/COMPOUNDVDL/dags/QuarkCode/compound/run0002</span>

$ <span class="in">cd /home/train99/COMPOUNDVDL/dags/QuarkCode/compound/run0002</span>
$ <span class="in">$ tail -f tailstatd.log </span>
[...wait...]
<span class="out">20060611T172658.603 [327]: DAGMan finished with exit code 0
20060611T172658.603 [328]: processed chunk of 1095 byte
# updated state in workman
20060611T172658.606 [328]: skipping plots
20060611T172658.606 [328]: finishing, exit with 0
20060611T172658.609 [328]: copied common log to /nfs/home/vdsuser-2/COMPOUNDVDL/dags/QuarkCode/compound/run0002</span>
</pre>

Now look at your plot.

On your local laptop, run:
<pre class="screen">
$ <span class="in">scp train99@gridlab1:/scratch/train99/QuarkCode/vdsuser-2/compound/run0002/train99-plot.png .</span>
$ <span class="in">open train99-plot.png</span>
</pre>


%STOPINCLUDE%

%BOTTOMMATTER%
-- Main.ForrestChristian - 27 Feb 2007