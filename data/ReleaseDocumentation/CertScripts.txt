%META:TOPICINFO{author="JamesBarlow" date="1271175478" format="1.1" reprev="1.17" version="1.17"}%
%META:TOPICPARENT{name="Trash.ReleaseDocumentationDocumentationTable"}%
---+!! *<nop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%

%DOC_STATUS_TABLE%

---++ Introduction
The cert-scripts package ( =$VDT_LOCATION/cert-scripts= or pacman package PPDG-Cert-Scripts) provides several useful scripts for interacting with CA's and the cert-check-time script is helpful in setting up and monitoring the CA certificates and CRL's that get installed in your trusted certificates directory.

---++ Checking CA certificates
There are numerous CA certificates installed with VDT and you may not want to allow all of them on your site.  The =cert-check-time= is a helpful command for reviewing them. This must be run in a directory where you have write access even though it does not create any permanent files.  You may want to redirect  stdout to a file you can then review.

<pre class="screen">
> <b>source $VDT_LOCATION/setup.sh</b>
> <b>cd <em>/writtable/directory</em> </b>
> <b>$VDT_LOCATION/cert-scripts/bin/cert-check-time -cR </b>
</pre>    

For each CA, the output shows ([[CertCheckTimeSampleOutput][sample output]]) :
   * remaining lifetime of the CA certificate,
   * the human readable name of the CA 
   * and the location of the actual certificate file.

In addition, at the bottom of the listing it points out which CA's do not have a CRL. This is useful AFTER the edg-crl-upgraded daemon has run at least once because then it shows those CA's which have not published a certificate revocation list. Note that two of the CAs, Kerberos CAs from PSC (85ca9edc.0) and FNAL (e1fce4e9.0) don't really need CRLs since they only generate short lived certificates.

---++ Checking CRL's
Certificate revocation lists contain the list of certificates (by serial number) that have been issued by a CA but then revoked, meaning you should not accept them. CRL's are updated frequently and typically have a lifetime limited to a month or less.
When a CRL has expired, the CRL file will still exist in the trusted certificates directory, but Globus will fail all authentication attempts for <b>all</b> certificates issued by the corresponding CA.

For this reason, and others, it is important that CRL files are current and not expired. Another variation of the cert-check-time script will list the remaining lifetime of CRL's in the trusted certificates directory. This must be run in a directory where you have write access even though it does not create any files.  You may want to redirect  stdout to a file you can then review.

<pre class="screen">
 > <b>$VDT_LOCATION/cert-scripts/bin/cert-check-time -r </b>
</pre>

For each CRL, the output  ([[SampleCertCheckTimeCRLs][sample output]]) shows:
   * the remaining lifetime,
   * the name of the CA that issued the CRL
   * and the actual CRL file.

Site administrators may find it useful to run this command in a daily cron job following the edg-crl-upgraded daemon as a way to monitor the status of the CRL's.

---++ FAQ
---+++ !!Request a certificate for myself
Use =cert-request -ou p=

---+++ !!Request a certificate for my computer
Use =cert-request -ou s=

---+++ !!Request a certificate for the http service on my computer (if necessary)
Use =cert-request -ou s -service http -host <i>my-computer.some.domain</i> -label <i>http-my-computer</i>=

---+++ !!How do I retrieve a certificate
   1. Check the email notice you got when the certificate was granted for the serial number (<i>0xNNNN</i>)
   1. Use =cert-retrieve -serial <i>0xNNNN</i> [-label <i>label-matching-cert-request</i>]=

Use the =-p12= option to create the PKCS12 format file useful for importing your certificate into a web browser or email program.

---+++ !!How do I get lots of service certificates
   1. Ask your RA to grant you the [[http://www.doegrids.org/Library/gridAdmin/gridAdminUser.html][gridadmin]] privilege.
   2. Use =cert-gridadmin= and you can get service certificates issued immediately  without using the web interface. (Since VDT 1.3.10, cert-scripts V1-7)

---+++ !!My certificate is about to expire, how do I get another with the same DN
   1. Use =cert-renew=

---++Additional Information

For additional information on the functionality of a script execute it with the =-help= option.

---+++ !!MAN pages

   * [[Security.CSReadMe#cert_check_time][cert-check-time]] - checks lifetime of certificates and revocation lists
   * [[Security.CSReadMe#cert_gridadmin][cert-gridadmin]] - immediate issuance of service certificates for authorized requestors
   * [[Security.CSReadMe#cert_lookup][cert-lookup]] - queries directory based on DN of certificates
   * [[Security.CSReadMe#cert_request][cert-request]] - generates and submits a certificate signing request
   * [[Security.CSReadMe#cert_retrieve][cert-retrieve]] - retrieves signed certificate previously requested
   * [[Security.CSReadMe#cert_renew][cert-renew]] - renews existing person certificate (not host or service)
   * [[Security.CSReadMe#multi_cert_gridadmin][multi-cert-gridadmin]] - handle many service certificate requests at once; generate CSRs, submit to Grid Admin interface, etc.

%STOPINCLUDE%
%BR%
%COMPLETE3% %BR%
%RESPONSIBLE% Main.DougOlson - 25 Oct 2007 %BR%
%REVIEW% Main.RobertEngel  - 21 Jul 2009  %BR%
%REVFLAG%  %S% %BR%

<!-- CONTENT MANAGEMENT PROJECT

   DEAR DOCUMENT OWNER
   ===================

   Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER          = JamesBarlow

   Please define the document area, choose one of the defined areas from the next line
   DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = Security

   define the primary role the document serves, choose one of the defined roles from the next line
   DOC_ROLE = (Scientist|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

   Please define the document type, choose one of the defined types from the next line
   DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Knowledge

   Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

   Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

   change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

   change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

   change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


   DEAR DOCUMENT REVIEWER
   ======================

   Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = MineAltunay

   Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %NO%


   DEAR DOCUMENT TESTER
   ====================

   Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = AnandPadmanabhan

   Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%

-->

%META:TOPICMOVED{by="ForrestChristian" date="1166045343" from="Integration.CertScripts050" to="Integration/ITB_0_5.CertScripts"}%
