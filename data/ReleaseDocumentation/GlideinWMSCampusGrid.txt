%META:TOPICINFO{author="DerekWeitzel" date="1307656388" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="GlideinWMSFrontendInstall"}%
---+!! *GlideinWMS in a Campus Grid*
%DOC_STATUS_TABLE%
%TOC{depth="2"}%

---++ Introduction
This document will describe how to configure a !GlideinWMS frontend to run in a Campus Grid.  The !GlideinWMS Frontend install document can be found [[ReleaseDocumentation.GlideinWMSFrontendInstall][here]].


---++ Required Software
   1. [[GlideinWMSFrontendInstall][GlideinWMS Frontend]]


---++ !GlideinWMS Frontend - Security Configuration
The configuration of the !GlideinWMS Frontend must allow other hosts to communicate with the frontend.  By default, the !GlideinWMS Frontend has very strong security, requiring GSI certs to communicate.  In this example, a campus factory or condor cluster us running at condor.unl.edu.  

---+++ !GlideinWMS Frontend - Enabling alternative authentication methods
It is necessary to enable authentication methods that are acceptable to the campus.  CLAIMTOBE is recommended in the [[CampusFactoryInstall][Campus Factory Install]] guide, and will be used to implement host (ip address) based security in this document.  

First enable the CLAIMTOBE method.  Copy and paste the below into a condor configuration file.  It will append the existing authentication methods to include CLAIMTOBE.  
<pre class="file">
SEC_DEFAULT_AUTHENTICATION_METHODS = $(SEC_DEFAULT_AUTHENTICATION_METHODS), CLAIMTOBE
</pre>

---+++ !GlideinWMS Frontend - Modify the =condor_mapfile=
The =condor_mapfile= is used by Condor to map a authenticated user to a human readable identity to be used in authentication rules.  It is important to note that the =condor_mapfile= uses regular expressions to map from authentication methods to users.  This is why there are many escapes (=\=) in the below example.

<pre class="file">
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/hcc\-grid\.unl\.edu$" dweitzel
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/cpass\.unl\.edu$" dweitzel
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/(.*)\.unl\.edu$" \1@daemon.unl.edu
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/(.*)\.rcac\.purdue\.edu$" \1@daemon.purdue.edu
GSI (.*) anonymous
CLAIMTOBE .* anonymous@claimtobe
CLAIMTOBE .*@condor.unl.edu campus@unl.edu
FS (.*) \1
</pre>

The lines that start with GSI should already exist (though, not for these example values) from the !GlideinWMS Frontend install.  The important line, that most hosts attempting to authenticate will use, is 
<pre class="file">
CLAIMTOBE .*@condor.unl.edu campus@unl.edu</pre>  

This means that the machine =condor.unl.edu= will be mapped to user =campus@unl.edu= (The user does not have to exist on the machine).  This means that all authorization rules will use =campus@unl.edu= to refer to this host.  A line must be added for each host that will be allowed to run on the GlideinWMS resources.

---+++ !GlideinWMS Frontend - Authorizing hosts
Below is an example security configuration file from the HCC !GlideinWMS Frontend.

<pre class="file">
DENY_WRITE = anonymous@* 
ALLOW_WRITE = *@unl.edu *@glidein.unl.edu execute-side@matchsession *@daemon.unl.edu *@daemon.purdue.edu
DENY_ADVERTISE_SCHEDD = anonymous@*
DENY_ADMINISTRATOR = anonymous@*
DENY_DAEMON = anonymous@glidein.unl.edu 
ALLOW_DAEMON = *@unl.edu *@glidein.unl.edu  execute-side@matchsession *@daemon.unl.edu *@daemon.purdue.edu 
DENY_NEGOTIATOR = anonymous@glidein.unl.edu 
ALLOW_NEGOTIATOR = */*.unl.edu *@daemon.purdue.edu </pre>

Breaking down the file some:
<pre class="file">
DENY_WRITE = anonymous@* 
ALLOW_WRITE = *@unl.edu *@glidein.unl.edu execute-side@matchsession *@daemon.unl.edu *@daemon.purdue.edu */condor.univ.edu</pre>
First, the most generic entries.  These lines cause any anonymous users (such as non-explicit allowed GSI users and claimtobe hosts) free reign to write to the Condor instance.
---

<pre class="file">
DENY_ADVERTISE_SCHEDD = anonymous@*
DENY_ADMINISTRATOR = anonymous@*
DENY_DAEMON = anonymous@glidein.unl.edu  </pre>
Explicitly deny access to functions as a non-explicitly trusted user/host.
---

<pre class="file">
ALLOW_DAEMON = *@unl.edu *@glidein.unl.edu  execute-side@matchsession *@daemon.unl.edu *@daemon.purdue.edu</pre>
Allow many daemons.  Including all those using GSI authentication, the campus infrastructure (=*@unl.edu=), plus those that are matched our jobs (=execute-side@matchsession=).
---

<pre class="file">
DENY_NEGOTIATOR = anonymous@glidein.unl.edu 
ALLOW_NEGOTIATOR = */*.unl.edu *@daemon.purdue.edu </pre>
Only allow Negotiators that we know about.


---++ Configuration on the Campus Factory or existing Condor Cluster

---
---++ *Comments*
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = DerekWeitzel

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = User

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = MarcoMambelli 	
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = MarcoMambelli 	
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
-->
