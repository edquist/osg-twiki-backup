%META:TOPICINFO{author="SuchandraThapa" date="1275675714" format="1.1" version="1.50"}%
---+!! *<noop>%SPACEOUT{ "%TOPIC%" }%*
%DOC_STATUS_TABLE%
%TOC{depth="2"}%

---++ Introduction

This guide covers the installation of the OSG client.  The OSG Client contains the software necessary to submit jobs and transfer data on the Open Science Grid.  The client software includes:
   * Globus toolkit for authorization, file transfer, and small-scale job submission.
   * CA certificates and CRLs (part of the grid authentication and authorization system).
   * Condor for job submission and workflow management.
   * SRM protocol client tools for file transfer and data management.
This page does not cover the usage of this software; it does cover installation, configuration, and minimal validation.

---+++ Applicable Versions
This guide covers the installation of OSG-Client for *OSG-%OSG_VERSION%*.

---+++ Engineering Considerations.
A heavily used (more than 2000 sustained running jobs) OSG client can use quite a few resources and may need its own node.

In order to set up any persistent service - certificate updates, CRL updates, or starting Condor at boot time - you will need to install the client as root.  If you install as root you must install in a directory accessible for all users; if root installs into a directory that is not world-readable, the install process will fail.

Normally the installation chooses the right packages for your platform. If you have a mixed cluster and desire a single OSG-Client installation to share with hosts with 32 bit OS and hosts with 64 bit OS you may want to force the installation of the 32 bit version also if you are performing it on a 64 bit machine. Expand the section below if you are interested.
%TWISTY{
mode="div"
showlink="Show how to install the 32 bit version on a 64 bit OS"
hidelink="Hide the instructions"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
Some software in OSG-Client is architecture dependent (compiled binaries, libraries including python compiled libraries -like LFC-, ...).
The simplest way to have a general installation is to install all 32 bit.
Follow these step to change the installation procedure described in the page:
   * You need to install 32bit compatibility libraries for your OS.
   * During each Pacman installation add the option =-pretend-arch i686= (e.g. =pacman -pretend-arch i686 -get http://software.grid.iu.edu/osg-1.2:client= ). Pacman is actually caching this setting, so it is important you use =-pretend-arch i686= the first time you install something in that directory (Pacman cache). [[http://vdt.cs.wisc.edu/releases/2.0.0/installation_advanced.html#pretend_32][Here]] is VDT documentation about -pretend-arch i686.
   * NOTE: the environment variable: export VDT_PRETEND_32=1 (that was set before the VDT installation) is not working anymore.
   * If you need Python 32 bit you can install on your own or use: =pacman -get http://www.mwt2.org/caches/:Python32bit=. The Python delivered is Python 2.4 (C API 1012 required by _lfc.so) and it is compiled on a SL4.7. The Pacman installation can be in its own directory or on top of OSG-Client (recommended if you installed it 32 bit and you will need Python 32 bit only for it). If you wonder no -pretend-arch i686 is needed because this package is only 32 bit, anyway it is fine if you added the option.
%ENDTWISTY%

---+++ Help!
If a problem occurs during installation, [[InstallHelpProcedure][please use this page]] to get assistance.

---++ Checklist
   1 *WARNING* If you already have an OSG-Client installed, its presence (in the installation directory or in the environment) might corrupt this installation attempt.  Verify that you are installing into an empty directory and the $VDT_LOCATION environment variable isn't already set; you may have to log in to a fresh shell or remove something from your shell's profile. 
      * If $VDT_LOCATION is already set, you may receive indecipherable errors while attempting this install.  You may get no errors at all, but end up with an unusable software stack.
      * It is OK to have other installation of OSG-Client on your disks but should be in different directories and the setup file should not have been sourced.
   1 This process assumes that you have already [[Documentation/CertificateGet][obtained a grid certificate]] from an OSG-recognized Certificate Authority and joined an OSG Virtual Organization. If you have not, you will not be able to easily test the resulting install.
   1 See the [[http://vdt.cs.wisc.edu/releases/2.0.0/requirements.html][supported operating systems]] for system requirements.  
      * If you do a non-root install, make sure that you own your =$HOME/.globus= directory and its permissions are 755.  
   1 Have the pacman software installed and set up in your environment.  Refer to [[PacmanInstall][Pacman install]] for installation and consult [[PacmanBestPractices][the Pacman Best practices]] if you have trouble. Pacman %PACMAN_VERSION% is required. Installation is likely to fail with earlier versions.

---++ Installation Procedure
Create a directory for the client and =cd= to it, such as:

<pre class="screen">
mkdir osg-client
cd osg-client/
</pre>
From now on, we will refer to this directory as $VDT_LOCATION.  Next, run the installation command.

<pre class="screen">
pacman -get http://software.grid.iu.edu/osg-1.2:client
</pre>

You will need to answer "y" to the question in order to trust the software cache and continue the install.

%TWISTY{
mode="div"
showlink="Show screen output..."
hidelink="Hide screen output"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
You will see screen output like this:

<pre>
Do you want to add [http://software.grid.iu.edu/osg-1.2] to [trusted.caches]? (y/n/yall): <userinput> yall</userinput>

Beginning VDT prerequisite checking script vdt-common/vdt-prereq-check...       

All prerequisite checks are satisfied.

========== IMPORTANT ==========
Most of the software installed by the VDT *will not work* until you install
certificates.  To complete your CA certificate installation, see the notes
in the post-install/README file.

The VDT version 2.0.0 has been installed.
                                         
The OSG Client package OSG version 1.2 has been installed.
>ls
ant           gpt           osg                      srm-client-lbnl      berkeley-db   jdk1.5        owamp                    trusted.caches
bwctl         lcg           pacman-platform-mapping  vdt       cert-scripts  licenses      pegasus                  vdt-app-data
condor        logrotate     perl                     vdt-install.log  curl          logs          post-install             voms
expat         ndt           pyglobus-url-copy        wget           fetch-crl     npad          setup.csh
glite         o..pacman..o  setup.sh        globus        openldap      srm-client-fermi
</pre>
%ENDTWISTY%
<br/>
If the installation appears to be successful, run the =setup.sh= and the =vdt-post-install= commands.
<pre class="screen">
source setup.sh
vdt-post-install
</pre>

<br/>

---+++ CA Certificate Configuration
Some last steps have to be performed to configure the CA certificates.

Run the =vdt-ca-manage= command.  To do this, you need to make two decisions.
Should certificates be installed to:
   * *root*: (Can only be done as root user) Install certificates system-wide into /etc/grid-security/certificates
   * *local*: Install certificates only into the local install directory
What set of CA certificates should be used?
   * *osg*: The IGTF-accredited CAs plus additional non-accredited CAs that OSG VOs may use
   * *vdt*: The IGTF-accredited CAs only.
A common usage case is given below, where the OSG certificates are place in the local installation:
<pre class="screen">
source $VDT_LOCATION/setup.sh 
vdt-ca-manage setupca --location local --url osg
</pre>

You have now configured and installed the client.

---+++  Firewall Considerations
Some Grid job initiation and management operations require call backs to the client machine, accordingly *any* firewall on the host (or an external firewall affecting the host) can possibly break an installation.  *If you have a firewall, read this section*; otherwise, ignore it.

   * If your client host is behind a firewall and not registered in DNS, assign your client's ip-address to the =GLOBUS_HOSTNAME= variable: 
      * <pre class="screen">  export GLOBUS_HOSTNAME=<i>your-ip-address</i> </pre>
   * If your client is behind a firewall blocking ephemeral ports, an ephemeral port range should be set aside for use and opened for incoming connections.  Opening the port range may depend on your firewall implementation. If you are doing a personal non-root installation, check with your administrator to determine which ports are open for you to use.  Then, identifying the port range in the client tools is done in two places (numbers shown here are just examples):
      * Specify the GLOBUS_TCP_PORT_RANGE and GLOBUS_TCP_SOURCE_RANGE  variables (to set the inbound and outbound available port ranges, see ComputeElementFirewalls for more information) in the $VDT_LOCATION/setup.sh (and setup.csh) script: <pre class="screen">
GLOBUS_TCP_PORT_RANGE=20000,22000
export GLOBUS_TCP_PORT_RANGE
GLOBUS_TCP_SOURCE_RANGE=23000,25000 
export GLOBUS_TCP_SOURCE_RANGE
</pre>
      * Specify range in for use by Condor-g in the $CONDOR_CONFIG file ( *Note:* condor must be restarted):  <pre class="screen">
HIGHPORT = 22000 
LOWPORT  = 20000
</pre>

Note that in OSG 1.2 port ranges go also to $OSG_LOCATION/vdt/etc/vdt-local-setup.sh                                                                                                
and not just $OSG_LOCATION/setup.sh                                                                                                                                       

---+++ Simple test of the installation
Now that the OSG Client has been installed, you will have to configure it with your grid user certificate in order to start submitting jobs.  Log in as a normal user, setup your environment and get a proxy certificate:
<pre class="screen">
source <i>$VDT_LOCATION</i>/setup.(c)sh
voms-proxy-init
</pre>
Use *-help* in the proxy-init commands to find out options.  You will be prompted to enter your certificate password.

To make sure your proxy is working, pick a known node and run =globusrun=. The node shown is just an example:
<pre class="screen">
globusrun -a -r cmsosgce3.fnal.gov
</pre>
If successful, this returns:
<pre class="screen">
GRAM Authentication test successful
</pre>

---++ Service Configuration/Startup/Shutdown

This section applies only to clients installed as root.

Even though this is the client package, some services remain, such as:
   * Hourly CRL updates
   * Hourly log rotation
   * Nightly CA updates
   * Condor daemons for workflow management
The tool for starting and stopping the services is =vdt-control=.  To run these services, login as root and source the setup script:
<pre class="screen">
source <i>$VDT_LOCATION</i>/setup.[c]sh
</pre>

You can determine which services are configured by running *vdt-control --list*. (For a more detailed review of turning VDT services on and off, consult [[http://vdt.cs.wisc.edu/releases/2.0.0/man/vdt-control.html][vdt-control]] and OSG StartingServices documentation written for the Compute Element).  You should find the output looks like this:

<pre class="screen">
# vdt-control --list
Service            | Type   | Desired State
-------------------+--------+--------------
fetch-crl          | cron   | enable
vdt-rotate-logs    | cron   | do not enable
vdt-update-certs   | cron   | enable
condor             | init   | enable
globus-ws          | init   | do not enable

</pre>

For Condor-G submissions, fetch-crl, vdt-update-certs, and =condor= are needed. Never run or enable =globus-ws=; it is an legacy artifact of the VDT install process.  Turning on all enabled services is done by, ==vdt-contol --on==.

---++ Testing the Client

A series of validation tests of the client tools can be found in the ValidateClients documentation. These basic tests include querying services, submitting jobs, and transfering files.

---++ Debugging Information

If you encounter any problems, review the *vdt-install.log* file for obvious error messages; you will be asked to send that file to experts as the first step for almost any debugging.

You can view what has been installed by running ==vdt-version==.  The output looks like:
%TWISTY{
mode="div"
showlink="Show output..."
hidelink="Hide output"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
<pre class="screen">
> source <i>your-osg-client-dir</i>/setup.(c)sh
> vdt-version

You have installed a subset of VDT version 2.0.0p5:

Software                                                 Status              
--------                                                 ------              
Bandwidth Test Controller 1.3                            OK                  
vdt-ca-manage 1.0                                        OK                  
vdt-update-certs 2.4                                     OK                  
CA Certificates 1.8 (includes IGTF 1.30 CAs)             -                   
CGSI-gSOAP 1.2.1.2                                       OK                  
Condor/Condor-G 7.2.4                                    OK                  
cURL 7.18.2                                              OK                  
Fetch CRL 2.6.6                                          OK                  
Globus Toolkit, pre web-services, client 4.0.8           OK                  
Globus Toolkit, web-services, client 4.0.8               OK                  
GPT 3.2-4.0.8p1                                          OK                  
GSI-Enabled OpenSSH 4.6                                  OK                  
Java 5 SDK 1.5.0_18                                      OK                  
lcg-info 1.11.4-1                                        OK                  
lcg-infosites 2.6-2                                      OK                  
LCG-Utils 1.6.11-1p1 (includes GFAL 1.10.11-1) 1.6.11-1p1 OK                  
LCG File Catalog Client 1.6.11.4                         OK                  
Logrotate 3.7                                            OK                  
MyProxy Client 4.7                                       OK                  
NDT 3.5.0                                                OK                  
Network Path and Application Diagnosis Client 1.5.5      OK                  
One-Way Active Measurement Protocol (One-Way Ping) 3.1   OK                  
Pegasus 2.3.0                                            OK                  
PPDG Cert Scripts 2.7                                    OK                  
pyGlobus gt4.0.1-1.13                                    OK                  
PyGlobus URL Copy 1.1.2.11                               OK                  
SRM Fermi Client 1.9.2-4                                 OK                  
SRM Berkeley Client 2.2.1.2.i7.p1                        OK                  
UberFTP 2.4                                              OK                  
VOMS Client 1.8.8-2p1                                    OK                  
Wget 1.11.4                                              OK                  


Status legend:
OK: Software is up to date with the latest release in VDT version 2.0.0
- : Not enough information to determine if updates are available.
See man page for more information.
</pre>
%ENDTWISTY%

---++ Updating the Client
*WARNING*: These instructions refer *ONLY TO THE UPDATE OF THE CLIENT*.  Do not use them for other packages like CE and SE.

*NOTE*: Client installation and configuration is relatively straightforward; it may be easier and faster to remove your old install and do a fresh installation: 

To update OSG Client you must first update the VDT packages with the VDT updater, then you can use Pacman for the rest:
   * Turn off the services (in clients they are normally already off). You have to be root to use =vdt-control=; if this is a personal installation ignore the vdt-control statements <pre class="screen">cd $VDT_LOCATION                                                                                                                                           
source setup.sh
vdt-control --off
</pre>
   * Get the latest updater:<pre class="screen">
pacman -update VDT-Updater
</pre> 
   * NOTE: if you don't have the VDT-Updater, run the following command to get it:<pre class="screen">pacman -get http://vdt.cs.wisc.edu/vdt_200_cache:VDT-Updater
</pre>
   * Run the updater: <pre class="screen">vdt/update/vdt-updater      --skip-backup-check
</pre>
      * Answer yes when asked to accept the updates
      * Answer no if asked to modify the certificate management
   * Update the rest (OSG-Client):<pre class="screen">pacman -update 
</pre>
   * Finish the update: <pre class="screen">vdt-post-install   # probably it will tell you that nothing needs to be fixed
vdt-control --on  #  (if desired to restart cron jobs) probably this is not necessary
</pre>



%BR%
<!--
%COMPLETE3% %BR%
%RESPONSIBLE% Main.MarcoMambelli - 13 Jul 2009 %BR%
%REVIEW% Main.RobertEngel - 21 Jul 2009 %BR%
%REVFLAG% %X%  %BR%
-->

---++ *Comments*
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
   DEAR DOCUMENT OWNER
   ===================

   Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER          = MarcoMambelli

   Please define the document area, choose one of the defined areas from the next line
   DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = User

   define the primary role the document serves, choose one of the defined roles from the next line
   DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager|Documenter)
   * Local DOC_ROLE       = SysAdmin

   Please define the document type, choose one of the defined types from the next line
   DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Installation
   
   Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

   Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %NO%

   change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

   change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

   change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


   DEAR DOCUMENT REVIEWER
   ======================

   Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = RobertEngel
  
   Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


   DEAR DOCUMENT TESTER
   ====================

   Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = 
  
   Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
-->

%META:TOPICMOVED{by="ForrestChristian" date="1166046231" from="Integration.ClientInstallationGuide050" to="Integration/ITB_0_5.ClientInstallationGuide"}%
