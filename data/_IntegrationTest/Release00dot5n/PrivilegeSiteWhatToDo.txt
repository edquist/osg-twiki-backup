%META:TOPICINFO{author="MarkusLorch" date="1115032122" format="1.0" version="1.21"}%
%META:TOPICPARENT{name="SiteAdmins"}%
<!-- This is the default OSG Integration template. 
Please modify it in the sections indicated to create your topic!
If you have any comments/complaints about this template, then please email me:
rwg@hep.uchicago.edu.  (Adapted from Atlas wiki template, Ed Moyse)
--> 

<!-- By default the title is the WikiWord used to create this topic !-->
<!-- if you want to modify it to something more meaningful, just replace %TOPIC% below with i.e "My Topic"!-->

---+!!<nop>%TOPIC%
%TOC%
%STARTINCLUDE%



---++Figure out what to do

The flowchart below will help you decide what kind of configuration you should setup.


Definitions:
	* Role based authorization: a user can get a different extended proxy from the VO VOMS server. This says, for example, that in a moment he is acting as a member of the analysis group, and the other is acting as a production coordinator. Role based authorization will allow you to map the user to a different account depending on the role.
	* Account pools (as implemented by GUMS): GUMS will assign to each DN one account. That DN, and no other, will be mapped to the same account from then on.  Accounts won't be created or recycled by GUMS. You can choose to have one or more pools (for example, a pool for VO, a pool for group in VO, a pool for role in a VO, a pool for groups accross VO, etc...)
	* Central management: being able to control all gatekeepers access from a single file, and not having to look/change configuration on each gatekeeper.

<verbatim>
				 |
				 |
  --------------------------						----------------------
  | Is your site going to  |		  YES!		| Refer to			  |
  | support role based	  |----------------->| Full privilege	  |
  | authorization?			|						| site configuration |
  --------------------------						----------------------
				 |														 
			 NO |
				 |
  ------------------------------					--------------------------
  | Do you want to use account |	  YES!		| Refer to compatibility |
  | pools at your site?		  |-------------->| site configuration	  |
  ------------------------------					--------------------------
				 |														 
			 NO |
				 |
  ------------------------------					------------------------
  | Would you like to manage	|	  YES!		| Refer to				 |
  | all your mapping from a	 |-------------->| compatibility		  |
  | single point?				  |					| site configuration	|
  ------------------------------					------------------------
				 |
			 NO |
				 |
  ----------------------- 
  | Refer to				|
  | Ye olde grid3		 |
  | site configuration  |
  -----------------------
</verbatim>

---+++ Full privilege site configuration
In this configuration, you will have:
	* One GUMS server per local account domain to manage the mapping from Grid identity (DN+attributes) to local username.  A local account domain is similar to an YP domain.
	* Your gatekeeper(s) and gridftp server(s) configured with the PRIMA module to connect to the GUMS server for each gatekeeper request.
	* gums-host running via cron to generate the inverse map for gatekeeper and gridftp accounting.
So you need to:
	* Install one GUMS at your site for the grid account domain (e.g. YP domain)
	* Configure it (if the default OSG policy is not good enough for you)
	* Configure the PRIMA module on your gatekeeper(s)
	* Install and configure gums-host on your gatekeeper(s)

---+++ Compatibility site configuration
You do not _require_ the full privilege site configuration, but it's advisable. You will not be able to provide role based authorization in this configuration. Also, you will introduce delays since each gatekeeper will have to regenerate the map before implementing the new policy or allowing new users. You should fall back to this configuration if:
	* Your gatekeeper(s) or service must be configured through grid-mapfile (i.e. you have tools or services that manipolate that file directly, without passing through globus)
	* The idea of running GUMS 24/7 scares the hell out of you, and you'd rather approach with caution.
In this configuration, you will have:
	* One GUMS server per local account domain to manage the mapping from Grid identity (DN+attributes) to local username
	* gums-host running via cron on your gatekeeper(s) to retrieve both the forward and inverse maps
So you need to:
	* Install GUMS at your site
	* Configure it (if the default OSG policy is not good enough for you)
	* Install and configure gums-host on your gatekeeper(s)

---+++ "Ye olde grid3" site configuration
You do not _require_ "full privilege" or "compatibility", but you still can use them if you want. You'll probably prefer this configuration if:
	* You are a small site (one gatekeeper)
In this configuration, you will have:
	* The EDG mkgridmap daemon running on your gatekeeper to create the grid-mapfile

---++Do it!


---+++ Full Privilege or Compatability Mode

The services are the same, just differences in the configurations.

---++++ GUMS service

  The GumsAdmins topic covers the installation and basic configuration of the GUMS service.

---++++ Configure the PRIMA module
PRIMA comes with your VDT installation, you will just need to change a couple of configuration files. When gatekeeper and gridFTP server components of the VDT distribution are installed on a machine the standard grid-mapfile mechanism is used authorize users. The PRIMA module and its required components are installed in $VDT_LOCATION/prima but not activated. 

<b>Before you go ahead with the PRIMA module configuration/activation please make sure that your gatekeeper is working properly. Have a simple /etc/grid-security/grid-mapfile in place and see if you can submit a job. It this works successfully then you are ready to configure your gatekeeper to use the the PRIMA module.</b>

The first step to activate the use of the PRIMA authorization module is to instruct the grid security infrastructure that the authorization call-out interface is to be used for mapping Grid certificate subjects to local user accounts instead of the standard gridmap-file mechanism. For this the file "gsi-authz.conf" must be copied from $VDT_LOCATION/post-install to /etc/grid-security. The file contains a single-line entry like the following (the path varies and is already set to the correct value by the VDT installation scripts):

<code>globus_mapping /opt/vdt/prima/lib/libprima_authz_module_gcc32dbg globus_gridmap_callout</code>

This tells the Globus infrastructure to replace the traditional lookup in the Globus grid-map file (globus_mapping) with a query to the PRIMA dynamic library module. The two services for which this usually applies are the Globus gatekeeper and the Globus gsiFTP server. 

Note: All VDT versions after 1.3.1 include the appropriate LD_LIBRARY_PATH assignment for the prima libararies in the standard setup script. Thus a manual change to the VDT startup scripts for the gatekeeper and gsiFTP server is no longer required (was part of older instructions).

<b>The second step is to configure the module itself. For this the configuration file /etc/grid-security/prima-authz.conf must be provided. A pre-configured sample is available in the $VDT_LOCATION/post-install directory. The sample includes all necessary parameters with descriptions and is already customized for the local VDT installation. The one parameter that needs to be provided is the service URL of the identity mapping service (the other values should be checked as well).</b>

A sample GUMS service against which one can test the PRIMA module is configured via the following imsContact line: 
<pre>
imsContact https://atlasgrid13.usatlas.bnl.gov:8843/gums/services/GUMSAuthorizationServicePort
</pre>

For most installations that should do it. To test your PRIMA setup please submit a simple job (like /usr/bin/id) to the gatekeeper. You should be authorized. A common error that you may receive if something went wrong is:
<pre>
[mlorch@gyoza7 mlorch]$ globus-job-run gyoza7 /usr/bin/id
GRAM Job submission failed because authentication with the remote server failed (error code 7)
</pre>
This error doesn't give you any detailed info on the cause of the problem. It may be as simple as you not being authorized by your GUMS server to access this host, or PRIMA may not be able to reach your GUMS server. In both cases you need to check your vdt/globus/var/globus-gatekeeper.log for more information. The higher the error number the farther the gatekeeper got in processing your request, for example an error code of 47 happens if you were authorized correctly but the username returned by the GUMS server doesn't exists on the local machine.

<p>
Below is a more detailed description of the configuration options. The most interesting option to play with may be the logging level:

If the file's name or location differs from /etc/grid-security/prima-authz.conf then the environment variable PRIMA_AUTHZ_CONFIG must be set (for the gatekeeper environment, i.e. in the vdt-run-* script of the gatekeeper and gsiftp server) and point to the configuration file.

The contents of this configuration file are always type-value pairs, separated by one or more whitespace characters. Comments are marked with a hash-sign. Here a description of the supported parameters, examples can be taken from the example file referenced above. 

The <b>imsContact</b> parameter identifies the identity mapping server. This is either the GUMS Server or our Simple Mapping Service. The Simple Mapping Service returns a mapping based on the gridmap file on the service host.

The <b>issuerCertDir</b> parameter is optional. It identifies a directory that contains identity certificates of attribute certificate issuers (e.g., for voms servers this is typically /etc/grid-security/vomsdir). If a database driven mapping server is used (e.g., GUMS) then it is not necessary to validate the VOMS attribute certificates received from the user in the user's proxy and thus the issuerCertDir must not be present. 

The <b>verifyAC</b> parameter (optional, default is "true") specifies if the PRIMA authorization module should attempt to verify the digital signature on the received attribute certificates. If set to true then all attibute certificates that cannot be verified (if the issuer's certificate was neither present in the security context, nor in the issuerCertDir directory) will be ignored. If set to false all attribute certificates will be processed and the extracted (VOMS FQAN-)attributes made available to the Identity Mapping Service.

The <b>serviceCert, serviceKey, caCertDir</b> parameters specify the X.509 certificate, the private key, and the trusted CA certificates to be used by this module when authenticating with the Identity Mapping Service. The caCertDir will also be used when validating the identity certificates of Attribute Certificate issuers. 

The <b>logLevel</b> parameter (optional, default is logLevel "info") allows extensive logging to be turned on. Available levels are:<br>
- debug (lots and lots of information for programmers)<br>
- info (only a single message will be put out indicating the involvement of the module in the authorization process, the mapping service used, and the outcome 
error (only error messages will be provided)
- none (no messages will be logged)<br>
The PRIMA authorization module log messages include the process ID and are logged to the gatekeeper's logfile ($VDT_LOCATION/globus/var/globus-gatekeeper.log) via stderr. 

The <b>samlSchemaDir</b> parameter must point to the location of the SAML/XML schema files. The standard location is $VDT_LOCATION/prima/etc/opensaml 

A more elaborate documentation on how to activate the PRIMA Authorization module in VDT to query a GUMS Identity Mapping Service at: https://plone3.fnal.gov/opensciencegrid/techgroups/tg-policy/vo-privilege: Title: "Activating the PRIMA Authorization Module in VDT 1.3.1". 

Also on this site is a document with the URLs of two test GUMS Servers that may be used for evaluation: Title: "GUMS Mapping Servers for ITB 0.1.0". 

---++++ Configure gums-host

The GUMS-Client package (from the VDT) is installed as part of the OSG ITB Core install.  Files are located in the $VDT_LOCATION/gums directory.

You need to set up _gums-client.properties_ to point to the appropriate GUMS server

<verbatim>
# cd $VDT_LOCATION/gums/etc
# cat ../etc/gums-client.properties
gums.location=https://localhost:8443/gums/services/GUMSAdmin
gums.authz=https://localhost:8443/gums/services/GUMSAuthorizationServicePort
</verbatim>

The _localhost_ in this example should be the name of the GUMS Service host.

The gums command in _$VDT_LOCATION/bin_ can be used to test the GUMS service connection.

<verbatim>
# ./gums
usage: gums command [command-options]
Commands:
  generateGrid3UserVoMap - Generate grid3-user-vo-map.txt for a given host.
  generateGridMapfile - Generate grid-mapfile for a given host.
  manualGroup-add - Includes a DN in a group.
  manualGroup-remove - Removes a DN from a group.
  manualMapping-add - Adds a DN-to-username in a mapping.
  manualMapping-remove - Removes a DN from a mapping.
  mapUser - Local credential used for a particular user.
  mapfileCache-refresh - Regerates mapfiles in the cache.
  updateGroups - Contact VO servers and retrieve user lists.
For help on any command:
  gums command --help
</verbatim>

Test the service by generating a mapfile at the command line

<verbatim>
# ./gums generateGridMapfile 
</verbatim>

Once tested, set up a cron job to generate the maps every six hours:
<verbatim>
# ln -s $VDT_LOCATION/gums/bin/gums-host-cron /etc/cron.hourly/gums-host-cron
</verbatim>

For more information about the GUMS Client, look towards the end of:
http://grid.racf.bnl.gov/GUMS/guide_howto_installation.html

---+++ "Ye olde grid3 mode"
Each of the Virtual Organizations (VOs) maintains a secure membership
service which may be queried with the utility
<b>$VDT_LOCATION/edg/sbin/edg-mkgridmap</b> .
To create a <b>gridmapfile</b> containing an entry for every
member of the VO, first you need to move and start the <b>edg-gridmapfile-upgraded</b> daemon.
<pre># <b>cp $VDT_LOCATION/post-install/edg-gridmapfile-upgraded /etc/init.d/</b>
</pre>
<pre># <b>/etc/init.d/edg-gridmapfile-upgraded start</b>
</pre>

---++++Setup and testing access to VOMS services

  After the installation has finished, email must be sent to the 
  VO administrator to request that your site be given access to the 
  VOMS database. This access depends upon knowledge of the Distinguished 
  Name (DN) of the host and the CA which issued the host certificate.  

 The site should test the <b>$VDT_LOCATION/edg/sbin/edg-mkgridmap</b> script to ensure
there are no connection errors to the VOMS services. This needs to be
executed as root so that the host certificate can be used.
<pre>&gt; <b>cd $VDT_LOCATION/edg/sbin</b>
&gt; <b>./edg-mkgridmap --verbose --output=test.out</b>
</pre>
	
  The most common error is "Internal Server Error" which indicates 
  that access to the VOMS DB has not been completed.

---++++ Setting up edg-mkgridmap for local users

The *edg-mkgridmap* script uses a configuration file to dictate 
  its behavior. This is distributed with the Grid3 parameters
  *$VDT_LOCATION/edg/etc/edg-mkgridmap.conf*.

  The *edg-gridmapfile-upgrade* daemon has a similar configuration
  file *$VDT_LOCATION/edg/etc/edg-gridmapfile-upgrade.conf*.

  One of the parameters specifies a _local_ *grid-mapfile* that
  will be added to the output of the *edg-mkgridmap* command.

There are two steps to make this work:

	* Set the *GRIDMAP_LOCAL_FILE* variable in 
	 *$VDT_LOCATION/edg/etc/edg-gridmapfile-upgrade.conf*:

		==GRIDMAP_LOCAL_FILE=$VDT_LOCATION/edg/etc/grid-mapfile-local==

	* Add a new directive to the end of the *$VDT_LOCATION/edg/etc/edg-mkgridmap.conf*:

  Now local *grid-mapfile* entries to this file will be 
  added every time the script is executed.

<tt><b>gmf_local <i>/usr/local/grid</i>/edg/etc/grid-mapfile-local</b></tt>

---++++ Debugging the VOMS - GUMS - Gatekeeper authentication chain

A page describing the steps to follow in testing and debugging privilege components has been started under the topic GoldenChainDebugging.


---++ Further information
For help in debugging an installation which fails site_verify authentication, see GoldenChainDebugging
Refer to the PrivilegeOSG page for supplemental documentation.

<!-- MAJOR UPDATES
For significant updates to the topic, consider adding your 'signature' (beneath this editing box) !-->

*Major updates*:%BR%
<!--Future editors should add their signatures beneath yours!-->
-- Main.GabrieleCarcassi - 25 Mar 2005
-- Main.DaneSkow - 14 Apr 2005
-- Main.LeighGrund - 20 Apr 2005
-- Main.MarkusLorch - 21 Apr 2005
-- Main.LeighGrund - 25 Apr 2005
-- Main.MarkusLorch - 02 May 2005


%STOPINCLUDE%

