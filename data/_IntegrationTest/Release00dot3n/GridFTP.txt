%META:TOPICINFO{author="KyleGross" date="1225985984" format="1.1" version="1.9"}%
%META:TOPICPARENT{name="OSGServiceOverview"}%
<!-- This is the default OSG Integration template. 
Please modify it in the sections indicated to create your topic!
If you have any comments/complaints about this template, then please email me:
rwg@hep.uchicago.edu.  (Adapted from Atlas wiki template, Ed Moyse)
--> 

<!-- By default the title is the WikiWord used to create this topic !-->
<!-- if you want to modify it to something more meaningful, just replace %TOPIC% below with i.e "My Topic"!-->

---+!!<nop>%TOPIC%
%TOC%
%STARTINCLUDE%


---++Introduction

From the Globus website:

_"GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth wide-area networks. The GridFTP protocol is based on FTP, the highly-popular Internet file transfer protocol. We have selected a set of protocol features and extensions defined already in IETF RFCs and added a few additional features to meet requirements from current data grid projects."_

See also, VDT release notes: http://www.cs.wisc.edu/vdt/releases/1.3.3/release.html.


---++Readiness and Integration Plan

We describe a service readiness and integration plan for Gridftp 3.9.5 and the OSG ITB, following guidelines set forth in NewOSGServices with the nominal target ITB release ItbRel014 and later. Since the service is already developed and "ready", the following focuses on integration aspects.

---+++ Description of Service

Again, quoting from the Globus website,

<verbatim>
Features new in release Globus Toolkit 3.9.5

    * A new, complete reimplementation of the server.
    * Support for striping (using multiple hosts to move a single file).
    * This new implementation will greatly ease new feature additions and modifications of the server (new commands, new data sources such as mass storage devices, etc.), maintainability, and resolves a licensing issue that was discovered.

Features that continue to be supported from previous versions

    * GSI security: This is PKI based defacto standard security system used in Grid applications. Kerberos is also possible, but not supported and can be difficult due to divergence in the capabilities of GSI and Kerberos.
    * Third-party transfers: Very common in Grid applications, this is where a client mediates a transfer between two servers (both likely at remote sites) rather than between the server and itself (called a client/server transfer).
    * Partial file access: Regions of a file may be accessed by specifying an offset into the file and the length of the block desired.
    * Reliability/restart: The receiving server periodically (the default is 5 seconds, but this can be changed) sends “restart markers” to the client. This marker is a messages specifying what bytes have been successfully written to the disk. If the transfer fails, the client may restart the transfer, and provide these markers (or an aggregated equivalent marker) and the transfer will pick up where it left off. This can include “holes” in the file.
    * Large file support: All file sizes, lengths, and offsets are 64 bits in length.
    * Data channel reuse: Data channel can be held open and reused if the next transfer has the same source, destination, and credentials. This saves the time of connection establishment, authentication, and delegation. This can be a huge performance difference when moving lots of small files.
    * Integrated instrumentation (Performance Markers)
    * Logging/audit trail (Extensive Logging in the server)
    * Parallel transfers (Multiple TCP streams between a pair of hosts)
    * TCP Buffer size control (Protocol supports Manual and Automatic; Only Manual Implemented)
    * Server-side computation (Extended Retrieve (ERET) / Extended Store (ESTO) commands)
    * Based on Standards: RFC 959, RFC 2228, RFC 2389, IETF Draft MLST-16 , GGF GFD.020

Other Supported Features

    * On the client side, we provide a scriptable client side tool called globus-url-copy. This tool can take advantage of all the GridFTP protocol features and can also do protocol translation between FTP, HTTP, HTTPS, and posix file IO on the client machine.
    * We also provide a set of development libraries and APIs for developers wishing to add GridFTP functionality to their application.

Deprecated Features

    * None

</verbatim>


---+++ Dependencies and interactions with other services

The GridFTP logs are monitored by MIS-CI and MonALISA VirtualOrganizations/VOInfo-IO software. 
The Logfile Location needs to be defined 
and the log format needs to be verified against the current code which parses the log file.
Log files *are* different, but since this is a test, we can probably deal with the monitoring changes later.
Existing GSI installs will work.  Since it is statically linked versions of installed dynamic
libraries should not be an issue.  

---+++ Resources required 

Server installation is all that should be required.  Most existing clients will still work.  Some problems have been reported with !UberFTP and they have been forwarded to the !UberFTP developers.

---+++ Server requirements

Appropriately configured GSI security.  An exisiting GT2 security install will work.

---+++ Packaging

Comes with VDT 1.3.3 and later, via Pacman 3. 

---+++ Installation and Configuration

Installation is provided by VDT. All you need to do is:
<pre>
pacman -get http://www.cs.wisc.edu/vdt/%OSG_ITB_VDT_VERSION%:Globus-New-GridFTP-Server
</pre>

The server will be automatically configured, but on an alternate port from the usual GridFTP server. Instead of 2811 we use 2812. More directions can be found at: http://www.cs.wisc.edu/vdt/releases/%OSG_ITB_VDT_VERSION%/installation_post.html#newgridftp

There is an alternate configuration that sites *might* want to try.  It is a more secure way of running the server.  With the new server, you have the option of running the control channel and the data channel as seperate processes (we use this for striping).  You can run the front end as an unpriveleged user, such as the globus user, and then run the back end as a root/setuid process.  You can also lock down the backend so that it will only accept connections from the host on which the front end is running.  This means that an external user is never connected to a root running process and thus this minimizes the impact of an exploit.  To do this, install everything as you normally would, but you will need to xineted entries and two entries in /etc/services.  An example is shown here assuming the front end is on port 2812, the backend is on port 2912 and the front end is running as the globus user.  Note that it will be necessary to copy the host cert and host key and make them owned by the globus user, with same permissions as the existing cert and key.

<verbatim>
gridftp:/etc/xinetd.d # cat /etc/services | grep gridftp
gridftp2proc    2812/tcp   # Front End as Globus, Backend on 2912 as root
gridftp2proc    2812/udp   # Front End as Globus, Backend on 2912 as root
gridftp_backend 2912/tcp   # Backend (Remote) running as root.
gridftp_backend 2912/udp   # Backend (Remote) running as root.

xinetd entry for the front end:
service gridftp2proc
{
instances               = 250
socket_type             = stream
wait                    = no
user                    = globus
env                     += GLOBUS_LOCATION=/usr/local/GridFTP
env                     += LD_LIBRARY_PATH=/usr/local/GridFTP/lib
env                     += X509_USER_CERT=/home/globus/.globus/hostcert.pem
env                     += X509_USER_KEY=/home/globus/.globus/hostkey.pem
server                  = /usr/local/GridFTP/sbin/globus-gridftp-server
server_args             = -i  -r gridftp.mcs.anl.gov:2912 -d all -l /tmp/log/gridftp -log-filemode 0420 -auth-level 0
log_on_success          += DURATION
log_on_failure          += ATTEMPT, HOST
nice                    = 10
disable                 = no
}
</verbatim>

note that environment variables are set to point it at the copies of the host cert and key.  The -i indicates it will be run from inetd, -r indicates it is a front end (control channel) and the associated back end can be contacted at gridftp.mcs.anl.gov:2912.  The auth-level 0 tells the server to not do a gridmap lookup and not try to setuid.  Note that the front end will NOT be able to log to normal logging  locations (/var/log) since it is not a root running process.

<verbatim>
xinetd entry for the back end (data channel):
service gridftp_backend
{
instances               = 250
socket_type             = stream
wait                    = no
user                    = root
env                     += GLOBUS_LOCATION=/usr/local/GridFTP
env                     += LD_LIBRARY_PATH=/usr/local/GridFTP/lib
server                  = /usr/local/GridFTP/sbin/globus-gridftp-server
server_args             = -i -dn  -allow-from 127.0.0.1,140.221.11.169 -d all -l /var/log/gridftp -log-filemode 0420
log_on_success          += DURATION
log_on_failure          += ATTEMPT, HOST
nice                    = 10
disable                 = no
}
</verbatim>

The -i indicates it runs from inetd, -dn indicates that it is a data node (back end) this tells it to expect an IPC exchange rather than a GridFTP protocol exchange from the connecing process, The allow-from locks down the backend to only accept connections from the local machine.  Note that you need to include 127.0.0.1 if you want to use localhost in the URL. The remaining options are for logging.

---+++ Testing and Validation

Not sure how to do this since it is only a binary...

*IF* it were a full install in the $GLOBUS_LOCATION/test/globus_ftp_client_test directory there would be a file called TESTS.pl that you could run.  It sets up its own environment, all you need to have is a valid proxy.

Provide a test harness -- that is, once installed, how does one understanding everything is working properly? Are all required functionality tests successful?  Describe details of the integration test (what constitutes success?).  Describe the plan.

---+++ Scalability and Metrics

Note that as of GT3.9.5, the server will, by default, send back usage statistics to ANL.  This can be disabled.  You can also define additional targets for sending the stats and OSG could collect VirtualOrganizations/VOInfo wide usage stats.  The receiver for the stats is not included in the toolkit (or VDT), but is available from CVS.

What are the expectations in terms of performance and at what scale and in what metrics for successful integration?


---+++ Known Problems and Pending Issues
   * [[http://bugzilla.globus.org/globus/buglist.cgi?bug_status=UNCONFIRMED&bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED&field0-0-0=product&type0-0-0=substring&value0-0-0=gridftp&field0-0-1=component&type0-0-1=substring&value0-0-1=gridftp&field0-0-2=short_desc&type0-0-2=substring&value0-0-2=gridftp&field0-0-3=status_whiteboard&type0-0-3=substring&value0-0-3=gridftp&field1-0-0=product&type1-0-0=substring&value1-0-0=3.9.5&field1-0-1=component&type1-0-1=substring&value1-0-1=3.9.5&field1-0-2=short_desc&type1-0-2=substring&value1-0-2=3.9.5&field1-0-3=status_whiteboard&type1-0-3=substring&value1-0-3=3.9.5][Globus Bugzilla reports]] 
   * Generally no known pending issues.


---++ Links to Documentation 
   * http://www-unix.globus.org/toolkit/docs/development/3.9.5/data/gridftp/

---++ Links to Test Results
   * [[http://tier2.phys.ufl.edu/itb-site-verify/itb_newgridftp.html][Craig's Tests]]

---++ Contact Information
   * Mike Wilde
   * Bill Allcock

<!-- MAJOR UPDATES
For significant updates to the topic, consider adding your 'signature' (beneath this editing box) !-->

*Major updates*:%BR%
<!--Future editors should add their signatures beneath yours!-->
-- Main.RobGardner - 05 Apr 2005

%STOPINCLUDE%