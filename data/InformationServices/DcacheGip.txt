%META:TOPICINFO{author="BrianBockelman" date="1209565014" format="1.1" version="1.4"}%
%META:TOPICPARENT{name="WebHome"}%
---+ dCache Information Provider

The OSG's dCache Information Provider auto-discovers all the storage-element related information for your dCache install.  Currently, it does not integrate directly with the =configure_gip= script (we're working hard on this, we promise!), so a bit of hand-configuration is required.

The information provider requires access to:
   * The dCache admin interface and
   * The SRM postgres database.

---+ Work for the Site admin to do.

---++ Extra dependency installation

In order to access the SRM postgres database, you must additionally install the postgresql-python RPM on your system.  This is available from the standard SL4 yum repository. 

---++ SE Configuration.

You must be able to log into your SRM postgres database from the CE node.  If you are unable to do this from the command-line using "psql", it's highly unlikely that you'll be able to get this done from the configuration script.

You must also be able to log in to the dCache admin interface via SSH from the CE node.

---++ Configuration (OSG 0.8.0 branch)

As passwords may be required, the GIP configuration for dCache is kept in a separate file, =$VDT_LOCATION/lcg/etc/gip.conf=.  You need to edit the following fields to reflect your site's setup:
   * dCache admin interface (section: [dcache_admin]):
      * hostname= _your dCache admin interface hostname_
      * port= _most likely 22223_
      * password= _your site's password_  If you do put the password in this file, make sure it is not world- or group- readable!
      * username= _most likely admin_
   * SRM database (section: [dcache_config])
      * database= _Postgres DB name; most likely dcache_
      * dbuser= _Postgres DB user; srmdcache_
      * dbpasswd= _defaults is dcache_
      * pghost= _Hostname of your postgres server_
      * pgport= _Your postgres port, 5432_

---++ Configuration (OSG 1.0.0 branch)

Run the =$GIP_LOCATION/conf/configure_gip_dcache= script.  This will run you through the configuration options.

Here's a sample output:

<verbatim>

The GIP can auto-configure dCache SEs by utilizing the admin interface and
the SRM Postgres database.  This allows your site to use the GIP advertising
to its fullest.  

It will also allow you report accurate space usage information to the OSG.

The CE will need access to the following resources:
   * dCache admin interface
   * Postgres server on the SRM node.
You may need to configure your database and/or firewall to allow this.

Would you like to continue (y/n) :
 y

We will now begin the configuration of the dCache admin interface connection.


What is the hostname of your dCache admin interface?
 [dcache-head.unl.edu] 

What port is the admin interface running on?
 [22223] 

What is the admin user name?
 [admin] 

What is the admin password?
 

We will now test the dCache admin interface.


Admin connection succeeded!


We will now begin the configuration of the Postgres DB connection.


What is the hostname of your SRM Postgres DB?
 [srm.unl.edu] 

What DB port should be used?
 [5432] 

What is the SRM database name?
 [dcache] 

What is the SRM database user?
 [srmdcache] 

What is the password for the SRM database?
 

We will now test the Postgres DB connection.


The DB connection succeeded.


Configuration is done.  Would you like to save the results (y/n)?
 y

Configuration saved.  If you would like to alter any choices without 
re-running this configuration script, you may find these answers in:

$VDT_LOCATION/gip/etc/dcache_storage.conf
</verbatim>

---++ Testing

The GIP providers are fairly straightforward to test.  Make sure that $VDT_LOCATION (OSG 0.8.0) or $GIP_LOCATION (for OSG 1.0.0; should be $VDT_LOCATION/gip) is set in your environment and run the following (OSG 0.8.0):

<verbatim>
$VDT_LOCATION/lcg/libexec/services_info_provider.py
$VDT_LOCATION/lcg/libexec/token_info_provider.py
</verbatim>

OSG 1.0.0:

<verbatim>
$GIP_LOCATION/libexec/services_info_provider.py
$GIP_LOCATION/libexec/token_info_provider.py
</verbatim>

Examine the output of the above scripts for correctness; they will fail fairly visibly if you have an incorrect configuration (90% of the problems are an incorrect dCache admin interface login parameters).  In fact, because they can generate so much output, it's often to redirect the stdout and just look at the stderr (add =1> /dev/null= to the end of the command line) for problems.

-- Main.BrianBockelman - 21 Feb 2008