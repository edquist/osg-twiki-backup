%META:TOPICINFO{author="ChrisGreen" date="1196708705" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="WebHome"}%
<!--

   * Set I = !InnoDB
   * Set M = !MyISAM

-->

---+ The case for !InnoDB

---++ Overview

This document attempts to marshal the arguments for making the transition to using %I% as the engine underlying Gratia's !MySQL DBs and address with substantive data where possible possible differences between the two systems, especially in performance.

The major difference between %I% and %M% is that %I% supports transactions and true atomic inserts.

---++ Pertinent characteristics of the current Gratia system.

<ul>
  <li>A single coherent "record" updates several tables not including summary tables.</li>
  <li>Summary tables are updated currently by triggers.</li>
  <li>The per-job usage data are large (~2K per row). This may be cut down by schema updates in the future.</li>
  <li>Current understanding of OSG requirements call for for ~1.5TB of per-job data storage, equating to a year's worth of job-level data</li>
  <li>The collector system is capable of running multiple DB update threads if the underlying DB engine supports it.</li>
</ul>

---++ Limitations of the current Gratia system perceived to be due at least in part to limitations of the %M% engine.

<ul>
  <li>Large job-level queries are slow.</li>
  <li>Data are vulnerable to corruption as a result of connection loss for any reason between collector and DB.</li>
  <li>Long queries (including nightly reporting to WLCG) and backup operations (=mysqlhotcopy=, =mysqldump=) lock out the DB for reads as well as writes, sometimes for hours (production system is regularaly stalled for >1h every night).</li>
  <li>Insert throughput cannot be increased to the DB using multiple update threads unless the underlying DB engine supports transactions.</li>
</ul>




-- Main.ChrisGreen - 03 Dec 2007
