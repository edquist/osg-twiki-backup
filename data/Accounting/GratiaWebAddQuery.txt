%META:TOPICINFO{author="JuanFelipeMosqueraMorales" date="1424452219" format="1.1" reprev="1.7" version="1.7"}%
---+ Guide to create a new Query in Gratia Web 
The Gratia Web queries are defined in !XML files. These files are located at in the =OSG-Measurements-Metrics= project in this path =./src/gratia/config=. If you are working in a machine with a working installation these files will be located in the =site-packages= folder of the python installation in the machine. For example in a SL5 machine with python 2.4 the path would be =/usr/lib/python2.4/site-packages/gratia/config=, or in a SL6 machine with python 2.6 it would be =/usr/lib/python2.6/site-packages/gratia/config=.

%NOTE% After modifying the XML files the server will require a restart to load the changes made to the queries.

The queries are organized in different groups. Each group has a correspondent XML file that defines the queries. These groups and the related XML files are:

   *  =GratiaStatusQueries --&gt; gratia_status_queries.xml=
   *  =GratiaEventsQueries --&gt; gratia_events_queries.xml=
   *  =GratiaDataQueries --&gt; gratia_data_queries.xml=
   *  =GratiaPieQueries --&gt; gratia_pie_queries.xml=
   *  =GratiaGlideinBarQueries --&gt; gratia_glidein_bar_queries.xml=
   *  =GratiaBarQueries --&gt; gratia_bar_queries.xml=
   *  =GratiaRTQueries --&gt; gratia_realtime_queries.xml=
   *  =GratiaTransferQueries --&gt; gratia_transfer_queries.xml=
   *  =GratiaCumulativeQueries --&gt; gratia_cumulative_queries.xml=
   *  =GridScanQueries --&gt; gridscan_queries.xml=
   *  =GIPQueries --&gt; gip_queries.xml=
   *  =RSVQueries --&gt; rsv_queries.xml=
   *  =RSVWLCGQueries --&gt; rsv_wlcg.xml=
   *  =RSVSummaryQueries --&gt; rsv_summary.xml=

This queries groups is defined in =text_queries.xml=, and can be examined on a running server on =http://ip:[port]/gratia/xml=.
<pre class="file">
&lt;graphtool-config&gt;  
  ...
  &lt;class type="XmlGenerator" name="query_xml"&gt;
    &lt;attribute name="timeout"&gt;900&lt;/attribute&gt;
    &lt;queryobj&gt; GratiaStatusQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GratiaEventsQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GratiaDataQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GratiaPieQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GratiaGlideinBarQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GratiaBarQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GratiaRTQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GratiaTransferQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GratiaCumulativeQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GridScanQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; GIPQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; RSVQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; RSVWLCGQueries &lt;/queryobj&gt;
    &lt;queryobj&gt; RSVSummaryQueries &lt;/queryobj&gt;
  &lt;/class&gt;
  ...
&lt;/graphtool-config&gt;  
</pre>

---++ Modifying/adding queries to an existing group

%WARNING% Remember to escape reserved XML characters like ='&gt;'= and ='&lt;'= when modifying XML files.

Most of the queries defined in the different groups extend from queries that are defined in =generic_queries.xml=. To add a new query to a group you must go to the XML where the group is defined, and add a new =&lt;query&gt;= node to the =&lt;class type="SqlQueries" name="GROUP_NAME"&gt;= node.
<pre class="file">
&lt;graphtool-config&gt;
...
&lt;class type="SqlQueries" name="GROUP_NAME"&gt;
    ...

    <b>&lt;query name="NEW_QUERY_NAME"&gt;</b>
    ...
    <b>&lt;/query&gt;</b>
    ...
&lt;/class&gt;
...
&lt;/graphtool-config&gt;
</pre>
%IMPORTANT% The query name will also be the path to access the query in the URL (=http://ip:[port]/gratia/xml/<b>&lt;query_name&gt;</b>=). Do not use spaces or special characters in the query name. Do not use a query name that is already in use by other query.

Query can inherit all of its attributes from another query. To do this you must include the =base= attribute and reference %RED%GroupName%ENDCOLOR%.%BLUE%query_to_extend%ENDCOLOR%.
<pre class="file">
   &lt;query name="NEW_QUERY_NAME" base="%RED%GroupName%ENDCOLOR%.%BLUE%query_to_extend%ENDCOLOR%"&gt;
   ...
   &lt;query name="user_site_quality" base="%RED%GratiaSecureStorageQuery%ENDCOLOR%.%BLUE%user_summary%ENDCOLOR%"&gt;
</pre>
To define the inputs, the SQL, and other query metadata. The =query= node is composed of the following nodes:

---+++ Query =inputs= tag
This nodes defines all the input variables that will be included by default in the query. The =inputs= node is composed of =input= nodes. An input node can be defined using the following attributes. 
   * *name (REQUIRED):* The name of the input parameter. Must not contain spaces nor special characters. Must be unique per each query
   * *type (OPTIONAL):* The type of the input parameter. If not specified will default to string. The accepted values are:
      * *int*
      * *float*
      * *eval:* Will try to evaluate the expression using the python buiultin =eval()= function. Will try to evaluate with the following call =eval(str(%RED%INPUT_PARAMETER%ENDCOLOR%),{'__builtins__':None,'time':time},{})=.
      * *datetime:* Will try to parse the input parameter to a datetime python object. Will accept a timestamp in seconds, a date-time string with the following format ='%Y-%m-%d %H:%M:%S'= or and expression like =time.time()= or =time.time()-2*86400=.
      * *timestamp:* Will try to parse the input parameter to a datetime python object, like the =datetime= type, but will get the timestam of the datetime afterwards.
      * *bool/boolean:* Will accept either =bool= or =boolean= as type, do not use the string ="bool/boolean"=. The only accepted string values are =false= or =true=
   * *kind (OPTIONAL):* The only accepted value is ="sql"=. If it is not specified, the input parameters will be able to be used in any python callback function, but will not be included in the SQL query parameters for the query. If specified with =kind="sql"= it will be available to usage in the SQL query as =:input_parameter_name=.
   * *partial (OPTIONAL):* Only for *datetime* parameters. Only works if there is a numeric parameter named =span=. Values accepted are:
      * *down:* If =span= is exactly =3600= will set the datetime object minutes and seconds to 0:0. If  =span= is bigger than =3600= will set the datetime object hours, minutes and seconds to 0:0:0.
      * *up:* If =span= is exactly =3600= will set the datetime object minutes and seconds to 59:59. If  =span= is bigger than =3600= will set the datetime object hours, minutes and seconds to 23:59:59.
---++++ Example:
%TWISTY{%TWISTY_OPTS_OUTPUT% showlink="Show Inputs Example" hidelink="Hide Inputs example"}%
<pre class="file">
&lt;query name="site_summary"&gt;
      <b>&lt;inputs&gt;
        &lt;input name="span" type="int" kind="sql"&gt;3600&lt;/input&gt;
        &lt;input name="starttime" partial="down" type="datetime" kind="sql"&gt;time.time()-13*86400&lt;/input&gt;
        &lt;input name="endtime" partial="up" type="datetime" kind="sql"&gt;time.time()&lt;/input&gt;
        &lt;input name="facility" kind="sql"&gt; Unknown &lt;/input&gt;
        &lt;input name="vo" kind="sql"&gt; .* &lt;/input&gt;
        &lt;input name="exclude-vo" kind="sql"&gt; other &lt;/input&gt;
        &lt;input name="user" kind="sql"&gt; .* &lt;/input&gt;
      &lt;/inputs&gt;</b>
      &lt;sql&gt;
       SELECT
       ....
 &lt;/query&gt;
</pre>
%ENDTWISTY%
---+++ Query =sql= tag
If you are creating a new query that does not inherit from other queries you must specify the SQL query here. You can leave slots that can be filled by child queries. To do this you must include a =slot= tag. This tag only requires a name attribute that must not included spaces nor special characters. There can be multiple slots with the same name. 
To fill this slots from a child query you can use a =filler= tag with the name of the slot that want to be filled. 
%WARNING% Non filled slots will be replaced with empty strings. This could lead to a syntax error on the SQL query when executed. 
The SQL query text can include references to the input parameters with  =:input_parameter_name=. The input parameter must specify the =kind="sql"= attribute to be used.
---++++ Example:
%TWISTY{%TWISTY_OPTS_OUTPUT% showlink="Show Parent Query Example" hidelink="Hide Parent Query example"}%
<pre class="file">
 &lt;query name="site_summary"&gt;
      ...
      &lt;/inputs&gt;
      <b>&lt;sql&gt;
       SELECT
          %RED%&lt;slot name="group"/&gt;%ENDCOLOR%,
          truncate( unix_timestamp(StartTime) / %GREEN%:span%ENDCOLOR%, 0 ) * %GREEN%:span%ENDCOLOR% as time,
          %BLUE%&lt;slot name="column"/&gt;%ENDCOLOR%
        FROM
          MasterTransferSummary R FORCE INDEX (index01)
        JOIN
          Probe P on R.ProbeName = P.probename
        JOIN
          Site S on S.siteid = P.siteid
        JOIN
          VONameCorrection VC ON (VC.corrid=R.VOcorrid)
        JOIN
          VO on (VC.void = VO.void)
        &lt;slot name="JOIN"/&gt;
        WHERE
          StartTime &gt;= %GREEN%:starttime%ENDCOLOR% AND
          StartTime &lt; %GREEN%:endtime%ENDCOLOR% AND 
          S.SiteName=%GREEN%:facility%ENDCOLOR% AND
          VO.VOName regexp %GREEN%:vo%ENDCOLOR% AND
          (NOT (VO.VOName regexp %GREEN%:exclude-vo%ENDCOLOR%)) AND
          CommonName regexp %GREEN%:user%ENDCOLOR%
          &lt;slot name="where"/&gt;
        GROUP BY
          %RED%&lt;slot name="group"/&gt;%ENDCOLOR%,
          time
      &lt;/sql&gt;</b>
      &lt;results module="graphtool.database.query_handler" function="results_parser"&gt;
      ...
 &lt;/query&gt;
</pre>
%ENDTWISTY%
%TWISTY{%TWISTY_OPTS_OUTPUT% showlink="Show Child Query Example" hidelink="Hide Child Query example"}%
<pre class="file">
    &lt;query name="site_user_transfer_quality" base="GratiaStorageQuery.site_summary"&gt;
      ...
      <b>&lt;sql&gt;
            %RED%&lt;filler name="group"&gt; DN &lt;/filler&gt;%ENDCOLOR%
            %BLUE%&lt;filler name="column"&gt;
                sum(CASE StatusCode WHEN 0 THEN 1 ELSE 0 END) as Successes,
                sum(CASE StatusCode WHEN 0 THEN 0 ELSE 1 END) as Failures
            &lt;/filler&gt;%ENDCOLOR%
      &lt;/sql&gt;</b>
      &lt;results&gt;
      ...
   &lt;/query&gt;
</pre>
%ENDTWISTY%
---+++ Query =results= tag
This tag defines how results must be transformed after they are retrieved from the database. This data transformation is required by =graphtool= to generate the plots. Moreover, this allows to transform the data that come from the database to format, join data with external data sources (like OIM), or do additional calculations. =graphtool= offers a group of result parsing functions that are useful depending in the desired kind of plot. 
---++++ Plots Examples:

---+++ Query =attribute= tag

-- Main.JuanFelipeMosqueraMorales - 20 Feb 2015
