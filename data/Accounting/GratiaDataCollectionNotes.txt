%META:TOPICINFO{author="ChrisGreen" date="1227743914" format="1.1" version="1.3"}%
%META:TOPICPARENT{name="WebHome"}%
---+!! Gratia Data Collection Notes

---++ Introduction

This attempts to put, all in one place, a description of the algorithms followed when collecting and processing job level Gratia data. Where appropriate, common and probe-specific behaviors will be discussed, including any historical behaviors that still may be of relevance.

---++ Overview of Gratia data collection.

Speaking very generally, a Gratia probe will:
   1. Collect information from one or more sources;
   1. Prepare a record for upload to the probe by using the Gratia python API;
   1. Contact a Gratia data collection and reporting service, upload some meta-information and then the job level data.

The different types of data sent to Gratia collectors include:

   1. Local and OSG-originated job level information on batch jobs executed by a variety of LRMS (Local Resource Management Systems) including Condor, PBS (including Torque), LSF, SGE;
   1. Summary level information from a variety of resources (PANDA is a prime example) for /ad hoc/ comparison with job-level data.
   1. Summarized process-level information.
   1. Metric information from RSV tests.
   1. Pilot level information from the glExec pilot/glide-in system.
   1. Storage allocation information from OSG Storage Elements (SEs).
   1. Transfer-level information from dCache and GRIDFtp.

At the collector these data are received, stored in a DB and summarized as appropriate. Reports are available either via the BIRT interface, or as text-based emails.

---++ Anatomy of a record upload.

<ol><li>The probe will register its relevant version information with the Gratia infrastructure using any or all of the following python routines:
    <dl><dt> <tt>Gratia.registerReporter(<em>name</em>, <em>version string</em>)</tt> </dt><dd> <tt>Gratia.registerReporter("glexec.py", "v1.0.2")</tt> </dd>
        <dt> <tt>Gratia.registerReporterLibrary(<em>name</em>, <em>version string</em>)</tt> </dt><dd> <tt>Gratia.registerReporterLibrary("glexec_extraSubs.py", "v1.1")</tt> </dd>
        <dt> <tt>Gratia.registerService(<em>name</em>, <em>version string</em>)</tt> </dt><dd> <tt>Gratia.registerService("Condor", "v7.0.3")</tt> </dd>
    </dl>
    A useful utility routine here is <tt>Gratia.extractRevision("$Revision: %")</tt> </li>
    <li>Initialize the Gratia system and perform a handshake with the collector: <tt>Gratia.initialize(<em>[config-file]</em>)</tt> </li>
    <li>For each job record to upload:
    <ul><li>Define the job level record with information gleaned from the primary information source (eg LRMS log).</li>
        <li>Give the send instruction for the record (<tt>record.Send()</tt>).</li>
        <li></li>
        <li></li>
        <li></li>
    </ul>
</ol>

---++ Behavior common to all probes.

---++ Behavior common to LRMS probes.

---++ Specific probe behavior and other notes.

---++ Advice to OSG VOs wishing to get as complete an accounting of their activities as possible.

---+++ Things you can do yourself.

---+++ Things to ask of the sites where you run jobs.


-- Main.ChrisGreen - 26 Nov 2008