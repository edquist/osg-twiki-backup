%META:TOPICINFO{author="PhilippeCanal" date="1166194181" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="WebHome"}%
<table width="100%">
<tr><td valign="top">
</td>
<td valign="top">
---+!!Probe Developement Guide
%TOC%
</td>
<td valign="top" align="right" width="25%">
%TABLE{ sort="off" dataalign="left" tableborder="0" cellpadding="1" cellspacing="3" headerbg="#F3EDE7" databg="#F3EDE7"}%
</td></tr></table>
%STARTINCLUDE%


We current provide a simple python library (Gratia.py) for the implementation of the Gratia Probe.

---++ Minimal example

The following script is a minimal example, showing the steps need to upload a record:

<verbatim>#Load the library
import Gratia.py
# Initialize the Gratia library (read the Probe configuration file)
Gratia.Initialize()
# Create the record
r = Gratia.UsageRecord()
r.LocalUserId("cmsuser000")
# Send it
r.Send()</verbatim>

See [[%ATTACHURL%/samplemeter.py.txt][samplemeter.py.txt]] for a complete example.

---++ Gratia.Send

Generate the XML file corresponding to the usage record and upload it to the server.
The return value is an empty string in case of success.  In case of failure, the error
message is returned.  Usually the error are non fatal in the sense that the xml file
will be cached and re-send the next time the probe is ran.

In the rare case where Gratia is *both* unable to store the file locally and unable to upload it to the
server the message will start with =Fatal Error:=, for example:

=Fatal Error: Record not send and not cached.  Record will be lost.=

=Fatal Error: too many pending files=

is issued and the record will need to be recreated by the probe once either the
write error or the communication error has been resolved (see log file for
details on the error).

#DataType
---++ Data type 

When expecting a time instant (i.e. a date and time), the Gratia interface expects either a number of second since epoch or
a string formated using the format [[http://www.w3.org/TR/xmlschema-2/#dateTime][xsd:dateTime]].

When expecting a time duration, the Gratia interface expects a number in second and fraction of second or 
a string formated using the format [[http://www.w3.org/TR/xmlschema-2/#duration][xsd:duration]]

---++ Public Interface:
In general the function correspond to the equivalent XML tag described in the [[http://www.psc.edu/~lfm/PSC/Grid/UR-WG/UR-Spec-gfd.58-ggf18.pdf][OGF Usage Record XML Schema]]
---+++ !WallDuration(self, value, description = "")
Wall clock time that elapsed while the job was running. 
<verbatim>r.WallDuration(3600*25+63*60+21.2)</verbatim>
See [[#DataType][Data Type]] for details on the syntax for 'value'
---+++ !CpuDuration(self, value, cputype, description = ""):
Total amount of cpu time used by the job.   Cputype must be specified and be one of either 'user' or 'system'
<verbatim>        r.CpuDuration("PT23H12M1.75S","user")
        r.CpuDuration("PT12M1.75S","sys")</verbatim>
See [[#DataType][Data Type]] for details on the syntax for 'value'
---+++ !StartTime(self, value, description = "")
Time instant at which the 'usage' started.  See [[#DataType][Data Type]] for details on the syntax for 'value'
---+++ !EndTime(self, value, description = "")
Time instant at which the 'usage' ended.  See [[#DataType][Data Type]] for details on the syntax for 'value'
---+++ !LocalJobId (self,value)
The local job identifier as assigned by the batch queue expressed as a string.
---+++ !GlobalJobId(self,value)
---+++ !ProcessId(self,value)
---+++ !GlobalUsername(self,value)
---+++ !LocalUserId(self,value)
---+++ !UserKeyInfo(self,value)
Expect the complete DN.  The currently supported format look like:

=/DC=gov/DC=fnal/O=Fermilab/OU=Robots/CN=cdf/CN=Elliot D. Lipeles/USERID=lipeles=

=CN=john ainsworth, L=MC, OU=Manchester, O=eScience, C=UK=

---+++ !JobName(self, value, description = "")
---+++ !Charge(self,value, unit = "", formula = "", description = "")
---+++ !Status(self,value, description = "")
---+++ !TimeDuration(self, value, timetype, description = ""):
        " Additional measure of time duration that is relevant to the reported usage "
        " timetype can be one of 'submit','connect','dedicated' (or other) "
---+++ !TimeInstant(self, value, timetype, description = ""):
        " Additional identified discrete time that is relevant to the reported usage "
        " timetype can be one of 'submit','connect' (or other) "
---+++ !MachineName(self, value, description = "") 
---+++ !Host(self, value, primary = False, description = "") 
Hostname where the job was actually run
---+++ !SubmitHost(self, value, description = "") 
---+++ !Queue(self, value, description = "") 
---+++ !ProjectName(self, value, description = "") 
---+++ !Network(self, value, storageUnit = "", phaseUnit = "", metric = "total", description = "") :
        " Metric should be one of 'total','average','max','min' "
---+++ !Disk(self, value, storageUnit = "", phaseUnit = "", type = "", metric = "total", description = "") :
        " Metric should be one of 'total','average','max','min' "
        " Type can be one of scratch or temp "
---+++ !Memory(self, value, storageUnit = "", phaseUnit = "", type = "", metric = "total", description = "") :
        " Metric should be one of 'total','average','max','min' "
        " Type can be one of shared, physical, dedicated "
---+++ !Swap(self, value, storageUnit = "", phaseUnit = "", type = "", metric = "total", description = "") :
        " Metric should be one of 'total','average','max','min' "
        " Type can be one of shared, physical, dedicated "
---+++ !NodeCount(self, value, metric = "total", description = "") :
        " Metric should be one of 'total','average','max','min' "
---+++ !Processors(self, value, consumptionRate = 0, metric = "total", description = "") :
        " Metric should be one of 'total','average','max','min' "
        " consumptionRate specifies te consumption rate for the report "
        " processor usage.  The cinsumption rate is a sclaing factor that "
        " indicates the average percentage of utilization. "
---+++ !ServiceLevel(self, value, type, description = "")
---+++ !Resource(self,description,value
---+++ !AdditionalInfo(self,description,value) :
        self.Resource(description,value)

---++Gratia Specific interface
The following are not officially part of the Usage Record format
---+++ !VOName(self,value)
---+++ !ReportableVOName(self,value)
        " Set reportable VOName"
---+++ !Njobs(self, value, description = "") 

    # The following usually comes from the Configuration file

---+++ !ProbeName(self, value, description = "") :
d214 1
---+++ !SiteName(self, value, description = "") :
Indicates which site the service accounted for belong to (usually entered via the ProbeConfig file).
        " Indicates which site the service accounted for belong to"



-- Main.PhilippeCanal - 14 Dec 2006

%META:FILEATTACHMENT{name="samplemeter.py.txt" attachment="samplemeter.py.txt" attr="" comment="Example of Gratia Probe (python script)" date="1166192958" path="C:\Devel\gratia_working\code\gratia\probe\common\samplemeter.py" size="1699" stream="C:\Devel\gratia_working\code\gratia\probe\common\samplemeter.py" user="Main.PhilippeCanal" version="1"}%
