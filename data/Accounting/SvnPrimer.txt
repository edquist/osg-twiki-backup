%META:TOPICINFO{author="PhilippeCanal" date="1234556989" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="WebHome"}%
%TOC% </td> <td width="25%" align="right" valign="top">
%TABLE{ sort="off" dataalign="left" tableborder="0" cellpadding="1" cellspacing="3" headerbg="#F3EDE7" databg="#F3EDE7"}% </td></tr></tbody></table> 
%STARTINCLUDE%
---++Checking Out and Updating
---+++How do I check out the Gratia Subversion repository?
*Note:* the repository at *https://gratia.svn.sourceforge.net/svnroot/gratia* is only for Gratia developers. Non-developers should use *http://gratia.svn.sourceforge.net/svnroot/gratia* instead. For browsing the repository with a web browser, use http://gratia.svn.sourceforge.net/viewvc/gratia.

To check out the Gratia repository, you do the following:

<verbatim>svn co https://gratia.svn.sourceforge.net/svnroot/gratia/trunk gratia</verbatim>

That will check out the whole Gratia trunk (i.e. the *head* in SVN language) and store it in local directory gratia.

*Note:* watch out not to checkout *https://gratia.svn.sourceforge.net/svnroot/gratia* as that will checkout the trunk as well as all branches and tags.

---+++How do I check out  a specific tag?

To check out a specific tag or branch, you do:
<verbatim>svn co https://gratia.svn.sourceforge.net/svnroot/gratia/tags/v1-02 gratia-v1-02</verbatim>

This will check out the v1-02 release and store it in local directory gratia-v1-02.

To find out which tags and branches are available you can browse the repository via the web interface http://gratia.svn.sourceforge.net/viewvc/gratia or using:

<verbatim>svn ls https://gratia.svn.sourceforge.net/svnroot/gratia/tags</verbatim>

---+++I have checked out starting at trunk. How can I check out branches without downloading everything again?

You can check out the other directories somewhere else in your system, even in /tmp. Subversion won't have a problem doing copies from different WCs, as long as they live in the same repository.

If you did not check out the toplevel dir but want to do it now, you can try the following trick:
<verbatim>
svn co -N https://gratia.svn.sourceforge.net/svnroot/gratia
cd root
svn up -N trunk branches tags
rm -rf trunk
mv /path/to/older/checkout/of/trunk .</verbatim>

---+++ How do I update my checked out version?

To update your working dir, all you have to do is run:
<verbatim>svn up</verbatim>
from inside it, just as you did with CVS.

---++Editing Files and Committing
---+++Editing files
Editing files with Subversion is no different than doing so with CVS.
To see which files you've edited do:
<verbatim>svn st</verbatim>
This is a very fast operation as it does not contact the remote repository (and does not bring the repository to the HEAD level).
---+++Committing changes
The only difference you should know about is that Subversion does atomic commits, and you are encouraged to make your commits complete.
In other words, suppose you add a new file to Subversion and you update Module.mk. You should first svn add the new file, and then commit both it and Module.mk, in one go. That way, anyone doing a checkout cannot possibly get a revision in which one change had happened but not the other. To commit just do:
<verbatim>svn ci</verbatim>
---+++Renaming and copying files and directories
One of the advantages of Subversion over CVS is that you can rename and copy files and directories without loosing the history. Where in CVS you would do:
<verbatim>
cvs rm oldname.cxx
cvs add newname.cxx
cvs ci oldname.cxx newname.cxx</verbatim>
You now simple do:
<verbatim>
svn mv oldname.cxx newname.cxx
svn ci newname.cxx</verbatim>
---+++Reverting changes
If you want to undo some changes you've made but not yet committed, try this command:
<verbatim>svn revert</verbatim>
<p>If you did commit your changes, you can do this:</p>
<verbatim>
svn merge -r COMMITTED:PREV</verbatim>
<p>(type COMMITTED and PREV, in capitals, as shown).</p>
---+++Correcting commit log messages
If for some reason when you commit a change you don't put the proper (or complete) information into the commit log message, you can correct it. Get the revision number of the commit with the incorrect message (for example, 9915), and then:
< verbatim >svn propedit svn:log --revprop -r 9915 https://gratia.svn.sourceforge.net/svnroot/gratia</verbatim >
<p>This will open an editor window (using $EDITOR) and let you correct your mistakes, and then commit the change. Keep in mind that these properties are unversioned, meaning once you change it, the original version is gone.</p>
---+++Resolving conflicts
<p>It might happen that an svn up will update a file you just edited and that the conflicts could not be automatically resolved. In that case the file will contain conflict markers &quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot; and &quot;>>>>>>>&quot; and you have to edit the file to remove the conflict. Before being able to commit this file you first have to tell svn that the conflict has been resolved:</p>
<pre class="code">svn resolved myfile.cxx</pre>
<p>Only then can you proceed to commit the file.</p>
<h2><a name="Branching_and_Tagging"></a> Branching and Tagging</h2>
<h3><a name="What_s_the_difference_between_br"></a> What's the difference between branches and tags in Subversion?</h3>
<p>There are no differences between branches and tags in Subversion. In fact, Subversion doesn't even know the concept of branches or tags: everything is a file or a directory for it.</p>
<p>A branch or a tag is nothing more than a copy of your files under a different path. It is an O(1) operation in time and disk space, so there's no harm copying everything.</p>
<h3><a name="How_does_the_Gratia_repository_do"></a><a name="How_does_the_Gratia_repository_do_"></a> How does the Gratia repository do branches and tags?</h3>
<p>Gratia uses the following scheme for its branches and tags:</p>
<ul>
    <li>/branches: contains all official branches. They are created after a release and are mainly for backporting bugfixes from the trunk.</li>
    <li>/branches/dev: contains development, temporary branches. This is where unstable features are developed before they are merged into /trunk.</li>
    <li>/tags: contains all official tags. That is, when a public release is make a tag here to mark the revision in which it happened.</li>
</ul>
<p>In /branches and /tags, the naming convention used is like this:</p>
<ul>
    <li>/branches/branchversion, (example /branches/v1-20-00-patches)</li>
    <li>/tags/releaseversion (example: /tags/v1-20-00)</li>
</ul>
<p>/branches/dev has no naming convention, but we ask you to give your branches meaningful names. Names like &quot;my-cool-branch&quot; aren't very descriptive, whereas &quot;new-schema-evolution&quot; is. Please remember to erase your work branches after you're done.</p>
<h3><a name="So_how_do_I_create_a_branch_or_c"></a> So, how do I create a branch or copy of my work?</h3>
<p>In order to create a branch or a tag, you must have /branches, /branches/dev or /tags checked out, even if not recursing (-N).</p>
<p>If your dev's directory doesn't exist yet, create it:</p>
<pre class="code">svn mkdir branches/dev/mybranch</pre>
<p>Now copy the trunk:</p>
<pre class="code">svn cp trunk branches/dev/mybranch</pre>
<p>Of course, this will include the full Gratia, but there's no harm in doing so.</p>
<h3><a name="Creating_the_branch_directly_on"></a><a name="Creating_the_branch_directly_on_"></a> Creating the branch directly on the server</h3>
<p>You can also create the branch directly without having a checked-out working copy:</p>
<pre class="code">
svn cp https://gratia.svn.sourceforge.net/svnroot/gratia/trunk \
       https://gratia.svn.sourceforge.net/svnroot/gratia/branches/dev/mybranch</pre>
<p>The branch is now a identical copy of trunk, and you can check out mybranch. When you are done, you can merge the changes back to trunk. If your work takes a long time, you can easily merge changes from trunk into your working branch to stay in sync with the current development on trunk. This will also make merging your changes back to trunk much easier, as the only differences between trunk and your branch are the actual changes you have done to the branch.</p>
<p>You can read more about branching and merging in the book &quot;Version Control with Subversion&quot; in chapter four at <a href="http://svnbook.red-bean.com/en/1.4/svn.branchmerge.html">http://svnbook.red-bean.com/en/1.4/svn.branchmerge.html</a>.</p>
<h3><a name="I_m_the_Release_Dude_How_do_I_ma"></a> I'm the Release Dude. How do I make the next Gratia release?</h3>
<pre class="code">
svn cp https://gratia.svn.sourceforge.net/svnroot/gratia/trunk \
       https://gratia.svn.sourceforge.net/svnroot/gratia/tags/v1-02-00
svn cp https://gratia.svn.sourceforge.net/svnroot/gratia/tags/v1-02-00 \
       https://gratia.svn.sourceforge.net/svnroot/gratia/branches/v1-02-00-patches</pre>
<p>It's done.</p>
<h2><a name="Working_with_Branches"></a> Working with Branches</h2>
<h3><a name="Switching"></a> Switching</h3>
<p><em>I currently have /trunk checked out. How do I switch to the /branches/v1-02-00-patches branch?</em></p>
<p>The switch subcommand can be used for that:</p>
<pre class="code">
cd trunk
svn switch https://gratia.svn.sourceforge.net/svnroot/gratia/branches/v1-02-00-patches</pre>
<p>More on the <a href="http://svnbook.red-bean.com/en/1.4/svn.ref.svn.c.switch.html">switch</a> man page.</p>
<h3><a name="Getting_information_about_the_wo"></a> Getting information about the working directory</h3>
<p><em>Where am I? I am about to check in my local files - will they end up on my branch or destroy the trunk?</em></p>
<p>You can ask your current directory what part of the subversion repository it corresponds to. <code>svn info</code> will tell you the directory's URL, the current revision, and when the last change occurred within the current directory:</p>
<pre class="code">
$ svn info
Path: .
URL: https://gratia.svn.sourceforge.net/svnroot/gratia/trunk
Repository Root: https://gratia.svn.sourceforge.net/svnroot/gratia
Repository UUID: c85a5f45-a5f3-44fc-b02c-7891c381c519
Revision: 2983
Node Kind: directory
Schedule: normal
Last Changed Author: pcanal
Last Changed Rev: 2983
Last Changed Date: 2009-02-13 01:05:35 -0600 (Fri, 13 Feb 2009)
</pre>
<h3><a name="Synchronizing_a_branch_with_the"></a><a name="Synchronizing_a_branch_with_the_"></a> Synchronizing a branch with the trunk</h3>
<p><em>How do I merge the latest patches added to the trunk in my development branch?</em></p>
<p>Suppose that you want to synchronize your development branch <em>branches/dev/mydevs</em> with the trunk. To see what files have been changed compared to your branch do:</p>
<pre class="code">
$ svn st -u
       <font color="maroon">*</font>    20177   gui/src/TGListTree.cxx
       <font color="maroon">*</font>    20177   gui/inc/TGListTree.h
       <font color="maroon">*</font>    20177   gui/inc/TGView.h
M      <font color="maroon">*</font>    20177   io/src/TFile.cxx
       <font color="maroon">*</font>    20177   meta/src/TStreamerElement.cxx
       <font color="maroon">*</font>            tutorials/gui/iconAsXPMData.C
       <font color="maroon">*</font>    20177   tutorials/gui</pre>
<p>You can see the detailed differences in each modified file using:</p>
<pre class="code">
$ svn diff -r BASE:HEAD io/src/TFile.cxx
Index: TFile.cxx
===================================================================
--- TFile.cxx   (revision 20177)
+++ TFile.cxx   (revision 20184)
@@ -3120,7 +3120,7 @@
          delete u;
          if (read || sameUser) {
             localFile = kTRUE;
-            if (localFile) {
+            if (localFile &amp;&amp; prefix) {
                *prefix = lfname;
             }
          }</pre>
<p>The next step is to merge the differences in your local working directory:</p>
<pre class="code">
$ svn merge -r BASE:HEAD .
U    gui/src/TGListTree.cxx
U    gui/inc/TGListTree.h
U    meta/src/TStreamerElement.cxx
A    tutorials/gui/iconAsXPMData.C
U    io/src/TBufferFile.cxx
C    io/src/TFile.cxx</pre>
<p>If not sure, you can first run with the option '--dry-run' to check what is going to happen.</p>
<p>The 'C' in the output indicates that there was a conflict while merging io/src/TFile.cxx. After resolving the conflicts by editing the file (and removing the conflict markers), you have to tell svn that the conflicts have been resolved:</p>
<pre class="code">
$ svn resolved io/src/TFile.cxx</pre>
<p>Now you can commit the changes to your development branch:</p>
<pre class="code">
$ svn ci -m "<font color="blue">Synchronize with the head</font>"
Sending        gui/inc/TGListTree.h
Sending        gui/src/TGListTree.cxx
Sending        io/src/TBufferFile.cxx
Sending        io/src/TFile.cxx
Sending        meta/src/TStreamerElement.cxx
Sending        tutorials/gui/iconAsXPMData.C
Transmitting file data ....
Committed revision 20185.</pre>
<p>And your development branch is now in sync with the head.</p>
<h3><a name="Displaying_differences"></a> Displaying differences</h3>
<p><em>How can I check what are the differences between my working copy of a file and revision 20474?</em></p>
<p>This is simply obtained using <code>svn diff</code>:</p>
<pre class="code">
$ svn diff -r 20474 xrootd/Module.mk
Index: xrootd/Module.mk
===================================================================
--- xrootd/Module.mk    (.../v5-14-00-patches/xrootd/Module.mk) (revision 20474)
+++ xrootd/Module.mk    (.../dev/v5-14-00-newxrd/xrootd/Module.mk) (working copy)
@@ -6,7 +6,7 @@
MODDIR     := xrootd
MODDIRS    := $(MODDIR)/src

-XROOTDVERS := xrootd-20060928-1600
+XROOTDVERS := xrootd-20071001-0000
XROOTDDIR  := $(MODDIR)
XROOTDDIRS := $(MODDIRS)
XROOTDDIRD := $(MODDIRS)/xrootd</pre>
<p>You can also get a more elaborated 'diff' result by running your preferred 'diff' command, for example, to get a context diff, you can use the system 'diff' and option '-c' in the following way:</p>
<pre class="code">
$ svn diff -r 20474 --diff-cmd diff -x -c xrootd/Module.mk
Index: xrootd/Module.mk
===================================================================
*** xrootd/Module.mk    (.../v5-14-00-patches/xrootd/Module.mk) (revision 20474)
--- xrootd/Module.mk    (.../dev/v5-14-00-newxrd/xrootd/Module.mk) (working copy)
***************
*** 6,12 ****
MODDIR     := xrootd
MODDIRS    := $(MODDIR)/src

! XROOTDVERS := xrootd-20060928-1600
XROOTDDIR  := $(MODDIR)
XROOTDDIRS := $(MODDIRS)
XROOTDDIRD := $(MODDIRS)/xrootd
--- 6,12 ----
MODDIR     := xrootd
MODDIRS    := $(MODDIR)/src

! XROOTDVERS := xrootd-20071001-0000
XROOTDDIR  := $(MODDIR)
XROOTDDIRS := $(MODDIRS)
XROOTDDIRD := $(MODDIRS)/xrootd</pre>
<h2><a name="Miscellaneous"></a> Miscellaneous</h2>
<h3><a name="What_s_this_PREV_HEAD_etc_stuff"></a><a name="What_s_this_PREV_HEAD_etc_stuff_"></a> What's this PREV, HEAD, etc. stuff?</h3>
<p>Those are symbolic revision names for Subversion, just like the normal numeric ones. They mean the following:</p>
<ul>
    <li>HEAD: latest (youngest) revision in the server</li>
    <li>BASE: the revision your checkout was last updated against</li>
    <li>COMMITTED: last revision a file or directory was changed</li>
    <li>PREV: the last revision the file or directory was changed immediately before COMMITTED</li>
</ul>
<p>Maybe this is better explained with an example:</p>
<ol>
    <li>You check out trunk at revision 200</li>
    <li>You make a change to trunk/a_file and commit it: revision 201 is created</li>
    <li>A day later, you update your working dir and find out it's now revision 208</li>
    <li>You make another modification and commit: revision 209</li>
    <li>One day later, you update again, this time to revision 212</li>
    <li>The following day, before updating, the server has progressed to revision 218</li>
</ol>
<p>Under those circumstances, here's what each one of those 4 mean:</p>
<ul>
    <li>HEAD = 218</li>
    <li>BASE = 212</li>
    <li>COMMITTED (for a_file) = 209</li>
    <li>PREV (for a_file) = 201</li>
</ul>
<p>When you run &quot;svn up&quot;, you bring BASE up to HEAD.</p>
<h3><a name="How_to_avoid_seeing_generated_fi"></a> How to avoid seeing generated files?</h3>
<p>To avoid seeing the generated files, like the generated files or dependency *.d files, when doing <code>svn st</code> you have to add</p>
<pre class="code">*.so *.dylib *.dll *.lib *.pdb *.obj *.def
*.exp *.ilk *.manifest *.d 
</pre>
<p>to the <code>global-ignores</code> in your <code>~/.subversion/config</code> file. You can at any time see all files doing <code>svn st --no-ignore</code>.</p>
<h3><a name="How_to_set_automatically_basic_p"></a> How to set automatically basic properties on new files?</h3>
<p>Subversion keeps for each file and directory a hidden file with property information. Using properties Subversion keeps track, for example, of the mime type of a file (.jpg, .png) or if a file is an executable (.sh) or which keywords should be expanded (e.g. $Id $), etc. To make sure that new files get a correct set of default properties, you have to set in your <code>~/.subversion/config</code> file:</p>
<pre class="code">
enable-auto-props = yes
[auto-props]
*.c = svn:eol-style=LF;svn:keywords=Id
*.C = svn:eol-style=LF;svn:keywords=Id
*.cxx = svn:eol-style=LF;svn:keywords=Id
*.h = svn:eol-style=LF;svn:keywords=Id
*.sh = svn:eol-style=LF;svn:executable;svn:keywords=Id
*.py = svn:eol-style=LF;svn:executable;svn:keywords=Id
*.pl = svn:eol-style=LF;svn:executable;svn:keywords=Id
*.txt = svn:eol-style=LF;svn:keywords=Id
*.png = svn:mime-type=image/png
*.jpg = svn:mime-type=image/jpeg
Makefile = svn:eol-style=LF;svn:keywords=Id
Makefile.* = svn:eol-style=LF;svn:keywords=Id
*.mk = svn:eol-style=LF;svn:keywords=Id
*.cmake = svn:eol-style=LF;svn:keywords=Id</pre>
<p>For more on properties and how to change, list and delete them see <a href="http://svnbook.red-bean.com/en/1.4/svn.advanced.props.html">http://svnbook.red-bean.com/en/1.4/svn.advanced.props.html</a>.</p>
<h3><a name="Where_to_get_the_svn_client_for"></a><a name="Where_to_get_the_svn_client_for_"></a> Where to get the <code>svn</code> client for my machine?</h3>
<p>Subversion is by default installed on most recent Linux distributions. On Mac OS X 10.4 you can get it from Fink or from a .dmg containing pre-built binaries. On Mac OS X 10.5 svn is part of the system. On Windows you can get it from cygwin. For all other platforms see <a href="http://subversion.tigris.org/project_packages.html">http://subversion.tigris.org/project_packages.html</a>.</p>
<h3><a name="Where_to_find_more_on_Subversion"></a> Where to find more on Subversion?</h3>
<p>The definite information can be found on the Subversion project page <a href="http://subversion.tigris.org/">http://subversion.tigris.org/</a> and in the online Subversion book <a target="_top" rel="nofollow" href="http://svnbook.red-bean.com/">http://svnbook.red-bean.com/</a>.</p>
