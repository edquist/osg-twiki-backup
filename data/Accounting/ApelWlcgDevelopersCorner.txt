%META:TOPICINFO{author="JohnWeigand" date="1338840080" format="1.1" version="1.7"}%
%META:TOPICPARENT{name="GratiaInterfacesApelLcg"}%
<!--
   * Set LCG_CONF        = [[#lcg_conf][lcg.conf]]
   * Set LCG_DB_CONF = [[#lcg_db_conf][lcg-db.conf]]
   * Set CRONTAB          = [[#lcg_conf][lcg.conf]]
   * Set CRONTAB           = [[#lcg_reportablesites][lcg-reportableSites]]
   * Set CRONTAB          = [[#lcg_reportablevos][lcg-reportableVOs]]
   * Set CRONTAB           = [[#crontab][crontab entry]]
   * Set SSM_CFG          = [[#ssm_cfg][ssm.cfg]]
   * Set SSM_LOG_CFG = [[#ssm_log_cfg][ssm.log.cfg]]
-->

---+!! APEL/WLCG Interface Developers Corner

%TOC%

%STARTINCLUDE%


---+ Developers Corner
This document  describes the scripts and configuration files used by this interface.

---+ Scripts
---++ LCG.py
Usage:
<blockquote><pre>
  LCG.py(lcg.sh)  --conf=config_file --date=month [--update] [--no-email]

     --conf - specifies the main configuration file to be used
              which would normally be the lcg.conf file

     --date - specifies the monthly time period to be updated:
              Valid values:
                current  - the current month
                previous - the previous month
                YYYY/MM  - any year and month

              The 'current' and 'previous' values are to facillitate running
              this as a cron script.  Generally, we will run a cron
              entry for the 'previous' month for n days into the current
              month in order to insure all reporting has been completed.

     The following 2 options are to facillitate testing and to avoid
     accidental running and sending of the SSM message to APEL and are
     therefore considered optional:

     --update - this option says to go ahead and update the APEL/WLCG database.
                If this option is NOT specified, then everything is executed
                EXCEPT the actual sending of the SSM message to APEL.
                The message file will be created.

     --no-email - this option says to turnoff the sending of email
                notifications on failures and successful completions.
</pre></blockquote>

This is the main interface program performing the following functions: 

 1. Retrieves the accounting data from the Gratia database for selected OSG sites and VOs for a month. 
   * The __resource_groups__ are defined in a file identified by the 'SiteFilterFile' attribute of the %LCG_CONF%  file. 
   * VOs are defined in a file identified by the 'VOFilterFile' attribute of the %LCG_CONF%  file.
With the change implemented on 6/19/07 providing for individual normalization factor by site, instead of a single query being used to retrieve the gratia data, individual queries by site are performed.  In order to reduce the verbage in the log file, only the first query is output to the log file.  The site and normalization factor used is displayed for the other site queries.

2. Formats the SSM message sent to APEL to update  APEL/WLCG database. The %LCG_DB_CONF% file defines  For testing purposes a clone table called OSG_TABLE_TEST can be set instead. The SQL DML statements for the last run are placed in a directory defined by the 'LogSqlDir' attribute of the lcg.conf file. The file name is YYYY-MM.sql and contains only the DML from the last update run. 

 3. Updates the APEL/CLG database. In order to handle site and VO name changes, the SQL DML is set up to DELETE all data for the month/year and then INSERT the new data. This is a simple approach to handling these kinds of changes and works as of 4/25/2007.  It may be this will not hold up over the long run and will have to be re-visited.

Additional functionality:

  1. The script has been design to do everything EXCEPT update the APEL database unless the --update option is used.  This prevents accidental running of the script especially when testing.

  2. Log files are created in the directory specified by the 'LogSqlDir' attribute of the lcg.conf file. The format of the log files is YYYY-MM.log.

  3. A file containing the latest SQL DML statements used to update the APEL database is created in the same directory as the log files. The format of the sql file is YYYY-MM.sql

  4. The script will, after completing the APEL database update, create  xml and html files of the data contained in the APEL database table. This was added on 4/17/08 to provide visibility into the data being sent.  No functionality is contained in this script to use these files.  This just makes them available.






---++ !DownTimes.py
Class used to query !MyOSG for planned downtimes for a site/resource.

The LCG.py module does a check for __resource groups__ that have not reported any data to Gratia for each day in the month and will report this in a warning email so corrective action can be initiated.  In order to avoid a "false" reporting of this in the event this was a planned/scheduled shutdown, this module retrieves all downtime data from !MyOSG using the following criteria:
<blockquote><pre>
Information to display: Downtime Information
Show Past Downtime for: All
         The reason for requesting "All" is that it is based on End Time
         in which case the "past.." ones will not show resource groups
         currently down.
Resource Groups to display: All Resource Groups
For Resource Group: Grid type OSG
For Resource: Provides following Services - Grid Service/CE
Active Status: active
</pre></blockquote>


[[http://myosg.grid.iu.edu/rgdowntime/?datasource=downtime&summary_attrs_showgipstatus=on&summary_attrs_showwlcg=on&summary_attrs_showservice=on&summary_attrs_showrsvstatus=on&summary_attrs_showfqdn=on&summary_attrs_showenv=on&summary_attrs_showcontact=on&gip_status_attrs_showtestresults=on&downtime_attrs_showpast=90&account_type=cumulative_hours&ce_account_type=gip_vo&se_account_type=vo_transfer_volume&bdiitree_type=total_jobs&bdii_object=service&bdii_server=is-osg&start_type=7daysago&start_date=08%2F03%2F2011&end_type=now&end_date=08%2F03%2F2011&all_resources=on&gridtype=on&gridtype_1=on&service=on&service_1=on&service_central_value=0&service_hidden_value=0&active=on&active_value=1&disable_value=1][MyOSG Query]]
 - 
[[http://myosg.grid.iu.edu/rgdowntime/xml?datasource=downtime&summary_attrs_showgipstatus=on&summary_attrs_showwlcg=on&summary_attrs_showservice=on&summary_attrs_showrsvstatus=on&summary_attrs_showfqdn=on&summary_attrs_showenv=on&summary_attrs_showcontact=on&gip_status_attrs_showtestresults=on&downtime_attrs_showpast=90&account_type=cumulative_hours&ce_account_type=gip_vo&se_account_type=vo_transfer_volume&bdiitree_type=total_jobs&bdii_object=service&bdii_server=is-osg&start_type=7daysago&start_date=08%2F03%2F2011&end_type=now&end_date=08%2F03%2F2011&all_resources=on&gridtype=on&gridtype_1=on&service=on&service_1=on&service_central_value=0&service_hidden_value=0&active=on&active_value=1&disable_value=1][MyOSG XML Query]]

Methods used:
<blockquote><pre>
 def site_is_shutdown(self,site,date,service):
    """ For a site/date(YYYY-MM-DD)/service determine if this is a
        planned shutdown.
        Returns:  Boolean
    """
</pre></blockquote>

---++ !InactiveResources.py
Class used to query !MyOSG for sites/resources that have been marked as <I>inactive</i>.

As an alternative to updating !MyOSG for planned downtime, an admin can also mark a __resource__ as *inactive*.  So when the LCG.py is checking for a __resource group__ not reporting to Gratia, it must also check for those marked inactive using the following criteria:
<blockquote><pre>
Information to display: Resource Group Summary
For Resource: Show services
Resource Groups to display: All resource groups
For Resource Group: Grid Type - OSG
For Resource: Provides the following services - Grid Services / CE
</pre></blockquote>

[[http://myosg.grid.iu.edu/rgsummary/?datasource=summary&summary_attrs_showservice=on&gip_status_attrs_showtestresults=on&downtime_attrs_showpast=all&account_type=cumulative_hours&ce_account_type=gip_vo&se_account_type=vo_transfer_volume&bdiitree_type=total_jobs&bdii_object=service&bdii_server=is-osg&start_type=7daysago&start_date=08%2F03%2F2011&end_type=now&end_date=08%2F03%2F2011&all_resources=on&gridtype=on&gridtype_1=on&service=on&service_1=on&service_central_value=0&service_hidden_value=0&active_value=0&disable_value=1][MyOSG Query]]
 - 
[[http://myosg.grid.iu.edu/rgsummary/xml?datasource=summary&summary_attrs_showservice=on&gip_status_attrs_showtestresults=on&downtime_attrs_showpast=all&account_type=cumulative_hours&ce_account_type=gip_vo&se_account_type=vo_transfer_volume&bdiitree_type=total_jobs&bdii_object=service&bdii_server=is-osg&start_type=7daysago&start_date=08%2F03%2F2011&end_type=now&end_date=08%2F03%2F2011&all_resources=on&gridtype=on&gridtype_1=on&service=on&service_1=on&service_central_value=0&service_hidden_value=0&active_value=0&disable_value=1][MyOSG XML Query]]

Methods used:
<blockquote><pre>
  def resource_is_inactive(self,resource):
    """ For a resource/date(YYYY-MM-DD)/service determine if this is a
        planned shutdown.
        Returns:  Boolean
    """
</pre></blockquote>

---++ !InteropAccounting.py
Class used to query !MyOSG for __resource groups__ with __resources__ having  the !WLCGInformation !InteropAccounting flag set to True indicating that this __resource group__ should be interfaced to APEL/WLCG.

Since some access was required to query the !MyOSG data, it seemed it would be nice to have an easy to use command line view of the for trouble shooting purpose.  So this process can be executed from the command line with the following usage.
<blockquote><pre>
./InteropAccounting.py action
    Actions:
    --show
        Displays MyOsg resource WLCG InteropAccounting and AccountingName data
        for all resouce groups with at least 1 InteropAccounting set to True.
    --is-interfaced=resource_group
        Displays the WLCG InteropAccounting option and AccountingName for the
        resource group specified.
    --interfaced-resource-groups
        Using the interfacedResourceGroups() API, returns a sorted list of the
        resource groups with the InteropAccounting set to True
    --resources=resource_group
        Using the interfacedResources(resource_group) API, returns a sorted list
        of the resources for a specified resource group with the
        Interopaccounting set to True.
    --is-registered=resource_group
        Using the isMyOsgResourceGroup(resource_group) API, returns True if
        the resource group specified is registered in MyOsg
</pre></blockquote>

The !MyOSG criteria used is:
<blockquote><pre>
 For Resource: Show WLCG Informatinon
                         Show services
                         Show FQDN / Aliases
For Resource Group: Grid Type - OSG
</pre></blockquote>

[[http://myosg.grid.iu.edu/rgsummary/?datasource=summary&summary_attrs_showwlcg=on&summary_attrs_showservice=on&summary_attrs_showfqdn=on&gip_status_attrs_showtestresults=on&downtime_attrs_showpast=&account_type=cumulative_hours&ce_account_type=gip_vo&se_account_type=vo_transfer_volume&start_type=7daysago&start_date=03%2F20%2F2009&end_type=now&end_date=03%2F27%2F2009&all_resources=on&facility_10009=on&site_10026=on&gridtype=on&gridtype_1=on&service_1=on&service_5=on&service_2=on&service_3=on&service_central_value=0&service_hidden_value=0&active_value=1&disable_value=1][MyOSG Query]]
 - 
[[http://myosg.grid.iu.edu/rgsummary/xml?datasource=summary&summary_attrs_showwlcg=on&summary_attrs_showservice=on&summary_attrs_showfqdn=on&gip_status_attrs_showtestresults=on&downtime_attrs_showpast=&account_type=cumulative_hours&ce_account_type=gip_vo&se_account_type=vo_transfer_volume&start_type=7daysago&start_date=03%2F20%2F2009&end_type=now&end_date=03%2F27%2F2009&all_resources=on&facility_10009=on&site_10026=on&gridtype=on&gridtype_1=on&service_1=on&service_5=on&service_2=on&service_3=on&service_central_value=0&service_hidden_value=0&active_value=1&disable_value=1][MyOSG XML Query]]


Methods used:
<blockquote><pre>
  def isRegistered(self,resource_grp):
    """ Returns True if the resource group is defined in MyOsg. """

  def interfacedResources(self,resource_group):
    """
       Returns a python list of MyOsg resources for the resource group specified
        with the InteropAccounting flag set to True.
    """

  def interfacedResourceGroups(self):
    """
       Returns a python list of MyOsg resource groups with the InteropAccounting
       flag set to True.
    """

  def WLCGAcountingName(self,resource_grp):
    """ Returns the WLCGInformation Accounting Name for a resource group.
        If not interfaced to WLCG, then returns the None value.
        Since the WLCGInformation is at the resource level and there may be
        multiple resources for a resource group, the 1st resource that is
        interfaced will be used and hopefully it is correct.
    """
</pre></blockquote>


---++ !Rebus.py
This class retrieves the latest WLCG Rebus topology csv file and provides various methods for viewing/using the data by executing:
   * wget http://wlcg-rebus.cern.ch/apps/topology/all/csv
It is important to understand that in the WLCG Rebus topology __site__ is equivalent to !MyOsg __resource_group__.

Additionally, this module can be executed from the command line to more easily view the topology.
<blockquote><pre>
Usage: %(program)s action [-help]

  Provides visibility into the WLCG Rebus topology for use in the
  Gratia/APEL/WLCG interface.     

  Actions:
    --show all | accountingnames | sites
        Displays the Rebus topology for the criteria specificed 
    --is-registered SITE
        Shows information for a site registered in WLCG REBUS topology
    --is-available
        Shows status of query against Rebus url.
</pre></blockquote>

Methods used:
<blockquote><pre>
  def isRegistered(self,site):
    """ Returns Trues if a resource group/site is registered in the WCLG."""

  def accountingName(self,site):
    """ Returns the WLCG REBUS Federation Accounting Name for a 
        registered resource group/site.
        If not registered, it will return an empty string.
    """
</pre></blockquote>

---++ !NormalizationFactors.py
This module is currently __NOT__ used in the APEL/WLCG interface.  It could be at some point in the future, however.  At this point in time (Aug 2011), there does not exist a reliable means of determining this value agreeable to all.  It was written to aid in the viewing of the currently
used values maintained in the __lcg-reportableSites__ file with options to compare that against a simple algorithm normalizing using the weighted average of the individual cluster values for a __resource_group__ based on GIP data.  The command line options for viewing this data are:
<blockquote><pre>
Usage:  %(program)s  action [--help] [--debug] [--site=<resource group>]

  If --site is specified, the actions will only display data for that
  resource group (aka site).

  Actions:
   --show-current
        Displays the currently reportable resource groups and NFs
   --show-gip
        Displays the NFs for resource groups caluculated from GIP
        subcluster data.
   --compare
        Displays all resource groups NFs compared against the currently
        reportable  resource group's NF
   --show-subcluster-data
        Displays the NFs for resource groups caluculated and the details of the
        GIP subcluster data used to calculate the NF.
   --show-benchmark
        Displays the SI2K value for all processor models
</pre></blockquote>


---++ lcg.sh
This shell script is used to execute the LCG.py process.  The primary purpose of this shell script is to get access to a !MySql client. The !MySql being used comes from Fermi UPS.  It assumes UPS is available via /fnal/ups/etc/setups.sh. There is no command line argument to override this.  All other command line arguments are passed directly to the LCG.py script which collects the data from the gratia database and updates the APEL database. <br /> <br />This script will log error messages to stdout. So it is important you do not redirect stdout/err in the cron entry.  This will insure that someone gets an email notification if a failure occurs. <br /> <br />It is also important that you 'cd' to the lcg.sh parent directory if you specify relative paths for the various files in the lcg.conf file.

---++ find-late-updates.sh
Shell script used to show sites/resource that have updated Gratia for the previous month during the current month.  This output of this is visible in the table column <i>late updates</i> here: http://gratia-osg-prod.opensciencegrid.org/gratia-data/interfaces/apel-lcg/

---++ create-apel-index.sh
Shell script that creates the index.html for: http://gratia-osg-prod.opensciencegrid.org/gratia-data/interfaces/apel-lcg/ <br />This is based on certain files in the log directory specified by the <i>LogSqlDir</i> attribute in the <i>lcg.conf</i> file.

---+ Configuration files
<a name="lcg_conf"/>
---++ Configuration (lcg.conf)
The _lcg.conf_ is the main configuration file used by the interface.


%TABLE{ tableborder="1" cellpadding="0" cellspacing="1" headerbg="#99CCCC" databg="#FFFFCC, #FFFFFF"}% 
%EDITTABLE{   format="| text, 25 | textarea, 4x50 |"  changerows="on" quietsave="on" editbutton="Edit table" }% 
| *File* | *Description* |
| !GratiaCollector | Data directory for Gratia collector: <br />   * /data/tomcat-gratia/webapps/gratia-data/interfaces/apel-lcg <br />The dat/xml/html files are made accessible via this collector. If you do not want the files copied to a collector, then use the keyword 'DO_NOT_SEND'. <br /> |
| [[#SiteFilterFile_lcg_reportableSit][SiteFilterFile]] | File with list of __resource_groups__ to be reported and their normalization factor. |
| [[#SiteFilterHistory_lcg_reportable][SiteFilterHistory]] | History directory for keeping previous periods (months)!SiteFilterFile's (<NAME>.YYYYMM) <br /> |
| [[#VOFilterFile_lcg_reportableVOs][VOFilterFile]] | File with list of VOs to be reported |
| [[#DBConfFile_lcg_db_conf][DBConfFile]] | Configuration file for databases and SSM configurations |
| !LogSqlDir | Directory for log files, dat/xml/html and SSM update and delete files. |
| !MissingDataDays | Number of days where a __resource_group__ has no data reported to Gratia for the month.  If more than this number of days, a warning/advisory email will be generated. |
| !FromEmail | Email address of the sender.  Since this is a cron run process, this is dependent on how email is set up locally. |
| !ToEmail | List of comma separated email addresses.  Email notifications are sent to this list for all executions of this interface for both success and failure. |

<a name="lcg_reportablesites"/>
---++ !SiteFilterFile (lcg-reportableSites)
This file identifies the set of sites/resources reportable to the APEL-LCG database and the normalization factor to be used in the gratia query.
   * token 1 - The __resource_group__  being reported to APEL.
   * token 2 - The normalization value to be used. 
These tokens are whitespace separated.   Comments inidcated with a line starting with a # sign. Empty lines are permitted.

Example:
<blockquote><pre>
##--- CMS Tier 1 -----
USCMS-FNAL-WC1     10264
##--- CMS Tier 2 -----
CIT_CMS_T2         12944
GLOW                9632
  :
####################################
#--- ATLAS Tier 2 -----
BNL-ATLAS          12372
#--- ATLAS Tier 2 -----
AGLT2               8500
HU_ATLAS_Tier2      8872
   :
#--- ALICE Tier 2 ----
NERSC-PDSF         13920
LC-glcc            15680

</pre></blockquote>
<b>Note: In the future, the need for this configuration file should be eliminated.  It would be replaced by a query of !MyOSG</b>


---+++ !SiteFilterHistory (lcg-reportableSites.history files)
This directory (lcg-reportableSites.history) contains the lcg-reportableSites files for each month (format: lcg-reportableSites/lcg-reportableSites.YYYYMM.  

Since the normalization factor changes over time, the only means of recreating past months data is to make this data time sensitive.  The interface program is designed to update the file for the current month every time it is run.  This provides the history for the latest normalization factor used.

When re-running a "past" (not current), the interface uses the time-stamped file for the respective month.  When updates are made, the file should be commited into CVS.

<a name="lcg_reportablevos"/>
---++ !VOFilterFile (lcg-reportableVOs)
This file identifies the VO data reported for each reportable site/resource.  
Example:
<blockquote><pre>
cms
uscms
atlas
usatlas
alice
</pre></blockquote>

<a name="lcg_db_conf"/>
---++ !DBConfFile (lcg-db.conf)
Identifies access information for the Gratia and APEL databases.

%TABLE{ tableborder="1" cellpadding="0" cellspacing="1" headerbg="#99CCCC" databg="#FFFFCC, #FFFFFF"}% 
%EDITTABLE{   format="| text, 25 | textarea, 2x50 |"  changerows="on" quietsave="on" editbutton="Edit table" }% 
| *File* | *Description* |
| !GratiaHost | Gratia database host |
| !GratiaPort | Gratia database port |
| !GratiaDB | Gratia database (schema) |
| | |
| SSMHome | The HOME directory for the SSM interface software. |
| SSMConfig | The SSM configuration file |
| SSMupdates | The base name of the SSM message file containing updates.  Format: YYYY-MM. [SSMupdate] |
| SSMdeletes | The base name of the SSM message file containing the same records as the SSMupdates file but with all values zeroed out..  Format: YYYY-MM. [SSMdeletes] |

---+ Output Data Files

---+ SSM

---++ SSM Installation

---++ SSM Configuration files

---+++ ssm.cfg

---+++ ssm.log.cfg

---++ Log files

---++ ssm.log

<a name="crontab"/>
---+ Crontab
As mentioned somewhere way back in this document, the general practice has been run this interface from the 1st of the current month thru the 8th of the next month (e.g. for November, it will run nightly from 11/1 thru 12/8) to accommodate sites/resources that may have had reporting problems and are in "catch-up" mode.  So 2 cron entries are required:
<blockquote><pre>
##########################################################################
# Gratia-to-APEL (WLCG) transfer crontab entry
#
# Note: When scheduling the time of these scripts, you should first
#       check with the root cron's database backup to insure there
#       is not a conflict.
#       This script also must be run on the same host as the
#       tomcat-gratia collector as it copies files into its
#       ./webapps/gratia-data/interfaces/apel-lcg directory.
#-------------------------------------------------------------------------
#
# Previous month's transfers
# For just the 1st n days of the month to insure all have reported
#
15 0 1-8 * *   dir=/home/gratia/interfaces/apel-lcg; cd $dir; ./lcg.sh --config=lcg.conf --date=previous --update;
                     ./create-apel-index.sh /data/tomcat-gratia
#
#-------------------------------------------------------------------------
# Current month's transfers.
# Always daily.
#
15 1 * * *   dir=/home/gratia/interfaces/apel-lcg; cd $dir; ./lcg.sh --config=lcg.conf --date=current --update;
                ./find-late-updates.sh /data/tomcat-gratia; ./create-apel-index.sh /data/tomcat-gratia
#
##########################################################################
</pre></blockquote>


%STOPINCLUDE%

<!-- MAJOR UPDATES
For significant updates to the topic, consider adding your 'signature' (beneath this editing box) !-->
---++!! Major updates
<!--Future editors should add their signatures beneath yours!-->
-- Main.JohnWeigand - 08 Feb 2010: Split this out as a separate twiki