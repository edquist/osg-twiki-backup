%META:TOPICINFO{author="BrianBockelman" date="1175874287" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="CustomCostCalculator"}%
---++ Compiling source against dCache

This page provides a guide on how to compile your java source to work with dCache.  It assumes that you have dCache installed on the compile node, with the home directory of /opt/d-cache.

If this is not true, some customizations might be needed.

%TOC%

---+++ Prerequisites
You will need the following things installed on your system:
   * Java.  This is also a prerequisite for dCache.  Only the Sun JVM was tested.  Version 1.5 or higher is recommended.
   * Ant.  Version 1.6.5 was tested, but most of the tasks used were rather generic.  Any version within the last 3 years should be acceptable.
   * dCache.  Use the dcache-server RPM provided by dCache.org.  Only version 1.7.0-p34 was tested at this time, although any version should work.

---+++ Directory Layout

The ant build file that will be produced assumes the following directory layout:

   * Top level directory (.)
      * =build.xml= Ant build file
      * =bin= - the compiled class files will be placed here.
      * =src= - The source files located here, in the appropriate package directory.  For the Nebraska Cost Calculator, the full class name is edu.unl.dCache.poolManager.CostCalculationV1, so the source directory have one java file, =CostCalculationV1.java= located in =src/edu/unl/dCache/poolManager/CostCalculationV1.java=
      * =dist= - the final JAR file will be placed here.  In our example, it is called =dCache-Nebraska.jar=.

---+++ Build file

Ant expects the following build file to be located in =build.xml= in your top level directory.
<verbatim>
<project name="dCacheMods" default="dist" basedir=".">
    <description>
        Build file for Nebraska's custom dCache modifications.
        Tested against dCache JARs v1.7.0-p34, built with Ant
        1.6.5.
 
        Ant file was built from the apache ant manual.
    </description>

  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="bin"/>
  <property name="dist"  location="dist"/>
  <property name="ourHome" location="/opt/d-cache" />

  <!-- set up classpath -->
  <path id="project.class.path">
    <pathelement path="${classpath}" />
    <fileset dir="${ourHome}/classes">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" classpathref="project.class.path" excludes="edu/unl/dCache/doors/**"/>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>

    <!-- Put everything in ${build} into Nebraska-dCache.jar file -->
    <jar jarfile="${dist}/Nebraska-dCache.jar" basedir="${build}"/>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete includeemptydirs="true">
      <fileset dir="${build}" includes="**/*" />
      <fileset dir="${dist}"  includes="**/*" />
    </delete>
  </target>
</project>
</verbatim>

---+++ Running Ant
Assuming that your =build.xml= file has been customized to your project's needs, building the project is easy.  Inside the top level directory, simply type:

=ant=

Ant will automatically look for =build.xml= and build all the top-level targets.  You should see output like this:

<verbatim>
$ ant
Buildfile: build.xml

init:

compile:
    [javac] Compiling 18 source files to /Users/brian/Documents/workspace/dCacheNebraska/bin
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.

dist:
    [mkdir] Created dir: /Users/brian/Documents/workspace/dCacheNebraska/dist
      [jar] Building jar: /Users/brian/Documents/workspace/dCacheNebraska/dist/Nebraska-dCache.jar

BUILD SUCCESSFUL
Total time: 6 seconds
</verbatim>

---++ Installing the new JAR.

Take the produced JAR in the =dist= directory, and place it in =/opt/d-cache/classes=.  Edit the file =/opt/d-cache/classes/extern.classpath= to include the JAR in dCache's class path.  Now, any dCache process which is started up should have access to your classes.

-- Main.BrianBockelman - 06 Apr 2007
