%META:TOPICINFO{author="BrianBockelman" date="1175872458" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="StorageForum"}%
---++ Custom Cost Calculators for dCache

%TOC%

This page describes how to create a custom cost calculator for dCache.  When a new file replica is added to dCache, dCache asks the !PoolManager to calculate the cost of storing the file on each pool, and the pool with the least cost will host the new replica.  For more information, see this page:

[[http://www.dcache.org/manuals/Book/cf-pm-cm.shtml][The Cost Module chapter from The dCache Book]]

Included is the cost calculator used at Nebraska.

---++ Writing the calculator
The cost calculator must implement the !CostCalculatable and java.io.Serializable interfaces.  Below is the definition of the !CostCalculatable interface:

<verbatim>
public interface CostCalculatable {

    public double getSpaceCost();
    public double getPerformanceCost();
    public void   recalculate( long filesize );
}
</verbatim>

The signature of the constructor dCache will attempt to use is this:

=public !CostCalculation( !PoolCostInfo )=

Usually, dCache will first call =recalculate= with the file's size, then get the performance cost (also referred to as the CPU cost) and the space cost afterward.

---+++ The example

Just the signature of the interface doesn't help much.  However, examples are always pleasant to work with.  Here at Nebraska, the algorithm we use for cost calculations is below:

<verbatim>
cpucost = (movers.active / stores.maxActive)^3 + .1 * random()
storagecost = (freespace - 2*filesize < gap) ? 2e9 : 1 + (totalspace-freespace- filesize) / totalspace + .1 * random()
</verbatim>

*movers.active* is the number of movers currently being used at the pool (usually WAN transfers plus LAN transfers).  *stores.maxActive* is the maximum number of HSM stores the pool can perform.  Because there is no tape system at Nebraska, we instead use it as a measure of node capability.  Due to the cubed term in cpucost, if the number of transfers on a node gets above the stated capability, the costs of doing an additional transfer is very high.  Otherwise, *cpucost << 1*.

The storage cost is designed to be the dominating factor, and it is approximately 1 + (% used space).  So, dCache will prefer nodes with the least percent of space used.  Note the conditional statement - if the amount of freespace is below a certain gap size (usually 4 GB), the storage cost will be extremely high.

Both the CPU cost and the storage cost have the =.1 * random()= term in them.  This is to break ties.  The pool information is only updated at certain time intervals.  So, if 20 new file transfers start up at once, it's highly likely the cost calculator will pick the same pool each time.  With the random factor put in, file transfers will be randomly distributed among "close" pools.

The full implementation of the Nebraska Cost Calculator is attached to this document.

---++ Building a JAR file

[[CompilingAgainstDcache][Use this page to learn how to build JARs with dCache]].  Simply following the directions from the previous link, add your source to the source directory, and rebuild the JAR.

---++ Deploying the new calculator

   * Place the created JAR or compiled bytecode in on the dCache head node.
   * The cost calculator is used by the cost module of the pool manager.  The pool manager is, on a default install, defined in the following file: */opt/d-cache/config/dCache.batch*.  Look for the lines that begin with: =create diskCacheV111.poolManager.PoolManagerV5 !PoolManager= and add the -costCalculator=<class name> option.
   For the UNL cost calculator, the full class name is *edu.unl.dCache.poolManager.CostCalculationV1*, so we have the following entry in *dCache.batch*:
<verbatim>
   create diskCacheV111.poolManager.PoolManagerV5 PoolManager \
     "${config}/PoolManager.conf \
         -replyObject \
         -poolStatusRelay=broadcast \
         -costModule=diskCacheV111.poolManager.CostModuleV1 \
         -costCalculator=edu.unl.dCache.poolManager.CostCalculationV1"
</verbatim>
   There should be no spaces after the backslash =\= on each line, and make sure that you close the double quotes ="= at the end of the last line
   * Finally, restart dCache on the node.

Again, once we have better documentation on compiling Java files for dCache, we'll make this section more clear.

-- Main.BrianBockelman - 05 Apr 2007

%META:FILEATTACHMENT{name="CostCalculationV1.java" attachment="CostCalculationV1.java" attr="" comment="Java class implementing the Nebraska Cost Calculator" date="1175872457" path="CostCalculationV1.java" size="2402" stream="CostCalculationV1.java" user="Main.BrianBockelman" version="1"}%
