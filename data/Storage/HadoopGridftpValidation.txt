%META:TOPICINFO{author="BrianBockelman" date="1285856112" format="1.1" version="1.5"}%
%META:TOPICPARENT{name="Hadoop"}%
---+!! *<noop>%SPACEOUT{ "%TOPIC%" }%*
%TOC%
---++ Testing a gridftp endpoint
Testing a gridftp endpoint is fairly straight forward.  You'll need to know the SE path endpoint on the hadoop door and you'll have to have a valid gridcert that is permitted to move files in and out of your site.
   * generate a proxy certificate (grid-proxy-init)
   * attempt to pull from your gridftp door.  The command will look something like:
  <verbatim>
globus-url-copy gsiftp://<server>:port/path/to/test/file file:////tmp/testfile.out
</verbatim>
the port is most likely 2811.
   * attempt to push a file to your gridftp door.  The command will look something like:
<verbatim>
globus-url-copy  file:////tmp/testfile.out gsiftp://<server>:port/path/to/test/file
</verbatim>

---++ Monitoring the gridftp endpoint with RSV.
You should try and monitor standalone gridftp doors via RSV.
<verbatim>
 ./configure_osg_rsv --user rsvuser --init  --gridftp-uri gridftp.domain.name --gridftp-probes --gratia --grid-type "OSG" --consumers --verbose --setup-for-apache --proxy /tmp/x509up_u<uid>
</verbatim>

---++ Monitoring the gridftp endpoint with Nagios
The gridftp endpoints can be monitored with the standard check_tcp plugin for Nagios.  This won't tell you if your gridftp server is functioning correctly like the RSV test would, but it will serve as a simple ping test to verify that the gridftp service is alive.  An incomplete nagios configuration for such a check would look like:

<verbatim>
define command{
        command_name    check_gridftp
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -t 30 -p $ARG1$ -e "GridFTP Server 2.8"
}

define service{
        use                             your-service-template
        host_name                       gridftp01.ultralight.org,gridftp02.ultralight.org
        service_description             GRIDFTP
        check_command                   check_gridftp!2811
}
</verbatim>