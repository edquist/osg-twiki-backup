%META:TOPICINFO{author="RohanMathure" date="1349277019" format="1.1" reprev="1.2" version="1.2"}%
*OSG PKI Command Line Clients manual*
-----

*User Documentation:*

The scripts are tested to work on python environment 2.4 or higher. 

The scripts have two modes of execution.
First is the normal mode of execution, where the user invokes the scripts with the parameters specified below. In this mode he connects to the production server and requests from the productions OIM server.
In the second mode, the user provides a '-T' parameter where the user connects to the OIM-ITB server which is the test server and all his requests are handled at the test server.

*osg-cert-request*:  Request a host certificate for registered users. 

This script:
   * Generates a new host private key and CSR
   * Only important part of CSR is CN=<hostname> component
   * Saves the host private key to disk (as specified by the user)
   * Prompts the user for their private key pass phrase
   * Authenticates to OIM and posts the CSR as a request to OIM
   * Returns the request Id to the user

*Inputs:*
   * fully-qualified hostname
   * filename to store private key [Optional, default is ./hostkey.pem]
   * path to user's certificate [Optional, default is path specified by
    $X509_USER_CERT environment variable, ~/.globus/usercert.pem]
   * path to user's private key [Optional, default is path specified by
    $X509_USER_KEY environment variable, ~/.globus/userkey.pem]
   * Passphrase for user's private key via non-echoing prompt.

*Outputs:*
   * Private key, to filename specified or ./hostkey.pem
   * Request Id, to stdout

----------------------------------------------------------------------
*osg-cert-retrieve*: Retrieve a certificate (host or user) from OIM given a request Id. Since certificates are public, it does not authenticate to OIM. The user needs to have a pre approved certificate for this script to retrieve the requested certificate.

This script:
   * Accepts a request Id from the user
   * Connects to OIM and requests the certificate identified by the request id
   * Write the certificate to disk (as specified by the user)

*Inputs:*
   * Request Id
   * Filename to store certificate [Optional, default is ./hostcert.pem]

*Outputs:*
   * Host certificate as PEM, to filename specified or ./hostcert.pem

----------------------------------------------------------------------
*osg-gridadmin-cert-request*: Request and retrieve mutliple host certificates from OIM. Authenticates to OIM and is only for use by Grid Admins for certificates they are authorized to vet.
The certificates when requested are stored with the format of hostname-requestid.pem (i.e. the id generated from the request for the certificate)
The key is generated as hostname-serial number for that hostname.

This script does the following in the process of acquiring certificates for the hostnames specified:
   * Reads a list of fully-qualified hostnames from a file specified by the user.
   * For reach hostname:
   * Generates a new private key and CSR
   * Only important part of CSR is CN=<hostname> component
   * Writes the private key to a file with filename:
       <prefix>/<hostname>-key.pem
   * Prompts the user for their private key pass phrase
   * Pass phrase is cached so user is not re-prompted
   * Authenticates to OIM and posts the CSRs as a single request to OIM
   * Request id is returned and subsequently used
   * Authenticates to OIM and approves the request
   * Waits one minute for request to be processed by OIM
   * Connects to OIM and attempts to retrieve certificates
   * Writes out any certificates it retrieves with filename
        of <prefix>/<hostname>-<red-id>.pem
   * if all certificates have been retrieved, exits loop
   * Wait 5 seconds and repeat.

*Inputs:*
   * filename of list of hostnames
   * prefix path in which to write private keys and certificares [default: .]
   * path to user's certificate [Optional, default is path specified by
    $X509_USER_CERT environment variable, ~/.globus/usercert.pem]
   * path to user's private key [Optional, default is path specified by
    $X509_USER_KEY environment variable, ~/.globus/userkey.pem]
   * Passphrase for user's private key via non-echoing prompt.

*Outputs:*
   * N host certificates in PEM format
   * N private keys in PEM format
-------------------
*Developer Documentation:*

The OSGPKITool scripts are developed in python and are intended to work in the python module 2.4 and higher(especially 2.4 and 2.6). The external packages required for the scripts include:
   * M2Crypto

The following are the common files used and the purpose they serve:

   *  pki-clients.ini: This file is a common variable storage file in the form of urls. The file is imported into scripts using ConfigParser and then the urls contained in the file are used of various operations. The contents of the file are static and are not supposed to be changed for a fairly large amount of time.

   * OSGPKIUtils.py: This file is a common utility file that contains functions for key pair generation and certificate signing request generation. It uses the M2Crypto module to perform the said functions and stores the key pair into the specified file as well. The functions in this file are imported for certificate request scripts i.e osg-cert-request and osg-gridadmin-cert-request.

The following is the brief description of each of these scripts and a walk through for the code in them:

   * osg-cert-request: This script as the name suggests is used to request a certificate. It uses the common utility i.e. OSGPKIUtils.py described above to generate and store a key pair on the file system. The certificate signing request is generated form the OSGPKIUtils.py and then sent to the OIM. The arguments are parsed using the optparse utility since it is compatible with python 2.4. Optparse doesn't handle the required options, hence the handling of the required options are done explicitly.The key is written in pem format and the csr is base 64 encoded pkcs10 format encrypted using 2048 bits RSA encryption using sha1 digest.

   * osg-cert-retrieve: This script is used to retrieve the requested csr using the request ID. The script checks for the request to be in approved state. If not the script fails asking the user to get it approved first. If in approved state, the script issues the certificate if not issued and then retrieve it in pem format. After retrieval, the certificate dump is cleansed and formatted as per what is the pem format using several string operations.

   * os-gridadmin-cert-request: This script is used by the gridadmin to request and retrieve certificates(single or in bulk of 50). The script again uses the common script OSGPKIUtils.py to generate the key pair and the certificate signing request. The key and certificate of the gridadmin that would be called credentials can be read from a file as well from exported variables.

The script generated data to create csr serially i.e one after the another. The bulk process takes place for approval, issuance and retrieval part. The csr string is concatenated and then sent to the server for these processes.

The retrieved certificates are stored in separate files with a suffix of the serial number request in the bulk request processing i.e. (if the request is the third in the bulk request, it's certificate would be stored with '-3' suffix).

The write_cert function is purely designed to perform the string operations that are necessary to cleanse the certificate dump that we get and store them in different files as certificates.

The arguments are parsed using the optparse utility since it is compatible with python 2.4. Optparse doesn't handle the required options, hence the handling of the required options are done explicitly.
The key is written in pem format and the csr is base 64 encoded pkcs10 format encrypted using 2.48 bits RSA encryption using sha1 digest.
