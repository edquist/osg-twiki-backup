%META:TOPICINFO{author="RohanMathure" date="1355341334" format="1.1" reprev="1.8" version="1.8"}%
---++ OSG PKI Command Line Clients

%TOC%

---+++ Overview

The OSG PKI Command Line Clients provide a command-line interface for requesting and issuing host certificates from the OSG PKI. They complement the [[https://oim-itb.grid.iu.edu/oim/certificateuser][OIM Web Interface]].

---+++ Prerequisites

The scripts are tested to work on Python version 2.4+. They have not been tested on Python version 3. 

---+++ Installation

The command-line scripts have been packaged as an RPM and are currently in the the osg-development repository.

The following commands may be prerequisites if you have not already set up your system to access OSG RPM repositories:

<verbatim>
rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-7.noarch.rpm
rpm -Uvh http://repo.grid.iu.edu/osg-el6-release-latest.rpm
</verbatim>

To install the RPM, run:

<verbatim>
yum install --enablerepo=osg-development osg-pki-tools
</verbatim>

---+++ Source Code

The source code is available directly at:

<verbatim>
svn checkout https://vdt.cs.wisc.edu/svn/software/osg-cert-scripts-v3/
</verbatim>


---+++ Test Mode

The scripts have two modes of execution.

In the normal mode of execution, the script connects to the production server and generated certificates are from the !DigiCert-Grid Grid-Only Trust CAs.

If the user provides a '-T' parameter on the command-line, the scripts connect to the OIM-ITB server and any generated certificates are issued by the !DigiCert-Grid Test CAs. This mode is intended for testing and training. The resulting certificates are not usable in a production environment.

For more information on both CAs, please see http://www.digicert-grid.com/

---+++ Usage

---++++ pki-clients.ini

The INI file contains information divided into two sections for ITB and OIM such as:
   * Request URL
   * Approve URL
   * Retrieve URL
   * Host URL

These parameters are fed in as input to the script depending upon the mode of execution of the script i.e. test and OIM. The loading is centralized in the OSGPKIUtils.py script. This script checks for pki-clients.ini file at three location in order:
   * $HOME/.osg-pki/OSG_PKI.ini
   * ./pki-clients.ini
   * /etc/pki-clients.ini


---++++ osg-cert-request

 Sends a request for a host certificate.

 This script generates a private key and submits a request for a certificate to the OSG PKI. The request will be approved by an appropriate Grid Admin. You will receive an email when this approval has been completed containing directions on how to run 'osg-cert-retreive' to retrieve the certificate.

This script:
   * Generates a new host private key and CSR
   * Only important part of CSR is CN=<hostname> component
   * Saves the host private key to disk (as specified by the user)
   * Prompts the user for their private key pass phrase
   * Authenticates to OIM and posts the CSR as a request to OIM
   * Returns the request Id to the user

*Inputs:*
   * fully-qualified hostname
   * filename to store private key [Optional, default is ./hostkey.pem]
   * path to user's certificate [Optional, default is path specified by
    $X509_USER_CERT environment variable, ~/.globus/usercert.pem]
   * path to user's private key [Optional, default is path specified by
    $X509_USER_KEY environment variable, ~/.globus/userkey.pem]
   * Passphrase for user's private key via non-echoing prompt.

*Outputs:*
   * Private key, to filename specified or ./hostkey.pem
   * Request Id, to stdout

*Usage*: osg-cert-request [options]
<verbatim>
*Options*:

  -h, --help            show this help message and exit
  -c CSR, --csr=CSR     Specify CSR name (default = gennew.csr)
  -k PRIKEY, --key=PRIKEY
                        Specify Private Key Name (default=genprivate.key)
  -o Output Keyfile, --outkeyfile=Output Keyfile
                        Specify the output filename for the retrieved user
                        certificate.  Default is ./hostkey.pem
  -y CC List, --cc=CC List
                        Specify the CC list(the email id's to be CCed)
  -m Comment, --comment=Comment
                        The comment to be added to the request
  -t CN, --hostname=CN  Specify hostname for CSR (FQDN)
  -e EMAIL, --email=EMAIL
                        Email address to receive certificate
  -n NAME, --name=NAME  Name of user receiving certificate
  -p PHONE, --phone=PHONE
                        Phone number of user receiving certificate
  -T, --test            Run in test mode
  -q, --quiet           don't print status messages to stdout

</verbatim>

Example:

<verbatim>
python osg-cert-request -t hostname.domain.com -e emailaddress@domain.com -n "Your Name" -p 9999999999 -y "xyz@domain.com" -m "This is my comment"
</verbatim>

---++++ osg-cert-retrieve

Retrieve a certificate (host or user) from OIM given a request Id. Typically you will run this script after submitting a request with 'osg-cert-request' and receiving an email telling you your certificate has been approved.

You can also use this script to retrieve other certificates that have been previously issued (assuming you know their request id number).

Since certificates are public, no authentication of the user is required.

This script:
   * Accepts a request Id from the user
   * Connects to OIM and requests the certificate identified by the request id
   * Writes the certificate to disk (as specified by the user)

*Inputs:*
   * Request Id
   * Filename to store certificate [Optional, default is ./hostcert.pem]

*Outputs:*
   * Host certificate as PEM, to filename specified or ./hostcert.pem

*Usage*:osg-cert-retrieve -h/--help [for detailed explanations of options]

<verbatim>
Options:
  -h, --help            show this help message and exit
  -i ID, --id=ID        Specify ID# of certificate to retrieve[Required]
  -o ID, --certfile=ID  Specify the output filename for the retrieved user
                        certificate . Default is ./hostcert.pem
  -T, --test            Run in test mode
  -q, --quiet           don't print status messages to stdout

</verbatim>

Example:

<verbatim>
python osg-cert-retrieve -i 555
</verbatim>

---++++ osg-gridadmin-cert-request

Request and retrieve multliple host certificates from OIM. Authenticates to OIM and is only for use by Grid Admins for certificates they are authorized to approve. This script is only supported with all hosts being in the same domain (so we ensure they go to the same Grid Admin).
The certificates are stored with the format of 'hostname-requestid.pem' (i.e. the id generated from the request for the certificate).
The key is stored as 'hostname-serial-key.pem'.

This script does the following in the process of acquiring certificates for the hostnames specified:
   * Reads a list of fully-qualified hostnames from a file specified by the user.
   * For reach hostname:
   * Generates a new private key and CSR
   * Only important part of CSR is CN=<hostname> component
   * Writes the private key to a file with filename:
       <prefix>/<hostname>-key.pem
   * Prompts the user for their private key pass phrase
   * Pass phrase is cached so user is not re-prompted
   * Authenticates to OIM and posts the CSRs as a single request to OIM
   * Request id is returned and subsequently used
   * Authenticates to OIM and approves the request
   * Waits one minute for request to be processed by OIM
   * Connects to OIM and attempts to retrieve certificates
   * Writes out any certificates it retrieves with filename
        of <prefix>/<hostname>-<red-id>.pem
   * if all certificates have been retrieved, exits loop
   * Wait 5 seconds and repeat.

*Inputs:*
   * filename of list of hostnames
   * prefix path in which to write private keys and certificares [default: .]
   * path to user's certificate [Optional, default is path specified by
    $X509_USER_CERT environment variable, ~/.globus/usercert.pem]
   * path to user's private key [Optional, default is path specified by
    $X509_USER_KEY environment variable, ~/.globus/userkey.pem]
   * Passphrase for user's private key via non-echoing prompt.

*Outputs:*
   * N host certificates in PEM format
   * N private keys in PEM format

*Usage*:osg-gridadmin-cert-request -h/--help [for detailed explanations of options]

<verbatim>

*Options*:
  -h, --help            show this help message and exit
  -k PKEY, --pkey=PKEY  Specify Requestor's private key (PEM Format).  If not
                        specified will take the value of X509_USER_KEY or
                        $HOME/.globus/userkey.pem
  -c CERT, --cert=CERT  Specify Requestor's certificate (PEM Format).  If not
                        specified will take the value of X509_USER_CERT or
                        $HOME/.globus/usercert.pem
  -T, --test            Run in test mode
  -q, --quiet           don't print status messages to stdout

*Hostname Options*:
    Use either of these options.     Specify hostname as a single hostname
    using -H/--hostname     or specify from a file using -f/--hostfile.

    -H HOSTNAME, --hostname=HOSTNAME
                        Specify the hostname or service/hostname for which you
                        want to request the certificate for.  If specified
                        -f/--hostfile will be ignored
    -f HOSTFILE, --hostfile=HOSTFILE
                        Filename with one hostname or service/hostname per
                        line
</verbatim>

Examples:

<verbatim>
python osg-gridadmin-cert-request -f filename -k privatekeyfile -c certificatefile
</verbatim>

<verbatim>
python osg-gridadmin-cert-request -H hostname.domain.com -k privatekeyfile -ccertificatefile
</verbatim>

