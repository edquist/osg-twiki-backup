%META:TOPICINFO{author="DouglasStrain" date="1353019759" format="1.1" version="1.11"}%
%META:TOPICPARENT{name="NavUserApplications"}%
<!-- Local variables
   * Set CONDORREL = 7.6.0
   * Set AS_OF_DATE = May 27, 2011
-->

---+!! !GlideinWMS VO Frontend Installation
%DOC_STATUS_TABLE%
%TOC{depth="3"}%

---+ About This Document

This document describes how to install the Glidein Workflow Managment System (!GlideinWMS) VO Frontend for use with the OSG glidein factory.  This software is the minimum requirement for a VO to use glideinWMS.

This document assumes expertise with Condor and familiarity with the glideinWMS software.  It *does not* cover anything but the simplest possible install.   Please consult the [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/install.html][Glidein WMS reference documentation]] for advanced topics, including non-=root=, non-RPM-based installation.

This document covers three components of the !GlideinWMS a !VO needs to install:
   * *User Pool Collectors*: A set of =condor_collector= processes.  Pilots submitted by the factory will join to one of these collectors to form a Condor pool.
   * *User Pool Schedd*: A =condor_schedd=.  Users may submit Condor vanilla universe jobs to this schedd; it will run jobs in the Condor pool formed by the *User Pool Collectors*.
   * *Glidein Frontend*: The frontend will periodically query the *User Pool Schedd* to determine the desired number of running job slots.   If necessary, it will request the factory to launch additional pilots.

This guide covers installation of all three components on the same host: it is designed for small to medium VOs (see the Hardware Requirements below).  Given a significant, large host, we have been able to scale the single-host install to 10,000 running jobs.

%ATTACHURL%/simple_diagram.png

%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="Header"}%
%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="CommandLine"}%

---+ How to get Help?

To get assistance please use [[HelpProcedure][this page]]. 

---+ Requirements
 
---++ Hardware requirements

The Glidein WMS VO Frontend has the following requirements:
   * *CPU*: Four cores, preferably no more than 2 years old.
   * *RAM*: 3GB plus 2MB per running job.  For example, to sustain 2000 running jobs, a host with 5GB is needed.
   * *Disk*:  30GB will be plenty sufficient for all the binaries, config and log files related to glideinWMS.  As this will be an interactive submit host, plan enough disk space for your users' jobs.  Depending on your workflow, this might require 2MB to 2GB per job in a workflow.
   * *Network*:  The VO frontend must have reliable network connectivity, be on the public internet (no NAT), and preferably with no firewalls.  Each running pilot requires 5 outgoing TCP ports.  Incoming TCP ports 9618 to 9660 must be open.
      * For example, 2000 running jobs require about 10,100 TCP connections.  This will overwhelm many firewalls; if you are unfamiliar with your network topology, you may want to warn your network administrator.

---++ Operating system

This has been tested on SL5.5 and !CentOS 5.5, x86_64 architecture.  Any RHEL-5.5 clone is supported.  Other platforms are not supported.

---++ Required software

All software requirements are defined in the RPM, and will be pulled in at install time.

---++ Users

%STARTSECTION{"Users"}%
| *User* | *Comment* |
| =frontend= | This user runs the Glidein VO frontend.  It also owns the certificate forwarded to the factory to use for the glideins.|
| =condor= | Condor user (installed via dependencies). |
%ENDSECTION{"Users"}%

---++ Certificates

The OSG Client will install the CA certificates and CRL as part of the installation.

The VO Frontend will use two certificates in its communication with the Glidein WMS Factory:
   * Glidein Frontend Host cert - The use of a service or host certificate is recommended. The Frontend will create a proxy from the certificate.
   * User Submitter proxy - This proxy is used to submit the glidein jobs, therefore must be authorized to access to the CEs where jobs are submitted.

<!--
It is possible also to use a single certificate/proxy for both functions. It is also possible to use more than one certificate to submit glidein.
A third certificate, User Pool Collector cert, is used to secure the communication between the User Pool Collector and the User Pool Schedd, two components of the VO Frontend.
-->
Certificates will be in PEM format, a certificate file and a key file. They must be owned by the user running the service (check also that it can access the directory where you stored the certificates) and have the right permission (600).

The host certificate and key needs to be located in /etc/grid-security/hostcert.pem and /etc/grid-security/hostkey.pem.

<!--
The installer will ask for several DNs for GSI authentication. You have the option of using a service certificate or a proxy. These should be created and put in place before running the installer. The following is a list of DNs the installer will ask for:

    * WMS Collector cert/proxy DN
    * User Pool Collector cert/proxy DN
    * User Submitter cert/proxy DN
    * Glidein Frontend Condor cert/proxy DN (cannot use a cert here)

%RED%Some questions:
   * How is that 4 certificates are mentioned while only 2 are used (this is from the VO frontend installation doc)?
   * What means "Glidein Frontend Condor cert/proxy DN (cannot use a cert here)" cert/proxy and cannot use cert means only proxy or this refers to personal/service certs?
%ENDCOLOR%

Note: In some places the installer will also ask for nicknames to go with the DNs. For the most part the name given doesn't really matter. There is one case where is does matter. If you are using privilege separation, then, on the WMS Collector, the nickname for each Glidein Frontend must be the username that you created for the frontend.
Note 2: The installer will ask if these are trusted Condor Daemons. Answer 'y'. 
-->


---++ OSG Factory access


Before installing the Glidein WMS VO Frontend you need the information about a [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/factory/index.html][Glidein Factory]] that you can access:
   1 (recommended) OSG is managing a factory at UCSD and you can request access to it
   1 You have another Glidein Factory that you can access
   1 You [[InstallGlideinWMSFactory][install your own Glidein Factory]]

To request access the OSG Glidein Factory you have to send an email to osg-gfactory-support@physics.ucsd.edu providing:
   1 Your Name
   1 The VO that is utilizing the VO Frontend
   1 The DN of the proxy you will use to submit pilots (User Submitter cert DN) and communicate with the Factory.
   1 You can propose a security name that will have to be confirmed/changed by the Factory managers (see below)
   1 A list of sites where you want to run:
      * Your VO must be supported on those sites
      * You can provide a list or piggy back on existing lists, e.g. all the sites supported for the VO. Check with the Factory managers
      * You can start with one single site 
In the reply from the OSG Factory managers you will receive some information needed for the configuration of your VO Frontend
   1 The exact spelling and capitalization of your VO name. Sometime is different from what is commonly used, e.g. OSG VO is "OSGVO".
   1 The host of the Factory Collector: =glidein-1.t2.ucsd.edu=
   1 The DN os the factory, e.g. =/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu=
   1 The factory identity, e.g.: =gfactory@glidein-1.t2.ucsd.edu=
   1 The identity on the factory you will be mapped to. Something like: =username@glidein-1.t2.ucsd.edu=
   1 Your security name. A unique name, usually containing your VO name: =My_SecName=
   1 A string to add in the main factory query_expr in the frontend configuration, e.g. =stringListMember("%RED%VO%ENDCOLOR%",GLIDEIN_Supported_VOs)=. From there you get the correct name of the VO (above in this list).


---+ Installation Procedure

%INCLUDE{"YumRepositories" section="OSGRepoBrief" TOC_SHIFT="+"}%

%INCLUDE{"InstallCertAuth" section="OSGBriefCaCerts" TOC_SHIFT="+"}%

%STARTSECTION{"InstallGWMSFrontend"}%
---++ Download and install the VO Frontend RPM

The RPM is available in the OSG repository:

Install the RPM and dependencies (be prepared for a lot of dependencies).

   <pre class="rootscreen">%UCL_PROMPT_ROOT% yum install glideinwms-vofrontend</pre>

This will install the current production release verified and tested by OSG with default condor configuration.
This command will install the glideinwms vofrontend, condor, the OSG client, and all the required dependencies all on one node.

If you wish to install a different version of !GlideinWMS, add the "--enablerepo" argument to the command as follows:

   * =yum install --enablerepo=osg-testing glideinwms-vofrontend=: The most recent production release, still in testing phase.  This will usually match the current tarball version on the !GlideinWMS home page.  (The osg-release production version may lag behind the tarball release by a few weeks as it is verified and packaged by OSG).  Note that this will also take the osg-testing versions of all dependencies as well.
   * =yum install --enablerepo=osg-contrib glideinwms-vofrontend=:  The most recent development series release, ie version 3 release.  This has newer features such as cloud submission support, but is less tested.

Note that these commands will install default condor configurations with all services on one node.

%ENDSECTION{"InstallGWMSFrontend"}%

---+++ Advanced: Multi-node Installation 

For advanced users requiring heavy usage on their submit node, you may want to consider splitting the usercollector, user submit, and vo frontend services.

This can be doing using the following three commands (on different machines):

<pre class="rootscreen">
%UCL_PROMPT_ROOT% yum install glideinwms-vofrontend-standalone
%UCL_PROMPT_ROOT% yum install glideinwms-usercollector
%UCL_PROMPT_ROOT% yum install glideinwms-userschedd
</pre>

In addition, you will need to perform the following steps:

   * On the vofrontend and userschedd, modify CONDOR_HOST to point to your usercollector.  This is in =/etc/condor/config.d/00_gwms_general.config=.  You can also override this value by placing it in a new config file.  (For instance, =/etc/condor/config.d/99_local_custom.config= to avoid rpmsave/rpmnew conflicts on upgrades).
   * In =/etc/condor/certs/condor_mapfile=, you will need to all DNs for each machine (userschedd, usercollector, vofrontend).  Take great care to escape all special characters.  Alternatively, you can use the =glidecondor_addDN= to add these values.
   * In the =/etc/gwms-frontend/frontend.xml= file, change the schedd locations to match the correct server.  Also change the collectors tags at the bottom of the file.  More details on frontend xml are in the following sections.


---+ Configuration Procedure 

After installing the RPM you need to configure the components of the Glidein WMS VO Frontend:
   1. Edit Frontend configuration options
   1. Edit Condor configuration options
   1. Create a Condor grid map file
   1. Reconfigure and Start frontend

---++ Configuring the Frontend

The configuration file is =/etc/gwms-frontend/frontend.xml=.  The next steps will describe each line that you will need to edit if you are using the OSG Factory at UCSD.  The portions to edit are highlighted in red font. If you are using a different Factory more changes are necessary, please check [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/frontend/configuration.html][the VO Frontend configuration reference]].

   1. The VO you are affiliated with. Sometime the whole =query_expr= is provided to you by the factory (see Factory access above):
   <pre class="file">
&lt;factory query_expr='((stringListMember("%RED%VO%ENDCOLOR%", GLIDEIN_Supported_VOs)))'></pre>
   1.  The username that you are assigned from the factory (also called the identity you will be mapped to on the factory, see above) (scroll right, this is a long line).  Additionally, for the summer workshop, the factory is different than the production factory.  Therefore the information should be:
      * DN = /DC=org/DC=doegrids/OU=Services/CN=devg-3.t2.ucsd.edu
      * factory_identity = gfactory@devg-3.t2.ucsd.edu
      * node = devg-3.t2.ucsd.edu
   <pre class="file">
&lt;collector DN="/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu" comment="Define factory collector globally for simplicity" factory_identity="gfactory@glidein-1.t2.ucsd.edu" my_identity="%RED%username%ENDCOLOR%@glidein-1.t2.ucsd.edu" node="glidein-1.t2.ucsd.edu"/>
   </pre>
   1. The Schedd information.  The Cert DN is the DN of the host certificate mentioned above.  It should be located in =/etc/grid-security/hostcert.pem=.  The hostname is the fully qualified domain name of the host where you installed the VO Frontend (run =hostname --fqdn=). A secondary schedd is optional.  You will need to delete the secondary schedd line if you are not using it. Multiple Schedds allow the frontend to service requests from multiple submit hosts.
   <pre class="file">
&lt;schedds>
   &lt;schedd DN="%RED%Cert DN used by the schedd at fullname:%ENDCOLOR%" fullname="%RED%Hostname of the schedd%ENDCOLOR%"/>
   &lt;schedd DN="%RED%Cert DN used by the second Schedd at fullname:%ENDCOLOR%" fullname="%RED%schedd name%ENDCOLOR%@%RED%Hostname of second schedd%ENDCOLOR%"/>
&lt;/schedds></pre>
   1. The DN is that of the user submitter proxy specified above.  The Security name identifies this frontend with the Factory, it is given by the factory operator.
   <pre class="file">
&lt;security classad_proxy="%RED%/tmp/x509up_u99%ENDCOLOR%" proxy_DN="%RED%DN of proxy owned by user nobody%ENDCOLOR%" proxy_selection_plugin="ProxyAll" security_name="%RED%The security name, this is used by factory%ENDCOLOR%" sym_key="aes_256_cbc"> 
</pre>
   1. The DN of the host cert and the hostname of the collectors (the host were the VO Frontend is being installed, =hostname -fqdn=). The default Condor configuration of the VO Frontend starts multiple Collector processes on the host: the DN and the hostname on the second line are the same as the ones in the first one.
   <pre class="file">
&lt;collector DN="%RED%DN of main collector%ENDCOLOR%" node="hostname.domain.tld:9618" secondary="False"/>
&lt;collector DN="%RED%DN of secondary collectors (usually same as DN in line above)%ENDCOLOR%" node="hostname.domain.tld:9620-9660" secondary="True"/>
</pre>

---++ Configuring Condor
The condor configuration for the frontend is placed in =/etc/condor/config.d=.
   * 00_gwms_general.config
   * 01_gwms_collectors.config
   * 02_gwms_schedds.config
   * 03_gwms_local.config
 


<!--
In versions of Condor 7.4.4 and above, this configuration is read automatically.
 if there is also a =/etc/condor/condor_config.local= file from the condor installation, please move it to =/etc/condor/config.d/00_condor_config.local= to make sure that it is read before the frontend configuration.  

If you have a version lower than 7.4.4, the local condor configuration file which is located at =/etc/condor/condor_config.local= must be edited.  Adding the following line to the bottom of =condor_config.local= will pick up the !GlideinWMS condor configuration.
<pre class="file">
LOCAL_CONFIG_DIR = /etc/condor/config.d</pre>
-->

For most installations, the items you need to modify are in =03_gwms_local.config=.  The lines you will have to edit are:

   1. Credentials of the machine.  You can either run using a proxy, or a service certificate.  It is recommended to use a host certificate and specify it's location in the variables =GSI_DAEMON_CERT= and =GSI_DAEMON_KEY=.  The host certificate should be owned by =root= and have the correct permissions, 600.
   <pre class="file">
#-- Condor user: condor
CONDOR_IDS =
#--  Contact (via email) when problems occur
CONDOR_ADMIN =

############################
# GSI Security config
############################
#-- Grid Certificate directory
GSI_DAEMON_TRUSTED_CA_DIR= /etc/grid-security/certificates

#-- Credentials
GSI_DAEMON_CERT =  /etc/grid-security/hostcert.pem
GSI_DAEMON_KEY  =  /etc/grid-security/hostkey.pem

#-- Condor mapfile
CERTIFICATE_MAPFILE= /etc/condor/certs/condor_mapfile

###################################
# Whitelist of condor daemon DNs
###################################
#DAEMON_LIST = COLLECTOR, MASTER, NEGOTIATOR, SCHEDD, STARTD
</pre>

After configuring condor, be sure to restart condor:

<pre class="rootscreen">
service condor restart</pre>

<!--
   1. Add the DN's for the certificates that your daemons will use, e.g. the factory (=/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu=), the Glidein Frontend Condor cert DN and the User Submitter cert DN.  Examples are placed below.
   <pre class="file">
#####################################
# Add whitelist of condor daemon DNs EDIT THIS
#####################################
#GSI_DAEMON_NAME=/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu,/DC=org/DC=doegrids/OU=Services/CN=glidein-fe-condor/gi-vofe.uchicago.edu,/DC=org/DC=doegrids/OU=People/CN=Marco Mambelli 325802
GSI_DAEMON_NAME=/DC=org/DC=doegrids/OU=People/CN=Derek Weitzel 285345,/DC=org/DC=doegrids/OU=People/CN=Derek Weitzel 285345/CN=993078166,/DC=org/DC=doegrids/OU=Services/CN=host/glidein.unl.edu,/DC=org/DC=doegrids/OU=Services/CN=glidein-1.t2.ucsd.edu
 </pre>
-->


---+++ Using UW Madison Condor RPM

The above procedure will work if you are using the OSG condor RPMS.
If you are using the UW Madison Condor RPMS, be aware of the following changes:

   * This Condor RPM uses a file =/etc/condor/condor_config.local= to add your local machine slot to the user pool.
   * If you want to disable this behavior (recommended), you should blank out that file or comment out the line in =/etc/condor/condor_config= for LOCAL_CONFIG_FILE.  (Make sure that LOCAL_CONFIG_DIR is set to =/etc/condor/config.d=)
   * Note that the variable LOCAL_DIR is set differently in UW Madison and OSG RPMs.  This should not cause any more problems in the glideinwms RPMs, but please take note if you use this variable in your job submissions or other customizations.


---++ Create a Condor grid mapfile.

The Condor grid mapfile (=/etc/condor/certs/condor_mapfile=) is used for authentication between the glidein running on a remote worker node, and the local collector.  Condor uses the mapfile to map certificates to pseudo-users on the local machine.  It is important that you map the DN's of:
   * Each schedd that the frontend talks to (specified in the frontend.xml)
   * The DN of the proxy that the frontend uses (User Submitter proxy DN)
   * The DN of the factory that you where given.

Below is an example mapfile, by default found in =/etc/condor/certs/condor_mapfile=:
   <pre class="file">
GSI "^\/DC\=org\/DC\=doegrids\/OU\=People\/CN\=Derek\ Weitzel\ 285345$" frontend
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/hcc\-grid\.unl\.edu$" dweitzel
GSI "^\/DC\=org\/DC\=doegrids\/OU\=Services\/CN\=host\/cpass\.unl\.edu$" dweitzel
GSI (.*) anonymous
FS (.*) \1 </pre>

---++ Proxy Configuration
By default, the frontend will run as user =frontend= (UID = machine dependent).  In order for the frontend to use the certificate for user =frontend=, it has to exist and be owned by the user =frontend=.
   1. Create the proxy using the User Submitter cert
   <pre class="screen">
%UCL_PROMPT% voms-proxy-init -valid &lt;hours_valid> -voms &lt;vo> </pre>
   1. Copy the proxy to the correct name
   <pre class="screen">
%UCL_PROMPT% cp /tmp/x509up_u`id -u` /tmp/x509up_u`id -u frontend` </pre>
   1. Change ownership of the proxy
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% chown frontend: /tmp/x509up_u`id -u frontend` </pre>

The proxy above will be used for job submission (User Submitter proxy) and communicating with the Factory.  This sequence of commands will need to be renewed when the proxy expires.  Make sure that this location is specified correctly in the =frontend.xml=.

<!--
Depending on the previous choices it may be used to authenticate with the factory or not. 
If you are using a separate certificate to authenticate with the Factory (Glidein Frontend Condor cert) then create the proxy. This is a simple x509 proxy without VO extensions, so you are not limited in the lifetime and it is recommended to use long lived proxies (170:00 hours will give you a week, 750:00 a month) and to use a cron job if you used a service certificate (doesn't need a password to refresh the proxy).
   1. Create the proxy using the Glidein Frontend Condor cert
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% grid-proxy-init -valid &lt;hours_valid> -cert /etc/grid-security/gwms/vofe-glidein-fe-condor-cert.pem -key /etc/grid-security/gwms/vofe-glidein-fe-condor-key.pem </pre>
   1. Copy the proxy to the correct name
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% cp /tmp/x509up_u`id -u` /tmp/x509up_vofe </pre>
   1. Change ownership of the proxy
   <pre class="rootscreen">
%UCL_PROMPT_ROOT% chown nobody: /tmp/x509up_vofe </pre>
-->

---++ Reconfigure and verify installation
In order to use the frontend, first you must reconfigure it.
Each time you change the configuration you must reconfigure it.

<pre class="rootscreen">
%UCL_PROMPT_ROOT% service gwms-frontend reconfig </pre>

After reconfiguring, you can start the frontend:
<pre class="rootscreen">
%UCL_PROMPT_ROOT% service gwms-frontend start </pre>


---+ Service Activation and Deactivation

Three services need to be running:
   * Condor <pre class="rootscreen">
%UCL_PROMPT_ROOT% service condor start </pre>
   * Httpd <pre class="rootscreen">
%UCL_PROMPT_ROOT% service httpd start</pre>
   * VO Frontend <pre class="rootscreen">
%UCL_PROMPT_ROOT% service gwms-frontend start </pre>


To stop the frontend:<pre class="rootscreen">
%UCL_PROMPT_ROOT% service gwms-frontend stop </pre>



---+ Validation of Service Operation
The validation of the frontend is the submission of actual jobs

---++ Glidein WMS Job submission
Condor submit file =glidein-job.sub=. This is a simple job printing the hostname of the host where the job is running:
<pre class="file">
#file glidein-job.sub
universe = vanilla
executable = /bin/hostname
output = glidein/test.out
error = glidein/test.err
requirements = IS_GLIDEIN == True
log = glidein/test.log
ShouldTransferFiles = YES
when_to_transfer_output = ON_EXIT
queue
</pre>

To submit the job: <pre class="screen">
condor_submit glidein-job.sub
</pre>

Then you can control the job like a normal condor job, e.g. 
to check the status of the job use =condor_q=.

---+ Troubleshooting

---++ File Locations

|  *File Description*  |  *File Location*  |
|Configuration file | /etc/gwms-frontend/frontend.xml |
|Logs | /var/log/gwms-frontend/ |
|Startup script | /etc/init.d/gwms-frontend |
|Web Directory | /var/lib/gwms-frontend/web-area |
|Web Base| /var/lib/gwms-frontend/web-base |
|Working Directory | /var/lib/gwms-frontend/vofrontend/ |

---++ Failed authentication
If you get a failed authentication error (e.g. "Failed to talk to factory_pool glidein-1.t2.ucsd.edu...) then:
   * check that you have the right x509 certificates mentioned in the security section of =/etc/gwms-frontend/frontend.xml=
      * the owner must be nobody (user running the frontend)
      * the permission must be 600
      * they must be valid for more than one hour (2/300 hours), at least the non VO part
   * check that the clock is synchronized (see [[Tier3.ClusterTimeSetup][Tier 3 guide]])

---++ Jobs not running
If your jobs remain Idle
   * Check the frontend log files (see above)
   * Check the condor log files (=condor_config_val LOG= will give you the correct log directory):
      * Specifically look the CollectorXXXLog files

Common causes of problems could be:
   * x509 certificates
      * missing or expired or too short-lived proxy 
      * incorrect ownership or permission on the certificate/proxy file
      * missing certificates

---++ Frontend doesn't trust factory
If your frontend complains in the debug log:
<pre class="file">
code 256:['Error: communication error\n', 'AUTHENTICATE:1003:Failed to authenticate with any method\n', 'AUTHENTICATE:1004:Failed to authenticate using GSI\n', "GSI:5006:Failed to authenticate because the subject '/DC=org/DC=doegrids/OU=Services/CN=devg-3.t2.ucsd.edu' is not currently trusted by you.  If it should be, add it to GSI_DAEMON_NAME in the condor_config, or use the environment variable override (check the manual).\n", 'GSI:5004:Failed to gss_assist_gridmap /DC=org/DC=doegrids/OU=Services/CN=devg-3.t2.ucsd.edu to a local user.
</pre>

A possible solution is to comment/remove the LOCAL_CONFIG_DIR in the file =/usr/share/gwms-frontend/frontend.condor_config=.


---+ Advanced Configurations

   * [[GlideinWMSCampusGrid][GlideinWMS Frontend on a Campus Grid]]

---++ &lt;How can I resolve this Problem?&gt;
<!--
%GRAY%
Use sub-sections for each problem you want to address in particular. Link to HelpProcedure at the end if the problem could not be resolved.
%ENDCOLOR%
-->

---++ Known problem

---+++ Frontend failing to start
An empty status file (=/var/lib/gwms-frontend/vofrontend/monitor/group_main/frontend_status.xml=) causes Glidein WMS Frontend not to start.
It crashes after a XML parsing exception visible in the log file ("Exception occurred: ... 'ExpatError: no element found: line 1, column 0\n']").
Remove the file.

---+ References
Definitions:
   * What is a [[http://www.opensciencegrid.org/About/Learn_About_Us/OSG_Organization/VOs][Virtual Organisation]]
   * [[http://twiki.grid.iu.edu/bin/view/Documentation/UsingTheGrid][Introduction to the Grid for users/scientists]]
   * [[http://twiki.grid.iu.edu/bin/view/Documentation/CondorGToGlidein][How to switch to Glideins if you are using already Condor-G]]
   * You can [[http://twiki.grid.iu.edu/bin/view/Engagement/EngageNewUserGuide][get started with the support of the Engage VO]]

Documents about the Glidein-WMS system and the VO frontend:
   * http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/
   * http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/manual/
   * http://twiki.grid.iu.edu/bin/view/Documentation/GlideinWMSVOFrontendInstall

<!--
Other examples:
   * http://home.fnal.gov/~weigand/weigand/www/glideinWMS_rpm/index.shtml

!M2Crypto:
   * http://www.heikkitoivonen.net/blog/2008/10/14/ssl-in-python-26/
   * http://chandlerproject.org/bin/view/Projects/MeTooCrypto
   * http://freshmeat.net/projects/m2crypto
RRDTools:
   * http://packages.sw.be/rrdtool/
javascriptRRD:
   * http://sourceforge.net/projects/javascriptrrd/

Other documents
   * RRD tools: http://segfault.in/2010/03/python-rrdtool-tutorial/
   * RRD tools: http://sourceforge.net/projects/py-rrdtool/
   * http://oss.oetiker.ch/rrdtool/download.en.html
   * http://www.express.org/~wrl/rrdtool/
   * Downloads from Nebraska: http://t2.unl.edu/store/repos/nebraska/5/nebraska/x86_64/
-->

---+ Comments
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = DouglasStrain

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|General|Integration|Monitoring|Operations|Security|Storage|Tier3|User|VO)
   * Local DOC_AREA       = General

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (Developer|Documenter|Scientist|Student|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (HowTo|Installation|Knowledge|Navigation|Planning|Training|Troubleshooting)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = ParagMhashilkar
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = ParagMhashilkar
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
-->



-- Main.DouglasStrain - 23 Feb 2012

%META:FILEATTACHMENT{name="simple_diagram.png" attachment="simple_diagram.png" attr="" comment="" date="1319061747" path="simple_diagram.png" size="36007" stream="simple_diagram.png" tmpFilename="/usr/tmp/CGItemp20094" user="MarcoMambelli" version="1"}%
