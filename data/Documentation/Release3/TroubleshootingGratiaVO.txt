%META:TOPICINFO{author="MarcoMambelli" date="1427760778" format="1.1" version="1.9"}%
%META:TOPICPARENT{name="NavTechGratia"}%
%DOC_STATUS_TABLE%

---+!! Understanding how Gratia records are attributed to a VO

%TOC%

---# About this document
This document contains some developer level details and will help you understand how Gratia records are attributed to a user and virtual organization.
This mapping is done for all job usage records and can affect also wether a record is reported, quarantined (=parked in a temporary directory) or discarded. More general explanations about Gratia and its troubleshooting are in TroubleshootingGratia.
See also other documents recommended in the Reference section below.

This document follows the general OSG documentation conventions: %TWISTY{%TWISTY_OPTS_OUTPUT% showlink="Click to expand document conventions..."}%
%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="Header"}%
%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="CommandLine"}%
%ENDTWISTY%

---# How to get Help?
To get assistance please use our [[HelpProcedure][Help Procedure]]. 

---# Identity Information
Job usage records collect the following information:
   * Local user - local (e.g. UNIX) user name
   * Local Group - local (e.g. UNIX) group name
   * Global user name 
   * VO name - Name of the virtual organization, as retrieved, e.g. FQDN string or "voi" string from =users-vo-mapfile=
   * Reportable VO name - Extracted name of the VO, e.g. the first name in the FQDN or "VOc" string from =users-vo-mapfile=
   * Common name (or Distinguished name, DN) - FQDN as present in the user certificate used for the job or as reconstructed form the VO

This information is retrieved via a series of functions, sometimes specific to a probe (e.g. the HTCondor probe), sometimes common to all probes (in =gratia-common=).
The mapping is affected by some configuration variables that affect which records are reported to Gratia, which are quarantined (stored in a directory for possible later processing) and which are discarded (without being reported to Gratia). These variables are (0, 1 correspond to false, true):
   * !SuppressNoDNRecords - discard records without a DN (in the final record - DNs in certinfo file are OK) [default: 0]
   * !SuppressGridLocalRecords - discard records from local users (users not coming via a Grid submission, e.g. GRAM or HTCondor-CE) [defaults: 0, was 1 for rel.<1.13.30]
   * !SuppressUnknownVORecords - discard records that have no VO [default: 0]
   * !QuarantineUnknownVORecords - quarantine records that have no VO [default: 0]
   * !MapUnknownToGroup - use the local user group (UNIX group name) as VO for records that have no VO otherwise established [default: 0]
   * !MapGroupToRole - add to the record DN "/LocalGroup=GROUP_NAME" using the local user group [default: 0]
   * !VOOverride - map all records to the specified VO (ignoring all other mappings) [default: NULL, no override]


---# How the identity information is determined

The main information used to attribute resources used or provided is the VO, available in 2 record entries: VOName (can be a complex string indicating the VO affiliation, Similar to the VO extension of a FQDN), and !ReportableVOName (contains only the VO name, as one of the names in OIM).
The keyword "Unknown" (case insensitive) is not a valid VO name.

If !VOOverride in the probe configuration file is set to some value, then both !VOName and !ReportableVOName will be set to that value in all records reported.

Some probes can extract this information from the job record. E.g. the HTCondor probe (condor_meter) uses the classads !x509UserProxyFirstFQAN and !x509UserProxyVOName respectively for the !VOName and !ReportableVOName.

A Gratia extension of the job managers (in =globus-gram-job-manager-scripts= and =gratia-probe-gram=) generates files mapping the jobs (job IDs) to the user credentials. These files are called certinfo files, are saved in the Gratia data direcotry (=/var/lib/gratia/data=) and contain a vo_info record where the DN of the x509 certificate used to submit the job is mapped to a VO. This information is used if the initial !VOName is not available or not a valid VO name.

If also the certinfo file is not providing a valid VOName then the !JobIdentity record from from the HTCondor_CE is attempted. 

If also that one is not available (e.g. you are not on a HTCondor_CE), then the =user-vo-mapfile= is used.
This file contains lines mapping local (UNIX) users to VO names (VOName) and lines defining valid VO names (voi) and the corresponding !ReportableVOName (VOC).

If everything else fails and !MapUnknownToGroup is set in the configuration file, then the local user group name is used as VO name and !ReportableVOName. 

If !MapGroupToRole is set and there is not already a valid FQDN associated with the job record, then the VOName is modified assigning a Local group part like: =="%s/LocalGroup=%s" % (vo_name, local_group_name)==


---# Some useful procedures and examples
If you have an OSG Compute Element all the pieces should be present and you should report correctly to Gratia. But sometimes you may require special configurations: some of the jobs have no VO association and risk not to be reported to the OSG accounting (Gratia)

%NOTE% Before modifying your local configuration check if those are jobs you should count or if someone else should count them. Avoid double counting and choose the most appropriate place to report the jobs. E.g. If you are receiving jobs form a Compute Element that is forwarding them to you (e.g. via HTCondor flocking), the CE first accepting them should report those jobs. The same applies if you have a gateway accepting jobs and resubmitting them via BOSCO.

---## All your jobs belong to a VO 
If you have no CE or have a mix of Grid submitted and local jobs running on your cluster and you want to report them all as running for a specific VO, then set !VOOverride in the probe configuration.<br>
Further, if you want to keep track also of the original local group, add also !MapGroupToRole.  In the below example, replace the %RED%osg%ENDCOLOR% with a registered VO that you would like to report as.  If you don't have a VO that you are affiliated with, you may use "osg".

<pre class="file">
...
    %RED%MapGroupToRole="1"%ENDCOLOR%
    %RED%VOOverride="OSG"%ENDCOLOR%
...
</pre>

---## You are running a Campus Grid and have no Compute Element 
If you have a HTCondor cluster connected to a [[https://twiki.grid.iu.edu/bin/view/Accounting/ProbeConfigGlideinWMS#Users_without_Certificates][campus grid]] you can use 3 different ways to associate your jobs to a VO. The last 2 reported below, especially the 3rd, allow you to map only some of the jobs, e.g. if you do not want to report some jobs to OSG accounting:
   * If all your users belong to one VO you can use the example above.
   * Otherwise you can use the local Group Names as VO names (you'd have to have control of the unix groups) <pre class="file">
    ...
    SuppressGridLocalRecords="0"
    %RED%MapUnknownToGroup="1"%ENDCOLOR%
    ...
</pre>
   * As 3rd alternative you can use =user-vo-map= as explained below

---## You have some local users that you want to report to OSG accounting
If some users are already associated to a VO, e.g. via one of the mechanisms described in the previous chapter, and some users are not part of any VO and you don't want to report them at all: a flexible mechanism is the use of the [[https://twiki.grid.iu.edu/bin/view/Documentation/Release3/Edg-mkgridmap#3_0_Configuration][user-vo-map file]]. If you are already an OSG site you may also use GUMS.

=/var/lib/osg/user-vo-map= is a file generated automatically on a CE via [[https://twiki.grid.iu.edu/bin/view/Documentation/Release3/Edg-mkgridmap][edg-mkgridmap]] or GUMS. In it there is a list of valid VO names and all users are mapped to a VO. See [[http://vdt.cs.wisc.edu/extras/edg-mkgridmap.conf.html][user-vo-map file]] for more information. Here is an example
<pre class="file">
#User-VO map
# #comment line, format of each regular line line: account VO
# Next 2 lines with VO names, same order, all lowercase, with case (lines starting with #voi, #VOc)
#voi cdf fermilab accelerator argoneut cdms minerva miniboone minos mipp mu2e nova numi patriot theory fermilab-test microboone microboone microboone microboone map gm2 coupp fermilab accelerator argoneut cdms minerva miniboone minos mipp nova numi patriot theory map gm2 argoneut minerva minos nova map gm2 fermilab argoneut minerva minos nova map gm2 fermilab darkside darkside darkside darkside darkside darkside mis star cms cms cms cms cms cms cms cms cms cms cms dzero dzero dzero dosar des glow nanohub geant4 geant4 i2u2 osg atlas atlas atlas atlas atlas atlas osgedu ops des engage engage engage engage ilc nysgrid sbgrid cigi icecube alice gluex gridunesp dayabay hcc belle belle csiu suragrid nees superbvo.org superbvo.org superbvo.org dream lbne lbne lbne lbne lsst uc3 mcdrd lqcd auger glast.org enmr
#VOcngage Engage Engage Engage ILC NYSGRID SBGrid CIGI IceCube ALICE Gluex GridUNESP DayaBay HCC belle belle CSIU SURAGrid NEES SuperB SuperB SuperB DREAM LBNE LBNE LBNE LBNE LSST UC3 MCDRD LQCD Auger glast.org ENMR
#---- accounts for vo: cdf-fnal ----#
#---- accounts for vo: fermilab ----#
fnalgrid fermilab
#---- accounts for vo: accelerator ----#
#---- accounts for vo: argoneut ----#
...
#---- accounts for vo: osg ----#
osg osg
#---- accounts for vo: newAtlasProd ----#
usatlas1 atlas
#---- accounts for vo: newUsatlasProd ----#
#---- accounts for vo: newUsatlasSoft ----#
usatlas2 atlas
#---- accounts for vo: newAtlasSoftware ----#
#---- accounts for vo: newusatlas ----#
usatlas3 atlas
#---- accounts for vo: newatlas ----#
usatlas4 atlas
...
</pre>

---### In GUMS
You can define [[https://www.racf.bnl.gov/Facility/GUMS/1.2/use_configuration.html][groupToAccountMappings]] and [[https://www.racf.bnl.gov/Facility/GUMS/1.2/use_users.html][add Manual Users Group Members]].

Now GUMS supports also ==local-user-vo-map== like explained below in the =edg-mkgridmap= section. You still have to define the VO via a[[https://www.racf.bnl.gov/Facility/GUMS/1.2/use_configuration.html][groupToAccountMapping]]

---#### Older GUMS
In older versions of GUMS you will have to update or manually patch ==gums-host-cron== to use ==local-user-vo-map== like explained below in the =edg-mkgridmap= section.
<pre class="screen"># diff /usr/bin/gums-host-cron /usr/bin/gums-host-cron.20140913
308,315d307
< # --- Add local user accounts maps
< if [ ! -e $LOCALUSERMAP ]; then
< touch $LOCALUSERMAP
< fi
<
< cat $LOCALUSERMAP >> $INVERSEMAP_NEW.tmp
<
<
336,337d327
< LOCALUSERMAP=$OSG_LOCATION/local-user-vo-map
<
</pre>

---### Using Edg-mkgridmap
If you want to add some local user and map it to an existing VO, then edit =/etc/osg/local-user-vo-map= mapping the users, e.g.:
<pre class="file">
# file /etc/osg/local-user-vo-map
newuser1 voname
newuser2 voname
newuser3 voname2
</pre>

If you want to add some local user and map it to a new VO, then edit =/etc/osg/local-user-vo-map= mapping the users as before, and also add the VO lines to =/etc/edg-mkgridmap.conf=, e.g. if =voname2= used above is new:
<pre class="file">
# file /etc/edg-mkgridmap.conf
# USER-VO-MAP voname2 REPORTABLE_VONAME2 -- 13 -- This is my local VO (admin@mydomain.edu)
</pre>
After USER-VO-MAP there are the VOName and !ReportableVOName for the accounting record and then some arbitrary comments.

%NOTE% All the files above are part of the OSG Compute Element installation but you can still edit by hand a =/var/lib/osg/user-vo-map= with the mappings you are interested in and the Gratia probes will use it even if you have no OSG CE installed.


---# The code
Here is some code from the gratia probes and some other files. Ignore this section if you are not a developer or interested in Gratia internals.

=Gratia.py= contains the =Gratia(record)= class with functions to build the XML record. Here some fragments. You can see how VOOverride and !MapGroupToRole work:
<pre>
    def GlobalUsername(self, value):
        self.UserId = self.AddToList(self.UserId, 'GlobalUsername', r'', value)

    def LocalUserId(self, value):
        self.UserId = self.AddToList(self.UserId, 'LocalUserId', r'', value)
        if Config.get_MapGroupToRole() and Config.get_VOOverride():
            self.DN("/OU=LocalUser/CN=%s" % value)

    def UserKeyInfo(self, value):  # NB This is deprecated in favor of DN, below.
        ''' Example:
            <ds:KeyInfo xmlns:ds=http://www.w3.org/2000/09/xmldsig#>
                <ds:X509Data>
                <ds:X509SubjectName>CN=john ainsworth, L=MC, OU=Manchester, O=eScience, C=UK</ds:X509SubjectName>
                </ds:X509Data>
            </ds:KeyInfo>
        '''

        complete = '''
\t\t<ds:X509Data>
\t\t<ds:X509SubjectName>''' + escapeXML(value) \
            + '''</ds:X509SubjectName>
\t\t</ds:X509Data>
\t'''
        self.UserId = self.VerbatimAddToList(self.UserId, 'ds:KeyInfo',
                                             'xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', complete)

    def DN(self, value):
        self.UserId = self.AddToList(self.UserId, 'DN', r'', value)

    def VOName(self, value):
        override = Config.get_VOOverride()
        if override:
            self.UserId = self.AddToList(self.UserId, 'VOName', r'', override)
        else:
            self.UserId = self.AddToList(self.UserId, 'VOName', r'', value)

    def ReportableVOName(self, value):
        ''' Set reportable VOName'''

        override = Config.get_VOOverride()

        if override:
            self.UserId = self.AddToList(self.UserId, 'ReportableVOName', r'', override)
        else:
            self.UserId = self.AddToList(self.UserId, 'ReportableVOName', r'', value)
</pre>

=xml_utils.py= decides much of the building of a job record. Here are few segments.
   * suppress or quarantine a record if it is a local job (1), has no DN (2) or cannot be mapped to a VO (3): <pre>
        reason = None
	isQuarantined=False
        grid = GetElement(xmlDoc, usageRecord, namespace, prefix, 'Grid')
        if Config.get_SuppressgridLocalRecords() and grid and string.lower(grid) == 'local':
            # 1
            reason = 'Grid == Local'
        elif Config.get_SuppressNoDNRecords() and not usageRecord.getElementsByTagNameNS(namespace, 'DN'):
            # 2
            reason = 'missing DN'
        elif Config.get_SuppressUnknownVORecords() and (not VOName or VOName == 'Unknown'):
            # 3
            reason = 'unknown or null VOName'
	elif Config.get_QuarantineUnknownVORecords() and (not VOName or VOName == 'Unknown'):
	    reason ='unknown or null VOName, will be quarantined in %s' % (os.path.join(os.path.join(Config.get_DataFolder(),"quarantine")))
	    isQuarantined=True

        if reason:
           # quarantine or suppress the record...
</pre>
   * given the initial VO value, change it looking at the vo_info record in the certinfo file (2), at the vo_info record from the HTCondor_CE (3), the information from =user-vo-mapfile= (4), the local user group (5):<pre>
            #2.
            VOName = vo_info['VOName']
            if vo_info['ReportableVOName'] == None:
                if VOName[0] == r'/':
                    vo_info['ReportableVOName'] = string.split(VOName,r'/')[1]
                else:
                    vo_info['ReportableVOName'] = VOName
                #3.
                job_certinfo = condor_ce.queryJob(localJobId)
                if job_certinfo:
                    vo_info = certinfo.populateFromCertInfo(job_certinfo, xmlDoc, userIdentityNode, namespace)
        #4.
        vo_info = vo.VOfromUser(LocalUserId)
        if Config.get_MapUnknownToGroup() and not vo_info:
            fromuserid = LocalUserId
            groupid = "unknown"
            try:
                gid = pwd.getpwnam(LocalUserId)[3]
                fromuserid = grp.getgrgid(gid)[0]
                groupid = fromuserid
            except:
                pass
            #5.
            # Check the different VO mapping methods
            if Config.get_MapGroupToRole() and Config.get_VOOverride():
                vo_info = {'VOName': "/%s/LocalGroup=%s" % (Config.get_VOOverride(), groupid), 'ReportableVOName': Config.get_VOOverride()}
            elif Config.get_VOOverride():
                vo_info = {'VOName': Config.get_VOOverride(), 'ReportableVOName': Config.get_VOOverride()}
            else:
                vo_info = {'VOName': fromuserid, 'ReportableVOName': fromuserid}
</pre>

An example certinfo file:
<pre class="file">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;GratiaCertInfo&gt;
  &lt;BatchManager&gt;condor&lt;/BatchManager&gt;
  &lt;UniqID&gt;16434094885681144951.1657325763765262978&lt;/UniqID&gt;
  &lt;LocalJobId&gt;2510311&lt;/LocalJobId&gt;
  &lt;DN&gt;/DC=com/DC=DigiCert-Grid/O=Open Science Grid/OU=People/CN=Jose Caballero 649&lt;/DN&gt;
  &lt;VO&gt;atlas&lt;/VO&gt;
  &lt;FQAN&gt;/atlas/usatlas/Role=production/Capability=NULL&lt;/FQAN&gt;
&lt;/GratiaCertInfo&gt;
</pre>


---# References

   * [[http://gratia-osg-prod-reports.opensciencegrid.org/gratia-reporting/][Gratia Job Accounting Data]] (Production)
   * [[http://gratia-osg-itb-reports.opensciencegrid.org/gratia-reporting/][Gratia Job Accounting Data]] (ITB)
   * [[http://gratia-osg-transfer-reports.opensciencegrid.org/gratia-reporting/][Gratia Transfer Accounting Data]]
   * You can get daily emails with OSG accounting reports in them. Join the [[Accounting.ContactUs][osg-accounting-info]] mailing list. 
   * [[Accounting.WebHome][The Gratia group's web page]]
   * [[Documentation/Release3.NavTechGratia][Gratia's technical documentation index]]
   * [[TroubleshootingGratia][Gratia troubleshooting]]

---# Comments
%COMMENT{type="tableappend"}%


<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = MarcoMambelli

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = User

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Installation
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %NO%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = CarlEdquist 	
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = TanyaLevshina 	
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %YES%
############################################################################################################
-->