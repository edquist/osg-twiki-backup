%META:TOPICINFO{author="JoseCaballero" date="1449074399" format="1.1" reprev="1.6" version="1.6"}%
*WORK IN PROGRESS* 

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;width:100%}
.tg td{font-family:Arial, sans-serif;font-size:12px;padding:5px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg th{font-family:Arial, sans-serif;font-size:12px;font-weight:normal;padding:5px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg .tg-raw1{font-weight:bold;color:#0055ff;text-align:left}
.tg .tg-header{font-weight:bold;background-color:#c0c0c0;text-align:center}
.tg .tg-splitheader{font-weight:bold;background-color:#e0e0e0;text-align:center}
</style>


<!-- some useful definitions  (need 3 white spaces before * to enable it)
   * Set UCL_PROMPT_ROOT = [root@factory ~]$
   * Set VERSION = 2.4.6
   * Set WRAPPERVERSION = 0.9.16
-->

---+!! ATLAS workflows with !AutoPyFactory
<!--
%DOC_STATUS_TABLE%
-->
%TOC{depth="3"}%

---# About this Document

This document describes how to configure !AutoPyFactory for ATLAS

%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="Header"}%
%INCLUDE{"Documentation/DocumentationTeam/DocConventions" section="CommandLine"}%

%INCLUDE{"Documentation/Release3/AutoPyFactory" section="Version"}%

---# Configuration

*TO BE FILLED*

---# Wrapper

---## Applicable version

This section describes how to use wrapper version %WRAPPERVERSION%

---## Deployment

Install the RACF yum repo files:

<pre class="rootscreen">
%UCL_PROMPT_ROOT% rpm -Uhv http://dev.racf.bnl.gov/yum/grid/production/rhel/6Workstation/x86_64/racf-grid-release-latest.noarch.rpm
Retrieving http://dev.racf.bnl.gov/yum/grid/production/rhel/6Workstation/x86_64/racf-grid-release-latest.noarch.rpm
warning: /var/tmp/rpm-tmp.TaawC5: Header V3 DSA/SHA1 Signature, key ID e6f6b87c: NOKEY
Preparing...                ########################################### [100%]
   1:racf-grid-release      ########################################### [100%]
</pre>

Install the wrapper:

<pre class="rootscreen">
%UCL_PROMPT_ROOT% yum install wrapper
</pre>

NOTE: if you want to to keep older versions of the wrapper when installing or updating to latest one, add the package =wrapper= to the yum configuration variable =installonlypckgs= in file =/etc/yum.conf=, and ensure =installonly_limit= is high enough (documentation can be found in manpage for yum.conf). Example: 

<pre class="file">
installonly_limit=3
installonlypkgs=wrapper
</pre>


---## Input options

<table class="tg">
  <tr>
    <th class="tg-header">variable</th>
    <th class="tg-header">description</th>
    <th class="tg-header">comments</th>
  </tr>
<tr>
    <td class="tg-raw1">--wrapperloglevel=</td>
    <td class="tg-031e"> the log level. Current valid values are =info= and =debug= </td>
    <td class="tg-031e"> </td>
  </tr>
<tr>
    <td class="tg-raw1">--wrapperpilotcode=</td>
    <td class="tg-031e"> the location of the pilot code. <br> Accepts more than one value, split by comma, to pick one randomly (see --wrapperpilotcoderatio). <br> It is possible to set a set of URIs to just failover from one to another, without randomization. In that case, the list is enclosed between square parenthesis =[= and =]=. </td>
    <td class="tg-031e"> </td>
  </tr>
<tr>
    <td class="tg-raw1">--wrapperpilotcodechecksum=</td>
    <td class="tg-031e"> the checksum of the pilot code. If more than one URIs for the pilotcode are provided, then a checksum value for each one of them is required, in a list split-by-comma </td>
    <td class="tg-031e"> Optional</td>
  </tr>
<tr>
    <td class="tg-raw1">--wrapperpilotcoderatio=</td>
    <td class="tg-031e"> when a list of values split-by-comma are passed to the variable wrapprepilotcode, it sets the ratio to pick randomly between them </td>
    <td class="tg-031e"> </td>
  </tr>
<tr>
    <td class="tg-raw1">--wrapperplatform=</td>
    <td class="tg-031e">set the type of grid middleware available on the node. The wrapper may take some actions depending on the value. <br> Current valid values are: =OSG= and =EGI=. </td>
    <td class="tg-031e"> </td>
  </tr>
<tr>
    <td class="tg-raw1">--wrapperplugin=</td>
    <td class="tg-031e"> the exact plugin that will be invoked to run the final payload. <br> Current valid values are: =atlasosg=, =atlasegi=, and =trivial=. </td>
    <td class="tg-031e"> </td>
  </tr>
<tr>
    <td class="tg-raw1">--wrapperspecialcmd=</td>
    <td class="tg-031e"> a special command needed to be performed before anything else. Very rearly needed. When needed, usually is a command to source an had-oc setup.sh file. <br> Use with caution.</td>
    <td class="tg-031e"> Optional</td>
  </tr>
<tr>
    <td class="tg-raw1">--wrappertarballchecksum=</td>
    <td class="tg-031e"> the checksum of the wrapper tarball</td>
    <td class="tg-031e"> Optional</td>
  </tr>
<tr>
    <td class="tg-raw1">--wrappertarballuri=</td>
    <td class="tg-031e"> it is the URI with the location of the wrapper tarball. </td>
    <td class="tg-031e"> </td>
  </tr>
<tr>
    <td class="tg-raw1">--wrapperwmsqueue=</td>
    <td class="tg-031e">the name of the queue in the WMS system (for example, in !PanDA).</td>
    <td class="tg-031e"> </td>
  </tr>
<tr>
    <td class="tg-raw1">other options</td>
    <td class="tg-031e"> Any other input option, not starting with string =--wrapper=, will be passed *verbatim* to the payload job (a.k.a. pilot) </td>
    <td class="tg-031e"> </td>
  </tr>
</table>

A typical example for ATLAS is like this:

<pre class="file">
executable = /usr/libexec/wrapper-%WRAPPERVERSION%.sh
arguments = --wrapperloglevel=debug \
           --wrapperplatform=OSG \
           --wrapperwmsqueue=ANALY_BNL_SHORT \
           --wrappertarballuri=http://dev.racf.bnl.gov/dist/wrapper/wrapperplugins-dev12.tar.gz \
           --wrapperpilotcode=http://pandaserver.cern.ch:25085/cache/pilot/pilotcode-PICARD.tar.gz \
           --wrapperplugin=atlasosg \
           -w https://pandaserver.cern.ch -p 25443 -u user
</pre>

Here are examples on how to pass more than one value to =--wrapperpilotcode=.

<pre class="file">
arguments = ... \
           --wrapperpilotcode = ['file:///cvmfs/atlas.cern.ch/pilot.py', 'http://atlas.cern.ch/pilot.tar.gz'], 'http://atlas.cern.ch/pilot-devel.tar.gz' \
           --wrapperpilotcoderatio = 99,1 \
           ...
</pre>

In that case, 99% of the times the pilot code from CVMFS will be tried, failing over the tarball at the CERN URL in case of failures. 1% of the times the development pilot code will be downloaded.

<pre class="file">
arguments = ... \
           --wrapperpilotcode = ['file:///cvmfs/atlas.cern.ch/pilot.py', 'http://atlas.cern.ch/pilot.tar.gz'], 'http://atlas.cern.ch/pilot-devel.tar.gz' \
           --wrapperpilotcodechecksum = 123,456,789 \
           --wrapperpilotcoderatio = 99,1 \
           ...
</pre>

In the second case, the same logic applies, but a checksum is passed for each possible case. 
 

%META:TOPICMOVED{by="JoseCaballero" date="1446316452" from="Documentation/Release3.AutoPyFactoryWorkflowPanda" to="Documentation/Release3.AutoPyFactoryWorkflowAtlas"}%
