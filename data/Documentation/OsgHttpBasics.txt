%META:TOPICINFO{author="BrianBockelman" date="1268953150" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="UsingTheGrid"}%
%LINKCSS%


---+!! Using HTTP on the OSG

%STARTINCLUDE%

---++ Introduction

The HTTP protocol is relatively lightweight, fast, and extremely popular.  It has excellent client tools, familiar to many Linux command-line users.

One of the major concern is the scalability of HTTP servers.  Many OSG sites use a HTTP proxy to cache commonly requested files on-site.  If you download a file once on all worker nodes, it may only be downloaded once from your web server to the site's cache, and then served from the site's cache after that.  Not every site provides this service; additionally, you should take care to verify that you are not requesting a large amount of data over HTTP.  Generally, one should stage in no more than 100MB per job using HTTP.

Another major concern is security.  For maximum scalability, you will want your HTTP server to allow anyone to download files (in order to make caching work).  If this is not acceptable, we recommend either encrypting the file on the server or investigating the use of SRM-based downloads.  

You will want to make sure your input files have not been tampered with; we will cover one mechanism for verifying HTTP downloads below.

---++ The OSG Job Environment

---++ OSG Client Tools

---++ Examples

---++ Securing HTTP Usage

This section is oriented to an application developer; it offers broad guidelines, but no precise code.

One mechanism to make sure your input has not been tampered with is to compare your downloaded input file with a known checksum.  If the two checksums match, then your file is considered secure.  To perform a checksum on a file, do:
<pre class="input">
sha1sum <i>filename</i>
</pre>
This will create output like the following:
<pre class="screenlisting">
[brian@osg-test4 tmp]$ sha1sum my_important_input 
606c302fb75ad67715820a6eeb860a08ed66f6ad  my_important_input
</pre>
The number above that started with =606...= is the checksum.

You will want to create a listing of all your files and checksums, and create a checksum of the listing yourself.  This way, all your jobs only need to know the checksum of the listing - from there, they can verify the their copy of the listing, and then from their copy of the listing, verify the checksum of their downloaded input.

The recipe is as follows:
   1 Pre-compute checksums for all your input files; record them in a single file named =input_checksums.txt=.  =input_checksums.txt= should have two columns; the first one is the checksum, the second is the file name.  If you have 1000 input files, you should have 1000 lines in =input_checksums.txt=.  Place the file on your web server.
   1 Compute the checksum of =input_checksums.txt=.
   1 Submit your jobs.  Each job should be given, as part of its arguments, the checksum of =input_checksums.txt=, and the names of its input files.
   1 When the job starts up, each one should download =input_checksums.txt= and their input files.
   1 Verify the job's downloaded copy of =input_checksums.txt= using the checksum given as the job's input.
   1 Download the appropriate input files
   1 Compute and compare the checksum of the input file for the job against the job's downloaded copy of =input_checksums.txt=.

%STOPINCLUDE%
