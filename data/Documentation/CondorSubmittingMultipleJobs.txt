%META:TOPICINFO{author="MarcoMambelli" date="1318533947" format="1.1" reprev="1.19" version="1.19"}%
%META:TOPICPARENT{name="GridUsersGuide"}%
%DOC_STATUS_TABLE%
---+!! Submitting Multiple Jobs with Condor
%TOC%

---+ About this Document
In this tutorial, we will demonstrate how to easily submit multiple jobs to the OSG using Condor-G.

---+ Requirements
In order to complete this document, you will need:
   * A DOE Grid [[Documentation.CertificateUserGet][User Certificate]]
   * Membership in a [[Documentation.WhatIsOSG#Virtual_Organizations][Virtual Organization]]
   * Access to a machine with the [[Documentation.Release3.InstallOSGClient][OSG-Client]] (or [[ReleaseDocumentation.ClientInstallationGuide][OSG-Client 1.2, Pacman version]]) installed. Remember to install also Condor-G if optional and to setup the environment if needed.
   * Complete the previous [[CondorSubmittingSingleJob][tutorial about submitting single Condor-G grid jobs]].
   * Know the endpoint you are submitting to, as covered in the [[FindAvailableResource][finding available resources]] document.

%STARTINCLUDE%
---+ Submitting Multiple Jobs
Let's see how we would submit four jobs at once, all slightly different.  Use the following script:

Create a file named =mytest2.sh= with the following text in it: <pre class="file">
#!/bin/sh
echo "Hello World!"
echo "I am Condor job $1"

hostname
printenv
if [ "X${OSG_GRID}X"" != "XX" ]; then
 source $OSG_GRID/setup.sh
fi
voms-proxy-info -all
</pre>

Make mytest2.sh executable. That is: <pre class="screen">
%UCL_PROMPT% chmod +x mytest2.sh
</pre>

Make another file named =condorg_test2.submit= with the following text in it: <pre class="file">
universe      = grid
grid_resource = <span style="background-color:yellow">osg-gw-2.t2.ucsd.edu:/jobmanager-condor</span> %RED% Change the the endpoint! %ENDCOLOR% 
executable    = mytest2.sh
arguments     = $(Cluster).$(Process)
output        = test.$(Cluster).$(Process).out
error         = test.$(Cluster).$(Process).err
log           = test.log
queue 4

argument      = "Alternate $(Cluster).$(Process)"
queue 2
</pre>

We'll discuss the new portions below after we submit the job.
<ol>
   <li> _(If you haven't already and if you nees)_ Source the environment for the OSG client before starting and obtain a proxy from your VOMS, here assuming the uscms VO:
<pre class="screen">
%UCL_PROMPT% voms-proxy-init --voms cms:/cms
</pre>
As before, replace =cms:/cms= with the proper name/group of your VO.
   <li>Submit this job just as you did with the single job:
<pre class="screen">
%UCL_PROMPT% condor_submit condorg_test2.submit
</pre>
  </li>
   <li>Use =condor_q= to display information about your jobs:
      <pre class="screen">%UCL_PROMPT% condor_q </pre></li>
</ol>

---++ Changes to the Condor submit file.

Let's walk through the new things in the Condor submit file (New as compared to the previous example of [[CondorSubmittingSingleJob][submitting a single job]]:
<pre class="file">
arguments = $(Cluster).$(Process)
</pre>
This illustrates a simple expansion for the job; $(Cluster) and $(Process) are _macros_ which will be expanded to the Condor job cluster and process ID, respectively. Roughly, the cluster and process numbers are the "job number" most other batch systems use.  

The Arguments key will set the arguments passed to the script when the job is executed.  By setting the arguments to the process and cluster, we will run a slightly different job each time the submit file is done.  This is very useful if you need to have unique output or input.  The unique output can be named:
<pre class="file">
output = test.$(Cluster).$(Process).out
</pre>
Each time you run the job, you will get a different output file; this is useful to re-run the same job over and over without having to worry about file handling.  Between =arguments= and =output=, without modifying the submit file, we can run a range of jobs and record the output in different files without having to ever edit the submit file.

The next new command is =queue=:
<pre class="file">
queue 4
</pre>
This instructs condor to submit 4 identical jobs except for the process number. Process numbers are useful for managing a group of similar jobs.  It's also useful for writing scripts that need to know what "job number" it is in a group of jobs.

For example, let's say we have 1,000 different files to process.  If we had a sorted list of file names known to every job, we could simply use =queue 1000= and pass $(Process) as the argument to the job; the script would then be able to determine precisely what file it is assigned to process by looking at the corresponding entry in the list.  By having a unique, zero-based counter in our jobs, we don't have to do a lot of the coordination and "plumbing" that we would have to implement for our jobs otherwise.

Finally, this example demonstrates that one submit file can submit many, very different jobs.  After any =queue= command, you can start describing a new job which begins as a copy as a previous.  So, in our submit file, after =queue 4=, we have the following lines:
<pre class="file">
arguments = Alternate $(Cluster).$(Process)
queue 2
</pre>

This creates a new job, complete identical to the previously submitted one above the =queue 4=, except for the arguments passed to the script.  This provides a mechanism for again creating similar jobs that must differ more than the =$(Process)= trick allows. 

Once you submit this job, the output of condor_q will look something like: (pay attention to the ID column):
<pre class="screen">
%UCL_PROMPT% condor_submit condorg_test.submit 
Submitting job(s)......
Logging submit event(s)......
6 job(s) submitted to cluster 23078.
%UCL_PROMPT%  condor_q 23078

-- Submitter: glidein.unl.edu : <129.93.229.144:54854> : glidein.unl.edu
 ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               
23078.0   %UCL_USER%        2/19 16:57   0+00:00:00 I  0   0.0  mytest.sh 23078.0  %RED% # Cluster is 23078 & Process is 0. The Job ID is 23078.0 %ENDCOLOR%
23078.1   %UCL_USER%        2/19 16:57   0+00:00:00 I  0   0.0  mytest.sh 23078.1
23078.2   %UCL_USER%        2/19 16:57   0+00:00:00 I  0   0.0  mytest.sh 23078.2
23078.3   %UCL_USER%        2/19 16:57   0+00:00:00 I  0   0.0  mytest.sh 23078.3
23078.4   %UCL_USER%        2/19 16:57   0+00:00:00 I  0   0.0  mytest.sh Alterna  %RED% # Arguments were cut off, but Process did increment to 4 %ENDCOLOR%
23078.5   %UCL_USER%       2/19 16:57   0+00:00:00 I  0   0.0  mytest.sh Alterna
</pre>

---+ Conclusion
In this section, we started a more complex Condor example.  The four key concepts are:
   * Condor submit files are more than simple key/values pairs; you can include some special _macros_ which are dynamic and change for each job.
   * Job clusters and processes provide an easy way for structuring and bookkeeping very similar jobs without the need to write many scripts to do this for you.  The "plumbing" is built in.
   * The =queue= command gives you the ability to submit many nearly-identical jobs from one config file.
   * Multiple jobs can be specified per submit file, and only the differences between each set of jobs needs to be described.

So far, the only files we move about are the executable, stderr, and stdout.  We have not tackled jobs which perform more complex data handling - processing input or handling output, or moving files in general.  This will be done in the next section.

---+ References
   * The [[http://www.cs.wisc.edu/condor/manual/v7.4/condor_submit.html][documentation for condor_submit]] will show you many more options you can include in your submit file.
   * The [[http://www.cs.wisc.edu/condor/manual/v7.4/condor_q.html][documentation for condor_q]] will show you a lot more you can do with condor_q. Note, for example, the =-globus= option.

%STOPINCLUDE%

---+ *Comments*
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = BrianBockelman

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = User

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = Scientist

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Training
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = AlainRoy
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = MarcoMambelli
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %YES%
############################################################################################################
-->
