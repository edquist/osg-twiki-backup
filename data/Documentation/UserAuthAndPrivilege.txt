%META:TOPICINFO{author="KyleGross" date="1225985937" format="1.1" version="1.8"}%
%LINKCSS%

<!-- This is the default OSG documentation template. Please modify it in -->
<!-- the sections indicated to create your topic.                        --> 

<!-- By default the title is the WikiWord used to create this topic. If  -->
<!-- you want to modify it to something more meaningful, just replace    -->
<!-- %TOPIC% below with i.e "My Topic".                                  -->


%STARTINCLUDE%
%EDITTHIS%

<!-- This is the default OSG Integration template. 
Please modify it in the sections indicated to create your topic!
If you have any comments/complaints about this template, then please email me:
rwg@hep.uchicago.edu.  (Adapted from Atlas wiki template, Ed Moyse)
--> 

<!-- By default the title is the WikiWord used to create this topic !-->
<!-- if you want to modify it to something more meaningful, just replace %TOPIC% below with i.e "My Topic"!-->

%TOC%
%STARTINCLUDE%
---+ An Introduction to User Authorization and Privilege  in OSG

In OSG there are a few different models of user authorization to choose from.  The simplest uses a gridmap file at the site, which statically maps an authenticated grid user to a site-local account name. The most sophisticated is called "full privilege", and it implements an authorization software module (PRIMA) that interacts with a dynamic mapping service (GUMS) at the site.  There's an intermediate solution called "compatability", which shares elements of both.

The difference between the simplest (called Grid3 for historical reasons) and the compatibility models is the source of the VirtualOrganizations/VOInfo membership data/account assignments. In Grid3, each CE node pulls independently from the VirtualOrganizations/VOInfo management servers. In compatibility, each CE node for your site pulls the data from the site mapping server; thus, centralized mapping is enabled.  

Under *full privilege*, centralized mapping is enabled. The *VOs* can set varying policies for different [[VirtualOrganizations/VOInfoRolesAndGroups][user groups and roles]] in order to limit which tasks the users can perform and with what priorities, on an access-by-access basis. *Users* can choose an appropriate group/role combination according to the activity they plan to perform. They require a special kind of certificate proxy (called a VirtualOrganizations/VOInfoMS proxy) in order to pass along this information with their jobs. *Sites&#8217;* computing and storage resources can intelligently enforce priorities and data access rights set at the VirtualOrganizations/VOInfo level and can identify users and stop their activities as needed, while adhering to their site-specific security requirements. 

[[ReleaseDocumentation/AboutAuthorizationForCE][More information on these models]]

---++ For VirtualOrganizations/VOInfo management

You must install VirtualOrganizations/VOInfoMS (or equivalent), and optionally VirtualOrganizations/VOInfoMRS.  These are described in [[VirtualOrganizations/VOInfoAlphabetSoup][VirtualOrganizations/VOInfo Alphabet Soup]]. Several things have to be done after VirtualOrganizations/VOInfoMS installation to enable your VirtualOrganizations/VOInfo to be used for voms proxy generation, and for the Compatibility and Full Privilege authorization modes on destination compute (CE) and storage (SE) element nodes. These steps are described in the [[ReleaseDocumentation/VomsInstallGuide][VirtualOrganizations/VOInfoMS]] and [[ReleaseDocumentation/VomrsInstallGuide][VirtualOrganizations/VOInfoMRS]] install guides.
  
---++ For Site management

When you install a CE, you [[ReleaseDocumentation/AboutAuthorizationForCE][choose a form of user authorization]], and follow the instructions for implementing it.  If you choose compatibility or full privilege, you'll have to [[ReleaseDocumentation/InstallConfigureAndManageGUMS][install the Grid User Mapping Service, GUMS]], separately.


---++ A Brief Tour of the Components

The authorization/privilege components are described below and are shown in the following diagram:

   * *VirtualOrganizations/VOInfoMS* The Virtual Organization Membership Service organizes grid users into Virtual Organizations (VOs), so that users working together on a common project across multiple real organizations can be grouped together in the privilege system. Each VirtualOrganizations/VOInfoMS server instance lists the X509 certificate for each user belonging to its VirtualOrganizations/VOInfo and may include other information about users including the subgroups and roles in which they participate. VirtualOrganizations/VOInfoMS is used to find out whether a user is a member of the VirtualOrganizations/VOInfo or one of its subgroups, and whether the user may assume a given role or capability. The VirtualOrganizations/VOInfoMS Admin web application and service (not shown in the diagram) is used to manage the VO, and voms-proxy-init is the client side tool that an end user uses to obtain a proxy certificate.

   * *GUMS* The Grid User Management System maps an end-user's credentials (proxy certificates) to a local user account under which the user's job can be run. While a GUMS service can be configured to perform all mappings based on a static configuration, typically it is configured to look up users in one or more VirtualOrganizations/VOInfoMS servers and to map them based on VirtualOrganizations/VOInfo membership and role(s).
 
   * *PRIMA* The PRIvilege Management and Authorization component is the interface between a Globus Toolkit gatekeeper (or other GSI service) and a mapping service like GUMS. It implements a Globus authorization callout by packaging requests in the SOAP web service format required by GUMS and handling responses.

<!-- VirtualOrganizations/VOInfoMS and GUMS -->
     <img src="%ATTACHURLPATH%/alainsvomsgums.gif" alt="alainsvomsgums.gif" width='677' height='379' />

---++ More Detail on Components
---+++ !!On VirtualOrganizations/VOInfoMS Host
   * VirtualOrganizations/VOInfoMS-Admin (one per VO): an administrative interface to the VirtualOrganizations/VOInfoMS database. Allows the VirtualOrganizations/VOInfo manager to maintain a list of VirtualOrganizations/VOInfo members, and assign membership to VirtualOrganizations/VOInfo groups and roles. Allows edg-mkgridmap and GUMS to retrieve the list.
   * VirtualOrganizations/VOInfoMS Server (one per VO): server component that allows creation of extended proxies. It's separate from VirtualOrganizations/VOInfoMS-Admin, but uses the same database.
   * VirtualOrganizations/VOInfoMS-Admin publisher: Publishes the existence of a VirtualOrganizations/VOInfoMS-Admin service to the [[http://osg.ivdgl.org/twiki/bin/view/Integration/DiscoveryServiceInstallation][Discovery Service]] %BLUE% [D.O. - I don't think this exists] %ENDCOLOR%.
%RED%Which part communicates privileges to GOC?%ENDCOLOR% %BLUE%[D.O. - I don't think the VirtualOrganizations/VOInfoMS communicates to the GOC.]%ENDCOLOR%

---+++ !!On Submission Host
   * VirtualOrganizations/VOInfoMS Client (on each submission host): allows a user to generate a proxy with =voms-proxy-init= that contains VirtualOrganizations/VOInfo/group/role information. It contacts the VirtualOrganizations/VOInfoMS Server to generate the proxy.

---+++ !!At Site
   * edg-mkgrimap (on each gatekeeper *not served by GUMS*): a script that generates the grid-mapfile downloading information from VirtualOrganizations/VOInfoMS servers. It runs every so often on a gatekeeper, contacts the list of VirtualOrganizations/VOInfoMS servers specified in the configuration file (edg/etc/edg-mkgridmap.conf), and creates a grid-mapfile.
   * GUMS Server (one per site): a service that allows you to manage privilege-to-userid mapping on site. It can be contacted by GUMS Client (below) to generate grid-mapfiles and the inverse accounting map (account-to-VO). It can also be contacted by the PRIMA module (below) to retrieve the mapping for a single request.
   * GUMS Client (on each gatekeeper): a client tool that connects to GUMS Server to retrieve maps (grid-mapfile and accounting map). It also includes admin tools to manage GUMS. 
      * Used in conjuction with PRIMA to deploy the accounting map. 
      * Used without PRIMA for those services that must still use a grid-mapfile.
   * PRIMA module (on each gatekeeper that needs to contact GUMS): gatekeeper callout module that contacts an authorization server (i.e., GUMS) to retrieve the privilege-to-userid mapping. It is a library that the gatekeeper can be configured to use. For every gatekeeper request, it will contact the GUMS server.

%STOPINCLUDE%
<!--
%BOTTOMMATTER%
-->
--- 
Original author: Alain Roy (for VDT website)<br>
-- Main.RobGardner - 10 Mar 2005<br>
-- Main.AnneHeavey - 01 Aug 2007<br>
-- Main.DougOlson - 30 Oct 2007<br>

%META:FILEATTACHMENT{name="alainsvomsgums.gif" attachment="alainsvomsgums.gif" attr="" comment="VOMS and GUMS" date="1161279184" moveby="Main.AnneHeavey" movedto="Documentation.UserAuthAndPrivilege.alainsvomsgums.gif" movedwhen="1186006609" movefrom="Integration.PrivilegeOSG.alainsvomsgums.gif" path="alainsvomsgums.gif" size="23556" stream="alainsvomsgums.gif" user="Main.AnneHeavey" version="1"}%
