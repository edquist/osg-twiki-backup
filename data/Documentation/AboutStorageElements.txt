%META:TOPICINFO{author="AlexSim" date="1219428330" format="1.1" reprev="1.6" version="1.6"}%
%LINKCSS%

<!-- This is the default OSG documentation template. Please modify it in --> <!-- the sections indicated to create your topic.                        -->

<!-- By default the title is the WikiWord used to create this topic. If  --> <!-- you want to modify it to something more meaningful, just replace    --> <!-- %TOPIC% below with i.e "My Topic".                                  -->

%STARTINCLUDE%
---+ About Storage Elements
%EDITTHIS%

A Storage Element on OSG is a node/cluster of nodes which

   * Provides Storage Space. 
   * Is accessible to applications running on OSG through either gridftp and/or srm interface. 
   * Has [[ReleaseDocumentation//GenericInformationProviders][GIP]] setup and configured properly which publishes its information. 
   * Has well-defined policy for cleanup and usage. 
   * Is registered with OSG. 

Note that the Storage Element described above is not the same as the storage available on a Compute Element node, which is desribed in [[ReleaseDocumentation/LocalStorageConfiguration][Local Storage Configuration]]. The latter storage is part of a CE and is functional to it, not providing outside access to the storage space. To be able to access the space of a CE-Storage from outside a Computing Element, usually a Storage Element is used. Though they may access the same physical storage (disk or tape), the storage on a Compute Element and that available from a Storage Element are two distinct resources. They are described in different portions of the [[http://glueschema.forge.cnaf.infn.it/][GLUE Schema]], the first one within the CE elements of the schema, the second one in the SE elements. The elements in the CE-SE binding allow to connect them together and specify which SE is accessing the same storage space (disk or tape) served by a CE-Storage.

<img alt="" src="%PUBURL%/Integration/StorageElementAdmins/WhatisaSE.png" style="border: 0pt none ; width: 100%" /> %BR% [[%PUBURL%/Integration/StorageElementAdmins/WhatisaSE.png][Full Size]] ([[%ATTACHURL%/WhatisaSE.bmp][in BMP format]])

---++ Types of Storage Elements

---+++!! <nop>GridFTP-based File System

!GridFTP-based SE is simply a file system directory accessible via GSI-authenticated ftp. This provides no space management functions and limited permission management functions. In LCG this is called also "Classic SE".

The parameters needed to publish a !GridFTP server in [[http://glueschema.forge.cnaf.infn.it/][GLUE Schema]] are quite simple. The !GridFTP server information is contained in an <nop>SEAccessProtocol element of the schema. A !GridFTP server is defined by an end-point, which includes the host and port of the server and the base directory. Additionally, the protocol type (gsiftp) and version are defined. The whole directory tree under the base directory is part of the SE. There may be even overlapping SEs if one base directory is a subdirectory of another or if there links between the two trees. This could potentially provide more throughput by allowing more than one server to access the data, however, using SRM (see below) is preferable for providing this and many other features.

The easiest way to install a !GridFTP server with all the required certificates is to install it as part of a compute element, having chosen a base directory to supply the storage space. There is no special requirement about the base directory: it has to be a valid path for the !GridFTP server and have the protections set to provide the desired access to Grid users. Sometimes setting sticky (only the creator of a file can remove it) or setgroup (group is maintained in subdirectories) IDs in the file system may be useful.

---+++!! SRM/Gridftp-based File System

SRM stands for Storage Resource Manager. An SRM/GridFTP-based SE is simply a directory accessible via GSI-authenticated ftp and [[http://sdm.lbl.gov/srm-wg/][SRM]] interfaces. SRM allows to manage and query the resource, but accessing files directly is not allowed. It would provide a backdoor and thus violate the constraints imposed by SRM. Except for the SRM interface on top of it, this is like the previous Gridftp based File System.

---+++!! SRM/dCache

This is a full implementation of a Storage Element that enforces stronger constraints and can manage a space spanning more volumes. For information about the VDT-dCache release of SRM/dCache, see the [[http://vdt.cs.wisc.edu/components/dcache.html][VDT-dCache webpage]]. Support for SRM/dCache installations using the VDT-dCache package is available through osg-storage@opensciencegrid.org.

---+++!! SRM/BeStMan

!BeStMan is a full implementation of SRM v2.2, developed by Lawrence Berkeley National Laboratory, for a small disk based storage and mass storage systems such as HPSS. End users may have their own personal !BeStMan that manages and gives an SRM interface to their local disks. It works on top of existing disk-based unix file system, and has been reported so far to work on file systems such as NFS, PVFS, GPFS, AFS, GFS, HFS+ and Lustre. It also works with any existing file transfer service, such as gsiftp, http, https, bbftp and ftp. It requires the minimal administrative efforts on the deployment and updates. If storage spans on multiple file systems and storage systems, SRM/dCache should be considered.  [[http://datagrid.lbl.gov/bestman][Documentation and a manual for SRM/BeStMan is available]]. Support is available through srm@lbl.gov.

%STOPINCLUDE%

| *[[Documentation/WebHome][Return to documentation hub]]* |

<!--
%BOTTOMMATTER%
--> -- Main.AnneHeavey - 11 Oct 2007%BR% -- Main.MarciaTeckenbrock - 04 Dec 2007: LINKS OK
