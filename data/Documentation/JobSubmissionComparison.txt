%META:TOPICINFO{author="ParagMhashilkar" date="1265230800" format="1.1" reprev="1.4" version="1.4"}%
%META:TOPICPARENT{name="WebHome"}%
%LINKCSS%

<!-- This is the default OSG documentation template. Please modify it in -->
<!-- the sections indicated to create your topic.                        --> 

<!-- By default the title is the WikiWord used to create this topic. If  -->
<!-- you want to modify it to something more meaningful, just replace    -->
<!-- %TOPIC% below with i.e "My Topic".                                  -->

---+!! %SPACEOUT{ "%TOPIC%" }%
%TOC%

%STARTINCLUDE%
%EDITTHIS%
---+ A Comparison of OSG Job Submission/Resource Provisioning Methods
---++Introduction (Dan, John, others)
When providing job submission services to its customers and constituents, VOs have a variety of technology choices it can make depending on the types and quantities of the jobs managed. To help OSG better understand the tradeoffs in technology, and therefore be able to better advise its VOs, this paper is designed to compare and contrast the three main technologies that are used for job routing and distribution on the OSG: the Engage OSG Matchmaker, Glide-in WMS, and PANDA. Since each of these services relies on an underlying information architecture we include a brief section on the Information services that OSG offers.
---++ High Level Technology Comparison (Everyone, 1-2 pages) - To be completed after the sections below
---++ Functionality Comparison Table (Everyone)
---++A Very Brief Overview of OSG Information Sources (Dan, others 1 paragraph each)
---+++BDII
---+++RESS
---+++OIM
---+++GIP
---+++!MyOSG
---+++Static Configuration Files
---++Job Submission Methods (Mats, Igor, Maxim)
In this section we want to provide first a high level architecture for each of the technologies below that includes the design philosophy and then an implementation and usage description that addresses answers to each of the following questions:
   * Job submitter perspectives:
      * What are some typical use cases?
      * How many users/jobs can be supported?
      * To what degree is data movement synchronous or asynchronous both on the submit side as well as when the job completes.
      * How does the technology integrate with data management?
      * What is the overhead on a single job submission?
      * Can the infrastructure support short jobs?
      * What types of job patterns are supported? (Complex workflows?)
      * Is Resource Provisioning supported? If so how?
      * What types of matchmakers are used? Which OSG information sources do they utilize?
      * How elaborate is the matchmaking? (can users specify e.g. hardware type, or s/w packages?)
      * How does the system respond to “bad” CEs, sites, or environments?
   * Administrative perspectives:
      * How does the system scale? (What is important, cpu, memory, network bandwidth)
      * How much hardware is required for a “best practices” deployment?
      * How many hosts are required to be set up and maintained?
      * Can a “reasonable” admin type person set this up on his/her own? (Has this been setup by folks other than the developer?)
      * To what degree can it be setup without requiring root access.
---+++Engage OSG Matchmaker (Mats, ~1-2 pages)
---++++ High Level Architecture and Design Consideration
   * Include why the architecture was set up this way, what problem was this trying to solve/avoid...
---++++ Usage Description (how users use the technology & use cases)
---++++ implementation, Deployment, and Management Description
---+++Glide-in WMS 

-- Main.ParagMhashilkar - 03 Feb 2010

In Grid computing, the computing resources are distributed over many independent sites with only a thin layer of Grid middleware shared between them. This deployment model is very convenient for computing resource providers. They can continue to operate the local distributed resources according to local preferences and expertise, integrating them easily with other, non-Grid resources. Moreover, the decentral­ized nature of the Grid allows for easy scalability as one just needs to split a site into multiple logical pieces if scalability becomes an issue.

However, the Grid deployment model introduces several problems for the users of the system. The three major problems being -
   * The complexity of job scheduling in the Grid environment
   * The non-uniformity of compute resources
   * The lack of good end-to-end job monitoring.

glideinWMS solves these problems by providing a simple way to access the Grid resources. It implements the pilot factory also called the glidein factory (GF) and uses Condor as a user job WMS.

<img src="%ATTACHURL%/glideinWMS_at_a_glance_medium.png" alt="glideinWMS at a glance"> 

Figure above shows a typical deployment of the glideinWMS system. It consists of two Condor pools,
   * User pool (Green color) used by the users for their job management
   * !GlideinWMS pool (Aqua color) used by the glideinWMS system to manage glideins. 

VO Frontend periodically queries user pool to check the status of user job queues. Based on the job queues, it instructs the glidein factory (GF) to submit glideins to run on Grid resource(s). A glidein is a properly configured Condor startd submitted as a Grid job. glideinWMS extensively uses Condor classad mechanism as a means of communication between its services. Once a glidein starts on a worker node, it will join the user Condor pool, making the obtained Grid-batch slot as a slot in the Condor pool. At this point, a regular Condor job can start there as if it is a dedicated resource. glideinWMS does not provide GUI interface for the users to submit their jobs, instead users use Condor client tools like condor_submit to submit their jobs. The user interfaces with the Condor batch system, he/she is shielded from the problems mentioned above that are introduced by the Grid deployment. Based on the time slot allocated for glidein to run, this glidein created batch slot can run more than one user jobs before relinquishing its claim over the grid resource. Thus, glideinWMS supports resource provisioning. This mechanism is quite effective in running short jobs using glideinWMS. Since a single glidein can run multiple short jobs, the effective wait time/overhead of running several short jobs this way is equivalent to running a single grid job. The resource provisioning feature can also be used to provide a guaranteed time slot for long running jobs. glideinWMS also provides users with the capability of selecting resources based on resource characteristics, like, hardware type, OS, packages installed on the worker node and any custom information that is required for the user jobs to run. glideinWMS can be configured to run pluggable scripts as the glidein bootstraps. This is useful in advertising desired resource information. Thus the combination of glidein’s bootstrapping scripts and pluggable scripts can identify potential problems with the resource before the user job could start on the resource. This makes glideinWMS more resilient to bad CE/resources and the environment on the resource.

The main disadvantage of glideinWMS like any other pilot-WMSes is the increased resource utilization of a WMS. A push WMS only needs to make a site-selection decision and hand the user job to the remote Grid site. A pilot-WMS, instead, must handle pilot jobs, user jobs and the handling and monitoring of the resources provided by the pilot jobs. 

glideinWMS is used by in OSG and LCG by several VOs like CMS, CDF, !DZero, !IceCUBE and GPN and by experimental High Energy physics groups like Minos, Minerva and NOVA. glideinWMS supports several workflows supported by Condor from a simple job submission to complex DAGs. glideinWMS can query the information systems like !ReSS and BDII to get the list of available grid resources. Current version of glideinWMS does not have any support for data management by the glideinWMS system itself. However, this is less of a short coming since most of the VOs have their own data management system which can be easily used by the user jobs run via glideinWMS.

glideinWMS is quite scalable. Although, all the glideinWMS components can be collocated on a single host for smaller use case, we recommend following services per host for larger use case -
glidein factory collocated with WMS Condor Pool
   * User Condor Pool Collector
   * User Schedd
   * VO Frontend

Table below shows the scalability figures for the glideinWMS system tested so far.

|    *Criteria*    |    *Design goal*    |    *Achieved so far*    |
| Total number of user jobs in the queue at a given time | 100k | 200k |
| Number of glideins in the system at any given time | 10k | ~26k |
| Number of running jobs per schedd at any given time | 10k | ~23k |
| Grid sites handled | ~100 | ~100 |

Most of the glideinWMS services do not need to be run with root privileges. HTTPD service on the VO frontend and Glidein factory node is typically installed and run as root user. Also, for security reasons, user Schedd(s) for non portal installation should run as root. Since there are several services to be installed and configured, the deployment model needs to be thought out based on the use case. Also, an administrator installing the services needs to be familiar with Condor Batch System, GSI concepts and the Grid (OSG, LCG) they are going to interface glideinWMS with. glideinWMS team is actively working to make the installation process as easy as possible.

*glideinWMS Home Page:* [[http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/][glideinWMS Home]]

---+++PANDA (Maxim, ~1-2 pages)
---++++ High Level Architecture and Design Consideration
   * Include why the architecture was set up this way, what problem was this trying to solve/avoid...
---++++ Usage Description (how users use the technology & use cases)
---++++ implementation, Deployment, and Management Description
---++ Summary and Conclusions (1-2 paragraphs)
Additional options not described in this document: Gridway, Pegasus, Swift



%STOPINCLUDE%

%BOTTOMMATTER%

-- Main.DanFraser - 14 Jan 2010

%META:FILEATTACHMENT{name="glideinWMS_at_a_glance_medium.png" attachment="glideinWMS_at_a_glance_medium.png" attr="" comment="glideinWMS Architecture and use case" date="1265230676" path="glideinWMS_at_a_glance_medium.png" size="46186" stream="glideinWMS_at_a_glance_medium.png" tmpFilename="/usr/tmp/CGItemp17405" user="ParagMhashilkar" version="1"}%
