%META:TOPICINFO{author="DanFraser" date="1263511693" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="WebHome"}%
%LINKCSS%

<!-- This is the default OSG documentation template. Please modify it in -->
<!-- the sections indicated to create your topic.                        --> 

<!-- By default the title is the WikiWord used to create this topic. If  -->
<!-- you want to modify it to something more meaningful, just replace    -->
<!-- %TOPIC% below with i.e "My Topic".                                  -->

---+!! %SPACEOUT{ "%TOPIC%" }%
%TOC%

%STARTINCLUDE%
%EDITTHIS%
---+ A Comparison of OSG Job Submission/Resource Provisioning Methods
---++Introduction (Dan, John, others)
When providing job submission services to its customers and constituents, VOs have a variety of technology choices it can make depending on the types and quantities of the jobs managed. To help VOs understand the tradeoffs in technology, this paper is designed to compare and contrast the three main technologies that are used for job routing and distribution on the OSG: the Engage OSG Matchmaker, Glide-in WMS, and PANDA. Since each of these services relies on an underlying information architecture we begin with a section on the Information services that OSG offers to its community. ...

---++A Very Brief Overview of OSG Information Sources (Dan, 1 paragraph each)
---+++BDII
---+++RESS
---+++OIM
---+++GIP
---+++!MyOSG
---++Job Submission Methods (Mats, Igor, Maxim)
In this section we want to provide first a high level architecture for each of the technologies below that includes the design philosophy and then an implementation and usage description that addresses answers to each of the following questions:
   * Job submitter perspectives:
      * What are some typical use cases?
      * How many users/jobs can be supported?
      * To what degree is data movement synchronous or asynchronous both on the submit side as well as when the job completes.
      * What is the overhead on a single job submission?
      * Can the infrastructure support short jobs?
      * What types of job patterns are supported? (Complex workflows?)
      * Is Resource Provisioning supported? If so how?
      * What types of matchmakers are used? Which OSG information sources do they utilize?
      * How elaborate is the matchmaking? (can users specify e.g. hardware type, or s/w packages?)
      * How does the system respond to “bad” CEs, sites, or environments?
   * Administrative perspectives:
      * How does the system scale? (What is important, cpu, memory, network bandwidth)
      * How much hardware is required for a “best practices” deployment?
      * How many hosts are required to be set up and maintained?
      * Can a “reasonable” admin type person set this up on his/her own? (Has this been setup by folks other than the developer?)

---+++Engage OSG Matchmaker (Mats, ~1-2 pages)
---++++ High Level Architecture and Design Consideration
---++++ Usage Description (how users use the technology & use cases)
---++++ implementation, Deployment, and Management Description
---+++Glide-in WMS (Igor ~1-2 pages)
---++++ High Level Architecture and Design Consideration
---++++ Usage Description (how users use the technology & use cases)
---++++ implementation, Deployment, and Management Description
---+++PANDA (Maxim, ~1-2 pages)
---++++ High Level Architecture and Design Consideration
---++++ Usage Description (how users use the technology & use cases)
---++++ implementation, Deployment, and Management Description
---++ Feature Comparison Table (Everyone)
---++ Analysis and Comparison (Everyone, 1-2 pages)
---++ Summary and Conclusions (1-2 paragraphs)




%STOPINCLUDE%

%BOTTOMMATTER%

-- Main.DanFraser - 14 Jan 2010
