%META:TOPICINFO{author="KyleGross" date="1480625582" format="1.1" version="1.22"}%
%META:TOPICPARENT{name="WebHome"}%
---+ Configure !GUMS to Implement Site Policies

%DOC_STATUS_TABLE%

%TOC%

See [[AboutGums][About !GUMS]] for an introduction.

GUMS runs at a grid site under the control of site administrators; it is a "site tool" as opposed to a "VO tool". The users it maps may be affiliated with numerous VOs. The mappings in a site's GUMS installation are defined in a single XML policy file, =gums.config=. This file may contain multiple policies, and the administrator can assign different policies to different groups of users. The administrator can also specify different mappings on different hosts or different sets of hosts.

The =gums.config= file has three parts:
   $ persistenceFactories: defines where to store user and mapping data, such as a database or LDAP (the storage is referred to as "persistence" in GUMS; the interface to it is called a "persistence factory"). In OSG, it's always kept in mysql. Each component that needs persistence information will retrieve it from mysql.

   $ groupMappings: defines groups of users and sets how they are to get mapped. A groupMapping is defined by two things: a set of users (userGroup) and a policy for account mapping (accountMapping). Optionally, the policy can be composed of multiple policies (compositeAccountMapping)

   $ hostGroups: defines which groupMappings are used for the different hosts.

---++ Mapping users to accounts

Users can be mapped to accounts in a variety of ways:

   * map groups of users to shared group accounts
   * map users to pool accounts, one user per account
   * map users to group accounts manually

The accounts themselves are created outside of !GUMS. Particular accounts or ranges of accounts (e.g., xyz0000 to xyz9999) are then specified in the GUMS configuration file. The mapping policy as implemented in this file may take into account the grid identity of the user and his/her VO only, or it can accommodate extended attributes (implemented via voms-proxy-init) such as the user's role and group within the VO. Furthermore, different mapping policies may be implemented depending on the host chosen to process the job. 

---++ Retrieving the Map
A gatekeeper (or a generic service) can retrieve the suitable map in two ways:

   * by using the =gums-host= tool to retrieve the grid-mapfile %RED%(under BNL site guide_commands.html; unavailable to me right now) %ENDCOLOR%
   * by calling directly the GUMS service for every request

---++ Policy File Structure

The XML policy file has this structure:
<verbatim>
<gums>
 <persistenceFactories>

 <persistenceFactory/>

 </persistenceFactories>
 <adminUserGroup/>
 <groupMappings>
 <groupMapping>
 <userGroup/>

 <accountMapping/>

 </groupMapping>
 <groupMapping>
 <userGroup/>
 <compositeAccountMapping>
 <accountMapping/>

 <accountMapping/>

 <accountMapping/>
 </compositeAccountMapping>
 </groupMapping>
 ...
 </groupMappings>

 <hostGroups>

 <hostGroup/>
 </hostGroups>
</gums>
</verbatim>

---+++ !!persistenceFactories

The default file includes one persistenceFactory element; leave it as is %RED%(even the password?)%ENDCOLOR%.
<verbatim>
<persistenceFactory 
name='mysql'
className='gov.bnl.gums.MySQLPersistenceFactory'
jdbcDriver='com.mysql.jdbc.Driver'
jdbcUrl='jdbc:mysql://cd-94372.dhcp.fnal.gov/GUMS_1_0' 
user='gums' 
password='VDTXLKRBKIM' 
autoReconnect='true' />
</verbatim>

---+++ !!groupMappings

This element contains groupMapping elements. The only essential attribute is "name". This is the name for the mapping defined within this element. Each groupMapping element in the file must have a unique name.

=<groupMapping name='osg1'>=

---++++ !!userGroup

The userGroup element is a subelement of groupMapping.

*Required, fixed-value attributes*

It has two attributes which are always needed and should never be changed from the default values: className and persistenceFactory.
<verbatim>
className='gov.bnl.gums.VOMSGroup'
persistenceFactory='mysql' 
</verbatim>

*Required, installation-specific attributes*

It has others which are required, but that you need to set for your own installation: url, name, voGroup, sslCertfile, ss1key. The default values for these last two should work as is, but check.
Values:

   * name: your VO name
   * voGroup: a group defined in VOMS under your VO 
   * url: URL for your VOMS admin server
   * sslCertfile: path to the httpcert.pem file on your GUMS host 
   * sslKey path to the httpkey.pem file on your GUMS host 
E.g.,
<verbatim>
name='myusergroup1' 
voGroup="/myvo/group1"
url='https://my-voms-server:8443/edg-voms-admin/vos/services/VOMSAdmin'
sslCertfile='/etc/grid-security/http/httpcert.pem'
sslKey='/etc/grid-security/http/httpkey.pem' 
</verbatim>

---++++ !!Optional attributes

There are two optional attributes: voRole and ingoreFQAN.
   * voRole: Specifies which VO role(s) (defined in a VOMS) must be specified in the proxy in order to make a match. Should be used with ignoreFQAN="false".
   * ignoreFQAN: This dictates whether to process or ignore role and group information, if any, in a proxy obtained with voms-proxy-init. False means "process it"; true means "ignore it".

We recommend that you always include ignoreFQAN with its value, either true or false. That way you don't have to remember the default value (which is "false").
<verbatim>
voRole="role1"
ignoreFQAN="false"
</verbatim>

---+++ !!Account Mapping

An accountMapping element defines the logic with which the user credentials are mapped to the local account. You can choose whether you want to implement mapping to a group account or to a pool of accounts.

---++++ !!Group Account Mapping

For group mapping, you just have to specify the implementing class (use the value for className shown here, below) and the name of the group account, e.g.,
<verbatim>
<accountMapping 
className='gov.bnl.gums.GroupAccountMapper' 
groupName='groupaccount1' />
</verbatim>
---++++ !!Pool Account Mapping

To use a pool of accounts, you need to specify the implementing class (use the value for className shown here, below), the place to look up the pool of accounts (the persistenceFactory, always set to "mysql" in OSG) and the name for the pool (there may be multiple pools defined), e.g.,:
<verbatim>
<accountMapping 
className='gov.bnl.gums.AccountPoolMapper'
persistenceFactory='mysql' 
name='Pool_1' />
</verbatim>

---++++ !!Both (Composite)

You may include both types of mapping within one groupMapping element. A typical use for this would be to map the incoming user to a pool account if available, and if not, then fallback to a group account. Use the compositeAccountMapping element as shown here to accomplish this:
<verbatim>
<compositeAccountMapping>
 <accountMapping className='gov.bnl.gums.AccountPoolMapper'
 persistenceFactory='mysql' 
 name='Pool_1' />
 <accountMapping 
 className='gov.bnl.gums.GroupAccountMapper'
 groupName='groupaccount1' />
</compositeAccountMapping>
</verbatim>

---++++ !!Host Group

A hostGroup element has to define which hosts use which mappings. It has three required attributes:
   $ className: use the value for className shown here, below
   $ wildcard: specifies a host or set of hosts; can use a wildcard 
   $ groups: specifies the group mapping to be used by the specified host(s) (The value must match the "name" attribute of one or more of the groupMapping elements).
<verbatim>
<hostGroup 
className='gov.bnl.gums.WildcardHostGroup' 
wildcard='*.fnal.gov' 
groups='osg1' />
</verbatim>
As with other elements in the =gums.config= file, GUMS maps according to the first match encountered. If you implement multiple hostGroups, make sure your wildcard value only catches the hosts it should; and put broader matches after narrower ones (e.g., myhost.fnal.gov ahead of *.fnal.gov).


---++ A Simple Example

Here we'll use group mapping to a single account, osg01. We'll assume people are coming in with a standard grid proxy so that we can ignore VO groups and roles. %RED%(We haven't talked about FQAN or the adminUserGroup...)%ENDCOLOR%
<verbatim>
<gums>

 <persistenceFactories>

 <persistenceFactory ... (all the default values as listed above) />
 </persistenceFactories>
 <adminUserGroup 
 className='gov.bnl.gums.ManualUserGroup'
 persistenceFactory='mysql' 
 name='admins' />
 <groupMappings>
 <groupMapping>

 name='osg01'
 <userGroup 
 className='gov.bnl.gums.VOMSGroup'
 name='usergroup1'
 url='https://your-voms-server:8443/edg-voms-admin/{VO name}/services/VOMSAdmin'
 voGroup="/myvo/group1"
 persistenceFactory='mysql' 
 sslCertfile='/etc/grid-security/http/httpcert.pem'
 sslKey='/etc/grid-security/http/httpkey.pem'
 ignoreFQAN="true"/>

 <accountMapping 
 className='gov.bnl.gums.GroupAccountMapper' 
 groupName='osg01account' />
 </groupMapping>
 </groupMappings>
 <hostGroups>
 <hostGroup 
 className='gov.bnl.gums.WildcardHostGroup' 
 wildcard='*.fnal.gov' 
 groups='osg01' />

 </hostGroups>

</gums>
</verbatim>

If you want MonALISA to be able to retrieve information for a given groupMapping, you'll need to set two other attributes in that groupMapping element:
   $ accountingVo: its value should be similar or identical to the VO name and must be completely lowercase
   $ accountingDesc: the same string as accountingVo but in uppercase

E.g.,
<verbatim>
 <groupMapping>
 name='osg01'
 accountingVo=''myvo
 accountingDesc='MYVO'>
 ...
 </groupMapping>
</verbatim>
These values will appear in the =$VDT_LOCATION/monitoring/grid3-user-vo-map.txt= file (the inverse map file) when you run _Generate Inverse Map_ on the GUMS web UI.
 

---+ References
 
   * [[http://grid.racf.bnl.gov/GUMS/guide_introduction.html]]

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = TerrenceMartin

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|SecurityTeam|User|Monitoring|General|Trash/Trash/Integration|Operations|Tier3)
   * Local DOC_AREA       = VO

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = HowTo

  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %NO%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%


 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = TerrenceMartin
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


############################################################################################################
-->

%META:TOPICMOVED{by="JamesWeichel" date="1318278634" from="Documentation.GUMS" to="Documentation.GumsConfiguration"}%
