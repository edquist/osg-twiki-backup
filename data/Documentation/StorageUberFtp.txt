%META:TOPICINFO{author="NehaSharma" date="1279738154" format="1.1" reprev="1.8" version="1.8"}%
%META:TOPICPARENT{name="StorageGridFTP"}%
---+!! *<nop>%SPACEOUT{ "%TOPIC%" }%*
%DOC_STATUS_TABLE%
%LINKCSS%
%TOC{depth="2"}%

---++About This Document
This document is intended for users who want to use "UberFTP" to either
   * list files at a storage location 
   * list directory structure at a storage location
   * get files from a storage location
   * put files in to a storage location
   * transfer files from one storage location to another

!UberFTP is an interactive !GridFTP enabled client. According to [[http://dims.ncsa.uiuc.edu/set/uberftp/index.html][official website]], it is the first interactive, !GridFTP enabled ftp client. It supports GSI authentication, parallel data channels and third party transfers.

---++Requirements
   * A valid grid proxy (if you want to use GSI authenticated session)
   * Permission to actually get/put/list the data
   * OSG Client, CE or WN software installed

---++Procedure
!UberFTP is packaged in to VDT as one of the [[Documentation.StorageGridFTP][GridFTP]]-enabled clients and should be available on any node that has OSG Client, CE or WN software installed.
To run the client, you need to 
   * login to proper node
<pre class="screen">
source [VDT_LOCATION]/setup.sh
</pre>
   * make sure you have client in your [PATH] by running following command
<pre class="screen">
which uberftp
</pre>

---+++Usage
<pre class="screen">
uberftp [options] [host options] [host]   (creates an interactive session)
uberftp [options] [host options]  host cmds
uberftp [options] [source-url] [destination-url]
uberftp [options] -f <urlfile>
uberftp [options] -cmd <url>
</pre>

%EDITTABLE{ header="| *Parameter* | *Description* |" format="| text, 30 | textarea |" changerows="on" editbutton="Edit Table" }%
| *Parameter* | *Description* |
| host | Connect to !GridFTP server serving the data you want to access and/or data location where you want to store data  |
| cmds | This specifies the FTP commands to run once the control connection is establish. This list must be enclosed in quotes. Multiple commands are semicolon delimited. !UberFTP will execute these commands and then exit |
| sourceurl/destination-url | These denote the source URL and destination URL respectively. The accepted forms are: gsiftp://host[:port]/[path] ,ftp://[user[:pass]@]host[:port]/[path],file:[path] |
| urlfile | This file is a list of [source-url] [destination-url] pairs, one pair per line. Blanks lines and lines beginning with '#' are ignored |
| cmd | This will execute the given command using the url as the target. The supported commands and their syntax are listed below |

%EDITTABLE{ header="| *HostOptions* | *Description* |" format="| text, 20 | textarea |" changerows="on" editbutton="Edit Table" }%
| *Host Option* | *Description* |
| -P port | Connect to port (default 2811 for GSI) |
| -u user | Specify the user to authenticate as |
| -p pass | X Use password 'pass' when authenticating with 'host'. If 'pass' equals 'X', read the password from STDIN with character echoing turned off |

%EDITTABLE{ header="| *Options* | *Description* |" format="| text, 20 | textarea |" changerows="on" editbutton="Edit Table" }%
| *Option* | *Description* |
| -active | Use ACTIVE mode for data transfers |
| -ascii | Use ASCII mode for data transfers |
| -binary | Use BINARY mode for data transfers |
| -blksize n | Set the internal buffer size to n |
| -cksum [on/off] | Enable/Disable CRC checks after file transfers |
| -debug   n | Set the debug level to n |
| -family  name | Set the remote storage family to name |
| -glob [on/off] | Enable/Disable filename globbing |
| -hash | Enable hashing |
| -keepalive n | Send control channel keepalive messages every n seconds during data transfers |
| -mode  [E/S] | Switch the transfer mode to extend block (E) or streams mode(S) |
| -parallel n | Use n parallel data channels during extended block transfers |
| -passive | Use PASSIVE mode for data transfers |
| -pbsz  n | Set the data protection buffer size to n bytes |
| -prot [C/S/E/P] | Set the data protection level to clear (C), safe (S), confidential (E) or private (P) |
| -retry n | Retry commands that fail with transient errors n times |
| -resume path | Retry the recursive transfer starting at path |
| -tcpbuf n | Set the TCP read/write buffers to n bytes |
| -wait | This will cause the client to wait for remote files to stage before attempting to transfer them |
| -v | Print !UberFTP version information and exit. Deprecated |
| -version | Print !UberFTP version information and exit |
| -versions | Print version information about all used globus modules and exit |

%EDITTABLE{ header="| *Cmds* | *Description* |" format="| text, 20 | textarea |" changerows="on" editbutton="Edit Table" }%
| *Supported Commands* | *Description* | 
| -cat [url] | Print to stdout the contents of the remote file |
| -chgrp [-r] group [url] | Set the group ownership on the remote object(s) |
| -chmod [-r] perms [url] | Set the permissions on the remote object(s) |
| -dir [-r] !<url> | List the contents of the remote object |
| -ls [-r] <url> | List the contents of the remote object |
| -mkdir <url> | Create the remote directory |
| -rename <url> <path> | Rename the remote object to the given |
| -rm [-r] <url> | Remove the remote object(s) |
| -rmdir <url> | Remove the remote directory |
| -size <url> | Return the size of the remote object |
| -stage -r seconds <url> | Attempt to stage the remote object(s) over the time period given in seconds |

Note: !UberFTP uses passive STREAMS mode by default.

---+++Interactive Commands

!UberFTP supports the following commands (type =help= at the command prompt to list):

<table style="valign: top;"><tr style="valign: top;"><td>
   * active
   * ascii
   * binary          
   * blksize
   * bugs            
   * bye             
   * cat             
   * cd              
   * cdup            
   * chgrp     
</td><td>      
   * chmod
   * cksum
   * close           
   * dcau
   * debug
   * dir
   * family
   * get             
   * glob
   * hash
</td><td>
   * help
   * keepalive
   * lcat            
   * lcd
   * lcdup
   * lchgrp
   * lchmod
   * lclose          
   * ldir
   * lls
</td><td>
   * lmkdir
   * lopen
   * lpwd            
   * lquote          
   * lrename
   * lrm
   * lrmdir
   * ls              
   * lsize
   * lstage
</td><td>
   * mget 
   * mkdir
   * mode            
   * mput
   * open
   * order
   * parallel
   * passive         
   * pbsz
   * pget
</td><td>
   * pput
   * prot
   * put             
   * pwd
   * quit
   * quote
   * rename
   * resume          
   * retry
   * rm
</td><td>
   * rmdir
   * runique
   * size            
   * stage
   * sunique
   * tcpbuf
   * versions
   * wait 
</td><td style="valign: top;" valign="top">
</td>
</tr></table>

---+++Normal Transfers
In normal data transfers, the "local" machine is the one on which you are running the command. 
   * Use =open= to select the remote host
   * Perform =put= and =get= between the local client machine and the remote FTP service

---+++Third-Party Transfers
Third-party transfers are performed similarly to other file transfers.In order to perform a third-party transfer:
   * Select a new "local" service by using =lopen=. Now all 'l*' commands perform actions on the new 'local' service as if you were logged into that machine
   * Use =put= to perform a third-party transfer when moving the file from "local" service to the "remote" service" 
   * Use =get= to perform a third-party transfer when moving the file from "remote" service to the "local" service"
   * Use =close= and =lclose= when you are finished with the "remote" and "local" service respectively

---+++GSI Authenticated Session
   * Obtain a grid proxy using =grid-proxy-init=
   * Use !UberFTP to access the remote server and run your commands
   * Close the connection

---++Problem Resolution And Help
---+++Support
If you have questions or need help using !UberFTP, please send email to osg-storage@opensciencegrid.org
---+++References
[[http://dims.ncsa.uiuc.edu/set/uberftp/userdoc.html][UberFTP website]]<br></br>
[[http://www.nersc.gov/nusers/services/Grid/data.php][Grid Computing at NERSC- Data Transfer]]
---+++!!Screen dump of the complete procedure
%BR%
%TWISTY{
mode="div"
showlink="Show..."
hidelink="Hide"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
<pre class="screen">
% uberftp dtn01.nersc.gov
220 dtn01.nersc.gov GridFTP Server 2.3 (gcc64dbg, 1144436882-63) ready.
230 User shreyas logged in.
UberFTP>        
To list files in a directory:
UberFTP> ls
drwxr-xr-x   2  shreyas  shreyas       27 Apr 26 12:28  .
drwxr-xr-x  19  shreyas  shreyas     4096 Jun 20 15:57  ..
-rw-r--r--   1  shreyas  shreyas   692224 Apr 26 12:28  zebu
-rw-r--r--   1  shreyas  shreyas  2097153 Apr 26 12:28  gnu
To get a file:
UberFTP> get dtn01
dtn01:  107 bytes in 0.05 seconds. 2.30 KB/sec
To put a file:
UberFTP> put localfile
localfile:  107 bytes in 0.05 seconds. 2.30 KB/sec
To do a third party copy between pdsf and dtn01, we issue an lopen, which causes treats the "lopen"ed host as the local filesystem
% grid-proxy-init
% uberftp
UberFTP> lopen pdsfgrid.nersc.gov
220 pdsfgrid4.nersc.gov GridFTP Server 2.3 (gcc32dbg, 1144436882-63) ready.
230 User shreyas logged in.
UberFTP> open dtn01.nersc.gov
220 dtn01.nersc.gov GridFTP Server 2.3 (gcc64dbg, 1144436882-63) ready.
230 User shreyas logged in.
UberFTP> put pdsffile dtn01
pdsffile:  107 bytes in 0.05 seconds. 2.17 KB/sec
UberFTP> get dtn01 pdsffile
dtn01:  107 bytes in 0.05 seconds. 2.30 KB/sec 
</pre>
%ENDTWISTY%

---++ *Comments*
%COMMENT{type="tableappend"}%

%STOPINCLUDE%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = NehaSharma

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Integration|Operations|Tier3)
   * Local DOC_AREA       = Storage

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = EndUser

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = HowTo
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %NO%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = TanyaLevshina
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = FirstnameLastname
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %NO%
############################################################################################################
-->
