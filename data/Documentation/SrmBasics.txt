%META:TOPICINFO{author="BrianBockelman" date="1267135394" format="1.1" version="1.1"}%
%META:TOPICPARENT{name="UsingTheGrid"}%
%LINKCSS%

---+!! The Basic of Using SRM

%STARTINCLUDE%

---++ Introduction
In the OSG, the most common protocol for interfacing with storage is called SRM ("Storage Resource Management").  This is a webservice based protocol that has three major goals:
   1 Unix-like metadata operations (rm, mkdir, ls)
   1 File movement (copy between two storage elements (SE) or copy between the storage element and the local node) using a variety of protocols.  The most common transfer protocol initiated by SRM clients is !GridFTP.
   1 Generic management of backend storage.  Many the large SEs have a tape backend or multiple pools of disk server, each with a different purpose.  SRM allows one to direct files into different pools through the use of space tokens and reservations.

Storage management can be quite complex, and is not uniformly implemented.  We will not cover it in this document.

In this document, we will interact with the SRM endpoints using the =lcg-utils= clients.  This is one of three clients packaged with the OSG Client and OSG wn-client; the others behave in a similar manner.  Each client has different advantages; =lcg-utils= was selected for its simplicity and usability.

---++ File Movement with SRM

Since SRM is a webservice protocol (it operates over HTTP), it is not designed for high-throughput file transfers.  Instead, it redirects users to a different endpoint that implements a transfer protocol (such as !GridFTP).  By simply redirecting the client to another server, the SRM endpoint can effectively load-balance transfers over multiple nodes, allowing transfers to scale.

---++++ Copying files to and from local disk

We will be using =lcg-cp=, which has the following syntax:
<pre>
lcg-cp -D srmv2 -b <src> <dest>
</pre>

---++ Metadata operations with SRM

%STOPINCLUDE%