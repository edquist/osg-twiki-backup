%META:TOPICINFO{author="ElizabethChism" date="1466010136" format="1.1" version="1.12"}%
%META:TOPICPARENT{name="UsingTheGrid"}%
---+!! Testing Your First Resource
%DOC_STATUS_TABLE%
%TOC{depth="2"}%

---++ About This Document
This page will cover three things:
   * Initializing your grid environment
   * Simple certificate management and verifying your grid credential
   * Sending a debug job to test the remote CE

---++ Requirements
We assume:

a) You have the details of a CE that supports your VO. If you don't have a CE to test against, please use the [[FindAvailableResource][guide for finding resources]] to find one that supports your VO.  The document below uses =osg-ce.ligo.caltech.edu= as the example CE.

b) You or a system administrator have already installed the [[ReleaseDocumentation/ClientInstallationGuide][OSG client]].  As a part of this, you must know the top-level client install directory, called =<i>VDT_LOCATION</i>=.

---++  Procedure

---+++ Initializing your grid environment

To initialize the grid environment, source the =setup.[c]sh= script in =$<i>VDT_LOCATION</i>=.  You will need to execute one of the following commands.

For bash shell:
<pre class="printview">
source <i>VDT_LOCATION</i>/setup.sh
</pre>
For csh:
<pre class="printview">
source <i>VDT_LOCATION</i>/setup.csh
</pre>
%NOTE% You will need to replace =<i>VDT_LOCATION</i>= above with your top-level install directory.

---+++ Simple certificate management and verifying your grid credential

Your grid credential will be used to authenticate with every service provided by the CE. The authentication is based on the =X.509 Public Key Infrastructure= which consists of a private key (=userkey.pem=) and a public key (=usercert.pem=). Both files are by default located in =$HOME/.globus=:

%TWISTY{
mode="div"
showlink="Show sample directory listing..."
hidelink="Hide"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
<pre class="screen">
[robert@osg-job ~]$ ls -al $HOME/.globus
total 68
drwxr-x---  4 robert robert  4096 Mar 18 18:50 .
drwx------ 29 robert robert 12288 Jul 28 08:38 ..
drwxrwxr-x  5 robert robert  4096 Jul 20 11:18 .gass_cache
drwx------  4 robert robert  4096 Mar 27 12:14 job
-rw-r-----  1 robert robert  1724 Dec 16  2008 usercert.pem
-r--------  1 robert robert  1919 Dec 16  2008 userkey.pem
</pre>
%ENDTWISTY%
<br/>

To create a proxy (a token required to use the grid) you can use the  =grid-proxy-init= tool e.g.:

<pre class="screen">
[robert@osg-job ~]$ grid-proxy-init -valid 500:00
Your identity: /DC=org/DC=doegrids/OU=People/CN=Robert Engel 392994
Enter GRID pass phrase for this identity:
Creating proxy ................................. Done
Your proxy is valid until: Tue Aug 18 08:06:35 2009
</pre>

Alternately, some VOs require you to use the =voms-proxy-init= command line instead.  The command-line usage of this includes an extra argument:

<pre class="userinput">
voms-proxy-init --voms <i>voname</i>:/<i>voname</i>
</pre>

If you are unsure, check with your VO manager to see which one (=grid-proxy-init= or =voms-proxy-init=) you should use.

To display detailed information about your grid certificate =grid-proxy-info= can be used:

%TWISTY{
mode="div"
showlink="Show sample command output..."
hidelink="Hide"
showimgleft="%ICONURLPATH{toggleopen-small}%"
hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%
<pre class="screen">
[robert@osg-job ~]$ grid-proxy-info
subject  : /DC=org/DC=doegrids/OU=People/CN=Robert Engel 392994/CN=1692124231
issuer   : /DC=org/DC=doegrids/OU=People/CN=Robert Engel 392994
identity : /DC=org/DC=doegrids/OU=People/CN=Robert Engel 392994
type     : Proxy draft (pre-RFC) compliant impersonation proxy
strength : 512 bits
path     : /tmp/x509up_u500
timeleft : 291:11:00  (12.1 days)
</pre>
%ENDTWISTY%

---+++ Sending a debug job to test the remote CE

A program can be executed remotely on OSG CE.  To verify that a grid endpoint will accept jobs from you and will be useful for the rest of the grid guide, one can use =globus-job-run=.  The usage we'll demonstrate is simple:

<pre class="userinput">
globus-job-run <i>hostname</i>:/jobmanager-<i>name</i> /path/to/executable
</pre>

For test jobs (lasting a few seconds), you can use =jobmanager-fork=.  For determining the jobmanager for all other jobs, use the  [[FindAvailableResource][guide for finding resources]] (other valid jobmanager names on the OSG are condor, pbs, lsf, or sge; each site will usually run one of these).

An example for running the 'id' binary follows:
<pre class="screen">
[robert@osg-job ~]$ globus-job-run osg-ce.ligo.caltech.edu:/jobmanager-fork /usr/bin/id
uid=506(ligo) gid=506(ligo) groups=506(ligo)
</pre>

---++ Conclusion

After following this guide, you should be able to run a single executable on a remote CE.  This allows you to see if the CE is usable for your VO - sometimes you will encounter resources that will advertise support for your VO, but have some broken interfaces.  You should use the CE you just tested through the remainder of the guides.

Running a single executable is of limited scientific use - the point of =globus-job-run= is primarily debugging.  In the next guide, we will cover job submission using Condor-G, which allows one to accomplish large-scale workflows.

---++ *Comments*
%COMMENT{type="tableappend"}%

<!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = BrianBockelman

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Trash/Integration|Operations|Tier3)
   * Local DOC_AREA       = User

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = Scientist

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Training
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = AshuGuru
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = AshuGuru
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %YES%
############################################################################################################
-->