%META:TOPICINFO{author="X509_2fDC_3dorg_2fDC_3ddoegrids_2fOU_3dPeople_2fCN_3dElizabeth_20Chism_20100912" date="1291405385" format="1.1" reprev="1.16" version="1.16"}%
%META:TOPICPARENT{name="GlossaryOfTerms"}%
---+ Glossary M

This topic holds the terms beginning with "M" and will be included in the GlossaryOfTerms topic.

%STARTINCLUDE%
%INCLUDE{ "GlossaryJumpIndex" }%
%EDITTHIS%

   $ Managed Fork.  The [[ReleaseDocumentation/ManagedFork][ManagedFork]] jobmanager is a more scalable way to manage jobs which run on the compute element.
Each fork job that is intended for execution on the compute element is queued in condor and run in the Condor "local universe" on 
the CE.  This allows logging of what commands were run, and also a mechanism to throttle how many are running at once.

   $ Match Maker (MM)<a name="MatchMaker"></a>:  OSGMM is the Open Science Grid Match Maker, a service that sits on top of the OSG client software stack. It obtains site information from !ReSS (Resource Selection Service) and uses a feedback system from/to Condor to publish the site information and keep job success history data. OSGMM can be used to schedule compute jobs across all resources available to a particular VO on the OSG, and to subsets of the resources with Condor's requirements expressions. 

   $ Member organization of OSG: An institution, facility or VO that contributes to the development and resource pool of OSG.

   $ Middleware: Middleware is software that connects two or more otherwise separate applications across the Internet or local area networks. More specifically, the term refers to an evolving layer of services that resides between the network and more traditional applications for managing security, access and information exchange. OSG recognizes two levels of middleware: Grid middleware (e.g., VDT, Grid3-gridmap, etc.) and VO- specific application middleware.

   $ message passing<a name="MessagePassing"></a>: An approach to parallel computing where data and work is divided "across the processors (striving for optimal load balancing)" and communication between them is managed "(striving for minimal and non-blocking communication) by explicitly calling specific library functions." The _de facto_ standard for message passing is [[#DefsMpi][MPI]]. [[#DEJ06][(DEJ06)]]

   $ Message Passing Interface (MPI)<a name="DefsMpi"></a>: 

   $ Multi-Grid Interoperability Now (GIN)<a name="DefsMultiGridInteroperabilityNow"></a>: an initiative between 9 grid infrastructure projects.

#DefsMonALISA
   $ !MonALISA: MONitoring Agents using a Large Integrated Services Architecture. It is a grid middleware component. optional in OSG, that offers a scalable monitoring infrastructure based on intelligent agents implemented through a distributed services architecture. Each service can register itself and then be discovered and used by any other services or clients. All services and clients subscribing to a set of events (state changes) in the system are notified automatically. The framework integrates several existing monitoring tools and procedures to collect. Read more at http://monalisa.cacr.caltech.edu/. 

   $ Monitoring (grid monitoring): Grid monitoring involves collecting, analyzing and displaying information from the distributed production infrastructure in order to determine server status and application progress, and to log performance data of CPUs, networks and storage devices. <!--OSG implements MonALISA as a monitoring infrastructure, GridCat as a high level grid cataloging system, and ACDC to provide near real-time snap shots of critical computational job metrics.-->

   $ MSS<a name="DefsMss"></a>: See [[#DefsMassStorageSystem][Mass Storage System]]. 
   $ !MyOSG <a name="DefsMyOSG"></a>: !MyOSG is an one-stop location for various OSG information including, but not limited to, monitoring status, contact information and job metrics.

<!--
   $ Mass Storage System<a name="DefsMassStorageSystem"></a>:  high-capacity, large-scale data archive (usually tape) that is more intelligent than a normal storage system, and used to hold large amounts of infrequently accessed data. See also [[#HRM][HRM]], [[#TRM][TRM]].
   $ Matchmaking<a name="DefsMatchmaking"></a>: The process of matching a job to a slot while maintaining site priorities.
   $ MDS<a name="DefsMds"></a>: _See_ [[#DefsMetacomputingDirectoryService][Metacomputing Directory Service]].
   $ media changer (MC)<a name="DefsMediaChanger"></a>: Physcial device that mounts and dismounts the media into and out of drives according to requests from the Movers. 
   $ memory-mapped I/O: _Also_ mmapped I/O. With this type of I/O, part of the CPU&#8217;s address space is interpreted not as accesses to memory, but as accesses to a device; once you map a file to memory, changes made to the memory map are propagated back to the file. Mmapped I/O strives to avoid memory copies of the data between the application memory space and the kernel memory space (also see direct I/O and POSIX I/O). Mmapped I/O is in the POSIX standard. 
   $ Metacomputing Directory Service (MDS)<a name="DefsMetacomputingDirectoryService"></a>: a GIIS from Globus that consists of a LDAP representation in which directory structures, data representations and APIs are defined.
   $ MIMD: _See_ [[#DefsMimd][Multiple Instruction, Multiple Domain]]
   $ mmapped I/O: _See_ memory-mapped I/O.
   $ monitor server (MS)<a name="DefsMonitorServer"></a>: Available for investigating network-related problems. It attempts to mimic the communication between an encp request, the corresponding library manager, and the mover. 
   $ mover (dCache)<a name="DefsMover"></a>: A process that receives or sends data to the client from the dCache system.
   $ Multiple Domain, Multiple Instruction (MIMD)<a name="DefsMimd"></a>: An approach to parallel computing that combines function and domain decompositions. MIMD can be further subdivided into _Global Memory, Shared Variable_ (shared memory multiprocessors); _Global Memory, Message Passing (GMMP)_; _Distrbuted Memory, Shared Variable (DMSV)_ (distributed shared memory); and _Distributed Memory, Message Passing (DMMP)_. MPI is concentrated on DMMP.  _See also:_ [[#MessagePassing][message passing]] [[#DEJ06][(DEJ06)]] 
   $ Multiple Instruction, Single Data (MISD)<a name="DefsMisd"></a>: functional decomposition of a computing problem where each processor is assigned a different role/responsibility. [[#DEJ06]]
-->
%COMMENT{type="tableappend"}%
%STOPINCLUDE%

-- Main.ForrestChristian %BR% 
