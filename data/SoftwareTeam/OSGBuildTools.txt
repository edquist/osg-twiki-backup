%META:TOPICINFO{author="MatyasSelmeci" date="1358988296" format="1.1" version="1.17"}%
%META:TOPICPARENT{name="InternalDocs"}%
%TOC%

---+ OSG Build Tools

This page documents the tools used for RPM development for the OSG Software Stack.
See [[SoftwareTeam.RPMDevelopmentGuide][the RPM development guide]] for the principles on which these tools are based.

---+ The tools

---++ osg-build

---+++ Overview

This is the primary tool used in building source and binary RPMs.
You can obtain it by either installing the =osg-build= package from the development repository, or checking out =software/osg-build/trunk= from SVN.

---+++ Synopsis

<blockquote><code>osg-build <em>task</em> [options] <em>package</em> [...]</code></blockquote>

---+++ Tasks

---++++!! =allbuild=

Builds the package from SVN using Koji for all supported platforms (distro versions), placing them into the default destination tags.
The RPMs will end up in the =osg-minefield= repositories for each platform.

=allbuild= only accepts the following options:
   * =--kojilogin=
   * =--koji-wrapper=
   * =--scratch= (default =false=)
   * =--no-wait= (default =true=)
=--svn= is always =true=. =--regen-repos= is always =false=.

---++++!! =koji=

Prebuilds the final source package, then builds it remotely using the Koji instance hosted at the UW-Madison Build and Test Lab (BATLab). [[https://koji-hub.batlab.org]]
Unless you specify a different koji tag/koji target, the resulting RPMs will end up in the =osg-minefield= repository.
RPMs from the =osg-minefield= repository are regularly pulled to the =osg-development= repository hosted by the GOC at [[http://repo.grid.iu.edu]]
Unless you specify otherwise (by passing =--el5=, =--el6= or specifying a different koji tag/target), the package will be built for both el5 and el6.
This is the method used to build final versions of packages you expect to ship.

---++++!! =lint=

Prebuilds the final source package, then runs =rpmlint= on it to check for various problems.
You will need to have =rpmlint= installed.
People on UW CSL machines should add =/p/vdt/workspace/rpmlint= to their $PATH.

---++++!! =mock=

Prebuilds the final source package, then builds it locally using =mock=, and stores the resulting source and binary RPMs in the package-specific =_build_results= directory.

---++++!! =prebuild=

Prebuilds the final source package from upstream sources (if any) and local files (if any). May create or overwrite the =_upstream_srpm_contents= and =_final_srpm_contents= directories.

---++++!! =prepare=

Prebuilds the final source package, then calls =rpmbuild -bp= on the result, extracting and patching the source files (and performing any other steps defined in the =%prep= section of the spec file.
The resulting sources will be under =_final_srpm_contents=.

---++++!! =rpmbuild=

Prebuilds the final source package, then builds it locally using =rpmbuild=, and stores the resulting source and binary RPMs in the package-specific =_build_results= directory.

---++++!! =quilt=

Collects the upstream local sources and spec file, then calls =quilt setup= on the spec file, extracting the source files and adding the patches to a quilt series file.
See [[http://www.shakthimaan.com/downloads/glv/quilt-tutorial/quilt-doc.pdf][Quilt documentation (PDF link)]] for more information on quilt; also look at the example in the Usage Patterns section below.
Similar to =prepare= (in fact, =quilt= calls =rpmbuild -bp= behind the scenes), but the source tree is in pre-patch state, and various quilt commands can be used to apply and modify patches.
Unpacks into =_quilt= as of =osg-build-1.2.2= or =_final_srpm_contents= in previous versions.
Requires =quilt=.
People on UW CSL machines should add =/p/vdt/workspace/quilt/bin= to their =$PATH=, and =/p/vdt/workspace/quilt/share/man= to their =$MANPATH=.

---++++!! Removed tasks =push= and =batlab=

Versions of =osg-build= prior to 0.3.0 also supported the =push= task for moving RPMs to a repository and reindexing that repository, and a =batlab= task for submitting builds to the UW Madison Build and Test Lab's (BATLab's) Metronome system.
These tasks have been removed, since we now use Koji for building and maintaining repositories.

---+++ Options

This section lists the command-line options, and the corresponding configuration file options.
=osg-build= will read a configuration file out of =~/.osg-build.ini=, if it exists.
The config file is in Windows INI format, with all options under the =[options]= section.
Boolean options can be turned on in the config file with the values '1', 'yes', 'on', 'true', and turned off with the values '0', 'no', 'off', 'false'.
Command-line options override config file options.

---++++!! =--help=

Prints the built-in usage information and exits without doing anything else.

---++++!! =--version=

Prints the version of =osg-build= and exits without doing anything else.

---+++ Common Options

---++++!! =-a=, =--autoclean=, =--no-autoclean= (Config: =autoclean=)

Before each build, clean out the contents of the underscore directories (_build_results, _final_srpm_contents, _upstream_srpm_contents, _upstream_tarball_contents).
If the directories are not cleaned up, earlier builds of a package may interfere with later ones.
=--no-autoclean= will disable this.

Default is =false=.

Has no effect with the =--svn= flag.

---++++!! =-c=, =--cache-prefix= _prefix_ (Config: =cache_prefix=)

Sets the _prefix_ for upstream source cache references.
The prefix must be a valid URI starting with either =http=, =https=, or =file=, or one of the following special values:
   * AFS (corresponds to =file:///p/vdt/public/html/upstream=, which is the location of the VDT cache using AFS from a UW CS machine).
   * VDT (corresponds to =http://vdt.cs.wisc.edu/upstream=, which is the location of the VDT cache from off-site).
   * AUTO (AFS if available, VDT if not)
The upstream source cache must be organized as described above.
All files referenced by =.source= files in the affected packages must exist in the cache, or a runtime error will occur.

Default is =AUTO=.

Has no effect with the =--svn= flag.

---++++!! =-C=, =--config-file= _config_file_

Sets the configuration file to load for the =osg-build= script, which can contain default values of options. The default path for the configuration file is =$HOME/.osg-build.ini=. A sample configuration file is provided at =/usr/share/doc/osg-build/sample-osg-build.ini= for an RPM install of =osg-build= or =tools/osg-build/sample-osgbuild.ini= for an SVN checkout.

---++++!! =--el5=, =--el6=, =--redhat-release=VERSION= (Config: =redhat_release=)

Sets the distro version to build for. This affects the %dist tag, the mock config, and the default koji tag and target (unless otherwise specified).

=--el5= is equivalent to =--redhat-release=5=

=--el6= is equivalent to =--redhat-release=6=

---++++!! =--loglevel= _loglevel_ (Config: =loglevel=)

Sets the verbosity of the script. Valid values are: =debug=, =info=, =warning=, =error= and =critical=.

Default is =info=.

---++++!! =-q=, =--quiet=

Do not display as much information. Equivalent to =--loglevel warning=

---++++!! =-v=, =--verbose=

Display more information. Equivalent to =--loglevel debug=

---++++!! =-w=, =--working-directory= _path_ (Config: =working_directory=)

Use _path_ as the root directory of the files created by the script. For example, if _path_ is =$HOME/working=, and the package being built is =ndt=, the following tree will be created:
   * $HOME/working/ndt/_upstream_srpm_contents
   * $HOME/working/ndt/_upstream_tarball_contents
   * $HOME/working/ndt/_final_srpm_contents
   * $HOME/working/ndt/_build_results
If _path_ is =TEMP=, a randomly named directory under =/tmp= is used as the working directory.

Default is =.=

Has no effect with the =--svn= flag.


---+++ Options specific to =prebuild= task

---++++!! =--full-extract=

If set, all upstream tarballs will be extracted into =_upstream_tarball_contents/= during the prebuild step.
This flag is now mostly redundant with the =prepare= and =quilt= tasks.

---+++ Options specific to =rpmbuild= and =mock= tasks

---++++!! =--distro-tag= _dist_ (Config: =distro_tag=)

Sets the distribution tag added on to the end of the release in the RPM ( =rpmbuild= and =mock= tasks only ).

Default is =osg=.

---++++!! =-t=, =--target-arch= _arch_ (Config: =target_arch=)

Specify an architecture to build packages for ( =rpmbuild= and =mock= tasks only ).

Default is unspecified, which builds for the current machine architecture.

---+++ Options specific to =mock= task

---++++!! =--mock-clean=, =--no-mock-clean= (Config: =mock_clean=)

Enable/disable deletion of the mock buildroot after a successful build.

Default is =true=.

---++++!! =-m=, =--mock-config= _path_ (Config: =mock_config=)

Specifies the =mock= configuration file to use.
This file details how to set up the build environment used by mock for the build, including Yum repositories from which to install dependencies and certain predefined variables (e.g., the distribution tag =%dist=).

The special value =AUTO= generates a configuration file that uses the VDT, Centos 5 and EPEL 5 repositories for the current architecture.

Default is =AUTO=.

See also =--mock-config-from-koji=.

---++++!! =--mock-config-from-koji= _build tag_ (Config: =mock_config_from_koji=)

Creates a mock config from a Koji build tag.
This is the most accurate way to replicate the build environment that Koji will provide.
The default build tag for EL5 builds (builds for Scientific Linux 5, !CentOS 5, or RHEL 5) is =el5-osg-build=.
Also requires the Koji command-line tools (package =koji=), obtainable from the =osg-development= repository.
Since this uses koji, some of the koji-specific options may apply, namely: =--koji-login= and =--koji-wrapper=.

---+++ Options specific to =koji= task

---++++!! =--dry-run=

Do not actually run koji, merely show the command that will be run. For debugging purposes.

---++++!! =--getfiles=, =--get-files=

For scratch builds without =--svn= only.
Download the resulting RPMs and logs from the build into the =_build_results= directory.

---++++!! =-k=, =--kojilogin=, =--koji-login= _login_ (Config: =kojilogin=)

Sets the login to use for the koji task.
This should most likely be your CN.
If not specified, will extract it from your client cert (=~/.osg-koji/client.crt= or =~/.koji/client.crt=).

---++++!! =--koji-target= _target_

The koji target to use for building.

Default is =el5-osg= for el5 and =el6-osg= for el6.

---++++!! =--koji-tag= _tag_

The koji tag to add packages to.
See the [[SoftwareTeam.KojiWorkflow][Koji Workflow guide]] for more information on the terminology.
The special value =TARGET= uses the destination tag defined in the koji target.

Default is =el5-osg= or =el6-osg=.

---++++!! =--ktt=, =--koji-tag-and-target= _arg_

Shorthand for setting both --koji-tag and --koji-target to _arg_.

---++++!! =--koji-wrapper=, =--no-koji-wrapper= (Config: =koji_wrapper=)

Enable/disable use of the =osg-koji= wrapper script around koji.
See below for a description of =osg-koji=.

Default is =true=.

---++++!! =--wait=, =--no-wait=, =--nowait=

Wait for koji tasks to finish.
Bad for running multiple builds in a single command, since you will have to type in your passphrase for the first one, wait for it to complete, then type in your passphrase for the second one, wait for it to complete, etc.
If you want to wait for multiple tasks to finish, use the =koji watch-task= command or look at the website [[https://koji-hub.batlab.org]].

=--wait= used to be the default until =osg-build-1.1.3=

---++++!! =--regen-repos=

Start a =regen-repo= koji task on the build tag after each koji build, to update the build repository used for the next build.
Not useful unless you are launching multiple builds.
This enables you to launch builds that depend on each other.
Doesn't work too well with =--no-wait=, since the next build may be started before the regen-repo task is complete.
Waiting will keep the next build from being queued until the regen-repo is complete.

---++++!! =--scratch=, =--no-scratch=

Perform scratch builds.
A scratch build does not go into a repository, but the name-version-release (NVR) of the created RPMs are not considered used, so the build may be modified and repeated without needing a release bump.
This has the same use case as the mock task: creating packages that you want to test before releasing.
If you do not have a machine with mock set up, or want to test exactly the environment that Koji provides, scratch builds might be more convenient.

---++++!! =--svn=, =--no-svn=

Have Koji check the package out from SVN instead of creating an SRPM on the local machine and submitting that to Koji.
If this flag is specified, you may use SVN URLs or !URL@Revision pairs to specify the packages to build.
You may continue specify package directories from an SVN checkout, in which case osg-build will use =svn info= to find the right !URL@Revision pair to use and warn you about uncommitted changes.
osg-build will also warn you about an outdated working directory.
The koji instance on =koji-hub.batlab.org= only accepts submissions from the native tree of VDT's SVN repository, i.e. =https://vdt.cs.wisc.edu/svn/native=, or =file:///p/vdt/workspace/svn/native=

It is recommended that released versions of software (i.e. non-scratch builds) be made using this option, for reproducibility reasons.

=--svn= defaults to =true= for non-scratch builds, and =false= for scratch builds. 

---++ koji-tag-checker

This script makes sure that builds that are in an el5 tag aren't also in an el6 tag.

---++ koji-tag-diff

This script displays the differences between the latest packages in two koji tags.

Example invocation: =koji-tag-diff el5-osg-development el5-osg-testing=

This prints the packages that are in el5-osg-development but not in el5-osg-testing, or vice versa.

---++ osg-build-test

This script runs automated tests for =osg-build=.
Only a few tests have been implemented so far.

---++ osg-import-srpm

This is a script to fetch an SRPM from a remote site, copy it into the upstream cache on AFS, and create an SVN package dir (if needed) with an =upstream/*.source= file and a =README= file.
By default it will put downloaded files into the VDT upstream cache (/p/vdt/public/html/upstream), but you can pass =--upstream-root=<em>UPSTREAM_DIR</em>= to put them somewhere else.
If called with the =--extract-spec= or =-e= argument, it will extract the spec file from the SRPM and place it into the =osg= subdir in SVN.
If called with the =--diff-spec= or =-d= argument, it will extract the spec file and compare it to the existing spec file in the =osg= subdir.
*The script hasn't been touched in a while and needs a good deal of cleanup.*
A planned feature is to allow doing a three-way diff between the existing RPM before OSG modifications, the new RPM before OSG modifications and the existing RPM after OSG modifications.

---++ osg-koji

This is a wrapper script around the =koji= command line tool.
It automatically specifies parameters to access the OSG's koji instance, and forces SSL authentication.
It takes the same parameters as =koji= and passes them on.

An additional command, =osg-koji setup= exists, which performs the following tasks:
   1. Create a koji configuration in =~/.osg-koji=
   1. Create a CA bundle for verifying the server.%BR%
      Use either files in =/etc/grid-security/certificates=, or (if those are not found), from files downloaded from the !DOEGrids and !DigiCert sites.
   1. Create a client cert file from your grid public and private key files.%BR%
      The location of those files can be specified by the =--usercert= and =--userkey= arguments.%BR%
      If unspecified, =usercert= defaults to =~/.globus/usercert.pem=, and =userkey= defaults to =~/.globus/userkey.pem=.

---++ osg-promote

---+++ Overview

This script makes it easier to push packages from development to testing/contrib, and testing to prerelease.
It performs the tagging in koji and generates the wiki code to cut and paste into the [[SoftwareTeam.PreReleaseNotes]] page.
You give it a list of packages or builds.
If a package is given, it will promote the latest versions of that package.
If a build is given, it will promote that build, plus the matching build for the other distro version (_dver_).
The script will compare the versions of a package between dvers and refuse to promote a package if the versions do not match.
For example, if I run =osg-promote -r testing osg-build= and the latest version of osg-build in el5-osg-development is 1.2.0-1.osg.el5 and the latest version of osg-build in el6-osg-development is 1.1.5-1.osg.el6, then osg-promote will reject that package and refuse to promote it.

---+++ Synopsis

<blockquote><code>osg-promote -r|--route <em>route</em> [options] <em>package or build</em> [...]</code></blockquote>

---+++ Arguments

---++++!! <em>package or build</em>

A package (e.g. =osg-build=) or build (e.g. =osg-build-1.2.0-1.osg.el5=) to promote.
If a package is specified, the most recent version will be promoted.
If a build is specified, that build and the build that has the same <em>version</em>-<em>release</em> for the other distro version will be promoted.
That is, if =foo-1-1.osg.el5= is specified, =foo-1-1.osg.el5= and =foo-1-1.osg.el6= will be specified.
The distro version may be omitted (e.g. =foo-1-1.osg=).

---++++!! =-r <em>ROUTE</em>=, =--route=<em>ROUTE</em>=

The promotion route to use.
Valid routes are:
   $ contrib: promote from =elX-osg-development= to =elX-osg-contrib=
   $ testing: promote from =elX-osg-development= to =elX-osg-testing=
   $ prerelease: promote from =elX-osg-testing= to =elX-osg-prerelease=
   $ release: same as =prerelease=

---++++!! =-n=, =--dry-run=

Do not promote, just show what would be done.

---++++!! =--el5=

Promote el5 packages.

---++++!! =--el6=

Promote el6 packages.

If only one of =--el5= or =--el6= is specified, no rejection checking is done.

---++++!! =--ignore-rejects=

Ignore rejections due to version mismatch between dvers or missing package for one dver.

---++++!! =--output-format=<em>FORMAT</em>=, =--of=<em>FORMAT</em>=

The format of the wiki code to generate.
Valid output formats with examples are:

---+++++!! =relnote=

Format for release notes. Example entry:

   * [[https://koji-hub.batlab.org/koji/buildinfo?buildID=1961][osg-build-1.2.0-1.osg.el5]]
   * [[https://koji-hub.batlab.org/koji/buildinfo?buildID=1960][osg-build-1.2.0-1.osg.el6]]

---+++++!! =old= / =prerelnote=

The current format for the pre-release notes. This is the default. Example entry:

| 2012-05-29 | osg-build-1.2.0-1.osg ([[https://koji-hub.batlab.org/koji/buildinfo?buildID=1961][el5]]+[[https://koji-hub.batlab.org/koji/buildinfo?buildID=1960][el6]]) DESCRIPTION |

---+++++!! =none=

No output.

---++++!! =--no-date=, =--nodate=

Do not add the date to the wiki code.

---++++!! =--regen=

Regenerate the destination repos after promoting.

---++++!! =-y=, =--assume-yes=

Do not prompt before promotion.

---++ rpm-ripper

This script takes an existing binary-only RPM, extract the files and put them into a tarball, and create a spec file using that tarball as input that would recreate the binary RPM.
This script was written because the JDK packages we took from Oracle had an old RPM header format and we could not sign the RPMs.
See the README file in the =jdk= package for more information about that.
The script is not really meant for general use.


---+ Common Usage Patterns

---+++ Verify that all files necessary to build the package are in the right place

Run =osg-build prebuild <em>packagedir</em>=.

---+++ Fetch and extract all source files for examination

Run =osg-build prebuild --full-extract <em>packagedir</em>=.
Look inside the =_upstream_tarball_contents= directory.

---+++ Get a post-patch version of the upstream sources for examination

Run =osg-build prepare <em>packagedir</em>=.
Look inside the =_build_results= directory.

---+++ See which patches work with a new version of a package, update or remove them

   1. Place the new source tarball into the upstream cache, edit the version in the spec file and *.sources files as necessary
   1. Run =osg-build quilt <em>packagedir</em>=.
   1. Enter the extracted sources inside the =_final_srpm_contents= directory. You should see a file called =series= and a symlink called =patches=.
   1. Type =quilt series= to get a list of patches in order of application.
   1. Type =quilt push= to apply the next patch.
      * If the patch applies cleanly, continue.
      * If the patch applies with some fuzz, type =quilt refresh= to update the offsets in the patch.
      * If the patch does not apply and you wish to remove it, type =quilt delete <em>patch_name</em>= (delete only removes it from the series file, not the disk)
      * If the patch does not apply and you wish to fix it, either type =quilt push -f= to interactively apply the patch, or =quilt delete <em>patch_name</em>= the patch and use =quilt new= / =quilt edit= / =quilt refresh= to edit files and make a new patch from your changes. Consult the =quilt(1)= manpage for more info.
   1. If you have a new patch, run =quilt import <em>patchfile</em>= to add the patch to the series file, and run =quilt push= to apply it.
   1. If you have changes to make to the source code that you want to save as a patch, type =quilt new <em>patchname</em>=, edit the files, type =quilt add <em>file</em>= on each file you edited, then type =quilt refresh= to recreate the patch.
   1. Once you're all done, copy the patches in the =patches/= directory to the =osg/= dir in SVN, run =quilt series= to get the application order and update the spec file accordingly.

---+++ See if a package builds successfully

   * If you have all the build dependencies of the package installed, run =osg-build rpmbuild <em>packagedir</em>=. The resulting RPMs will be in the =_build_results= directory.
   * If you do not have all the build dependencies installed, or want to make sure you specified all of the necessary ones and the package builds from a clean environment, run =osg-build mock --mock-config-from-koji el5-osg-build <em>packagedir</em>=. The resulting RPMs will be in the =_build_results= directory.
   * If you do not have mock installed, or want to exactly replicate the build environment on =koji-hub=, run =osg-build koji --scratch <em>packagedir</em>=. You may download the resulting RPMs from kojiweb [[https://koji-hub.batlab.org/koji]].

---+++ Check for potential errors in a package

Run =osg-build lint <em>packagedir</em>=.

---+++ Create and test a final build of a package for all platforms

   1. =svn commit= your changes.
   1. Type =osg-build koji <em>packagedir</em>=
   1. Wait for the =osg-minefield= repos to be regenerated containing the new version of your package. You can run =osg-koji wait-repo el<em>X</em>-osg-development --build=<em>packagename-version-release</em>= and wait for that process to finish (substitute =5= or =6= for <em>X</em>). Or, you can just check kojiweb [[https://koji-hub.batlab.org/koji]].
   1. On your test machine, make sure the osg-minefield repo is enabled (edit =/etc/yum.repos.d/osg-minefield.repo=). Clean your cache (=yum clean all= followed by =yum clean expire-cache=).
   1. Install your software, see if it works.

---+++ Promote a package to testing

Run =osg-promote -r testing <em>package</em>=

<!-- vim:ft=twiki:tw=0
-->