%META:TOPICINFO{author="MatyasSelmeci" date="1323469172" format="1.1" reprev="1.4" version="1.4"}%
%META:TOPICPARENT{name="InternalDocs"}%
---+ OSG Build Tools

This page documents the tools used for RPM development for the OSG Software Stack.
See [[SoftwareTeam.RPMDevelopmentGuide][the RPM development guide]] for the principles on which these tools are based.

%RED%Status:%ENDCOLOR% work-in-progress

---++ osg-build

---+++ Overview

This is the primary tool used in building source and binary RPMs.
You can obtain it by either installing the =osg-build= package from the development repository, or checking out =software/osg-build/trunk= from SVN.

---+++ Synopsis

<blockquote><code>osg-build <em>task</em> [options] <em>package</em> [...]</code></blockquote>

---+++ Tasks

---++++ =koji=

Prebuilds the final source package, then builds it remotely using the Koji instance at the UW-Madison Build and Test Lab (BATLab).
Unless you specify a different koji tag/koji target, the resulting RPMs will end up in the =osg-minefield= repository.
RPMs from the =osg-minefield= repository are regularly pulled to the =osg-development= repository hosted by the GOC at [[http://repo.grid.iu.edu]]
This is the method used to build final versions of packages you expect to ship.

---++++ =mock=

Prebuilds the final source package, then builds it locally using =mock=, and stores the resulting source and binary RPMs in the package-specific =_build_results= directory.

---++++ =prebuild=

Prebuilds the final source package from upstream sources (if any) and local files (if any). May create or overwrite the =_upstream_srpm_contents= and =_final_srpm_contents= directories.

---++++ =prepare=

Prebuilds the final source package, then calls =rpmbuild -bp= on the result, extracting and patching the source files (and performing any other steps defined in the =%prep= section of the spec file.
The resulting sources will be under =_final_srpm_contents=.

---++++ =rpmbuild=

Prebuilds the final source package, then builds it locally using =rpmbuild=, and stores the resulting source and binary RPMs in the package-specific =_build_results= directory.

---++++ =quilt=

Collects the upstream local sources and spec file, then calls =quilt setup= on the spec file, extracting the source files and adding the patches to a quilt series file.
See [[http://www.shakthimaan.com/downloads/glv/quilt-tutorial/quilt-doc.pdf][Quilt documentation (PDF link)]] for more information on quilt; also look at the example in the Usage Patterns section below (TODO)
Similar to =prepare= (in fact, =quilt= calls =rpmbuild -bp= behind the scenes), but the source tree is in pre-patch state, and various quilt commands can be used to apply and modify patches.

---++++ Removed tasks =push= and =batlab=

Versions of =osg-build= prior to 0.3.0 also supported the =push= task for moving RPMs to a repository and reindexing that repository, and a =batlab= task for submitting builds to the UW Madison Build and Test Lab's (BATLab's) Metronome system.
These tasks have been removed, since we now use Koji for building and maintaining repositories.

---+++ Options

TODO

---++++ =--help=

Prints the built-in usage information and exits without doing anything else.

---++++ =--version=

Prints the version of =osg-build= and exits without doing anything else.

---+++ Common Options

---++++ =-a=, =--autoclean=, =--no-autoclean=

Before each build, clean out the contents of the underscore directories (_build_results, _final_srpm_contents, _upstream_srpm_contents, _upstream_tarball_contents).
By default, the directories are not cleaned up, which may lead to earlier builds of a package interfering with later ones.
=--no-autoclean= will disable this.

---++++ =-c=, =--cache-prefix= _prefix_

Sets the _prefix_ for upstream source cache references.
The prefix must be a valid URI starting with either =http=, =https=, or =file=, or one of the following special values:
   * AFS (corresponds to =file:///p/vdt/public/html/upstream=, which is the location of the VDT cache using AFS from a UW CS machine).
   * VDT (corresponds to =http://vdt.cs.wisc.edu/upstream=, which is the location of the VDT cache from off-site).
   * AUTO (AFS if available, VDT if not)
The upstream source cache must be organized as described above.
All files referenced by =.source= files in the affected packages must exist in the cache, or a runtime error will occur.
If not specified, defaults to =AUTO=.

---++++ =-C=, =--config-file= _config_file_

Sets the configuration file to load for the =osg-build= script, which can contain default values of options. The default path for the configuration file is =$HOME/.osg-build.ini=. A sample configuration file is provided at =/usr/share/doc/osg-build/sample-osg-build.ini= for an RPM install of =osg-build= or =tools/osg-build/sample-osgbuild.ini= for an SVN checkout.

---+++++ =--distro-tag= _dist_

Sets the distribution tag added on to the end of the release in the RPM.

Default is =osg=.

---++++ =--full-extract=

If set, all upstream tarballs will be extracted into =_upstream_tarball_contents/= during the prebuild step.
This flag makes most sense for the =prebuild= task, but is now mostly redundant with the =prepare= and =quilt= tasks.

---++++ =--loglevel= _loglevel_

Sets the verbosity of the script. Valid values are: debug, info, warning, error and critical. If not specified, 'info' is default.

---++++ =-q=, =--quiet=

Do not display as much information. Equivalent to =--loglevel warning=

---++++ =-t=, =--target-arch= _arch_

Specify an architecture to build packages for ( =rpmbuild= and =mock= tasks only ).

---++++ =-v=, =--verbose=

Display more information. Equivalent to =--loglevel debug=

---++++ =-w=, =--working-directory= _path_

Use _path_ as the root directory of the files created by the script. For example, if _path_ is =$HOME/working=, and the package being built is =ndt=, the following tree will be created:
   * $HOME/working/ndt/_upstream_srpm_contents
   * $HOME/working/ndt/_upstream_tarball_contents
   * $HOME/working/ndt/_final_srpm_contents
   * $HOME/working/ndt/_build_results
If _path_ is =TEMP=, a randomly named directory under =/tmp= is used as the working directory.

Default is =.=

Has no effect with the =--svn= flag.

---+++ Mock-specific Options

---++++ =-m=, =--mock-config= _path_

Specifies the =mock= configuration file to use.
This file details how to set up the build environment used by mock for the build, including Yum repositories from which to install dependencies and certain predefined variables (e.g., the distribution tag =%dist=).

The special value =AUTO= generates a configuration file that uses the VDT, Centos 5 and EPEL 5 repositories for the current architecture.

Default is =AUTO=.

See also =--mock-config-from-koji=.

---++++ =--mock-config-from-koji= _build tag_

Creates a mock config from a Koji build tag.
This is the most accurate way to replicate the build environment that Koji will provide.
The default build tag for EL5 builds (builds for Scientific Linux 5, !CentOS 5, or RHEL 5) is =el5-osg-build=.
Requires mock 0.8 or greater, which is obtainable from EPEL.
Also requires the Koji command-line tools (package =koji=), obtainable from the =osg-development= repository.
Since this uses koji, some of the koji-specific options may apply, namely: =--koji-login= and =--koji-wrapper=.

---+++ Koji-specific Options

---++++ =-k=, =--koji-login=, =--kojilogin= _login_

Sets the login to use for the koji task.
This should most likely be your CN.
If not specified, will extract it from your client cert (=~/.osg-koji/client.crt= or =~/.koji/client.crt=).

---++++ =--koji-target= _target_

The koji target to use for building.

Default is =el5-osg=.

---++++ =--koji-tag= _tag_

The koji tag to add packages to.
See the Koji Workflow guide (*TODO* add link)
The special value =TARGET= uses the destination tag defined in the koji target.

Default is =el5-osg=.

---++++ =--koji-wrapper=, =--no-koji-wrapper=

Enable/disable use of the =osg-koji= wrapper script around koji.
See below for a description of =osg-koji=.

Default is enabled.

---++++ =--nowait=, =--no-wait=

Launch koji tasks in the background and do not wait for them to finish.
Best for running multiple builds in a single command.
If you use this flag, you will have to look at the website ([[https://koji-hub.batlab.org]]) to see the status of your builds.

---++++ =--regen-repos=

Start a =regen-repo= koji task on the build tag after each koji build, to update the build repository used for the next build.
Not useful unless you are launching multiple builds.
This enables you to launch builds that depend on each other.
Doesn't work too well with =--nowait=, since the next build may be started before the regen-repo task is complete.
Waiting will keep the next build from being queued until the regen-repo is complete.

---++++ =--scratch=

Perform scratch builds.
A scratch build does not go into a repository, but the name-version-release (NVR) of the created RPMs are not considered used, so the build may be modified and repeated without needing a release bump.
This has the same use case as the mock task: creating packages that you want to test before releasing.
If you do not have a machine with mock set up, or want to test exactly the environment that Koji provides, scratch builds might be more convenient.

---++++ =--svn=

Have Koji check the package out from SVN instead of creating an SRPM on the local machine and submitting that to Koji.
If this flag is specified, you may use SVN URLs or !URL@Revision pairs to specify the packages to build.
You may continue specify package directories from an SVN checkout, in which case osg-build will use =svn info= to find the right !URL@Revision pair to use and warn you about uncommitted changes.
Note that in this case, if you haven't run =svn update=, an older revision may be used than the one you're expecting. Future osg-build versions will warn you about that.
The koji instance on =koji-hub.batlab.org= only accepts submissions from the native tree of VDT's SVN repository, i.e. =https://vdt.cs.wisc.edu/svn/native=, or =file:///p/vdt/workspace/svn/native=

It is recommended that released versions of software (i.e. non-scratch builds) be made using this option, for reproducibility reasons.
Future versions of osg-build may enforce this policy.

---+++ Common Usage Patterns

TODO

---++ osg-koji

TODO
