%META:TOPICINFO{author="TimCartwright" date="1446652553" format="1.1" version="1.5"}%
%META:TOPICPARENT{name="ComponentHome"}%
---+ OSG Software Component: !BeStMan

---++ Purpose

[[http://sdm.lbl.gov/bestman BeStMan]] (aka the Berkeley Storage Manager) provides a consistent interface to a variety of large-scale and distributed file storage systems, including those deployed across a wide area. Specifically, it is a full implementation of the SRM interface, which allows users to access files, handle space tokens, reserve storage space, and so forth. !BeStMan can be used as a uniform interface to local-area storage resources and simple file transfers as well.

---++ Usage

Typical usage is by installing bestman2-server, configuring it to talk to underlying !GridFTP resoures. The !GridFTP resources then retrieve the requested file from the underlying storage system.

It is used by all SRM endpoints with the exception of dCache sites.

---++ Source

The !BeStMan&nbsp;2 source code is located at Lawrence Berkeley National Laboratory (LBNL) in [[https://codeforge.lbl.gov/projects/bestman a Codeforge repository]]. This project's SVN repository can be checked out through anonymous access with: =svn checkout= =https://codeforge.lbl.gov/anonscm/bestman=

Although the OSG Software team maintains the code, changes should be coordinated with LBNL team.

Currently the OSG maintains a [[https://codeforge.lbl.gov/anonscm/bestman/bestman2/branches/osg-dev/][branch]] of the main [[https://codeforge.lbl.gov/anonscm/bestman/bestman2/sources/][sources]], which means changes to the main sources need to be manually merged into the OSG branch or patched in at build time.

The bestman2 source tarball used for OSG contains both the main sources and the osg-dev branch.  (See the [[https://vdt.cs.wisc.edu/svn/native/redhat/trunk/bestman2/README][README]] in the packaging area for instructions to generate the tarball.)  Due to the way the osg-dev branch is maintained separately, the OSG's source tarball does not reflect a specific release version from the main sources.  OSG's current version number "2.3.0" came out of discussions between Alex Sim, Doug Strain Neha Sharma in April 2012; but, notably, it is missing some features from versions <= 2.3.0 from the main sources.

---++ Packaging

*Repository:* OSG.

---++ History

The original !BeStMan was run within a Globus web-services container and was the version used in the Pacman-based software stack. !BeStMan 2 is a reimplementation that runs within Jetty, but otherwise has comparable features to the original !BeStMan.

!BeStMan was written and maintained at LBNL, led by Alex Sim. After a loss of funding in 2012, code maintenance was handed off to the OSG Software team.  Neha Sharma did the OSG maintenance work until Dec 2013, when it was handed off to Carl Edquist.

---++ Future

---++ Technical Design

From Brian Bockelman, 3 November 2015:

2:39:56 PM Brian Bockelman: So, GUMS implements a particular callout protocol.  Technically called something like "Grid Interoperability XACML Profile" or somesuch.
2:40:51 PM Brian Bockelman: In the OSG stack, the client side of this protocol is in the lcmaps-plugins-scas-client package and privilege-xacml package.
2:41:30 PM Brian Bockelman: Oddly enough, the GUMS client package doesn't implement the callout protocol.
2:41:33 PM Tim Cartwright: does “xacml” mean anything?
2:42:02 PM Brian Bockelman: Oddly enough, GUMS clients only provide a way to query the management interface, not the mapping interface used by other components.
2:42:03 PM Brian Bockelman: https://en.wikipedia.org/wiki/XACML
2:43:01 PM Brian Bockelman: XACML is for people who don't have enough XML in their lives ;)
2:43:06 PM Tim Cartwright: haha yeah
2:43:24 PM Tim Cartwright: so why does it take *2* software packages to implement 1 interface?
2:43:42 PM Brian Bockelman: lcmaps-plugins-scas-client is C, privilege-xacml is Java.
2:44:00 PM Tim Cartwright: oh
2:45:31 PM Tim Cartwright: so bestman uses privilege-xacml to talk grid interoperability xacml profile
2:45:44 PM Tim Cartwright: on the client side
2:45:50 PM Tim Cartwright: what does the bestman server use?
2:45:56 PM Tim Cartwright: oh
2:45:59 PM Tim Cartwright: it doesn’t
2:46:18 PM Brian Bockelman: Client side doesn't callout to GUMS.  Only the server does.
2:46:32 PM Tim Cartwright: oh sorry
2:47:12 PM Tim Cartwright: bestman server needs auth decisions, so it delegates that duty to gums, or something that speaks g.i.xacml.p
2:47:52 PM Tim Cartwright: is that right?
2:47:59 PM Brian Bockelman: Correct.
2:48:02 PM Tim Cartwright: ok
2:48:19 PM Tim Cartwright: and so bestman *server* uses privilege-xacml for that purpose
2:48:31 PM Tim Cartwright: bestman clients don’t do any auth?
2:48:51 PM Tim Cartwright: they don’t, eg, need to auth the server?
2:50:09 PM Tim Cartwright: bestman can work with a grid map file, right?
2:52:05 PM Brian Bockelman: bestman2 clients simply make sure the DNS entry and the hostname on the certificate match
2:52:13 PM Brian Bockelman: bestman2 server can indeed work with a grid mapfile.
2:52:35 PM Tim Cartwright: does it use a “GUMS callout” for a grid mapfile? or is that a separate code path?
2:52:54 PM Brian Bockelman: it's a separate code path.
2:53:20 PM Brian Bockelman: although, to give you a feel for the quality of the bestman2 code, bestman2 crashes if the grid-mapfile isn't a unix file (even if GUMS is used)
2:53:56 PM Tim Cartwright: so the realistic use case that you are concerned about is bestman server on el7 and a separate gums on el6