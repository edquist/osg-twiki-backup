%META:TOPICINFO{author="BrianBockelman" date="1315354584" format="1.1" version="1.14"}%
%META:TOPICPARENT{name="RPMTempDocuments"}%
---+ Koji Workflow

This covers the basics of using and understanding the [[https://koji-hub.batlab.org/koji][OSG Koji]] instance.  It is meant primarily for OSG Software team members who need to interact with the service.

%TOC%

---++ Terminology

Using and understanding the following terminology correctly will help in the reading of this document:

   * Package: This refers to a named piece of software in the Koji database.  An example would be "lcmaps".
   * Build: A specific version and release of a package, and an associated state.  A build state may be successful (and contain RPMs), failed, or in-progress.  A given build may be in one or more tags.  The build is associated with the output of the latest build task with the same version and release of the package.
   * Tag: A named set of packages and builds, parent tags, and reference to external repositories.  An example would be the "el5-osg-development" tag, which contains (among others) the "lcmaps" package and the "lcmaps-1.4.28-1" build.  There is an inheritance structure to tags: by default, all packages/builds in a parent tag are added to the tag.  A tag may contain a reference to (possibly inherited) external repositories; the RPMs in these repositories are added to repositories created from this tag.  Examples of referenced external repositories include !CentOS base, EPEL, or JPackage.
      * A tag is NOT a yum repository.
   * Target: A target consists of a build tag and a destination tag.  An example is "el5-osg", where the build tag is "el5-osg-build" and the destination tag is "el5-osg".  A target is used by the build task to know what repository to build from and tag to build into.
   * Task: A unit of work for Koji.  Several common tasks are:
      * build: This task takes a SRPM and a target, and attempts to create a complete Build in the target's destination tag from the target's build repository.  This task will launch one buildArch task for each architecture in the destination tag; if each subtask is successful, then it will launch a tagBuild subtask.
         * Note that if the build task is marked as "scratch", then it won't result in a Build.
      * buildArch: This task takes a SRPM, architecture name, and a Koji repository as an input, and runs =mock= to create output RPMs for that arch.  The build artifacts are added to the Build if all buildArch tasks are successful.
      * tagBuild: This adds a successful build to a given tag.
      * newRepo: This creates a new repository from a given tag.
   * Build artifacts: The results of a buildArch task.  Their metadata are recorded in the Koji database, and files are saved to disk.  Metadata may include MD5 sums, timestamps, and who initiated the task. Artifacts may include RPMs, SRPMs, and build logs.
   * Repository: A yum repository created from the contents of a tag at a specific point in time.  By default, the yum repository will contain all successful, non-blocked builds in the tag, plus all RPMs in the external repositories for the tag.

---++ Further reading

   * Fedora's koji documentation: http://fedoraproject.org/wiki/Koji
   * Fedora's "Using Koji" page: http://fedoraproject.org/wiki/Using_the_Koji_build_system Note that some instructions there may not apply to OSG's Koji.  For the most part though, they are useful.
   * Koji's (modest) home page: https://fedorahosted.org/koji/

---+ Using Koji

---++ Required Software

Using Koji requires:
   * =osg-build= version 0.0.16 or later.
   * =koji= 1.6.0-2.osg or later.  *Note* that you want a koji build from osg; the output of =rpm -q koji= should end in ".osg".
Both pieces of software are available from the osg-development repository.

---++ Configuring certificate authentication

There are some pre-requisite configuration steps that only need to be done once on your build host:

   * Install the =osg-ca-certs= RPM onto the host.
   * Insert the ESNet and DOEGrids CA Certificates into the system's CA bundle: <pre>%UCL_PROMPT_ROOT%cat /etc/grid-security/certificates/d1b603c3.0 /etc/grid-security/certificates/1c3f2ca8.0 >> /etc/pki/tls/certs/ca-bundle.crt</pre>
   * Combine your certificate and private key into a single file: <pre>
%UCL_PROMPT% mkdir ~/.koji
%UCL_PROMPT% cat ~/.globus/usercert.pem ~/.globus/userkey.pem > ~/.koji/client.crt</pre>
   * If you want to run some koji commands manually, copy the koji configuration file: <pre>%UCL_PROMPT% cp /usr/share/osg-build/osg-koji.conf ~/.koji/config</pre>
   * Email osg-software the DN of your certificate.

*WARNING*: We are working to automate the first four steps.  Expect this to change in the future.

---++ Creating a new build

We create a new build in Koji from the package's directory in OSG Software subversion.

If a successful build already exists in Koji (regardless of whether it is in the tag you use), you cannot replace the build.  Two builds are the same if they have the same NVR (Name-Version-Release).  You *can* do a "scratch" build, which recompiles, but the results are not added to the tag.  This is useful for experimenting with koji.

To do a build, execute the following command from within the OSG Software subversion checkout:

<pre class="screen">
%UCL_PROMPT% osg-build koji %RED%package_name%ENDCOLOR% </pre>

To do a scratch build, simply add the "--scratch" command line flag.

Each invocation of osg-build will ask for the password once or twice; if you get asked more like 20 times, then you may not be running the OSG-patched version of Koji; try switching to the one from the osg-development repository.

When you do a non-scratch build, it will build with the _el5-osg_ target. This will assign your build the _el5-osg-development_ tag (and your package will be assigned the _el5-osg_ tag). If successful, your build will end up in the Koji _osg-minefield_ yum repo and will eventually show up in the _osg-development_ yum repo. This is a high latency process.

---++ Build task Results

---+++ How to find build results

The most recent build results are always shown on the home page of Koji:

http://koji-hub.batlab.org/koji/index

Clicking on a build result brings you to the build information page.  A successful build will result in the build page having build logs, RPMs, and a SRPM.

If your build isn't in the recent list, you can use the search box in the upper-right-hand corner.  Type the exact package name (or use a wildcard), and it will bring up a list of all builds for that package.  You can find your build from there.  For example, the "lcmaps" package page is here:

http://koji-hub.batlab.org/koji/packageinfo?packageID=56

And the lcmaps-1.4.28-7 build is here:

http://koji-hub.batlab.org/koji/buildinfo?buildID=99

---+++ Trying our your build

Because it takes a while for your build to get into one of the regular repositories, it's simplest to download your RPM directly (see the previous section on How to find build results), and install it with:

<pre class="screen">yum localinstall %RED%package%ENDCOLOR%.rpm</pre>

---+++ How to get the resulting RPM into a repository

Once a package has been built, it is added to a tag.  We then must turn the tag into a yum repository. This is normally done automatically and you do not need to deal with it yourself.  Three notes:

   * The kojira daemon creates a repository automatically post-build on the koji-hub host (when it is working; it is not working right now).  Eventually, the development repository will be the one hosted by koji-hub.
   * The koji-hub repository can be created manually by running <pre class="screen">koji regen-repo %RED%tag_name%ENDCOLOR%</pre> The tag name for osg-development is "el5-osg-development".  Likely, you won't need to do this when kojira is working.
   * Repositories are created on external hosts with the =mash= tool.  These are usually triggered by cron jobs, but may be run by hand too.  Documentation for running mash is on the TODO list.
      * You can create your own personal repository using =mash=.

---+++ Debugging build issues

   * Failed build tasks can be seen from the Koji homepage.  The logs from the tasks are included.  Relevant logs include:
      * root.log: This is the log of mock trying to create an appropriate build root for your RPM.  This will invoke yum twice: once to create a generic build root, once for all the dependencies in your !BuildRequires.  All RPMs in your build root will be logged here.  If mock is unable to create the build root, the reason will show up here.
      * build.log: The output of the rpmbuild executable.  If your package fails to compile, the reason will show up here.
   * One input to the buildArch task is a repository, which is based on a Koji tag.  If the repository hasn't been recreated for a dependency you need (for example, when kojira isn't working), you may not have the right RPMs available in your build root.
      * One common issue is building a chain of dependencies.  For example, suppose build B depends on the results of build A.  If you build A then build B immediately, B will likely fail.  This is because A is not in the repository that B uses.  The proper string of events building A, starting the regeneration of the destination and build repo (when kojira is working, this is done within a few seconds of build A task completing), then submitting build task B.  *Note*: if you submit build task B while the build repository task is open, it will not start until the build task has finished.

---++ Promoting Builds from Development -> Testing -> Release
Only an admin can upgrade packages to testing and release.

To promote from development to testing:
<pre class="screen">
%UCL_PROMPT% koji tag-pkg el5-osg-testing %RED%build_name%ENDCOLOR% </pre>

Here, the =build_name= will look like "lcmaps-1.4.28"; do not use the package name ("lcmaps").

To release:
<pre class="screen">
%UCL_PROMPT% koji tag-pkg el5-osg-release %RED%build_name%ENDCOLOR% </pre>

---+ Administrating Koji

A few tidbits of knowledge for administrators of our Koji server:
   * Three services need to be running for koji-hub to be functioning: kojira, kojid, and the Apache web server.  To restart these:
      * service kojid restart
      * service kojira restart
      * service httpd restart
   * Logfiles can be found here:
      * /var/log/kojid.log
      * /var/log/kojira.log
      * /var/log/messages
   * kojid is configured to stop starting new tasks if it has less than 8GB free.
   * Failed build roots are kept for 4 hours, and each build root is about 1GB currently.  Hence, if too many tasks fail, the kojid might stop accepting new tasks for 4 hours.
      * Manually clean these out.