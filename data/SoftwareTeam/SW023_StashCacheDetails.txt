%META:TOPICINFO{author="TimCartwright" date="1424966907" format="1.1" version="1.2"}%
---+ !StashCache Project Details

Go to [[SW023_XrootdAcrossOsg][main project page]].

---++ Design Questions

   * The phrase “common input data” (and variants) is ambiguous &ndash; the word _common_ could mean _shared_ (which is the intended meaning) or _prevalent_ or _not special_. How about seeking a less ambiguous phrase? Some possibilities include “shared input data” or “reusable input data”.

   * It might be good to settle on and consistently use a range of dataset sizes that we are targeting initially. For a lower bound, is it 1 GB, 10 GB, 100 GB? For an initial upper bound that we are willing to support, is it 100 GB, 1 TB, 10 TB?

   * I think it is written “OSG Connect”, now “OSG-Connect” – we should stick with established usage.

   * It would be good to standardize on a single name for the caches. Various documents have used “caching proxy”, “cache”, and “proxy cache”, at least. Let’s pick one and use it everywhere.

   * What does it mean for a Source to “subscribe” to the central OSG Redirector? The usage of “subscribe” in this case may be specialized computer jargon and we should strive to find a plainer term or phrase that everyone will understand.

   * In the initial description of the overall architecture, I think it would help to describe the purpose of Sources a little more. Something like “A *Source* is a place where users upload their shared input data files, with the intent that users upload any given file just once regardless of how many times it will be used by their jobs.” Or whatever is accurate.

   * What does it mean that “jobs discover and download files from the local cache”? I think that there is a lot to unpack there. Do jobs discover files or caches? And whichever it is, what does that mean? Are we just trying to say that job will have the means to find one or more nearest caches, for some definition of “nearest”?

   * Does the Redirector really need to contact each Source? I thought that the namespace was designed such that a given path identifies its Source.

   * In the overview introduction, there is mention of the need for cleaning out caches (“automated eviction”). How and where does that happen in !StashCache? Presumably, the individual caches clean out stale contents. What about the Sources? Is the clean-up policy the responsibility of the VO? If so, what tools do we give the VO to manage a Source?

   * In the Component Architecture section of the overview, what is a Source server? It would be nice to spell out the main software components that form such a thing. Is !XRootD involved? If so, which parts of it? The document says “The OSG will provide packaging for this server,” so presumably there are specific software components to install and configure.

   * How much storage is each cache server (again, we need a consistent name!) expected to provide, at a minimum? Frank’s presentation mentioned 48&nbsp;TB, the whiteboard notes at UCSD had 90&nbsp;TB, the overview document has >&nbsp;10&nbsp;TB. Is it possible at this time to declare a single lower bound?

   * Also in the Component Architecture, is it possible to be more explicit about the software components needed for each pilot and/or for each job environment?

---++ Meeting Notes

---+++ 12 February 2015

1:00–2:00 p.m. CT%BR%*Attending:* Bo, Chander, FKW, Jeff, Tim, !RobG, Ilija, Lincoln, Anna, Tanya, Robert

   * FKW gave high-level charge.
   * Reviewed high-level deliverables in [[SW023_XrootdAcrossOsg][the project plan]]
   * Chander: is there a set of constraints on the project?
      * Can we say that “no compute is required to do anything to participate”?
      * Users do not see Xrootd protocol details - only our defined interfaces (cp, file transfer, posix).
      * “Do we make VOs register their source endpoints?"
         * Yes - we have this be “invite only” right now (OSG VO [XD allocation, Connect], Simons Foundation, and IF).  Not open to other VOs until the system is delivered.
         * Only thing required is Xrootd API; we can open up in the future.
      * Suggestion from Chander: Look at the notes from the !iRODS project.
      * How many origin servers can a site have?
   * !TimC: How does this look to the user?
      * All software and environment variables are setup by the pilot; possibly pulling software from OASIS.
      * Pilot will need to figure out the location of the nearest cache (or skip it altogether if it’s running at the source site!).
   * Anna:  Updates since Xrootd workshop:
      * Improve monitoring information from stashcp itself.
      * Waiting on software update from Xrootd.
      * 7 caches: UC (one testing, one production), IU, BU, UNL, UCSD, Illinois
      * All underneath https://github.com/OSGConnect/StashCache
   * Note to self: Need to make diagrams!
   * Milestones:
      * Beta version: AHM.  All components (RPMs) in place at some level.
      * Version 1: HTCondor Week.
      * After that, move out to “regularly scheduled areas”.
   * Review of responsibilities: see updated twiki pages.
   * Try to squeeze this to a 30 minute meeting (1:30–2:00?)
