%META:TOPICINFO{author="AlainRoy" date="1303341140" format="1.1" reprev="1.13" version="1.13"}%
---+ Pass-Through Packaging: A Proposal

---++ 0. Question for the Executive Team

*Question for the Executive Team*: What follows is an idea for how to change our packaging methodology. It's not a complete proposal because it doesn't include effort or time estimates and there are unanswered questions. _Do you think the ideas are good enough that we can pursue our investigation and come up with a more complete proposal that includes specific tasks as well as effort and time estimates?_ 

---++ 1. Goal of this document

We propose an alternative approach to packaging that we call "pass-through" packaging. If we adopt this approach, it will fundamentally shift how we package and ship the VDT. We discuss this in detail below, but it can be summarized as:

<blockquote>
*Proposed Principle of Pass-through Packaging:* <br>
The VDT should only package software when it is essential to do so. That is, we should package software when one of the following is true:

   1. The software is not already packaged; or 
   1. The software is packaged but needs significant changes to be acceptable to our users. (Different version, extra patches, etc...)

When these are not true, we should use the existing packaging provided by external developers or software repositories. 
</blockquote>

In the document, we'll describe the approach, the benefits, and the downsides of pass-through packaging. We also share some early results of investigations about the practicality of our approach.

---++ 2. State of this document

This document is a %RED%DRAFT%ENDCOLOR%.

It was written by Alain Roy.

It has been edited/commented on by Dan Fraser, Chander Sehgal, Tim Cartwright, and Matyas Selmeci. They all agree with the approach outlined here.

In other discussions, Brian Bockelman and John Hover have agreed with the approach, but they have not yet reviewed this document.


---++ 3.0 Background Part 1: Mission of the VDT

(It's possible this should be in a separate document, but it's here for now.) 

In order to understand how the pass-through principle affects the VDT, it's worth revisiting what the VDT is. 

---+++ 3.1 Mission

The OSG Software Team helps scientists transform their research with distributed high-throughput computing by making the underlying software as easy to install and maintain as possible.

---+++ 3.2 Principles

   1. We distribute software to fill the gaps between the operating system and end-user scientific software
   1. We exchange software, techniques, and wisdom with relevant communities 
   1. Installed software components must work together seamlessly by default
   1. Providing and accessing grid resources should be easy, efficient, and enjoyable
   1. Our primary end users are site administrators, who ultimately support science users and other stakeholders
   1. We serve the Open Science Grid, but we aim to support other communities as possible

---+++ 3.3 What we do

   1. Package and distribute the software -- patching, building, and configuring as needed
   1. Test the installed software under realistic conditions
   1. Create and provide tools that help users configure the software
   1. Support our users with documentation and direct user assistance
   1. Evaluate new software for possible inclusion
   1. Continuously update and evolve our software in reaction to our users needs. 

---+++ 3.4 Evolution of this mission

This mission and these principles haven't been clearly stated in the past. However, we believe that these principles represent our goals as they were when we started OSG and the this proposal for pass-through packaging does not change the mission, the principles, or what we do. However, this proposal does improve our ability to meet the mission and do a better job of following our principles. Specifically, if we implement this proposal, we will improve with respect to:

   * Principle 2 (Exchange software, techniques and wisdom with relevant communities) because our packaging will be in line with standards from the communities we work with. People will be able to easily contribute to the VDT, and the VDT will be able to easily contribute to other communities. 
   * Principle 3 (Software components must work together seamlessly) because our software packages will interoperate with existing software from the software distributions used by our users.
   * Principle 4 (Providing and accessing grid resources should be easy, efficient, and enjoyable) because our software packages will use the same mechanisms for installation that are already in use by our users.

---++ 4.0 Background Part 2: Native packaging inside and outside the VDT

We have previously recognized the need to support RPMs. As Dan Fraser has discovered in recent requirement gathering, there are many people in our community that prefer RPMs to Pacman: both the community and the industry are moving towards RPMs. After much internal discussion (including but not limited to Alain, Brian, Dan, Chander, and John), we believe that our current approach to providing RPMs is not the correct approach, and we should change. 

Today we are implementing RPMs as an adjunct to Pacman packaging (ignoring some earlier work that was specific for LIGO): We're augmenting our existing builds to produce binary native packages (primarily RPMs). This keeps our Pacman and RPM packaging in sync, but it results in packages that are suboptimal (see below). Not only that, but we're making slow progress — we want to consider if we should be using a different approach. By decoupling our native packaging from our Pacman packaging, can we get results done in a similar time frame or faster? Will they be more acceptable to the community?

Part of our reasoning is that we see the writing on the wall in various ways:

   * More and more, people are asking for packages that "just work" with their existing systems. But "existing systems" aren't just the base OS installation, but include commonly used 3rd party software repositories like EPEL.
   * Many of the packages that are in the VDT are either in a community-accepted software repository (Fedora, EPEL, Debian...) or are likely to be there within the next year. 

---+++ 4.1 Our current binary packages are suboptimal

Today, our RPMs are suboptimal in the following ways:

   * The binary RPMs do not install software into standard locations, according to the widely adopted Filesystem Hierarchy Standard (FHS). This matters to users. For instance, the recent [[https://twiki.grid.iu.edu/bin/view/SoftwareTeam/XrootdRPMPhase1Reqs?rev=12][ATLAS requirements for xrootd]] say that xrootd should be installed into FHS locations.
   * The RPMs are not compatible with the EPEL repository. This is a very commonly used 3rd-party repository for software not shipped by the OS vendor. At least one site (Nebraska) says that it's a serious problem for them if our RPMs are incompatible with the EPEL repository. We know EPEL is commonly used — incompatibility is likely to be a serious inconvenience.
   * We only provide binary RPMs, not source RPMs. This is less serious, but it's an aid to users who wish to use our packages on another platform that we don't support. LIGO has benefited from the source packages we provide because they rebuilt them on unsupported platforms. Source packages are also useful for advanced users who wish to customize what we provide.

---+++ 4.2 External packaging

As we noted above, many packages that are currently in the VDT are provided by community-accepted software repositories. Some examples:

   * Many packages are shipped by OS vendors and in almost all cases our repackaging provides a known version but little other benefit. Examples: Tomcat, Apache, !MySQL. 
   * Globus is part of EPEL (Red Hat-compatible repository) and Debian 6. It is Globus 5 and it doesn't have our patches.
   * xrootd has begun to provide an EPEL-compatible source RPM for xrootd.
   * EMI 1.0 (due in May) will provide all their software as [[https://twiki.cern.ch/twiki/bin/view/EMI/EmiSa2PackagingPolicy][source RPMs that follow the guidelines for Fedora and EPEL]]. This includes the gLite software we use (such as gLExec, LFC, FTS, and CREAM). Given that it is a 1.0 release, we expect it to be a bit rough, but they are headed in this direction.

---++ 5.0 Pass-Through Packaging

---+++ 5.1 The Pass-Through Principle

Proposed Principle: The VDT should package software only when it is essential to do so. That is, we should package software when one of the following is true:

   1. The software is not already packaged; or 
   1. The software is packaged but needs significant changes to be acceptable to our users. (Different version, extra patches, etc...)

For software that doesn't meet those criteria, we will use the existing packaging provided by external developers or software repositories. 

The VDT will maintain a software repository (or set of repositories) that contain the set of software we have to package or repackage. Depending on a few characteristics (outlined below), we may copy external packages into the VDT repository or include them by reference in the external repository.

When we say _copy_, we mean that we will copy the "source packages". We will always build the software that we include in our repository. This way we will have the ability to control precisely what we ship and maintain our capability of patching it.

---+++ 5.2 An example of pass-through packaging

<center><img src="%ATTACHURLPATH%/packaging1.png" alt="packaging1.png"/></center>

In this picture, there are two points to be made:

   1. Much of the software we rely on comes from an external software repository. (Or perhaps multiple repositories, if appropriate.) In the diagram, these are Packages 1 to 3 on the right. 
      * Package 1 has been copied to the VDT repository without making any changes. (However, we do build the software because we only copied the source packaging.)
      * Package 2 has been copied to the VDT repository, but it's also been patched. A "patch" could be any change, including changing the version of the software, changing the software itself, or changing how the software has been packaged. Like Package 1, we built it. 
      * Package 3 has not been copied, but one of the VDT packages depends on it by reference. In this case, we do not build the binary that the user installs.
   1. The VDT has created some packages unique to the VDT. In the diagram, these are the "VDT Packages A and B" on the left.


---+++ 5.3 When do we pass-through?

When do pass-through software packages, and when do we provide them ourselves? 

*Package*: We will package software for which there is no existing packaging in an external software repository or when the software belongs to us. For example, RSV or OSG-specific configuration packages. 

*Copy*: We will copy packages when we want to control exactly which version of the software our users will get or when we need to patch the packaging or software. For example, if ATLAS requests that we provide the same version of xrootd as is shipped with ROOT, we may ship an older version of xrootd than provided by the xrootd developers.

*Copy and Patch*: We will patch software when absolutely needed to meet user needs. For example, we may patch Globus to provide OSG-specific changes. *Important:* We will avoid patching whenever possible. We will share our patches with the software provider and work with them to include the patches (or an equivalent) whenever possible so that we do not need to provide modified versions of the software. 

*Refer*: We may not copy software when the version provided by the external distribution is stable and our software is likely to remain compatible with new versions.

---++ 6.0 Continuing support for Pacman packaging

We are unable to simply drop support for Pacman packaging. This pass-through approach will take considerable time to implement, and users will not be able to upgrade as soon as it is available. We expect to provide Pacman packaging for the foreseeable future. 

We will maintain the Pacman packaging in parallel with our native/RPM packaging. This does mean a duplication of effort. However, we are struggling to find an effective way to make RPMs that continue to be synchronized with our Pacman packages, so we believe that the effort to stay synchronized is not well-spent effort. 

Over time, we expect Pacman packages to be deprecated then dropped, but the deprecation and dropping may take a long time. To illustrate what we mean:

<center><img src="%ATTACHURLPATH%/packaging2.png" alt="packaging2.png" /></center>

---++ 7.0 Benefits of pass-through packaging

   1. Pass-through packaging will allow us to focus our efforts where we provide the most value. We believe that as more software is well-packaged by external groups, we will provide limited value by repackaging the software ourselves. Instead we will focus our efforts on:
      1. Packaging software that really needs packaging
      1. Providing high-quality testing and integration
      1. Providing configurations appropriate for OSG users
      1. Providing front-line support to OSG users
   1. It will be easier for people to contribute packages (or fixes for packages) to the VDT. Instead of using a proprietary system (Pacman) for which most of the world doesn't know how to provide packages, people will be able to use a well-known, well-documented system for packaging. For example, the !GlideinWMSVOFrontEnd developers have created an RPM independently. 
   1. Where appropriate, the VDT will be able to contribute packages to external repositories. This is a path to sustainability: The software will be available outside the VDT and will allow external groups to contribute maintenance to the packages.
   1. We are better able to meet the desires of our customers: Packages that interoperate well with their OS and commonly used third-party software repositories.

---++ 8.0 Downsides of pass-through packaging

---+++ 8.1 General downsides

Many of these downside are the result of a more general idea: by adopting a solution that integrates really well with existing software distributions (such as Red Hat), we also tie ourselves more tightly to those software distributions. Our Pacman-based installations are comparatively weakly tied to the software distribution because we rely on as little of the OS software and packaging mechanisms as possible. Binary-only RPMs (depending on how they are implemented) are more tightly tied to software distributions, but not as tightly tied as well-down source native packages that rely on pass-through packaging. This tight integration has implications for platform support and our ability to test what users end up use. Specifically:

   1. *Platform Support*: It will be significantly harder to provide support for a wide variety of platforms. Right now, most of our "paying" customers use RHEL-compatible OSes, except for LIGO which also uses Debian. However, we some small interest in SUSE (which uses RPMs, but is different enough to require significant effort) and some small interest in Mac OS X (which doesn't have a clear native package winner). Future Campus Grid efforts might require support of other OSes. Adding support for new styles of OS is more complicated with pass-through native packaging than binary native packaging or Pacman. Should we limit our set of supported platforms? Should we accept the extra effort for adding other styles of platforms?
   1. *Risk*: When we rely more heavily on external software packagers, we are less in control of the software we provide to our users. 
   1. *More versions*: Our users will end up using a wider variety of packages, since we are likely to refer to external versions more often. This makes it harder for us to guarantee our integrated suite of software. We've always had this problem to some extent (since we rely on the underlying OS), but it will be greater.
   1. *Synchronization with Pacman*: Our Pacman packages and our native packages may not always be synchronized. This is partly a question of clear documentation, but can lead to user confusion.
   1. *Configuration*: We don't yet have a coherent plan for configuration with pass-through packages. Some of our configuration that we currently do as a separate configuration step goes away because well-packaged RPMs do limited self-configuration: for a basic installation they work out of the box. However, advanced configuration is not provided. We are likely to be stuck with re-doing much of our advanced configuration. While we can learn from our existing configuration scripts, not much of the actual code could be reused. 

---+++ 8.2 Short-term downsides

   1. Choosing to be compatible with EPEL means that we need to upgrade to Globus 5, and there will be effort associate with switching: testing, verifying, understanding compatibility. 
   1. A major source of our packages is EMI for gLite software. EMI 1.0 is scheduled for early May. Given that it's a 1.0 release and a major new packaging scheme, we have to assume that there will be problems and it will take a while to stabilize. In the worst case, we may need to continue packaging many !gLite packages (such as !CREAM) ourselves.
   1. We will need to redo the work we've done for the worker nodes. 

---++ 9.0 Experiences with Pass-Through Packaging

We have done small trials with two packages to make understand pass-through packaging more deeply. 

---++ 9.1 xrootd

The xrootd developers have created a source RPM for xrootd. Because [[XrootdRPMPhase1Reqs][ATLAS requires an RPM for xrootd]], we decided to take this RPM and pass it through into the VDT RPM repository. 

We (Doug and Tanya) took the source RPM, built it, and pushed the binary RPM into the VDT repository. Several small problems were discovered, but the xrootd developer (Lukasz Janyst) was very accommodating and made changes to meet our needs. As of this writing (6-April-2011) there are still a few changes to be made, but we believe that will end up using their source RPM without modification to supply ATLAS with xrootd. The only major blocker is the missing !GridFTP plugin (aka, DSI module), but we have a path to resolve it. ATLAS appears likely to approve of the final result.

In order to get a full xroot installation, we also install the !GridFTP server from our (non-pass-through) binary Globus RPMs.

Conclusion: Pass-through for xrootd works well.

---++ 9.2 gLExec

We have started to build gLExec (needed for !CREAM) from source RPMs provided by by EMI that will be part of the upcoming EMI 1.0 release. Matyas Selmeci did the work. So far we have only built some of the gLExec dependencies (LCAS, LCMAPS, some plugins for LCAS and LCMAPS, and the SAML 2 library).

Because we are still using our VDT Globus, we had to modify their RPMs lightly to get them to work. (Mat modified the build-time dependencies to refer to our Globus, and the arguments to _configure_ to find Globus.) We found some minor problems with the source RPMs which we will report soon. 

In early tests, LCAS and LCMAPS appear to work just fine. We suspect that we will soon be able to conclude that pass-through for gLExec works well. Should we switch to using the EPEL version of Globus, pass-through will be even simpler — none of our existing patches will be needed anymore. 

We did discover that the EMI source RPMs have some problems due to the methodology they've used for jumpstarting the process for making source RPMs. The gLExec developers have independently created source RPMs that are likely to work better, but we have not yet tried them out.

---++ 10.0 Open Questions

   1. At a technical level, how can we control inclusion of other packages. (yum priorities and the like.)
   1. What changes are needed to Globus such that we can stop patching it? (Will be discussed at !GlobusWorld)
   1. How much do we really need !SuSE support?

---++ 11.0 Interesting References.

Fedora Packaging Guidelines:
http://fedoraproject.org/wiki/PackagingGuidelines

EPEL Packaging Guidelines:
http://fedoraproject.org/wiki/EPEL/GuidelinesAndPolicies

EMI Packaging Guidelines:
https://twiki.cern.ch/twiki/bin/view/EMI/EmiSa2PackagingPolicy

EMI 1 Release information:
https://twiki.cern.ch/twiki/bin/view/EMI/EMI-1

%META:FILEATTACHMENT{name="packaging1.gif" attachment="packaging1.gif" attr="h" comment="" date="1302041982" path="packaging1.gif" size="6547" stream="packaging1.gif" tmpFilename="/usr/tmp/CGItemp49060" user="AlainRoy" version="2"}%
%META:FILEATTACHMENT{name="packaging1.png" attachment="packaging1.png" attr="h" comment="" date="1302042090" path="packaging1.png" size="27006" stream="packaging1.png" tmpFilename="/usr/tmp/CGItemp49192" user="AlainRoy" version="1"}%
%META:FILEATTACHMENT{name="packaging2.png" attachment="packaging2.png" attr="h" comment="" date="1302105272" path="packaging2.png" size="16383" stream="packaging2.png" tmpFilename="/usr/tmp/CGItemp50662" user="AlainRoy" version="2"}%
%META:TOPICMOVED{by="AlainRoy" date="1302042186" from="SoftwareTeam.AltPackagingPlan" to="SoftwareTeam.PassThroughPackaging"}%
