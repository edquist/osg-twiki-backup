%META:TOPICINFO{author="AlainRoy" date="1317758045" format="1.1" version="1.39"}%
---+ RPM Development Guide

This page documents technical guidelines and details about RPM development for the OSG Software Stack. The procedures, conventions, and policies defined within are used by the OSG Software Team, and are recommended to all external developers who wish to contribute to the OSG Software Stack.

%RED%Status:%ENDCOLOR% As of mid-July 2011, the contents of this page are becoming more settled. Further changes are likely, but all development should follow the policies described below unless otherwise stated.

---++ Principles

The principles below guide the design and implementation of the technical details that follow.

   * Packages should adhere to community standards (e.g., [[http://fedoraproject.org/wiki/PackagingGuidelines][Fedora Packaging Guidelines]]) when possible, and significant deviations must be documented
   * Every released package must be reproducible from data stored in our system
   * Source code for software should be clearly separable from the packaging of that software
   * Upstream source files (which should not be modified) should be clearly separated from files owned by the OSG Software Team
   * Building source and binary packages from our system should be easy and efficient
   * External developers should have a clear and effective system for developing and contributing packages
   * We should use standard tools from relevant packaging and development communities when appropriate

---++ Contributing Packages

We encourage all interested parties to contribute to OSG Software, and all the infrastructure described on this page should be friendly to external contributors.

*However*, not all of the infrastructure is in place yet: you must gather a few authorizations. We will be working to decrease the extra steps necessary.

   * To participate in the packaging community: You must subscribe to the osg-software@opensciencegrid.org email list. Subscribing to an OSG email list is [[http://listserv.fnal.gov/users.asp#subscribe%20to%20list][described here]].
   * To create and edit packages: [[http://vdt.cs.wisc.edu/internal/svn.html][Obtain access to VDT SVN]].
   * To upload new source tarballs: You must have a cs.wisc.edu account with write access to the VDT source tarball directory. Email the osg-software list and request permission.

---++ Development Infrastructure

This section documents most of what a developer needs to know about our RPM infrastructure:

   * Upstream Source Cache — a filesystem scheme for caching upstream source files
   * Revision Control System — where to get and store development files, and how they are organized
   * Build System — how to build packages from the revision control system
   * Development Tools — other tools to aid development
   * Yum Repository — the location and organization of our Yum repository, and how to promote packages through it

---+++ Upstream Source Cache

One of our principles (every released package must be reproducible from data stored in our system) creates a potential issue: If we keep all historical source data, especially upstream files like source tarballs and source RPMs, in our revision control system, we may face large checkouts and consequently long checkout and update times.

Our solution is to cache all upstream source files in a separate filesystem area, retaining historical files indefinitely. To avoid tainting upstream files, our policy is to leave them unmodified after download.

When we start pushing RPMs into koji, it will become our authoritative source for _released_ upstream files.

---++++ Locating Files in the Cache

Upstream source files are stored in the filesystem as follows:

<blockquote><code><em>%GREEN%prefix%ENDCOLOR%</em>/<em>%GREEN%package%ENDCOLOR%</em>/<em>%GREEN%version%ENDCOLOR%</em>/<em>%GREEN%file%ENDCOLOR%</em></code></blockquote>

where:

%TABLE{sort="off"}%
| *Symbol* | *Definition* | *Example* |
| <code><em>%GREEN%prefix%ENDCOLOR%</em></code> | Filesystem prefix, the base location of the upstream source cache | At Madison: =/p/vdt/public/html/upstream= |
| <code><em>%GREEN%package%ENDCOLOR%</em></code> | Upstream name of the source package, or some widely accepted form thereof | =ndt= |
| <code><em>%GREEN%version%ENDCOLOR%</em></code> | Upstream version string used to identify the release | =3.6.4= |
| <code><em>%GREEN%file%ENDCOLOR%</em></code> | Upstream filename itself (unless filename conflicts force a change, which should be exceedingly rare) | =ndt-3.6.4.tar.gz= |

The authoritative cache is the VDT webserver, which is fully backed up. Other developers can create a local cache for efficient development.

Upstream source files are referenced from within the revision control system; see below for details.

---++++ Contributing Upstream Files

If you are using a local cache during development, you must make sure that any new upstream source files are cached on the VDT webserver before declaring the package to be ready for testing. You have two options:

   * If you have access to a UW–Madison CSL machine, you can scp the source files directly into the AFS locations using that machine
   * If you do not have such access, write to the osg-software list to find someone who will post the files for you

---+++ Revision Control System

All packages that the OSG Software Team releases are checked into our revision control system (currently Subversion but with the option to change at a later date).

---++++ Subversion Access

Our Subversion repository is located at:

<blockquote><pre>https://vdt.cs.wisc.edu/svn</pre></blockquote>

[[http://vdt.cs.wisc.edu/internal/svn.html][Procedure for offsite users obtaining access to Subversion]]

Or, from a UW–Madison Computer Sciences machine:

<blockquote><pre>file:///p/condor/workspaces/vdt/svn</pre></blockquote>

The current SVN directory housing our work-in-progress native package work is =$repo/native= (where =$repo= is one of the ways of accessing our SVN repository above). For example, to check out the current Subversion repository via https, do:

<pre class="screen">svn co https://vdt.cs.wisc.edu/svn/native</pre>

---++++ OSG-Owned Software

OSG-owned software goes into Subversion as follows:

<blockquote><code>software/<em>%GREEN%package%ENDCOLOR%</em>/<em>%GREEN%section%ENDCOLOR%</em></code></blockquote>

where:

%TABLE{sort="off"}%
| *Symbol* | *Definition* | *Example* |
| <code><em>%GREEN%package%ENDCOLOR%</em></code> | Our name for the software package | =vdt-system-profiler= |
| <code><em>%GREEN%section%ENDCOLOR%</em></code> | Development section | Standard Subversion sections like =trunk=, =branches/*=, and =tags/*= |

Within a section directory, files are organized as the developer sees fit.

It is strongly recommended that each software package include a top-level Makefile with at least the following targets:

%TABLE{sort="off"}%
| *Symbol* | *Purpose* |
| =install= | Install the software into final FHS locations rooted at =DESTDIR= |
| =dist= | Create a distribution source tarball (in the current section directory) for a release |
| =upstream= | Install the distribution source tarball into the upstream source cache (default to VDT AFS, but override the upstream root with =UPSTREAM= |

---++++ Packaging Top-Level Directory Organization

The top levels of our Subversion directory hierarchy for packaging are as follows:

<blockquote><code>native/<em>%GREEN%os%ENDCOLOR%</em>/<em>%GREEN%section%ENDCOLOR%</em>/<em>%GREEN%package%ENDCOLOR%</em></code></blockquote>

where:

%TABLE{sort="off"}%
| *Symbol* | *Definition* | *Example* |
| <code><em>%GREEN%os%ENDCOLOR%</em></code> | Major operating system release | =redhat= (only supported value, currently) |
| <code><em>%GREEN%section%ENDCOLOR%</em></code> | Development section | Standard Subversion sections like =trunk=, =branches/*=, and =tags/*= |
| <code><em>%GREEN%package%ENDCOLOR%</em></code> | Our standardized name for a source package | =ndt= |

---++++ Package Directory Organization

Within a source package directory, the following files (detailed in separate sections below) may exist:

| =README= | text file | package notes, by and for developers |
| =upstream/= | directory | references to the upstream source cache %RED%(and maybe other kinds of upstream files, someday)%ENDCOLOR% |
| =osg/= | directory | overrides and patches of upstream files, plus new files, which contribute to the final OSG source package |
| =_upstream_srpm_contents/= | generated directory (not under revision control) | expanded contents of a cached upstream source package |
| =_upstream_tarball_contents/= | generated directory (not under revision control) | expanded contents of all cached upstream source tarballs |
| =_final_srpm_contents/= | generated directory (not under revision control) | the final contents of the OSG source package |
| =_build_results/= | generated directory (not under revision control) | OSG source and binary packages resulting from a build |
| =_nmi_prebuild/= | generated directory (not under revision control) | temporary directory used to store files to be uploaded to nmi for the batlab task |

---+++++ README

This is a free-form text file for developers to leave notes about the package. Please document anything interesting about how you procured the upstream source, the reasons for the modifications you made, or anything else people might need to know in order to maintain the package in the future. Please document the _why_, not just the _what_.

---+++++ upstream

Within the per-package directories of the revision control system, there must be a way to refer to cached files. This is done with small text files that (a) are named consistently, and (b) contain the location of the referenced file as its only contents.

A reference file is named:

<blockquote><code><em>%GREEN%description%ENDCOLOR%</em>.<em>%GREEN%type%ENDCOLOR%</em>.source</code></blockquote>

where:

%TABLE{sort="off"}%
| *Symbol* | *Definition* | *Example* |
| <code><em>%GREEN%description%ENDCOLOR%</em></code> | Descriptive label of the source of the referenced file | =developer=, =epel=, =emi= |
| <code><em>%GREEN%type%ENDCOLOR%</em></code> | Type of referenced file | Use: =tarball=, =srpm= |

The contents of the file match the upstream source cache path defined above, without the prefix component:

<blockquote><code><em>%GREEN%package%ENDCOLOR%</em>/<em>%GREEN%version%ENDCOLOR%</em>/<em>%GREEN%file%ENDCOLOR%</em></code></blockquote>

This way, the command-line tools that use the =.source= files can be given different prefixes for different build situations.

For example, the reference file for NDT’s source tarball is named =developer.tarball.source= and might contain:

<blockquote><code>ndt/3.6.4/ndt-3.6.4.tar.gz</code></blockquote>

---+++++ osg

The =osg= directory contains files that are owned by the OSG Software Team and that are used to create the final, released source package. It may contain a variety of development files:

   * An RPM =.spec= file, which overrides any spec file from a referenced source
   * Patch (=.patch=) or replacement files, which override any same-named file from the top-level directory of a referenced source
   * Other files, which must be explicitly placed into the package by the spec file

---+++++ _upstream_srpm_contents

The =_upstream_srpm_contents= directory contains the files that are part of the upstream source package. It is generated by the package build tool and is a volatile record of the upstream source for developer use. This directory is excluded from Subversion commits.

---+++++ _upstream_tarball_contents

The =_upstream_tarball_contents= directory contains the files that are part of the upstream source tarballs. It is generated by the package build tool if and only if the =--full-extract= option is passed. It is not used for anything by the build tool, but meant as a convenience to allow the developer to look inside the upstream sources (for making patches, etc.). This directory is excluded from Subversion commits.

---+++++ _final_srpm_contents

The =_final_srpm_contents= directory contains the final files that are part of the released source package. It is generated by the package build tool and is a volatile record of a build for developer use. This directory is excluded from Subversion commits.

---+++++ _build_results

The =_build_results= directory contains the source and binary RPMs that are produced by a local build. The directory is generated by the package build tool and is a volatile record of a build for developer use. It is excluded from Subversion commits.

---+++++ _nmi_prebuild

A temporary directory used for the =batlab= task containing the files to be uploaded to the submit host.

---+++++ _koji_prebuild

A temporary directory used for the =koji= task.

---+++++ Use Case 1: Packaging Our Own Code

When the OSG Software Team contributes all of the files for a package, they are located in the =software= project area. The =Makefile= therein creates an upstream source tarball in the standard location. All that remains is to define a =.source= reference to the upstream source tarball, and a =.spec= file. For example, the OSG Software Team provides a debugging utility called <code>vdt-system-profiler</code> to collect system information that can be sent to the OSG Software Team to aid in debugging. Its =software= directory contains:

<blockquote>
<pre>
vdt-system-profiler/
    Makefile
    vdt-system-profiler
</pre>
</blockquote>

Its packaging directory contains:

<blockquote>
<pre>
vdt-system-profiler/
    osg/
        vdt-system-profiler.spec
    upstream/
        vdt.tarball.source
</pre>
</blockquote>

---+++++ Use Case 2: Packaging an Upstream Source Tarball

When the OSG Software Team packages an upstream source tarball, for which there is no existing package, the source tarball is referenced with a .source file and we provide a spec file and, if necessary, patches. For example, RSV is provided as a source tarball only. Its package directory contains:

<blockquote>
<pre>
osg-rsv/
    osg/
        osg-rsv.spec
    upstream/
        developer.tarball.source
</pre>
</blockquote>

---+++++ Use Case 3: Passing Through a Source RPM

When the OSG Software Team simply provides a copy of an existing source RPM, it is referenced with a .source file and that is it. For example, we do not modify the xrootd source RPM from EMI. Its package directory contains:

<blockquote>
<pre>
xrootd/
    upstream/
        developer.srpm.source
</pre>
</blockquote>

---+++++ Use Case 4: Modifying a Source RPM

When the OSG Software Team modifies an existing source RPM, it is referenced with a .source file and then all changes to the upstream source are contained in the <code>osg</code> directory. For example, *if we were to ship a modified Apache HTTPD webserver package,* we would use this mechanism. Its package directory contains:

<blockquote><pre>
apache/
    osg/
        httpd.spec
        vdt-apachectl.patch
    upstream/
        epel.srpm.source
</pre></blockquote>

---+++ Build Process

We have a few conflicting desires. We want to use community-accepted tools (such as mock and Koji), we want to take advantage of the Batlab at the University of Wisconsin–Madison, and we want to make it easy for external contributors to provide RPMs. How do we balance these?

---++++ Officially Supported Packages

   1. All necessary information to create the package will be committed to the VDT source code repository (see below)
   1. A tool will be provided that will take those files, create a source RPM, and submit it to a build system; initially we will support three underlying build systems:
      * rpmbuild
      * mock
      * Metronome (the Batlab build system); this build system will use mock, so it's very similar to option 2

See [[SoftwareTeam.VDTRPMBatlabBuild][instructions on how to use the Batlab build system]]
Official builds will be done with Metronome, but contributors can use options 1 or 2 to develop a package before contributing it to the OSG Software Stack.

Initially this will be all we support. In the near future, we will likely have our Metronome builds provide build information to a VDT-owned Koji instance. As we gain expertise with Koji, we may add support for directly using Koji. 

We will implement these build options in the order they are presented. This will allow us to quickly get up to speed in producing !RPMs.

---++++ Unsupported Contributed Packages

Unsupported contributed packages have two build options. They will be provided via a separate yum repository for unsupported contributions.

   1. Build exactly like the supported packages (above). 
   1. The RPM can be built by the contributor in their own environment and shared with the OSG Software Team for manual staging into the yum repository. 

Should we support Koji in the future, we'll allow Koji submissions for trusted contributors. 

---++++ Build Tools

The revision control system contains a script to help with developing and building source and binary RPMs. %RED%Eventually, we should put all of our developer tools into an RPM.%ENDCOLOR%

---+++++ Synopsis

<blockquote><code>osg-build <em>command</em> [options] <em>package</em> [...]</code></blockquote>

---+++++ Commands

---++++++ =prebuild=

Prebuilds the final source package from upstream sources (if any) and local files (if any). May create or overwrite the =_upstream_srpm_contents= and =_final_srpm_contents= directories.

---++++++ =rpmbuild=

Prebuilds the final source package, then builds it locally using =rpmbuild=, and stores the resulting source and binary RPMs in the package-specific =_build_results= directory. By default, this command *does not* push the resulting packages into Yum, but see the =--push-to-yum= and =--yum-base= options for more information.

---++++++ =mock=

Prebuilds the final source package, then builds it locally using =mock=, and stores the resulting source and binary RPMs in the package-specific =_build_results= directory. By default, *does* push the resulting packages into the yum repository specified in a configuration file (unimplemented), but see the =--no-push-to-yum= and =--yum-base= options for more information.

---++++++ =koji=

Prebuilds the final source package, then builds it remotely using Koji at the UW-Madison Build and Test Lab (BatLab). This will push it into the development yum repo on the Koji host. (And eventually on =vdt.cs.wisc.edu=)

This is the preferred method of building packages you expect to ship. (The mock build is a good way to test your build first.)

---++++++ =push=

Pushes existing RPMs to yum repositories specified by the =--yum-base= argument or a configuration file (unimplemented). Can be given either a package directory or a list of rpm files as arguments.

---++++++ =batlab=

Prebuilds the final source package, then builds it remotely using the UW–Madison Build And Test Lab (BATLab) and, if successful, copies the resulting source and binary RPMs to the development section of the Yum repository. (Partially implemented)

We prefer you to use the koji build instead.

---++++++ =prepare=

Prebuilds the final source package, then calls =rpmbuild -bp= on the result, extracting and patching the source files (and performing any other steps defined in the =%prep= section of the spec file.

---+++++ Options

---++++++ =--help=

Prints the built-in usage information and exits without doing anything else.

---++++++ =-c=, =--cache-prefix= _prefix_

Sets the _prefix_ for upstream source cache references. The prefix must be a valid URI starting with either =http=, =https=, or =file=. The upstream source cache must be organized as described above. All files referenced by =.source= files in the affected packages must exist in the cache, or a runtime error will occur. If not specified, defaults to =http://vdt.cs.wisc.edu/upstream/=.

---++++++ =-C=, =--config-file= _config_file_

Sets the configuration file to load for the =osg-build= script, which can contain default values of options. The default path for the configuration file is =$HOME/.osg-build.ini=. A sample configuration file is provided at =/usr/share/doc/osg-build/sample-osg-build.ini= for an RPM install of =osg-build= or =tools/osg-build/sample-osgbuild.ini= for an SVN checkout.

---++++++ =--distro-tag= _dist_

Sets the distribution tag added on to the end of the release in the RPM. The default value for this is 'osg'.

---++++++ =-e=, =--email= _email_

Sets the email address to be used for notifications of job success/failure for the =batlab= task.

---++++++ =-k=, =--kojilogin=

Sets the login to use for the koji task. This should most likely be your CN. If not specified, will extract it from your =.koji/client.crt=

---++++++ =--full-extract=

If set, all upstream tarballs will be extracted into =_upstream_tarball_contents/= during the prebuild step.

---++++++ =--loglevel= _loglevel_

Sets the verbosity of the script. Valid values are: debug, info, warning, error and critical. If not specified, 'info' is default.

---++++++ =-p=, =--push-to-yum=

Adds resulting RPMs to a Yum repository, i.e. copies the RPMs and reindexes the affected repositories. Currently, the repository must be specified by =--yum-base=, but in the future a configuration file can specify this. See below for repository layout.

---++++++ =--nop=, =--no-push-to-yum=

Do not add resulting RPMs to a Yum repository.

---++++++ =-q=, =--quiet=

Do not display as much information. Equivalent to =--loglevel warning=

---++++++ =-m=, =--mock-config= _path_

Specifies the =mock= configuration file to use with the =mock= command. This file details how to set up the build environment used by mock for the build, including Yum repositories from which to install dependencies and certain predefined variables (e.g., the distribution tag =%dist=).

The special value =AUTO= generates a configuration file that uses the VDT, Centos 5 and EPEL 5 repositories for the current architecture. Centos 5 will be changed to Scientific Linux 5 once a suitable mock config file is obtained.

---++++++ =--nmi-submit-machine= _machine_

The machine in the NMI Build and Test lab to submit jobs for the =batlab= task to.

---++++++ =-v=, =--verbose=

Display more information. Equivalent to =--loglevel debug=

---++++++ =-w=, =--working-directory= _path_

Use _path_ as the root directory of the files created by the script. For example, if _path_ is =$HOME/working=, and the package being built is =ndt=, the following tree will be created:
   * $HOME/working/ndt/_upstream_srpm_contents
   * $HOME/working/ndt/_upstream_tarball_contents
   * $HOME/working/ndt/_final_srpm_contents
   * $HOME/working/ndt/_build_results
If _path_ is =TEMP=, a randomly named directory under =/tmp= is used as the working directory.

---++++++ =-y=, =--yum-base= _path_

Identifies the filesystem path at which the Yum repositories are based. For the commands that attempt to install source and binary RPMs into Yum, this prefix is used to locate the Yum repositories. Implies =--push-to-yum=.

---++++++ =--init-repos=

If the Yum repositories tree to write to doesn't exist (see =--yum-base=), create it.
This invocation creates the following tree:

<code>osg-build rpmbuild ndt --init-repos -y $HOME/repos</code>
   * $HOME/repos/i386
   * $HOME/repos/x86_64
   * $HOME/repos/src

---+++ OSG Software Repository

The OSG Software Team maintains a Yum repository, or technically, a set of parallel Yum repositories that contain our source and binary RPMs. The repository is contained within the VDT webserver, organized as follows:

<blockquote><code>http://vdt.cs.wisc.edu/repos/<em>%GREEN%version%ENDCOLOR%</em>/<em>%GREEN%os%ENDCOLOR%</em>/<em>%GREEN%level%ENDCOLOR%</em>/<em>%GREEN%architecture%ENDCOLOR%</em>/*.rpm</code></blockquote>

where:

%TABLE{sort="off"}%
| *Symbol* | *Definition* | *Example* |
| <code><em>%GREEN%version%ENDCOLOR%</em></code> | Major-minor version of the VDT | =3.0= |
| <code><em>%GREEN%os%ENDCOLOR%</em></code> | Major operating system release for which packages were built | =el5= (only supported value, currently) |
| <code><em>%GREEN%level%ENDCOLOR%</em></code> | Release level of the package (see below) | =development=, =testing=, =production=, =contrib= |
| <code><em>%GREEN%architecture%ENDCOLOR%</em></code> | Architecture of the built packages | =i386=, =x86_64=, =source=, =noarch= |

Technically, every combination of VDT version, operating system, level, and architecture (except =noarch=) is a single Yum repository.

Example:

<blockquote><code>http://vdt.cs.wisc.edu/repos/3.0/el5/production/i386/*.rpm</code></blockquote>

---++++ Release Levels

Every package is classified into a release level based on the amount of testing it has undergone and our confidence in its stability. When a package is first built, it goes into the lowest level (=development=). Only members of the OSG Software Team may promote packages upward through the release levels.

%TABLE{sort="off"}%
| *Level* | *Intended Use* | *Intended Users* |
| =development= | Internal testing only; bleeding-edge and volatile | OSG Software Team and external contributors |
| =test= | External testing | OSG Software Team, external contributors, the ITB and other testers |
| =production= | General use, including on production systems | Most site administrators and users |
| =contrib= | General use, with caution — unsupported software with less testing | Some site administrators and users |


Contrary to past practice, when there were separate repositories for _the VDT_ and _the OSG software cache_, we will have a single shared repository. The GOC will continue to maintain the packages they have maintained (such as the VO configuration information), but will provide it via our mechanisms.

---+++++ VDT-Testing Repo Rules
The testing repo has the rules (proposed by Derek):
   * No replacing rpm's.  You NEED to increase the release number.
   * The public will see this repo.  DO NOT run createrepo on it (could screw up their download).  
   * If you want an update into testing, let someone know.  We will only consider a 'blocker' ticket on Jira.


---++++ Package and Repository Signing

%RED%All TBD. How we sign: one key for team vs. key for individuals. How does koji handle this?%ENDCOLOR%

---++ Packaging Conventions

In addition to adhering to the [[http://fedoraproject.org/wiki/PackagingGuidelines][Fedora Packaging Guidelines]] (FPG), we have a few rules and guidelines of our own:

   * %RED% We may require packages that do not meet all FPG guidelines to install a file (perhaps in <code>/usr/share/doc/%GREEN%package%ENDCOLOR%/</code>) that documents major deviations from the guidelines that may be significant to end users.%ENDCOLOR%

   * %RED% We should probably provide a more user-level README file in /usr/share/doc/package as well, if a package doesn't come with some form of documentation.%ENDCOLOR%

   * Packages we create or modify should have a distro tag in the release (put =%{?dist}= at the end of the release).

   * Java-based software must be packaged according to our [[JavaPackageNotes][Java packaging policy]].

---++ Testing

Pre-release and after-release against updated versions

---++ External RPM Repositories

---+++ EPEL & Globus & VOMS

We will tell our users that they have to use/enable the EPEL repository.

Initially, we will only copy Globus from EPEL when we need to patch it. We expect that we only need to patch a small subset of the Globus packages, so most will come from EPEL. We don't yet have a good feeling for whether or not we can rely on EPEL, so we reserve the right to copy more RPMs from EPEL in the future, if necessary.

When we copy packages, we will add a VDT repotag to distinguish them from the ones that come from EPEL. We will also recommend using yum priorities to prefer the VDT versions. 

---+++ EMI

EMI 1.0 is very new. We expect to use many of their packages, but we will prefer to copy the packages to our repository instead of relying directly on the EMI repository. This will allow us to control the versions of the critical grid software our stakeholders need.

If you report bugs to EMI, you can use [[https://ggus.eu/pages/home.php][GGUS]]. Please note a few things:

   1. Please copy Alain on the ticket so he can be aware of what's happening with all of our bug reports to EMI.
   1. If you think the ticket affects other people in the group, please send a note about it to osg-software@opensciencegrid.org. 
   1. You should put "EMI" in the _short description_ and something like "Please assign to EMI Release Management" in the _description_.
