%META:TOPICINFO{author="MatyasSelmeci" date="1405030802" format="1.1" version="1.6"}%
%META:TOPICPARENT{name="MadisonITBInstance"}%
---+ Configuration for the Madison ITB Instance


---++ Overview


Configuration for the Madison ITB Instance is handled using [[http://docs.puppetlabs.com][Puppet]].
We are using a Puppet Master that is run by the UW Center for High-Throughput Computing.
The master is shared by multiple sites, but we will have separate environments for the ITB site.


---++ Environment Setup


The Puppet Master we use is hosted on _wid-service-1.chtc.wisc.edu_.
All Puppet environments on _wid-service-1.chtc.wisc.edu_ are located in the directory =/etc/puppet/environments/=.

*Note*: _wid-service-1_ is a shared resource, and there are Puppet environments for other machines and clusters managed by the !CHTC.
Please be careful when making changes!

The =vdt= environment holds the Puppet configuration for the ITB site;
it is located in =/etc/puppet/environments/vdt/=.

In addition to the =vdt= environment, team members will have their own environments for testing.
Your environment will be named after your UW CS login name;
if you do not have an environment, you should mail Tim C or Mat.
You can manage your own environment however you want,
but it is recommended to store the configs in the [[https://vdt.cs.wisc.edu/svn/puppet][/puppet/ directory tree in SVN]].

A Puppet environment is a directory with a specific layout.
All Puppet configs in an environment are organized into modules and placed in the =modules/= subdirectory.
The [[http://docs.puppetlabs.com/puppet/2.7/reference/modules_fundamentals.html][Puppet docs on modules]] describe this.

The special module =nodes= contains the configs for each specific host in the site.
Each node-specific config file is named after the hostname of the host it refers to.
For example, the config for _itb-worker1.chtc.wisc.edu_ is in the =itb-worker1.pp= file.
It contains a single "node" resource, which must be named after the !FQDN of the host.


---++ SVN Setup


The canonical location for files in the =vdt= environment is in the [[https://vdt.cs.wisc.edu/svn][VDT SVN repo]],
in the directory =/puppet/production/=.
All changes to the =vdt= environment must be committed there.
The =vdt= environment on _wid-service-1_ updates from SVN every 10 minutes.

*Note* that this is a publicly accessible SVN repository.
Do not store any sensitive data such as passwords or private keys in it.

There are directories in the =/puppet/= tree for the ITB site admins' personal environments.
You should commit your changes to your environment into your area in SVN and from there merge the changes into production.
There is no automatic process to update admins' personal environments.
Use whatever method fits your workflow the best.

---++ Puppet Agent Setup

The puppet agent is installed on each of the nodes in the ITB site.
It is not running persistently, but instead runs once a night from root's cron.
The agent will pull from the =vdt= environment.

---++ Example Workflow

Suppose I (matyas) want to make a change to _itb-worker1_.
This is the procedure I would follow:
   1. Merge any changes that are in =/puppet/production/= to =/puppet/matyas/= to make sure my branch reflects the current state of the configs.
   1. SSH to _wid-service-1_, cd into the checkout at =/etc/puppet/environments/matyas/= and update from my branch.
   1. Make changes (right there in the checkout).
   1. SSH to _itb-worker1_ and run <code>puppetd -vt --environment=matyas</code> to run Puppet once, pulling from my environment.
   1. Repeat the previous two steps as necessary to get my changes working.
   1. Commit my changes to =/puppet/matyas/=.
   1. SVN merge my changes to =/puppet/production/=.
   1. Wait up to 10 minutes.
   1. SSH to _itb-worker1_ and run <code>puppetd -vt --environment=vdt</code>.
   1. Verify my changes work in production.



-----

---+ Puppet Conventions

---++ Puppet Coding Style

We follow the [[http://docs.puppetlabs.com/guides/style_guide.html][official Puppet style guide]], except as noted below. The most important principle, as mentioned in Section 4: Readability matters.

---+++ Exceptions to the Puppet Style Guide
   * Section 6: [Module files] Should not exceed an <span style="color: #F60;">80</span> character line width &rArr; <span style="color: #F60;">120</span> character line width (as we do with Python)

---++ Additional Local Conventions
   * Write one module per role (e.g., itb_ce)
   * Write one module per software component (e.g., the Globus gatekeeper)
   * Write one node file (in the =modules/nodes/manifests= directory) per node
      * Each one should contain very little code
      * Include the =itb_common= class and the Puppet class for the node’s role (e.g., =itb_ce=)
   * Modules must not include sensitive data (e.g., unencrypted private keys) — they are stored on a public system

A role Puppet class should have a parameter called =$osgver= to specify the major version of the software stack that it will use. The class should include the =osg_release= Puppet class, passing on the =$osgver= parameter. For example, the =itb_ce= class should include the following code:

<pre class="file">
class itb_ce ($osgver) {
  class { 'osg_release':
    osgver => $osgver,
  }
  ...
}
</pre>

---++ Tips

   * <p>You might need to have variables depending on parameters of the system (for example EL5 versus EL6). It might be useful to set these variables in a separate file called =params.pp= and include it in the main class for the role.</p>
   * <p>You should make all changes in your environment first, and merge them to production once they are ready.</p>
   * <p>It is very important for maintainability to maintain a tree structure for Puppet configs.</p>\
     <p>This makes seeing class dependencies easier. Puppet often lends itself to a mesh structure &mdash; must try hard to resist that.</p>
   * <p>A config should be divided up into multiple definitions when you start seeing repetition.</p>\
     <p>Treat a definition like you would a function in a traditional programming language.</p>
   * <p>Defined types are useful for working around places where traditional programming language semantics are missing from Puppet (e.g., iteration).</p>
   * <p>Avoid using resource collectors (the <code>&lt;| |&gt;</code> syntax) &mdash; they have problems, such as silent failures, that make debugging difficult.</p>
   * <p>Keep a consistent ordering of parameters in resources &mdash; have =ensure= be the first item in files, for example &mdash; [TimC: We should define this for common types.]</p>
   * <p>Puppet hashes and lists are often useful, but keep in mind that they are immutable &mdash; once set, they cannot be changed.</p>
   * <p>PuppetForge may have useful modules.</p>\
     <p>You probably should not use them verbatim, but instead use them as examples. (An exception should be made for the =stdlib= module, which is official. (*Mat TODO*: See if you can get stdlib to work &mdash; Moate claimed problems, but they may be solvable)).</p>
   * <p>Containment is often useful, but you need to take care to avoid creating spaghetti dependencies.</p>\
     <p>Again, ensure that your dependencies form a tree structure.</p>