%META:TOPICINFO{author="MatyasSelmeci" date="1402603936" format="1.1" reprev="1.8" version="1.8"}%
%META:TOPICPARENT{name="InternalDocs"}%
---+ Switching Software Area (/software) to Git

---++ Objectives

   * The OSG (or CHTC) must own and fully manage the operations of the authoritative Git repositories
   * The OSG Technology team must have sole write privileges on the authoritative repositories
   * We must have dependable backups of the repositories
   * Anyone should be able to read the repositories or their public copies (e.g., GitHub), including histories
   * Anyone should be able to submit a contribution
   * Team members must be able to quickly and easily add a contribution to the repo
   * The workflows for both contributors and team members must be clearly documented and robust. Common use cases should be efficient and easy to learn
   * The migration process must preserve existing data, should interrupt work little, and should be reversible

---++ Architecture

---+++ Location of/Access to the Authoritative Repos (Options)

---++++ Preferred Option
This is Matyas's preference, though it has not yet been chosen as the
official method.

---+++++ AFS
Keep the repos on the UW's AFS. We'll use the UW CSL's kerberos authentication. External collaborators will ssh to e.g. =library.cs.wisc.edu= to push.

*Advantages*
   * Existing team members already have access
   * No daemons to set up (except for a web interface)
   * Volumes will be backed up as-is
   * Precedent: HTCondor team does this
   * Not dependent on a single machine (any machine with AFS access is good)

*Disadvantages*
   * Decent access control will require creation of new AFS groups, which are a pain to manage
   * Or we could make everything owned by =condor:vdt= like we do for the SVN repos. Then we won't have any fine-grained access control though
   * Need to ensure backup/mirroring cronjobs have AFS tokens
   * Might be slow
   * Some management (e.g. setting up the web interface) needs to go through the CSL

---++++ Alternative Options

---+++++ Local Drive on CSL Server
Same access method as with AFS, but the actual files will be kept in /scratch (and backed up to AFS, of course).

*Advantages*
   * No daemons to set up (except for a web interface)

*Disadvantages*
   * Existing team members will need access to the specific machine the repo is on
   * No fine-grained access control; we don't control Unix groups so we can't make any of those
   * Dependent on a single machine
   * Better hope our backups are good because the CSL won't be making any
   * Some management (e.g. setting up the web interface) needs to go through the CSL

---+++++ CHTC-controlled Git server (git.chtc.wisc.edu)
Access via Gitolite. Users will need to use public keys and SSH.

*Advantages*
   * Already set up, just need to add new repositories and public keys
   * Fine-grained access control
   * Precedent: CHTC infrastructure team does this
   * Web interface also already set up

*Disadvantages*
   * OSG team has no login access to that machine
   * Dependent on CHTC infrastructure for all management (including setting up backups, cronjobs, etc.)
   * Dependent on a single machine
   * Shared resource with other CHTC members

---+++++ OSG-controlled Git server (perhaps on osghost.chtc.wisc.edu?)
Access via Gitolite. Users will need to use public keys and SSH.

*Advantages*
   * Full control over software, users, cronjobs, daemons, backups, everything
   * Fine-grained access control

*Disadvantages*
   * Full responsibility for software, users, cronjobs, daemons, backups, everything
   * Dependent on a single machine
   * Nothing set up

---+++ Public (!GitHub) Mirror

We will create one !GitHub repo for each authoritative repo. The !GitHub repos
will be owned by the "opensciencegrid" organization. Team members will
need to have !GitHub accounts and be members of the organization.

We will have a dedicated !GitHub account for doing automated pushes to !GitHub.
We'll have a cron job that mirrors periodically, as well as a "post-receive"
hook for each repo that does a push to !GitHub after every push it receives.

---+++ Backups

Regardless of the other parts of the architecture, a rolling backup system like what we do for the SVN repos would be a good idea.
Here's a simple outline. For each repository:
   1. Lock the repo (probably via an "update" hook that does exit 1)
   1. Wait for git-receive-pack processes to exit
   1. Rsync to copy the repo (preferably to AFS)
   1. Unlock the repo (remove the hook)
   1. Delete the oldest backups until we have &lt;=10

---++ Contributions

People can fork or clone our !GitHub mirror and send pull requests. A team
member can examine the pull request, download it as a patch, then apply it to
their own repo, and push the commit(s) to the real repos.

Shouldn't take too long -- !GitHub provides copy-and-paste instructions, though
they will have to be slightly modified since they are providing instructions on
how to apply the change to the !GitHub repo, not your own.

---++ Migration

---+++ One-time Setup

   1. Set up a git server
   1. Create an authors file to map SVN user names to email addresses for Git (there is one at "/p/condor/workspaces/vdt/svn-access/authors.txt")
   1. Create a backup cronjob that reads a list of repositories to back up; should be run by cndrutil user if we care about AFS
   1. Create a !GitHub user that will be used for auto uploads; create a passwordless ssh key for it and store it somewhere safe; also store the !GitHub password for the user somewhere safe
   1. Create a mirror cronjob that reads a list of repositories and mirrors them all to github using the user from the previous step

---+++ Per-project Migration

   1. Schedule a switchover date with the owner
   1. Use subgit import to convert the repository (it's a lot nicer than git-svn)
   1. Add info about the repo to the gitolite config file (if using gitolite)
   1. Set up git hooks (copy them from another converted repository, or we may have a template)
   1. Update the backup cronjob
   1. Test the repo
      1. Test viewing via web interface
      1. Test making changes (you should test this, and then the owner should as well)
         1. Clone the repo
         1. Make a branch
         1. Make a change, commit it to the branch
         1. Push the branch
   1. Make a file in the trunk of the SVN dir called =MOVED-TO-GIT= that contains the following text:<pre>
The source code for this project is now contained in a Git repository located at:
<b>repo url</b>
Changes committed to SVN will be ignored.</pre>
   1. svn lock the project in SVN

---+++ Per-Project Mirroring to !GitHub

   1. Create an opensciencegrid/<em>PROJECT</em> github repo
   1. In the local (authoritative) git repo, do <code>git remote add --mirror github git@github.com:opensciencegrid/<em>PROJECT</em>.git</code>
   1. Add the repo to the list of repositories managed by the mirror cronjob
   1. Add a "post-receive" hook to the local repo to push to github -- might be as simple as <pre>
exec git push --quiet github &
</pre>

---+++ Notes

We will need to rewrite any hooks we have (the post-commit email for example).

We will not have information on full project renames (since each project dir will become a separate repo).

We need to keep the old SVN repo around to get the full history.

We may wish to omit dead projects or old names of renamed projects (vdt-build for example).



---+ Switching RPM area (/native/redhat) to Git (on hold)
Moved to SoftwareTeam.GitMigrationProposalArchive

---+ Comments
%COMMENT{type="tableappend"}%

<!-- vim:ft=twiki:tw=72
-->
