%META:TOPICINFO{author="MatyasSelmeci" date="1383771927" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="InternalDocs"}%
---+ Software Development Process

This page is for the OSG Software team and other contributors to the OSG software stack. It is meant to be the central source for all development processes for the Software team. (But right now, it is just a starting point.)

---++ Building packages for multiple OSG major versions

Now that we are supporting multiple major versions of the OSG software stack in parallel (currently 3.1 and 3.2), we may have packages that we wish to update in both.
Note: 'maintenance branch' currently refers to 3.1, and 'current branch'/'trunk' refer to 3.2.
The procedure for making a package update in both major versions is as follows:
   1. Make the update in the maintenance branch (<code>branches/osg-3.1</code>)
   1. Commit the update
   1. Make a build (<code>osg-build koji --repo=3.1 _PACKAGE_</code>)
   1. Do the standard 4 for the maintenance branch
   1. SVN merge the relevant commits from the maintenance branch into trunk%BR%\
      A full checkout of the native/redhat tree will allow you to verify the merge before committing it.
   1. Commit the merge
   1. Make a build (<code>osg-build koji _PACKAGE_</code>)
   1. Do the standard 4 for the current branch
   1. Do the extra 2
   1. Promote the packages for the maintenance branch (<code>osg-promote -r 3.1-testing _PACKAGES_</code>)
   1. Promote the packages for the current branch (<code>osg-promote -r 3.2-testing _PACKAGES_</code>)
Note that you do not need to bump the release in trunk before rebuilding -- we have a different %dist tag in maintenance than in trunk so the final !NVRs will not conflict.
You should make your changes in the maintenance branch and merge into trunk instead of the other way around.
There could be disruptive changes in trunk that we don't want going into maintenance by accident, but it's unlikely that there are disruptive changes in maintenance that we don't want in trunk.
If you _did_ make your change in trunk first, be very cautious about merging into maintenance;
you might want to cherry-pick your individual commits instead of merging a range.

---++ Testing a Package in Development

Before promoting a package to a testing repository, each build must be tested lightly to make sure that it is not completely broken, thereby wasting time during acceptance testing. Normally, the person who built the package performs the development testing.

<span style="color: #F60;">If you are not doing your own development testing for a package,</span> contact the Software Manager and/or leave a comment in the associated ticket; otherwise, your package may never be promoted to testing and hence released.

---+++ The “Standard 4” Defined

In most cases, the Software Manager will ask a developer to perform the “standard 4” tests on a package before promotion. This is a shorthand description for a standard set of 4 test runs:

   * Fresh install on el5
   * Fresh install on el6
   * Update install on el5
   * Update install on el6

An “update install” is a fresh install of the relevant package (or better yet, metapackage that includes it) *from the production repository*, followed by an update to the new build *from the development repository*.

For each test run, the amount of functional testing required will vary.

   * For very simple changes, it may be sufficient to verify that each installation succeeds and that the expected files are in place
   * For some changes, it may be sufficient to run osg-test on the resultant installation
   * For some changes, it will be necessary to perform careful functional tests of the affected component(s)

If you have questions, check with the Software Manager to determine the amount of testing that is required per test run.

---+++ The "Extra 2" Defined:

The extra 2 is a set of tests that need to be run for packages that have been built for both major versions of the OSG Software stack (currently 3.1 and 3.2):

   * Install of 3.1 version updating to 3.2 version on el5
   * Install of 3.1 version updating to 3.2 version on el6

To put another way, start with the update test on 3.1 but instead of updating to 3.1-development, update to 3.2-development.

---+++ The "Standard 10" Defined:

This is just the standard 4 for the maintenance branch (3.1), plus the standard 4 for the current branch (3.2), plus the extra 2.

---++ Promoting a Package to Testing

Once development testing is complete, follow these steps:

   1. Make sure the package update has at least one associated JIRA ticket; if there is no ticket, at least create one for releasing the package(s)
   1. Obtain permission to promote the package(s) from the Software Manager; he will likely ask for the associated ticket and about development testing
   1. Use =osg-promote= to promote the package(s) from development to testing
   1. Add a comment to the associated JIRA ticket(s) with the NVR of the build(s) and, if you know, suggestions for acceptance testing
   1. Mark each associated JIRA ticket as “Ready For Testing” and set the Assignee to “Unassigned”
