%META:TOPICINFO{author="TimCartwright" date="1308168389" format="1.1" reprev="1.14" version="1.14"}%
%META:TOPICPARENT{name="Projects"}%
---+ A transition to native packages

Summary: This document contains the details of how we will transition away from Pacman to native packages (RPMs and debs)

%RED% _Please note_: %ENDCOLOR% There are many incomplete details here, and they are likely to change _significantly_ in the first three weeks of June.

---++ 0.0 State of this document

This document is a draft. 

---+++ 0.1 Known issues that will be addressed in future versions of this document. 

   * What needs to change in order to make the transition? 
   * A survey of packages that need to be provided.
   * Testing infrastructure needs to change how?
   * Assess where the work is? Configuration? 
   * What do we expect from the sysadmins? How do they convert?To update easily? 
   * CA Certs: only from GOC? Also from VDT? IGTF vs. non-IGTF? Different packaging so you can choose subset? (Note from BB: I integrated these below).
   * How do LIGO's requests for SL6 and Debian 6 support mesh?
   * Mirrors of yum repos
   * What packages might need significant work to fit into RPM world? Gratia? 
   * Target dates: Site Admin Meeting in August, LHC shutdown in December...

---+++ 0.2 Open questions for readers

   * Sysadmins: how do you feel about the requirement that we depend on EPEL? 

---++ 1.0 General Approach

Our general approach is documented in our [[CommunityPackagingProposal][Community Packaging Proposal]]. 

Here is a brief summary of our approach, as quoted from that document:

<blockquote>
*Proposed Principle of Community Packaging:* <br>
The OSG Software Team should be a good community citizen when it comes to packaging: When possible, we should use packages from existing and/or broader communities; when that is not possible, we should make our own packaging but contribute them back to the broader communities. Therefore, we should package software only when one of the following is true:

   1. The software is not already packaged; or 
   1. The software is packaged but needs significant changes to be acceptable to our users. (Different version, extra patches, etc...)

Otherwise we should use the existing packaging provided by external developers or software repositories.
</blockquote>

While this does not mention native packages, that is the implication: we can only use packages from a larger community effectively if we are using the same packaging mechanism with the same standards. 

---++ 2.0 Outline of timeline

There are two portions to our current timeline. 

   1. Finish pending work on Pacman-based releases, then stop any non-critical work on the Pacman-based releases.
   1. Immediately begin work on transitioning our infrastructure and products to RPMs for Red Hat Enterprise Linux 5. 

---+++ 2.1 Finish pending work on Pacman-based releases.

We want to stop new work on Pacman packages as soon as possible, but we have some lingering work to finish up to ensure that we are well-positioned to provide our users with a working VDT while we make the transition to RPMs. We plan for the following.

|  *Date*  |  *Effort*  |  *What*  |
|  June 10  |  | As of June 10, we won't accept any new requests for changes to the Pacman cache. |
| June  |  2-3 FTE Days  | Release [[http://vdt.cs.wisc.edu/releases/2.0.0/release-p27.html][OSG 1.2.20 (VDT 2.0.0.p27)]], which is currently in testing in the ITB. This provides some long-requested changes to GRAM for CMS, among other minor updates. This release will not require much effort from the OSG Software Team: perhaps a day or two to deal with minor problems and the release process. |
|  July  |  1 FTE Week  | Minor update to address low priority security issues and a GIP update from CMS. While the security updates are low priority, we want to ensure they are addressed because some of our users may be using the Pacman-based releases for a long time, and it's best to have these resolved. (To be precise, we need to update Squid, !MySQL-JDBC.) This should take less than a week of one person in the OSG Software Team. |

After these releases, we will not make any plans to do updates to the Pacman-based packaging of the VDT unless there are critical updates. By "critical update", we mean a moderate or high priority security update, or anything approved by the OSG Executive Team. 


*Please note:* This means that the requested VOMS/VOMS-Admin upgrade will not be provided in Pacman-based packaging. 
---+++ 2.2 Immediately begin work on RPMs for RHEL 5

We will immediately begin the transition to producing the OSG Software Stack as RPMs for Red Hat Enterprise Linux 5 and variants (especially Scientific Linux 5). 

---+++ 2.2.1 Order of packages to release

Starter packages:
   1. *vdt-system-profiler*: We will first ship an updated version of the <code>vdt-system-profiler</code>. This is a simple script that allows users to collect debugging information to be sent to VDT support when help is needed. This is our first target because the package itself is simple, but it will allow us to make sure our infrastructure is in place. (Building RPMs, yum repositories, etc.)
   1. *Xrootd*: Xrootd (without the DSI Plugin) will be our next target. This is already mostly done, so the goal is to make sure that our infrastructure works properly.
   1. *Xrootd DSI Plugin*: This will require us to use Globus, so we will be forced to address questions about how we get Globus. Do we refer to it from EPEL? Do we copy it from EPEL?
      * Note from BB: We have already done this for the Hadoop DSI plugin.
   1. *glexec*: CMS wants an upgraded version of glexec. While it is not difficult to build, there are several dependencies (lcas, lcmaps, VOMS, and Globus) that need to be addressed.
      * Note from BB: VOMS is an interesting issue, as (last I checked) the VOMS in EPEL doesn't have the "--dont-verify" flag.  This is possibly the first place where we'll have to decide between "copy and maintain a patch" versus "work with upstream".  This is based on 9-month-old information; may have changed.
   1. *Worker Node Client*: This is "low-hanging fruit". Many of these packages have already been done by CMS and we can use the results. They also require minimum configuration to get working.
      * Note from BB: We have proof of concept source packages for all of the WN-client *except* Fermi-SRM-Client.
   1. *OSG Client*: Probably falls under the "starter" package category in complexity, but it does possibly affect end-users.  (Added by BB)

Complex packages:
   1. VOMS Admin: This is the first Tomcat+MySQL application we'll need to support.  This would be the first test of our ability to port complex configuration scripts over. (Added by BB)
   1. OSG-CE: This is the most complex software we offer.  It's going to be necessary to start very early, as it will take much longer than any other software, and will require coordination with several pieces of software that have never had native packaging.  (Added by BB)
   1. CREAM: EMI is also doing source packages for this; it might benefit to let them shake-out bugs.
      * Note from BB: The following software will be in both OSG-CE and CREAM, and have never had native packages made: Gratia probes, GIP, OSG-RSV, Configure-OSG, Fermi-SRM-Client.

TBD:
   1. Gratia Collector.  Small user base (5-6).  Requires MySQL+Tomcat; might be easy after VOMS Admin.  (Added by BB)
   1. VDT-CA-Manage.  This is to manage the set of CAs; while we have RPMs for CAs right now, they're far less powerful than VDT-CA-Manage.  We probably don't want to regress on these capabilities, as they were strongly desired by the OSG Technical Director.  (Added by BB)
   1. Mostly-unused-packages: dccp, bwctl, ndt, npad, MonaLisa, owamp.  These packages all provide some level of functionality to a small crowd.  I don't think we should consider removing them (for now), but we might want to state they won't happen for the initial release. (Added by BB)
   1. Pegasus client: Last I checked with the Pegasus folks, they now glide-in their own client.  We should check to see if this is still necessary.  (Added by BB)
   1. CA certs.  Who defines the starting set of CA certs?  Can it be only GOC?

What do we say about timeline? Goal of X, Y, and Z by... August 31? 

---+++ 2.2.2 Supported operating systems

Initially we plan to support Red Hat Enterprise Linux 5 and variants (particularly Scientific Linux 5) in both 32 and 64-bit architectures. 

Note the absence of other platforms, at least initially: No RHEL 4, no SuSE, no Debian. More will come later, but unspecified as to what and when. (The software we provide to LIGO on Debian will continue to exist.)

---++ 3.0 Technical details

There are many technical details about our new approach, and they are documented on a separate page, the [[RPMDevelopmentGuide][RPM Development Guide]]. Ultimately, the guide will likely outlive this transition document and become a key document for the OSG Software Team and external contributors alike.

---++ 4.0 Versioning

%RED%Warning:%ENDCOLOR% This whole section was added by BB and not yet reviewed by Alain.

We've previously said the minor version number transitions (as in, OSG 1.2 -> 1.3) are only incremented when upgrades aren't possible.  This makes the major version number mostly meaningless, and leads to a very large patch-level (1.2.19) and major changes happen between patch levels.  I'd like to fix this while we are doing a clean sweep.

The point of making versioning changes is to communicate *within the version number* the amount of risk one takes in performing the upgrade.

We use the traditional MAJOR.MINOR.PATCH numbering scheme.  By "version number", we are referring to the version number of any OSG meta-package RPMs. 

---+++ Major version number

   * Significant new services will only be added on major releases.
   * We don't guarantee configuration file compatibility across major releases (although we will keep the existing policy of making configuration files as backward compatible as possible).  We are allowed to obsolete, remove, or semantically change configuration options.  We will avoid semantic changes if at all possible.
   * We don't guarantee ABI compatibility across major releases.
   * We don't guarantee protocol compatibility across major releases.
   * Major version changes will be ITB-tested.
   * We support the previous two major versions (i.e., about 18 months of support for a release).
   * Each major release will have a separate repository to prevent inadvertent upgrades.  To upgrade across a release, we can use yum plugins to do something like "yum updateosg 3" to switch to the OSG 3.0 repository.  We expect the upgrade process to be:
      1 Switch yum repository using custom yum command.
      1 Run "yum update".
      1 Edit configuration files.
   The average major release is thus far, far simpler than major release in the past.
   * The contents of the MAJOR release repository will contain version MAJOR.0.0 of the RPMs.

Note that, while we have a significant leeway for change at each major release, we aren't necessarily going to change things.  We will continue to be conservative in breaking things - but this will provide a predefined point when we need to.

Also note that previous minor releases would now be considered major releases due to the configuration option changes.

---+++ Minor version number
   * Configuration files will be backward, but not necessarily forward compatible.  A configuration file working with minor version X will work with minor version Y if X<Y.
   * Minor version changes will be ITB-tested.  We may change this item in the future if ITB effort is reduced.
   * Minor updates will be available in an -updates repo.
   * We expect updating across minor version numbers to be "safe", but admins are advised to not do them automatically.
   * Forward and backward ABI and protocol compatibility is expected.
   * Services may have new capabilities or versions in minor releases.
      * New packages may be added in a minor release if the upgrade of an existing service requires it.
   * Releases will happen on the 1st or 3rd Tuesday of the month (TODO: check to verify this jives with the current policy)
   * Packages in the MAJOR updates repository will contain the RPMs corresponding to the latest MAJOR.MINOR.VERSION.

---+++ Patch-levels
   * Configuration variables may not change.
   * Reserved only for bugfixes or security fixes.
   * ABI compatibility is guaranteed.
   * Patch-level fixes may skip ITB if necessary.
   * It is expected to patch-level upgrades to be completely safe.
   * We expect updates should be safe to be done automatically.
   * Patch-level fixes will go into the -updates repo.

---+++ Exceptions

There cases where we make exceptions to the versioning and release policy outlined above.
   * If we find a compelling reason to break the above process, the OSG-ET must approve it.  It will be noted in the release nodes, and separately emailed to osg-sites.
   * The OSG 2.0 release cycle will be special because we will not transition all OSG 1.2 services in one release. OSG 2.0 might start with only the worker node client (or less).
      * Services existing in OSG 1.2 will be added in minor releases of OSG 2.0.  The new services will go into the *release*, not the *updates* repository.  Compatibility guarantees are unchanged. The minor updates of OSG 2.0 will be tested by ITB.
      * Services not in OSG 1.2 will wait for OSG 3.0.

---+++ Repository Content Examples

Suppose OSG 2.0 has an RPM called foo.  OSG 2.0.0 released with foo-4.0.3, OSG 2.1.0 released foo-4.0.4, and OSG 2.1.1 released foo-4.0.5.  According to the above policy, the OSG2 release repo will contain foo-4.0.3 and the OSG2 updates repo will contain foo-4.0.5.  foo-4.0.4 will be available from Koji, but not from the release or updates repository.
