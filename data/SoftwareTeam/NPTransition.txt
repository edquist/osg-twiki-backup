%META:TOPICINFO{author="AlainRoy" date="1307381914" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="Projects"}%
---+ A transition to native packages

Summary: This document contains the details of how we will transition away from Pacman to native packages (RPMs and debs)

%RED% _Please note_: %ENDCOLOR% There are many incomplete details here, and they are likely to change significantly before 10-June-2011. 

---++ 0.0 To do

   * CA Certs: only from GOC? Also from VDT? IGTF vs. non-IGTF? Different packaging so you can choose subset? 
   * How do LIGO's requests for SL6 and Debian 6 support mesh?

---++ 1.0 General Approach

Our general approach is documented in our [[CommunityPackagingProposal][Community Packaging Proposal]]. 

Here is a brief summary of our approach, as quoted from that document:

<blockquote>
*Proposed Principle of Community Packaging:* <br>
The OSG Software Team should be a good community citizen when it comes to packaging: When possible, we should use packages from existing and/or broader communities; when that is not possible, we should make our own packaging but contribute them back to the broader communities. Therefore, we should package software only when one of the following is true:

   1. The software is not already packaged; or 
   1. The software is packaged but needs significant changes to be acceptable to our users. (Different version, extra patches, etc...)

Otherwise we should use the existing packaging provided by external developers or software repositories.
</blockquote>

While this does not mention native packages, that is the implication: we can only use packages from a larger community effectively if we are using the same packaging mechanism with the same standards. 

---++ 2.0 Outline of timeline

There are two portions to our current timeline. 

   1. Finish pending work on Pacman-based releases, then stop any non-critical work on the Pacman-based releases.
   1. Immediately begin work on transitioning our infrastructure and products to RPMs for Red Hat Enterprise Linux 5. 

---+++ 2.1 Finish pending work on Pacman-based re;eases.

We want to stop new work on Pacman packages as soon as possible, but we have some lingering work to finish up to ensure that we are well-positioned to provide our users with a working VDT while we make the transition to RPMs. We plan for the following.

*Mid-June*: Release [[http://vdt.cs.wisc.edu/releases/2.0.0/release-p27.html][OSG 1.2.20 (VDT 2.0.0.p27)]], which is currently in testing in the ITB. This provides some long-requested changes to GRAM for CMS, among other minor updates. This release will not require much effort from the OSG Software Team: perhaps a day or two to deal with minor problems and the release process.

*End-June/Early July*: Minor update to address low priority security issues and a GIP update from CMS. While the security updates are low priority, we want to ensure they are addressed because some of our users may be using the Pacman-based releases for a long time, and it's best to have these resolved. (To be precise, we need to update Squid, MySQL-JDBC, and make a directory permission change.) This should take less than a week of one person in the OSG Software Team. 

After these releases, we will not make any plans to do updates to the Pacman-based packaging of the VDT unless there are critical errors, including security updates. 

*Please note:* This means that the requested VOMS/VOMS-Admin upgrade will not be provided in Pacman-based packaging. 

---+++ 2.2 Immediately begin work on RPMs for RHEL 5

We will immediately begin the transition to producing the OSG Software Stack as RPMs for Red Hat Enterprise Linux 5 and variants (especially Scientific Linux 5). 

---+++ 2.2.1 Order of packages to release

   1. *vdt-system-profiler*: We will first ship an updated version of the <code>vdt-system-profiler</code>. This is a simple script that allows users to collect debugging information to be sent to VDT support when help is needed. This is our first target because the package itself is simple, but it will allow us to make sure our infrastructure is in place. (Building RPMs, yum repositories, etc.)
   1. *Xrootd*: Xrootd (without the DSI Plugin) will be our next target. This is already mostly done, so the goal is to make sure that our infrastructure works properly.
   1. *Xrootd DSI Plugin*: This will require us to use Globus, so we will be forced to address questions about how we get Globus. Do we refer to it from EPEL? Do we copy it from EPEL? 
   1. *glexec*: CMS wants an upgraded version of glexec. While it is not difficult to build, there are several dependencies (lcas, lcmaps, VOMS, and Globus) that need to be addressed. 
   1. *Worker Node Client*: This is "low-hanging fruit". Many of these packages have already been done by CMS and we can use the results. They also require minimum configuration to get working. 
   1. ... VOMS Admin? CE? Something else? VDT-Client? TBD

What do we say about timeline? Goal of X, Y, and Z by... August 31? 

---+++ 2.2.2 Supported operating systems

RHEL 5 & SL5, 32 & 64-bit. 

Note the absence of other platforms: No RHEL4, no SLES, no Debian. More will come later, but unspecified as to what and when. 

---++ 3.0 Technical details

---+++ 3.1 Adherence to Fedora Packaging Guidelines?

Must meet as many FPG as possible? Only subset mandated?

---+++ 3.2 Approach to building

mock/Metronome/koji

---+++ 3.3 VDT source code repository

Package per directory, containing... compatibility with koji?

---+++ 3.4 Globus & EPEL

Will we copy Globus or refer to it from EPEL? How do we patch Globus? yum priorities? 

---+++ 3.5 RPM signing

How we sign: one key for team vs. key for individuals. How does koji handle this?

---+++ 3.6 Testing

Pre-release and after-release against updated versions

---+++ 3.7 Repositories

dev/test/prod/extras? 
