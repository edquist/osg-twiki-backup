%META:TOPICINFO{author="MatyasSelmeci" date="1375313971" format="1.1" version="1.16"}%
%META:TOPICPARENT{name="InternalDocs"}%
---+!! Notes on Koji-Hub Setup

%TOC%

---++ Machine setup

koji is run on =koji-hub.batlab.org=; right now a single machine is used for the hub (koji-hub), the web frontend (koji-web), repo generation (kojira), and el5 building (kojid).
A second machine, =kojibuilder1.batlab.org= is used for el6 building.

As instructions for setting up the machine, I'm just going to take the Fedora guide at [[http://fedoraproject.org/wiki/Koji/ServerHowTo]], and add modifications / comments to suit our setup.

<blockquote>
* For an overview of yum, mock, Koji (and all its subcomponents), mash,
and how they all work together, see the excellent slides put together
by Steve Traylen at CERN http://indico.cern.ch/event/55091
</blockquote>
---+++ Packages to install

<blockquote>
*On the server (koji-hub/koji-web)*
   * httpd
   * mod_ssl
   * postgresql-server
   * mod_python (>= 3.3.1 for Kerberos authentication)

*On the builder (koji-builder)*
   * mock
   * setarch (for some archs you'll require a patched version)
   * rpm-build
   * createrepo
</blockquote>
We use one machine for both these roles, so all of the above has to be installed.

The koji packages to install are:
   * koji-hub
   * koji-web
   * koji-builder
   * koji-utils

---+++ Filesystems
<blockquote>
---++++!! A note on filesystem space
Koji will consume copious amounts of disk space under the primary !KojiDir directory (as set in the kojihub.conf file).
</blockquote>
This is =/mnt/koji= by default. Koji keeps _all RPMs built_ in here so a complete history is kept.
In addition, repositories are kept here.
A repository is just a set of text files, but since a new one is generated for every build, the space will add up.
Koji does clean up the repositories once they get old enough.
For =koji-hub.batlab.org=, we allocated a 120G partition for =/mnt/koji=.

<blockquote>
However, as koji makes use of mock on the backend to actually create build roots and perform the builds in those build roots, it might come to a surprise to users that a running koji server will consume large amounts of disk space under /var/lib/mock and /var/cache/mock as well.
</blockquote>
=kojid= (the builder daemon) will refuse to start a build if it does not have sufficient space under =/var/lib/mock=.
By default, this is an 8G surplus, but we lowered it to 4G for =koji-hub.batlab.org=.
The build roots will be wiped after successful builds, but the build roots for failed builds will be kept around for 2 weeks (?); as a result, disk usage of =/var/lib/mock= can swing wildly.
For =koji-hub.batlab.org=, we have allocated 35G for =/var/lib/mock=.
=/var/cache/mock= doesn't use up that much space, so we didn't make a separate partition for it, it just uses what's under =/=.

---+++ Authentication
Most of the "Koji Authentication Selection" section can be skipped.
We got our certs from !DOEGrids. *Note* that we had to run =dos2unix= on them before they would work.

We have 2 certs, with the following subjects:
   * =/DC=org/DC=doegrids/OU=Services/CN=koji-hub.batlab.org= (for koji-hub, koji-web, and kojid)
   * =/DC=org/DC=doegrids/OU=Services/CN=kojira/koji-hub.batlab.org= (for kojira)
kojid needed a different cert than kojira because the two would connect to koji-hub at the same time and log each other off.

Copies of the certs exist in AFS at =/p/condor/home/certificates/koji-hub/=

Clients connecting to koji-hub need a file containing the CA certs; this is just a concatenation of the !ESNet and !DOEGrids CA certs, which can be obtained by doing the following:
   * Install the =osg-ca-certs= RPM onto a host.
   * Concatenate ESNet and DOEGrids CA Certificates into a bundle: <pre>user@localhost$ cat /etc/grid-security/certificates/d1b603c3.0 \
/etc/grid-security/certificates/1c3f2ca8.0 > doe-chain.crt</pre>
We have a =doe-chain.crt= in =/etc/pki/tls/certs/doe-chain.crt= on =koji-hub=

We made a =kojiadmin= user, but we didn't make a cert for it so we just used user/pass authentication until we set up our own accounts and then disabled =kojiadmin=.

---++++!! NEW: Using proxy certs

=/etc/sysconfig/httpd= needed to be changed to include the following lines:
<verbatim>
OPENSSL_ALLOW_PROXY=1
OPENSSL_ALLOW_PROXY_CERTS=1

export OPENSSL_ALLOW_PROXY
export OPENSSL_ALLOW_PROXY_CERTS
</verbatim>

The user must use RFC proxies and must have a version of the koji client of 1.6.0-6.osg or newer.

---+++ Postgres Database

   * Install postgres: <pre>root@koji-hub# yum install postgresql-server</pre>
   * Init the db: <pre>root@koji-hub# su - postgres -c "PGDATA=/var/lib/pgsql/data" initdb</pre>
   * Start the db: <pre>root@koji-hub# service postgresql start</pre>
   * Make a koji account: <pre>root@koji-hub# useradd koji; passwd -d koji</pre>
<blockquote>
---++++!! Setup !PostgreSQL and populate schema:

The following commands will create the =koji= user within !PostgreSQL and will then create the koji database using the schema within the =/usr/share/doc/koji*/docs/schema.sql= directory
<pre>
root@localhost$ su - postgres
postgres@localhost$ createuser koji
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create databases? (y/n) n
Shall the new role be allowed to create more new roles? (y/n) n
postgres@localhost$ createdb -O koji koji
postgres@localhost$ logout
root@localhost$ su - koji
koji@localhost$ psql koji koji < /usr/share/doc/koji*/docs/schema.sql
koji@localhost$ exit
</pre>

*NOTE:* When issuing the command to import the psql schema into the new database it is important to ensure that the directory path =/usr/share/doc/koji*/docs/schema.sql= remains intact and is not resolved to a specific version of koji.
In test it was discovered that when the path is resolved to a specific version of koji then not all of the tables were created correctly.
</blockquote>

To authorize the koji-web and koji-hub resources, make the following additions to =/var/lib/pgsql/data/pg_hba.conf= (IP addresses will vary):
<pre>
# access for koji
host    koji        postgres    127.0.0.1/32          trust
host    koji        koji        127.0.0.1/32          trust
host    koji        koji        128.104.100.41/32     trust
host    koji        koji        ::1/128               trust
</pre>

Next, we'll need a koji admin user to run some commands.
We'll need to add it to the database manually.
Once again, we used user/pass authentication for the kojiadmin user until we disabled it.
All database commands should be done as the =koji= user:<pre>root@koji-hub# sudo -u koji psql</pre>
<pre>
koji=> insert into users (name, password, status, usertype) values \
('kojiadmin', 'some-throwaway-admin-password-in-plain-text', 0, 0);
koji=> insert into user_perms (user_id, perm_id, creator_id) values \
((select id from users where name='kojiadmin'), 1, \
(select id from users where name='kojiadmin'));
</pre>

---+++ Koji-Hub

<blockquote>
Koji-hub is the center of all Koji operations.
It is an XML-RPC server running under mod_python in Apache.
koji-hub is passive in that it only receives XML-RPC calls and relies upon the build daemons and other components to initiate communication.
Koji-hub is the only component that has direct access to the database and is one of the two components that have write access to the file system.
</blockquote>

Config files we care about:
   * =/etc/httpd/conf/httpd.conf=
   * =/etc/httpd/conf.d/kojihub.conf=
   * =/etc/httpd/conf.d/ssl.conf=
   * =/etc/koji-hub/hub.conf=
Install the necessary packages. <pre>root@koji-hub# yum install koji-hub httpd mod_ssl mod_python</pre>

<blockquote>
---++++!! /etc/httpd/conf/httpd.conf:

The apache web server has two places that it sets maximum requests a server will handle before the server restarts.
The xmlrpc interface in kojihub is a python application, and mod_python can sometimes grow outrageously large when it doesn't reap memory often enough.
As a result, it is strongly recommended that you set both instances of !MaxRequestsPerChild in =httpd.conf= to something reasonable in order to prevent the server from becoming overloaded and crashing (at 100 the =httpd= processes will grow to about 75MB resident set size before respawning).

<verbatim>
<IfModule prefork.c>
...
MaxRequestsPerChild  100
</IfModule>
<IfModule worker.c>
...
MaxRequestsPerChild  100
</IfModule>
</verbatim>

---++++!! /etc/koji-hub/hub.conf:

This file contains the configuration information for the hub.
You will need to edit this configuration to point Koji Hub to the database you are using and to setup Koji Hub to utilize the authentication scheme you selected in the beginning.
</blockquote>
We made multiple changes to this config file.
A snapshot is be attached to this page.

Notable changes:
   * We turned off =LoginCreatesUser=
   * =KojiWebURL= is http://koji-hub.batlab.org/koji
   * =PluginPath= is =/usr/lib/koji-hub-plugins=
   * =Plugins = sign= since there is an RPM signing plugin (package name: =koji-plugin-sign=) that we use

Other notes:
   * Should not be world-readable
   * Must be readable by the apache user though

Finally, there is a =[policy]= section for controlling ACLs.
Still working on it.

<blockquote>
---++++!! /etc/httpd/conf.d/kojihub.conf:
If using SSL auth, uncomment these lines for kojiweb to allow logins.
<verbatim>
<Location /kojihub>
SSLOptions +StdEnvVars
</Location>
</verbatim>
</blockquote>
This is actually outdated information, useful for Koji &lt; 1.4.0.
Instead, we add the following:

<verbatim>
<Location /kojihub/ssllogin>
        SSLVerifyClient require
        SSLVerifyDepth  10
        SSLOptions +StdEnvVars
</Location>
</verbatim>

<blockquote>
---++++!! /etc/httpd/conf.d/ssl.conf:
If using SSL you will also need to add the needed SSL options for apache.
These options should point to where the certificates are located on the hub.
</blockquote>

These are the config lines we use:
<pre>SSLCertificateFile /etc/pki/tls/certs/doegrids_hostcert.crt</pre>
The host cert for koji-hub.
<pre>SSLCertificateKeyFile /etc/pki/tls/private/doegrids_hostkey.key</pre>
The private key for koji-hub.
<pre>SSLCertificateChainFile /etc/pki/tls/certs/doe-chain.crt</pre>
The concatenation of the !ESNet and !DOEgrids CA certs we made above.
<pre>SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt</pre>
All the CA certs on the system.
<pre>
SSLVerifyClient require
SSLVerifyDepth  10
</pre>
Restart apache after doing this ( =service restart httpd= )

---++++ Adding a real admin user

At this point, SSL should be set up on Koji Hub.
Create an account for yourself (your DN): <pre>koji add-user 'Your Name 123456'</pre>
Give yourself the admin bit.<pre>koji grant-permission admin 'Your Name 123456'</pre>

*Once you're done with all the setup*, you should remove the admin bit from =kojiadmin=, block the user, and remove its password from the database.
<pre>koji revoke-permission admin kojiadmin
koji disable-user kojiadmin</pre>
In the database:
<pre>update users set password = null where name='kojiadmin';</pre>

---++++ Koji filesystem

=KojiDir= is =/mnt/koji=, so the following tree should be created:
<pre>
root@koji-hub$ mkdir -p /mnt/koji/{packages,repos,work,scratch}
root@koji-hub$ chown apache:apache *
</pre>

=/etc/koji.conf= is attached.

---++++ Accounts for kojira and kojid

<blockquote>
It is important to note that the kojira component needs repo privileges, but if you just let the account get auto created the first time you run kojira, it won't have that privilege, so you should pre-create the account and grant it the repo privilege now.

<pre>
kojiadmin@koji-hub$ koji add-user kojira
kojiadmin@koji-hub$ koji grant-permission repo kojira
</pre>

For similar technical reasons, you need to add-host each build host prior to starting kojid on that host the first time and could also do that now.
</blockquote>
We turned off auto account creation, so there won't be a problem with accounts with bad perms getting created.
Still, they have to be created manually.
We have kojid running on koji-hub, so this is the command we used to add it:
<pre>
kojiadmin@koji-hub$ koji add-host koji-hub.batlab.org i386 x86_64
</pre>

---+++ Koji-Web

Installing:
<pre>
root@koji-hub$ yum install koji-web mod_ssl
</pre>

Configuration:
=/etc/httpd/conf.d/kojiweb.conf= is attached.

---+++ Kojid

Installing:
<pre>
root@koji-hub$ yum install koji-builder
</pre>
Note that we use a patched koji-builder, so be sure to install what's in the OSG repository. (The patch is not likely to be accepted upstream).

=/etc/kojid/kojid.conf= is attached.

---++++ SSL certs

The following files should be in the =/etc/pki/tls= tree:

   $ =/etc/pki/tls/private/doegrids_hostkey.key=: the host key from doegrids
   $ =/etc/pki/tls/private/kojiweb.pem=: doegrids_hostcert.crt catted together with doegrids_hostkey.key (public key first)
   $ =/etc/pki/tls/private/kojira.key=: kojira's private key from doegrids
   $ =/etc/pki/tls/private/kojira.pem=: kojira.crt catted together with kojira.key (public key first)
   $ =/etc/pki/tls/cert.pem=: symlink to certs/ca-bundle.crt
   $ =/etc/pki/tls/certs/ca-bundle.crt=: all certs available on the system; the !ESNet and !DOEgrids certs should be in here
   $ =/etc/pki/tls/certs/kojira.crt=: kojira's cert
   $ =/etc/pki/tls/certs/doegrids_hostcert.crt=: the host cert from doegrids
   $ =/etc/pki/tls/certs/doe-chain.crt=: the !ESNet root cert and !DOEgrids CA cert catted together

---++++ Adding koji-builder host to database
<pre>
kojiadmin@koji-hub$ koji add-host-to-channel koji-hub.batlab.org createrepo
</pre>

<pre>
koji=># update host set capacity = 4 where name = 'koji-hub.batlab.org';
</pre>

---++++ Start kojid
<pre>
root@koji-hub$ /sbin/service kojid start
</pre>
Check =/var/log/kojid.log= to make sure everything started up.

---+++ Kojira

Installing:
<pre>
root@koji-hub$ yum install koji-utils
</pre>
=/etc/kojira/kojira.conf= is attached.

Kojira also needs a user
<pre>
kojiadmin@koji-hub$ koji add-user kojira
kojiadmin@koji-hub$ koji grant-permission repo kojira
</pre>

Start it up
<pre>
root@koji-hub$ /sbin/service kojira start
</pre>

---++ Tags

---+++ dist-el[56]-build
These tags contains 3 external repos each:
   $ dist-el[56]-epel: A local mirror of the EPEL 5/6 repositories. (url: http://mirror.batlab.org/pub/linux/epel/[56]/$arch/)
   $ dist-el[56]-centos: A local mirror of the base CentOS repositories. (url: http://mirror.batlab.org/pub/linux/centos/[56]/os/$arch/)
   $ dist-el[56]-centos-updates: A local mirror of the CentOS Updates repositories. (url: http://mirror.batlab.org/pub/linux/centos/[56]/updates/$arch/)
We don't put any packages in them (except for ones required for building, like =buildsys-macros= and =fetch-sources=), and generally don't build from them directly, but use tag inheritance.

---+++ el[56]-osg
These tags contains all the _package names_ that we put into OSG; =koji add-pkg= adds to them. (osg-build does this automatically).
The tags do not actually contain any builds (i.e. packages with version-release).
The el[56]-osg-development, testing and release tags all inherit from them (technically release does, then testing inherits from release, then development from testing).
The purpose of this is to make promoting builds easier, since it keeps you from having to run =add-pkg= when you promote.

---+++ el[56]-osg-build
These are used to initialize the buildroot of most packages we make.
They inherit from dist-el[56]-build and el[56]-osg-development.
They also contain the jpackage[56]-bin external repos (url: http://mirror.batlab.org/pub/jpackage/[56]/) since we use those for some builds.

---+++ el[56]-osg-development
These contain the builds in the osg-minefield repos.
The osg-development repos hosted by the GOC take packages from this, so osg-development is pretty much osg-minefield after a 30-min delay.
They inherit from el[56]-osg-testing, and also from the more specialized branches like el5-gt52-experimental.
Builds that are made using the el[56]-osg targets (default if you're using osg-build) get their buildroot from el[56]-osg-build and put their results in el[56]-osg-development.

---+++ el[56]-osg-testing
These contain the builds in the osg-testing repo.
They inherit from el[56]-osg-release.

---+++ el[56]-osg-prerelease
These are a staging are for packages that are going to be immediately released.
They are empty except during the release process.

---+++ el[56]-osg-release
These contain the builds in the osg-release repo.
They should be locked except for when moving packages from the osg-prerelease repos to the osg-release repos.
They inherit from el[56]-osg.

---+++ el5-gt52-experimental and el5-gt52-experimental-build
They were made for Brian Bockelman's work on Globus 5.2 packages.
Since they were a large update composed of multiple packages, having the packages live in a separate tag was necessary to avoid breaking the development repo for other people.
The el5-gt52-experimental target built from el5-gt52-experimental-build to el5-gt52-experimental.
These tags are no longer in use, and the el5-gt52-experimental target was removed.

---+++ el5-gt52b and el5-gt52b-build
These tags were made for Matyas Selmeci's work on some Globus 5.2 updates.
The reason separate tags were used instead of el5-gt52-experimental is because we wanted to use Globus's binary RPM repositories for bootstrapping (so we wouldn't have to build all of the packages in dependency order).
This was accomplished by adding the gt52b-external external repo (url: http://bamboo.globus.org/browse/GT512-RPMCENTOS5-7/artifact/repo/centos/5/$arch/) to the el5-gt52b-build tag.
Note that we had to inherit from dist-el5-build instead of el5-osg-build because builds inherited from a local tag trump builds from an external repository, regardless of version or priority, and so our old Globus builds would get picked over what was in gt52b-exeternal.
The el5-gt52b target builds from el5-gt52b-build to el5-gt52b.

When the updates were finished, we had el5-osg-development inherit from el5-gt52b.
However, this turned out not to be enough, since Koji preferred builds in the tag to builds that were inherited, regardless of version or priority.
So all of the updated Globus builds had to be retagged.

For the second set of Globus updates, all the packages were untagged from el5-gt52b and the gt52b-external repo had the URL changed to http://bamboo.globus.org/browse/GT512-RPMCENTOS5-110/artifact/repo/centos/5/$arch/

The gt52b-external repo no longer exists. The globus external repos are now el[56]-gt52-external and point to http://www.globus.org/ftppub/gt5/5.2/5.2.0/packages/rpm/centos/[56]/$arch/

---+++ el[56]-osg-contrib
These contain the builds in the osg-contrib repos.

---+++ el5-pegasus and el5-pegasus-build
These tags were made for Mats Rynge of the Pegasus project to build into.

---+++ el5-lcmaps-upgrade and el5-lcmaps-upgrade-build
These tags were made for Dave Dykstra to build into.

---+++ kojira-fake
This tag and target were created because kojira does not automatically regenerate a repo unless it's the source of another repo.
Without this, el[56]-osg-development wouldn't get regenerated automatically after a build.

---+++ el[56]-osg-release-build
These tags inherit from el[56]-osg-release and dist-el[56]-build.
This results in repositories that we can completely initialize a system with, including the OS packages, without need for yum priorities.
They were created for Tony Tiradani.


---+++ el[56]-osg-upcoming-{build,development,testing,prerelease,release}
These contain the packages for the "osg-upcoming" repositories.
They are set up in a similar way to the =el[56]-osg-{build,development,testing,prerelease,release}= tags above, and have the same purpose.



---++ Koji permissions and policy

These are some notes I wrote on koji acls/policy doing some source diving in the koji code.

EDIT: I later found some documentation at [[http://fedoraproject.org/wiki/Koji/Policies]]. Go read it, that page has better examples.

---+++ Default policies (defined in =hub/kojixmlrpc.py=)
<pre>
build_from_srpm =
       has_perm admin :: allow
       all :: deny
build_from_repo_id =
       has_perm admin :: allow
       all :: deny
channel =
       has req_channel :: req
       is_child_task :: parent
       all :: use default
package_list =
       has_perm admin :: allow
       all :: deny
vm =
       has_perm admin win-admin :: allow
       all :: deny
</pre>

If =MissingPolicyOk= is true (default), then policies that do not exist default to "allow".

---+++ Policy syntax

Policies are set in the =[policy]= section of =/etc/koji-hub/hub.conf=

Each policy definition starts with

<pre>policy_name =</pre>

The rest of the definition is indented.
The lines in the policy definition have the following format:

Simple tests:
<pre>
test [params] [&& test [params] ...] :: action-if-true
test [params] [&& test [params] ...] !! action-if-false
</pre>
Complex tests:
<pre>
test [params [&& ...]] :: {
   test [params [&& ...]] :: action
   test [params [&& ...]] :: {
      ...
      }
}
</pre>

The following generic tests are defined in =koji/policy.py=:
   $ =true= / =all= : always true
   $ =false= / =none= : always false
   $ =has FIELD= : true if policy data contains a field called FIELD
   $ =bool FIELD= : true if FIELD is true
   $ =match FIELD PATTERN1 [PATTERN2 ...]= : true if FIELD matches any of the patterns (globs)
   $ =compare FIELD OP NUMBER= : compare FIELD against a number. OP can be <code>&lt;, &gt;, &lt;=, &gt;=, =, !=</code>

the following koji-specific tests are defined in =hub/kojihub.py=:
   $ =buildtag PATTERN1 [PATTERN2 ...]= : true if the build tag of a build matches a pattern
   $ =fromtag PATTERN1 [PATTERN2 ...]= : true if the tag we're moving a package from matches a pattern
   $ =has_perm PATTERN1 [PATTERN2 ...]= : true if user has any matching permission
   $ =hastag TAG= : true if the build has the tag TAG
   $ =imported= : true if the build was imported
   $ =is_build_owner= : true if the user doing this task owns the build
   $ =is_child_task= : true if the task is a child of some other task
   $ =is_new_package= : true if the package being looked at is new (i.e. doesn't have an 'id' yet)
   $ =method PATTERN1 [PATTERN2 ...]= : true if the method matches a pattern
   $ =operation PATTERN1 [PATTERN2 ...]= : true if current operation matches any of the patterns
   $ =package PATTERN1 [PATTERN2 ...]= : true if the package name matches any of the patterns
   $ =policy POLICY= : true if the named policy is true
   $ =skip_tag= : true if the skip_tag option is true
   $ =source PATTERN1 [PATTERN2 ...]= : true if source matches patterns
   $ =tag PATTERN1 [PATTERN2 ...]= : true if the tag name matches any of the patterns
   $ =user PATTERN1 [PATTERN2 ...]= : true if username matches a pattern
   $ =user_in_group PATTERN1 [PATTERN2 ...]= : true if the user is in any matching group
   $ =vm_name PATTERN1 [PATTERN2 ...]= : true if vm name matches a pattern

The actions are:
   $ =allow= : allow the action
   $ =deny= : deny the action
   $ =req= : ?
   $ =parent= : ?
   $ =use default= : ?

---+++ Default permissions

These are the permissions that people can be given in koji:
   * =admin=
   * =build=
   * =repo=
   * =livecd=
   * =maven-import=
   * =win-import=
   * =win-admin=
   * =appliance=

As far as I can tell, additional permissions have to be manually added into the 'permissions' table in postgres.

The following permissions are checked by name in the koji command-line utility (i.e. policies are not used):

   $ =admin= : =add-group=, =add-tag=, =add-target=, =clone-tag=, =edit-target=, =remove-tag=, =remove-target=, =wrapper-rpm=
   $ =maven-import= : =import-archive= with the =--type=maven= option
   $ =win-import= : =import-archive= with the =--type=win= option

I haven't found out where some of the other permissions are used.

---+++ Adding permissions

Go into postgres and run
<pre>
insert into permissions values ((select nextval('permissions_id_seq')), "NAME");
</pre>
where NAME is the name of the permission you want to create.
You may now grant people that permission and use that name in policies.


---+++ Where policies are used and what policy data is passed on:

---++++!! build_from_srpm

*source:*
   $ =builder/kojid:BuildTask.handler= : used when source url points to an SRPM (as opposed to an scm) and the build is not a scratch build.

*policy data:*
   $ =user_id= : the owner of the task
   $ =source= : the url of the source file
   $ =task_id= : the id of the task
   $ =build_tag= : the id of the build tag
   $ =skip_tag= : true if we're not tagging this build (=--scratch= or =--skip-tag= passed on the command line)
   $ =target= : the build target (only if we have one?)
   $ =tag= : the destination tag (only if =skip_tag= is false)

---++++!! build_from_repo_id

*source:*
   $ =builder/kojid:BuildTask.handler= : used when the =--repo-id= option is passed to =koji build=

*policy data:*
same as =build_from_srpm=

---++++!! package_list

*source:*
   $ =hub/kojihub.py:pkglist_add= : =add-pkg=, =block-pkg=, =set-pkg-arches=, =set-pkg-owner= commands

*policy data:*
   $ =action= : 'add', 'update', 'block' depending on what is being done
   $ =force= : true if =--force= is passed on the command line
   $ =package= : package info (the id I think?)
   $ =tag= : the id of the tag we're trying to add the package to/package is in

*source:*
   $ =hub/kojihub.py:pkglist_remove= : used internally by the =koji clone-tag= command?

*policy data:*
same as above, except =action= is 'remove'

*source:*
   $ =hub/kojihub.py:pkglist_unblock= : =unblock-pkg= command

*policy data:*
same as above, except =action= is 'unblock'

---++++!! tag

NOTE: !RootExports is the class containing functions exported via XMLRPC.
In general, each function corresponds to a koji task.

*source:*
   $ =hub/kojihub.py:RootExports.tagBuild= : tagging builds

*policy data:*
   $ =build= : the id of the build
   $ =fromtag= : the id of the tag we're moving the build from, if there is one
   $ =operation= : 'tag' or 'move'
   $ =tag= : the id of the tag

*source:*
   $ =hub/kojihub.py:RootExports.untagBuild= : untagging builds

*policy data:*
same as above, except =operation= is 'untag', and =tag= is None

*source:*
   $ =hub/kojihub.py:RootExports.moveAllBuilds= : moving all builds of a package from tag1 to tag2

*policy data:*
same as for =tagBuild=, except =operation= is 'move'.
The policy is checked once for each build being moved.

*source:*
   $ =hub/kojihub.py:HostExports.tagBuild= : tagging builds ("host version" ?)

*policy data:*
same as for =tagBuild=, plus =user_id=

---++++!! vm

*source:*
   $ =hub/kojihub.py:RootExports.winBuild= : windows builds in a vm (=win-build= command)

*policy data:*
   $ =tag= : the destination tag
   $ =vm_name= : the name of the vm



---+++ Examples

---++++!! Let people with the "build" permission also add packages and build SRPMs

<pre>
package_list = 
    has_perm admin :: allow
    has_perm build && match action add update :: allow
    all :: deny

build_from_srpm =
    has_perm admin build :: allow
    all :: deny
</pre>


---++++!! Promotion policy for different teams

   * Software team members can tag any package as testing/release.
   * Operations team members can tag vo-clients as testing/release.
   * Security team members can tag CA packages as testing/release.

<pre>
promotion =
   has_perm software-team :: allow
   has_perm operations-team && package vo-client :: allow
   has_perm security-team && package *-ca-certs* :: allow
   all :: deny

tag =
    has_perm admin :: allow
    operation tag :: {
        tag *testing *release* && policy promotion :: allow
        tag *testing *release* !! allow
    }
    operation untag :: {
        fromtag *testing *release* && policy promotion :: allow
        fromtag *testing *release* !! allow
    }
    operation move :: {
        tag *testing *release* && policy promotion :: allow
        fromtag *testing *release* && policy promotion :: allow
        tag *testing *release* !! {
            fromtag *testing *release* !! allow
        }
    }
    all :: deny

</pre>


---++ Digicert cert switch

The following steps need to be taken for someone replacing their DOEGrids cert with a !DigiCert cert:
   * admin should log in to the database and update the =users= table with their new CN
   * user should import their new cert into their browser and rerun =osg-koji setup= to fix their =client.crt=
   * if the user gets a python stack trace when connecting to koji-hub via their browser, they should clear their cookies


<!-- vim:ft=twiki:tw=0
-->

   *  Set HTTP_EQUIV_ON_VIEW = <meta name="robots" content="noindex,nofollow">

%META:FILEATTACHMENT{name="hub.conf" attachment="hub.conf" attr="" comment="/etc/koji-hub/hub.conf" date="1320879923" path="hub.conf" size="2759" stream="hub.conf" tmpFilename="/usr/tmp/CGItemp39326" user="MatyasSelmeci" version="1"}%
%META:FILEATTACHMENT{name="koji.conf" attachment="koji.conf" attr="" comment="/etc/koji.conf" date="1320879977" path="koji.conf" size="592" stream="koji.conf" tmpFilename="/usr/tmp/CGItemp39299" user="MatyasSelmeci" version="1"}%
%META:FILEATTACHMENT{name="kojid.conf" attachment="kojid.conf" attr="" comment="/etc/kojid/kojid.conf" date="1320880014" path="kojid.conf" size="2027" stream="kojid.conf" tmpFilename="/usr/tmp/CGItemp39281" user="MatyasSelmeci" version="1"}%
%META:FILEATTACHMENT{name="kojira.conf" attachment="kojira.conf" attr="" comment="/etc/kojira/kojira.conf" date="1320880036" path="kojira.conf" size="806" stream="kojira.conf" tmpFilename="/usr/tmp/CGItemp39188" user="MatyasSelmeci" version="1"}%
%META:FILEATTACHMENT{name="kojiweb.conf" attachment="kojiweb.conf" attr="" comment="/etc/httpd/conf.d/kojiweb.conf" date="1320880056" path="kojiweb.conf" size="2136" stream="kojiweb.conf" tmpFilename="/usr/tmp/CGItemp39371" user="MatyasSelmeci" version="1"}%
