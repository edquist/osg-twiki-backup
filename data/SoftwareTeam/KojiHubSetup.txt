%META:TOPICINFO{author="MatyasSelmeci" date="1475702226" format="1.1" reprev="1.26" version="1.26"}%
%META:TOPICPARENT{name="InternalDocs"}%

---+!! Notes on Koji-Hub Setup

%TOC%
[[https://docs.pagure.org/koji/][Current Koji documentation]] may be of use,
though as of 2016-10-05, it is for a newer version of Koji than we host.

---++ Tags

---+++ Base tags

---++++ dist-el[567]-build
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=dist-el%3F-build][Tag list]]

These tags contains 3 external repos each, hosted locally under http://mirror.batlab.org/pub/linux:
   $ =dist-el[567]-epel=: A mirror of the EPEL 5/6/7 repositories
   $ =dist-el[567]-centos*=: A mirror of the base !CentOS repositories
   $ =dist-el[567]-centos-updates=: A mirror of the !CentOS Updates repositories

We don't put any packages in them (except for ones required for building, like
=buildsys-macros= and =fetch-sources=), and generally don't build from them
directly, but use tag inheritance.

---++++ osg-el[567]
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-el%3F][Tag list]]

These tags contains all the _package names_ that we put into OSG; =koji
add-pkg= adds to them. =osg-build= does this automatically.
The tags do not actually contain any builds (i.e. packages with version-release).
All the other =osg-*= tags inherit from these (either directly or indirectly).
The purpose of this is to make promoting builds easier, since it keeps you from
having to run =add-pkg= when you promote.

---++++ kojira-fake
[[https://koji.chtc.wisc.edu/koji/taginfo?tagID=10][Tag]]

This tag (and targets building to it) were created because =kojira= does not
automatically regenerate a repo unless it's the source of another repo.
Without this, the osg-development tags (for example) wouldn't get regenerated
automatically after a build.

---+++ Main OSG tags

---++++ osg-3.[123]-el[567]-build
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-3.%3F-el%3F-build][Tag list]]

These are used to initialize the buildroot of most packages we make.
They inherit from their respective dist-build and osg-development tags.
The EL5 and EL6 tags also contain the =jpackage[56]-bin= external repos under
http://mirror.batlab.org/pub/jpackage/ since we use those for some builds.

*Note* that the JPackage external repos must have a better priority than the OS
and EPEL external repos to avoid build problems for Java packages.

---++++ osg-upcoming-el[567]-build
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-upcoming-el%3F-build][Tag list]]

These tags are special in that they also need to inherit from the
latest mainline osg-build repo (that is, if trunk is 3.3, then
=osg-upcoming-el6-build= should inherit from =osg-3.3-el6-build=).

---++++ osg-*-el[567]-development
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-*-el%3F-development][Tag list]]

These contain the builds in the =osg-minefield= repos. The =osg-development=
repos hosted by the GOC take packages from this, so =osg-development= is pretty
much =osg-minefield= after a 1-hour delay.  They inherit from osg-testing (and
occasionally from the more specialized branches like el5-gt52-experimental,
though that is now discouraged).  Builds that are made using the =osg-el[567]=
targets (default if you're using =osg-build=) get their buildroots from the
newest osg-build tags and put their results in the newest osg-development tags.

---++++ osg-*-el[567]-testing
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-*-el%3F-testing][Tag list]]

These contain the builds in the =osg-testing= repos.
They inherit from the respective =osg-release= tags.

---++++ osg-*-el[567]-prerelease
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-*-el%3F-prerelease][Tag list]]

These are a staging are for packages that we are _certain_ will be released in
the next release.  They are otherwise empty.  These are used for testing and
for building the tarball clients.

---++++ osg-*-el[567]-release
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-*-el%3F-release][Tag list]]

These contain the builds in the =osg-release= repos.  They should be locked
except for when moving packages from the =osg-prerelease= repos to the
=osg-release= repos.  They inherit from =osg-el[567]=.

---++++ osg-3.[123]-el[567]-release-build
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-3.%3F-el%3F-release-build][Tag list]]

These inherit the =dist-*-build= tags and the =osg-*-release= tags, putting a
base OS along with OSG packages in a single repo, without the need for yum
priorities. It is used, along with =osg-*-prerelease=, for building the tarball
client. Note that there are no =release-build= repos for upcoming.

---++++ osg-3.[123]-el[567]-contrib
[[https://koji.chtc.wisc.edu/koji/search?match=glob&type=tag&terms=osg-*-contrib][Tag list]]

These contain the builds in the =osg-contrib= repos.
Note that there are no =osg-upcoming-contrib= repos.

---+++ Specialized tags

These tags are generally made for long projects which may be in an unstable state and should not interfere with the main development of OSG packages.
An example is a full-scale Globus update, where many packages have to be built, using each other as dependencies, and the whole system is not considered usable until all the updates are done.
They should generally be removed after the work is done.

---++++ el5-pegasus and el5-pegasus-build
These tags were made for Mats Rynge of the Pegasus project to build into.

---++++ el5-lcmaps-upgrade and el5-lcmaps-upgrade-build
These tags were made for Dave Dykstra to build into.

---++++ el[56]-condor-unified-development and el[56]-condor-unified-development-build
These tags were made for Carl Edquist's work on the unified !HTCondor RPM.

---+++ Collaborator Tags

---++++ hcc-*
For use by the Holland Computing Center at UNL.

---++++ uscms-*
For use by US CMS.

---++ Tweaks
These are local config changes we needed to make to get certain features to
work.

---+++ Using proxy certs

=/etc/sysconfig/httpd= needed to be changed to include the following lines:
<verbatim>
OPENSSL_ALLOW_PROXY=1
OPENSSL_ALLOW_PROXY_CERTS=1

export OPENSSL_ALLOW_PROXY
export OPENSSL_ALLOW_PROXY_CERTS
</verbatim>

The user must use RFC proxies and must have a version of the koji client of 1.6.0-6.osg or newer.

---+++ Git builds

On EL5 only, we needed to run the following to allow Git builds from github:
=git config --system http.sslVerify false=
This is to avoid server cert verification failures against github.com

---++ Procedures

---+++ User cert switch

The following steps need to be taken for someone replacing their user cert:
   * An admin should log in to the database and update the =users= table with their new CN.
   * The user should import their new cert into their browser and rerun =osg-koji setup= to fix their =client.crt=.
   * If the user gets a Python stack trace when connecting to =koji.chtc.wisc.edu= via their browser, they should clear their cookies.

---+++ Adding CAs for user authentication

Since our Koji instance uses certs for auth, we specify which CAs we trust for signing user certs.
The CA certs for user auth are concatenated together in the file =/etc/pki/tls/certs/allowed-cas-for-users.crt=.
A comment line before the "BEGIN CERTIFICATE" line is used to name the file the cert comes from.
We take the certs from the =osg-ca-certs= repository.

For example, when I added the CERN CAs to the bundle, I installed osg-ca-certs
onto a Fermicloud VM, copied =/etc/grid-security/certificates/CERN-TCA.pem=
(which signed user certs) and =CERN-Root.pem= (which signed =CERN-TCA.pem=) to
=koji.chtc.wisc.edu=, catted them to the end of the =allowed-cas-for-users.crt= file, edited
the file to add comments before the certs, and restarted =httpd=.

<!-- vim:ft=twiki:tw=0

   *  Set HTTP_EQUIV_ON_VIEW = <meta name="robots" content="noindex,nofollow">
-->
