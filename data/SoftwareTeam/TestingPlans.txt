%META:TOPICINFO{author="TimCartwright" date="1375374053" format="1.1" reprev="1.9" version="1.9"}%
%META:TOPICPARENT{name="TestingHome"}%
<!--
   * Set PENDING = <div style="color: black; background-color: yellow; padding-left: 8px; padding-right: 8px;">Waiting</div>
   * Set ON_TRACK = <span style="color: white; background-color: #3366FF; padding-left: 8px; padding-right: 8px;">On Track</div>
   * Set BEHIND = <div style="background-color: #CCFF00;">&nbsp;Behind&nbsp;</div>
   * Set AT_RISK = <div style="background-color: #CC0000; color:white">&nbsp;At Risk&nbsp;</div>
   * Set SKIPPED = <div style="background-color: #CC0000; color:white">&nbsp;Skipped&nbsp;</div>
   * Set COMPLETE = <div style="color: white; background-color: black; padding-left: 8px; padding-right: 8px;">Done</div>
-->

---+ Plans for Development of Automated Testing

NOTE: Effort estimates are actual effort, not calendar time, and are given by order-of-magnitude only at this time. See below the table for notes on particular items.

---++ New WBS (8/2013)

%TABLE{ sort="off" valign="top" }%
| *Ver* | *Milestone* | *State* | *Owner* | *Effort* | *Est. Start* | *Est. Finish* | *Act. Finish* | *Notes* |
| 1.2.x | Add initial phase of Gratia tests | %ON_TRACK% | !BrianL | day | | 2013-08-13 | | |
| 1.3 | Allow osg-test to accept a config file | | Brian |  week  | 2013-07-30 | 2013-08-23 | | |
| 2.0 | Add sequence metadata and randomized topological sort algorithm | | Brian | month | | 2013-11 | | |
| 2.1 | State based skipping at the modular level | | Brian |  month  | | 2014-02 | | |

Notes:

   * With the sequencing changes set for 2.0, we'll also want to rename the tests to get rid of their reliance on the numbering system.

   * The notes from below still apply!

---++ Old WBS (2012)

%TABLE{ sort="off" valign="top" }%
| # | *Milestone* | *State* | *Owner* | *Effort* | *Start* | *Target Finish* | *Actual Finish* | *Notes* |
| 1.1 | Separate support library from tests | 0.0.11 | Tim |  week  |  2012-01-12  | |  2012-01-20  | |
| 1.2 | Add global state to library; separate test files | 0.0.11 | Tim |  day  |  2012-01-20  | |  2012-01-24  | |
| 1.3 | Add a few useful functions to support library | 0.0.11 | Tim |  week  |  2012-01-25  | |  2012-02-02  | |
| 1.4 | Release osg-test with new features & gLExec | 0.0.11 | Tim |  hour  |  2012-02-14  | |  2012-02-20  | |
| 1.5 | Test Fest | | Tim |  day  | | | | Doug, Maxim, Neha, Scot |
| 2.1 | Replace nose with simplest possible driver | | Tim |  week  | | | | |
| 2.2 | Add sequence metadata and ordering algorithm | | Tim |  week  | | | | |
| 2.3 | Add state requirements and refactor runtime algorithm | | Tim |  week  | | | | |
| 2.4 | Expand possible test outcomes and reporting | | Tim |  week  | | | | |

Notes on tasks:

   * *Separate support library from tests.* Originally, all modules (i.e., Python files) that supported the =osg-test= script were in a single module directory (=osgtest=). The goal of this change is to create two subdirectories of =osgtest=, one for the support library (in =library=) and one for the actual test files (in =tests=). As a result of the filesystem reorganization, all references to the support library were changed.

   * *Add global state to library.* Right now, each test module (i.e., Python file) tracks its own state, as far as setting up services and so forth. Also, the library itself has some shared state, implemented in a very ad hoc way. The goal of this task is to design and implement a simple, consistent, central mechanism for all global state, so that each test module could be smaller and a bit simpler to understand and sequence. The task also includes refactoring existing tests to use the new global state, possibly breaking up some of the longer test files (VOMS!) in the process.

   * *Add state requirements and refactor runtime algorithm.* Still under design. Each test (or small set of tests) may have two different kinds of requirements: ones that impose a sequence on the tests, and then "state requirements" that describe what state the system must be in for the tests to be run (as opposed to being skipped). This task will include brief analysis of what is needed, a bit of design, and then, if still needed, implementation.
