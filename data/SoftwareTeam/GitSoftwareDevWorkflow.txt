%META:TOPICINFO{author="MatyasSelmeci" date="1459900074" format="1.1" version="1.2"}%
%META:TOPICPARENT{name="InternalDocs"}%
---+ Git software development workflow


This document describes the development workflow for OSG software packages kept
in !GitHub.


---++ Git and !GitHub basics


If you are unfamiliar with Git and !GitHub, the !GitHub website has a good
series of tutorials at https://help.github.com/categories/bootcamp/


---++ Contribution workflow


We use the standard !GitHub [[https://help.github.com/articles/using-pull-requests/][pull request]] workflow for making contributions to OSG software:

   1. Using the !GitHub web interface, <!-- or curl if you're Carl -->fork the repo you wish to contribute to.
   1. Make a clone of your forked repo on your local machine.
   1. Create a branch to hold changes that are related to the issue you are
      working on. Give the branch a name that will remind you of its purpose,
      such as =sw2345-pathchange=.
   1. Make your commits to this branch, then push the branch to your repo on
      !GitHub.
   1. Select your branch in the !GitHub web interface, then create a "pull
      request" against the original repo. Add a good description of your change
      into the message for the pull request. Enter a JIRA ticket number in the
      message to automatically link the pull request to the JIRA ticket.
   1. Wait for your pull request to be reviewed by a software team member.
      * If the team member accepts your changes, they will merge your pull
        request, and your changes will be incorporated upstream. You may then
        delete the branch you created your pull request from.
      * If your changes are rejected, then you may make additional changes to
        the branch that your pull request is for. Once you push the changes
        from your local repo to your !GitHub repo, they will automatically be
        added to the pull request.


---++ Release workflow

A release of a software is created from your local clone of a software project.
Before you release, you need to make sure your local clone is in sync with the
AFS backup of the !GitHub repo at UW. This requires a UW CS login.

   1. If you haven't already, add the UW repo as a "remote" to your repo:<pre>
      git remote add uw <em>USERNAME</em>@<em>MACHINE</em>:/p/condor/workspaces/vdt/git/repo/<em>PROJECT</em>.git</pre>
      (where <em>USERNAME</em> is your UW CS username (e.g. "matyas"),
      <em>MACHINE</em> is a machine you have access to (e.g.
      "library.cs.wisc.edu"), and <em>PROJECT</em> is the name of the project
      you are releasing (e.g. "osg-configure"))
   1. Fetch changes from the UW repo:<pre>
      git fetch uw</pre>
   1. Compare your branch you are releasing from (probably =master=) to its copy in the UW repo:<pre>
      git checkout master; git diff uw/master</pre>
      There should be no differences.

Once this is done, release the software as you usually do. This process varies
from one project to another, but often it involves running =make upstream= or
similar. Check your project's =README= file for instructions.