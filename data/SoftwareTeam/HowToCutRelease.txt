%META:TOPICINFO{author="BrianLin" date="1371055684" format="1.1" version="1.49"}%
%META:TOPICPARENT{name="InternalDocs"}%
<!--
   * Set VERSION = %URLPARAM{"version"}%
   * Set SHORTVERSION = %CALC{"$SUBSTITUTE(%VERSION%,.,,,)"}%
-->

---+ How to Cut a Release

It's clear that a lot of things can and should be scripts to simplify the process. Right now, it documents the process as we think it should be, and we can script it later when we know the process is correct.  Due to the length of time that this process takes, you may want to do the release over two days to allow for errors to be corrected and because some of the koji commands take a long time to run when a large number of rpms are being released.

This document doesn't discuss the policy for deciding what goes into a release. [[SoftwareTeam.ReleasePolicy][The release policy is discussed elsewhere]].

%RED% *Note:*  There are scripts in /p/vdt/workspace/bin (on UW's AFS) for several of the steps here. If you update this page, be sure to update those scripts as well.%ENDCOLOR%
%RED% *Note:* Many of these scripts now take a '-u' flag to run the same commands on the appropriate upcoming packages/tags/repos/etc.

---++ Step 1: Pick the version number

This page will help you get the various commands exactly right. To do this, enter the exact version number (such as %RED%3.0.5%ENDCOLOR%) and click submit. If you do not do this, the commands below will be missing essential text.

<form action="https://www.opensciencegrid.org/bin/view/SoftwareTeam/HowToCutRelease">
Version: <input type="text" name="version" size="10" value="%URLPARAM{"version"}%"/>
<input type="submit"/>
</form>

---++ Step 2: Create two clean VMs per distro version

Make two VMs for each distro version, probably in !FermiCloud, so you can do testing. One of them will be used to test a fresh installation on a clean machine (Step 5 below), while the other will be used to test an update from the current release (Step 6 below).

Note that this should be done for each distribution, so for sl5/sl6 fresh/upgrade, you will have a total of 4 VMs.

---++ Step 3: Update the osg-version RPM

Edit the osg-version RPM's spec file to update the version number to %VERSION%. Build it in koji:

<pre class="screen">
osg-build koji osg-version
</pre>

When it is finished building, push it to testing:
<pre class="screen">
for x in el5 el6; do
   osg-koji tag-pkg $x-osg-testing osg-version-%VERSION%-1.osg.$x
done
</pre>

---++ Step 4: Populate the osg-prerelease repository

Make sure that the pre-release is empty:
<pre class="screen">
for x in el5 el6; do
   osg-koji list-tagged --quiet $x-osg-{,upcoming-}prerelease
done
</pre>
should print nothing.

Populate the pre-release. This requires you to understand which packages should be in the release. This is a question of [[ReleasePolicy][policy]]. If you do not know which packages should be in the release, talk to the OSG Release Coordinator. 

<pre class="screen">
for x in el5 el6; do
   koji-tag-diff $x-osg-{,upcoming-}testing $x-osg-{,upcoming-}release > {,upcoming-}pkgs-to-release-$x
done
</pre>
%RED%Edit%ENDCOLOR% pkgs-to-release-* to remove packages not intended for this release.
%RED%Please verify that the =osg-version= RPM is in your set of packages for the release!%ENDCOLOR%
%RED%Also verify that if there is a new version of the =osg-tested-internal= RPM, then it is included in the release as well!%ENDCOLOR%
<pre class="screen">
for x in el5 el6; do
   xargs -a {,upcoming-}pkgs-to-release-$x osg-koji tag-pkg $x-osg-{,upcoming-}prerelease
   osg-koji regen-repo $x-osg-{,upcoming-}prerelease
done
</pre>

---++ Step 5: Test a fresh install in VM #1 

You will do a fresh installation.  Note: you should do this for each distribution.
The =osg-test= command below will enable the =osg-prerelease= repository, and the =osg= repository will already be enabled.
So packages will be taken from the =osg= repository unless there is a newer version in the =osg-prerelease= repository.
Note, due to some oddities in the tests, you'll need to be in a directory that the vdttest user has access to before running osg-test.
=/tmp= should suffice for this.
The bestman tests will break if you do not do this.

<pre class="screen">
wget --quiet http://vdt.cs.wisc.edu/native/bootstrap-osg-test
chmod 0755 bootstrap-osg-test
./bootstrap-osg-test testing
cd /tmp
osg-test -var osg-{,upcoming-}prerelease -i osg-tested-internal
</pre>

All tests should pass. If any tests fail, discuss with the OSG Release Coordinator.

---++ Step 6: Test update: in VM #2 

Now you will do an installation just from the =osg= repository, then update it from the =osg-prerelease= repository.
Note: you should do this for each distribution.
This is an important double-check, because we want to know that updates work smoothly.
Note that the =osg-test= command skips the installation.
Note, due to some oddities in the tests, you'll need to be in a directory that the vdttest user has access to before running osg-test.
=/tmp= should suffice for this.
The bestman tests will break if you do not do this.

<pre class="screen">
wget --quiet http://vdt.cs.wisc.edu/native/bootstrap-osg-test
chmod 0755 bootstrap-osg-test
./bootstrap-osg-test testing
cd /tmp
osg-test -va -i osg-tested-internal -g osg-{,upcoming-}prerelease
</pre>

All tests should pass. If any tests fail, discuss with the OSG Release Coordinator.

---++ Step 8: Create the client tarballs

Create the client tarballs using the scripts in software/tarball-client/trunk from our SVN.
Do this as root on an EL6 fermicloud machine.
<pre class="rootscreen">
mkdir -p /tmp/tarball-client
cd /tmp/tarball-client
svn export https://vdt.cs.wisc.edu/svn/software/tarball-client/trunk
trunk/make-client-tarball --prerelease --all
</pre>
You should get 8 tarballs, 20-45 megs each.
They should all have %VERSION% in the name.

---++ Step 9: Briefly test the client tarballs

As an *unprivileged user*, extract each tarball into a separate directory.
Make sure osg-post-install works. Make sure 'osgrun osg-version' works.

<pre class="screen">
for client in osg-client osg-wn-client; do
    for rhel in el5 el6; do
        for arch in i386 x86_64; do
            file=$client-$1-1.$rhel.$arch.tar.gz
            tar xvvf $file
            $client/osg/osg-post-install
            $client/osgrun osg-version
        done
    done
done
</pre>

If you have time, try some of the binaries, such as grid-proxy-init.

*NOTE:* We need to automate this and have it run on the proper architectures and version of RHEL.

---++ Step 10: Wait

Wait for clearance. The OSG Release Coordinator (in consultation with the Software Team and any testers) need to sign off on the update before it is released.  If you are releasing things over two days, this is a good place to stop for the day.

------

%RED% *NOTE:* For the second phase of the release, try to complete it earlier in the day rather than later. The GOC would like to send out the release announcement prior to 3 p.m. their time (Eastern time zone), which means that our procedure needs to be completed before then.%ENDCOLOR%

------

---++ Step 11: Push from pre-release to release:
<pre class="screen">
for x in el5 el6; do
   osg-koji edit-tag --unlock $x-osg-{,upcoming-}release
   osg-koji list-tagged --quiet $x-osg-{,upcoming-}prerelease | awk '{print $1}' > move-to-{,upcoming-}release-$x
   xargs --arg-file move-to-{,upcoming-}release-$x osg-koji move-pkg $x-osg-{,upcoming-}prerelease $x-osg-{,upcoming-}release
done
</pre>

---++ Step 12: Create a new repo for the new release.

Create a new repo just for this release. This will normally not be seen by users, but can be used by them if necessary. It can also be used by us for testing purposes.
Expect this step to take ten minutes or so.

<pre class="screen">
for x in el5 el6; do
   osg-koji clone-tag $x-osg-{,upcoming-}release $x-osg-{,upcoming-}release-%VERSION%
done
</pre>

---++ Step 13: Lock the repositories

Lock repositories so they can't be messed with. We use edit-tag instead of lock-tag because lock-tag doesn't seem to work.

<pre class="screen">
for x in {el5,el6}-osg-{,upcoming-}release{,-%VERSION%}; do
   osg-koji edit-tag --lock $x
done
</pre>

---++ Step 14: Regenerate the repositories

<pre class="screen">
for x in {el5,el6}-osg-{,upcoming-}release{,-%VERSION%}; do
   osg-koji regen-repo $x --nowait
done
</pre>

---++ Step 15: Write release notes

Come up with the following lists to copy and paste into the release notes twiki page:
   1. A list of the updated packages with links to the koji builds that produced them. (=release-note-packages-*=)
   1. An architecture-neutral (i.e. without =i386=, =x86_64=, etc. in the name) list of updated RPMs so that site administrators know the set of RPMs to "yum update" if they want to do a limited update. (=release-note-rpms-*=)
<pre class="screen">
for x in el5 el6; do
   awk '{ print "   * [[https://koji-hub.batlab.org/koji/search?match=glob&type=build&terms=" $1 "][" $1 "]]"}'  move-to-{,upcoming-}release-$x > {,upcoming}release-note-packages-$x 
   xargs --arg-file move-to-{,upcoming-}release-$x osg-koji buildinfo | fgrep "/mnt" | xargs -n 1 basename | perl -p -e "s/\.(noarch|src|i386|x86_64)\.rpm//" | sort -u > {,upcoming-}release-note-rpms-$x
done
</pre>
<!--
   1. Come up with a nice table of updated packages that you can copy and paste into the release notes twiki page. <pre class="screen">
awk '{ print "   * [[https://koji-hub.batlab.org/koji/search?match=glob&type=build&terms=" $1 "][" $1 "]]"}'  move-to-release-el5 > release-note-packages-el5
awk '{ print "   * [[https://koji-hub.batlab.org/koji/search?match=glob&type=build&terms=" $1 "][" $1 "]]"}'  move-to-release-el6 > release-note-packages-el6
</pre>
   1. Come up with the architecture-neutral (i.e. without _i386_, _x86_64, etc in the name) list of updated RPMs so that site administrators know the set of RPMs to "yum update" if they want to do a limited update: <pre class="screen">
xargs --arg-file move-to-release-el5 osg-koji buildinfo | fgrep "/mnt" | xargs -n 1 basename | perl -p -e "s/\.(noarch|src|i386|x86_64)\.rpm//" | sort -u > release-note-rpms-el5
xargs --arg-file move-to-release-el6 osg-koji buildinfo | fgrep "/mnt" | xargs -n 1 basename | perl -p -e "s/\.(noarch|src|i386|x86_64)\.rpm//" | sort -u > release-note-rpms-el6
</pre>
-->

Write [[Documentation.Release3.ReleaseNotes][release notes]]. Use the package lists and RPM lists you created in the previous step.

---++ Step 16: Update the info we track for the releases

Using the lists of updated packages, create a full list of packages in the new release and a full list of RPMs in the new release. Copy the lists to an archival directory on the UW's AFS. Change the user name and host name as appropriate. <pre class="screen">
ruser=%RED%roy%ENDCOLOR%
rmachine=%RED%library.cs.wisc.edu%ENDCOLOR%
</pre><pre class="screen">
for x in el5 el6; do
   cp move-to-{,upcoming-}release-$x %VERSION%-{,upcoming-}updated-$x.txt
   osg-koji list-tagged --quiet --latest $x-osg-{,upcoming-}release | awk '{print $1}' > %VERSION%-{,upcoming-}packages-$x.txt
   xargs --arg-file %VERSION%-{,upcoming-}packages-$x.txt osg-koji buildinfo | fgrep "/mnt" | xargs -n 1 basename | sort > %VERSION%-{,upcoming-}rpms-$x.txt
   if [ -d /p/vdt/public/html/release-info/ ]; then
      cp %VERSION%-{,upcoming-}updated-$x.txt %VERSION%-{,upcoming-}packages-$x.txt %VERSION%-{,upcoming-}rpms-$x.txt /p/vdt/public/html/release-info/
   else
      scp %VERSION%-{,upcoming-}updated-$x.txt %VERSION%-{,upcoming-}packages-$x.txt %VERSION%-{,upcoming-}rpms-$x.txt $ruser@$rmachine:/p/vdt/public/html/release-info/
   fi
done
</pre>
<!--
   1. Copy the list of updated packages. Change the user name and host name as appropriate. <pre class="screen">
# If not on a UW CS machine:
scp move-to-release-el5 %RED%roy@library.cs.wisc.edu%ENDCOLOR%:/p/vdt/public/html/release-info/%VERSION%-updated-el5.txt
scp move-to-release-el6 %RED%roy@library.cs.wisc.edu%ENDCOLOR%:/p/vdt/public/html/release-info/%VERSION%-updated-el6.txt
</pre><pre class="screen">
# If on a UW CS machine
cp move-to-release-el5 /p/vdt/public/html/release-info/%VERSION%-updated-el5.txt
cp move-to-release-el6 /p/vdt/public/html/release-info/%VERSION%-updated-el6.txt
</pre> 
   1. Find the full list of packages in the new release and copy the list. <pre class="screen">
koji list-tagged --quiet --latest el5-osg-release | awk '{print $1}' > new-packages-el5
koji list-tagged --quiet --latest el6-osg-release | awk '{print $1}' > new-packages-el6</pre><pre class="screen">
# If not on a UW CS machine:
scp new-packages-el5 %RED%roy@library.cs.wisc.edu%ENDCOLOR%:/p/vdt/public/html/release-info/%VERSION%-packages-el5.txt
scp new-packages-el6 %RED%roy@library.cs.wisc.edu%ENDCOLOR%:/p/vdt/public/html/release-info/%VERSION%-packages-el6.txt
</pre><pre class="screen">
# If on a UW CS machine
cp new-packages-el5 /p/vdt/public/html/release-info/%VERSION%-packages-el5.txt
cp new-packages-el6 /p/vdt/public/html/release-info/%VERSION%-packages-el6.txt
</pre> 
   1. Find the full list of new RPMs in the new release and copy the list. <pre class="screen">
xargs --arg-file new-packages-el5 koji buildinfo | fgrep "/mnt" | xargs -n 1 basename | sort > new-rpms-el5
xargs --arg-file new-packages-el6 koji buildinfo | fgrep "/mnt" | xargs -n 1 basename | sort > new-rpms-el6</pre><pre class="screen">
# If not on a UW CS machine:
scp new-rpms-el5 %RED%roy@library.cs.wisc.edu%ENDCOLOR%:/p/vdt/public/html/release-info/%VERSION%-rpms-el5.txt
scp new-rpms-el6 %RED%roy@library.cs.wisc.edu%ENDCOLOR%:/p/vdt/public/html/release-info/%VERSION%-rpms-el6.txt
</pre><pre class="screen">
# If on a UW CS machine
cp new-rpms-el5 /p/vdt/public/html/release-info/%VERSION%-rpms-el5.txt
cp new-rpms-el6 /p/vdt/public/html/release-info/%VERSION%-rpms-el6.txt
</pre>
-->

---++ Step 17: Upload the client tarballs

scp the tarballs (from step 8) to /p/vdt/public/html/tarball-client at CS.

Ask Mat or someone with privileges on the grid.iu.edu repo servers to upload the tarballs with the following procedure:

---+++ On a CS machine
<pre class="screen">
cd /p/vdt/public/html/tarball-client
ssh jump.grid.iu.edu mkdir %VERSION%/
scp *%VERSION%*gz jump.grid.iu.edu:%VERSION%/
</pre>

---+++ On jump.grid.iu.edu
<pre class="screen">
scp -r %VERSION% repo1:/tmp/
scp -r %VERSION% repo2:/tmp/
</pre>

---+++ On repo1/repo2 (as root)
You can ssh to repo1 and repo2 from jump.grid.iu.edu; you will need to do this procedure on both systems.
<pre class="screen">sudo su -</pre>
<pre class="rootscreen">
mv /tmp/%VERSION% /usr/local/repo/tarball-install/
rm /usr/local/repo/tarball-install/*latest*
/root/mk-sims.sh
ls -l /usr/local/repo/tarball-install/*latest* # verify the symlinks are correct
</pre>

---++ Step 18: Announce the release

<ol>
<li>Write an announcement. Here is a sample you can edit:

<div style="background: #E0F0E0; border: 1px solid gray; padding-right: 2px; padding-left: 2px; padding-top: .5em; padding-bottom: .5em; margin-bottom: 1ex;">
<strong>Subject:</strong> Announcing OSG Software version %VERSION%
</div>

<div style="background: #E0F0E0; border: 1px solid gray; padding-right: 2px; padding-left: 2px; padding-top: .5em; padding-bottom: .5em; margin-bottom: 1ex;">
We are pleased to announce OSG Software version %VERSION%!

This is the new OSG Software distributed via RPMs for:

* Scientific Linux 5 and 6%BR%
* !CentOS 5 and 6%BR%
* Red Hat Enterprise Linux 5 and 6

This release affects the %RED%SET-OF-METAPACKAGES (client, compute element, etc...)%ENDCOLOR%. Changes include:

* Major change 1%BR%
* Major change 2%BR%
* Major change 3

Release notes and pointers to more documentation can be found at:

https://www.opensciencegrid.org/bin/view/Documentation/Release3/Release%SHORTVERSION%

Need help? Let us know:

https://www.opensciencegrid.org/bin/view/Documentation/Release3/HelpProcedure

We welcome feedback on this release!</div>
<li>Email the announcement to <code>vdt-discuss@opensciencegrid.org</code></li>
<li>Ask the GOC to distribute the announcement by [[https://ticket.grid.iu.edu/goc/other][opening a ticket]]</li>
</ol>


---++ Step 19: Mark the release in the pre-release notes page

Go to PreReleaseNotes and add an entry marking the release. The code should look like:
<pre>
| %DISPLAYTIME{"$year-$mo-$day"}% | &#37;RED&#37;OSG %VERSION% Release&#37;ENDCOLOR&#37; |
</pre>

<!-- vim:ft=twiki
-->