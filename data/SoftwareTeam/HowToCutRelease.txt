%META:TOPICINFO{author="BrianLin" date="1384291055" format="1.1" version="1.66"}%
%META:TOPICPARENT{name="InternalDocs"}%
<!--
   * Set VERSION = %URLPARAM{"version" default="VERSION"}%
   * Set SHORTVERSION = %CALC{"$SUBSTITUTE(%VERSION%,.,,,)"}%
   * Set MAJORVERSION = %CALC{"$SUBSTITUTE(%VERSION%,\.[0-9]+$,,,r)"}%
-->

---+ How to Cut a Release

Due to the length of time that this process takes, it is recommended to do the release over two days to allow for errors to be corrected and because some of the koji commands take a long time to run when a large number of rpms are being released.

This document doesn't discuss the policy for deciding what goes into a release. [[SoftwareTeam.ReleasePolicy][The release policy is discussed elsewhere]].

%RED% *NOTE* Interactive scripts can be found at https://vdt.cs.wisc.edu/svn/software/release-tools/ %ENDCOLOR%

---++ Pick the version number

This page will help you get the various commands exactly right. To do this, enter the exact version number (such as %RED%3.0.5%ENDCOLOR%) and click submit. If you do not do this, the commands below will be missing essential text.

<form action="https://www.opensciencegrid.org/bin/view/SoftwareTeam/HowToCutRelease">
Version: <input type="text" name="version" size="10" value="%URLPARAM{"version"}%"/>
%IF{"$ 'URLPARAM{upcoming}'='true'"
then='Upcoming: <input type="checkbox" name="upcoming" value="true" checked="checked"/>'
else='Upcoming: <input type="checkbox" name="upcoming" value="true"/>'}%
<input type="submit"/>
</form>

---++ Day 0

The release manager often needs a preliminary list of packages slated for the next release a few weeks in advance. This is done by finding the package differences between what's in testing and what's in the current release. There is a script in SVN that handles this:

<pre class="screen">
%IF{"defined 'upcoming'"
then='./0-generate-pkg-list -u %VERSION%'
else='./0-generate-pkg-list %VERSION%'}%
</pre>

---++ Day 1: Populate Pre-release and Testing

---+++ Step 1: Create four clean VMs per OSG version

Make four VMs for each OSG version (upcoming, 3.1, 3.2, etc.), probably in !FermiCloud, so you can do testing.
Two of them will be used to test fresh installations on a clean machine (one EL5, one EL6), while the other two will be used to test an update from the current release (one EL5, one EL6).

---+++ Step 2: Update the osg-version RPM

Edit the osg-version RPM's spec file to update the version number to %VERSION%. Build it in koji:

<pre class="screen">
osg-build koji --repo=%MAJORVERSION% osg-version
</pre>

---+++ Step 3: Populate pre-release

Populate the pre-release. This requires you to understand which packages should be in the release. This is a question of [[ReleasePolicy][policy]]. If you do not know which packages should be in the release, talk to the OSG Release Coordinator.

<pre class="screen">
%IF{"defined 'upcoming'"
then='./1-populate-prerelease -u %VERSION%'
else='./1-populate-prerelease %VERSION%'}%
</pre>

There shouldn't be any packages in prerelease and you will prompted to untag any packages that are still in there before continuing. Afterwards, you will need to manually edit the package list to make sure the proper packages get promoted (consult the Release Manager for details). 

%RED%Edit%ENDCOLOR% pkgs-to-release-* to remove packages not intended for this release.
%RED%Please verify that the =osg-version= RPM is in your set of packages for the release!%ENDCOLOR%
%RED%Also verify that if there is a new version of the =osg-tested-internal= RPM, then it is included in the release as well!%ENDCOLOR%

---+++ Step 4: Test fresh installs of %VERSION%

You will do a fresh installation.  Note: you should do this for each distribution.
The =osg-test= command below will enable the =osg-prerelease= repository, and the =osg= repository will already be enabled.
So packages will be taken from the =osg= repository unless there is a newer version in the =osg-prerelease= repository.
Note, due to some oddities in the tests, you'll need to be in a directory that the vdttest user has access to before running osg-test.
=/tmp= should suffice for this.
The bestman tests will break if you do not do this.

<pre class="screen">
wget --quiet http://vdt.cs.wisc.edu/native/bootstrap-osg-test
chmod 0755 bootstrap-osg-test
./bootstrap-osg-test %MAJORVERSION% testing
cd /tmp
osg-test -var osg-prerelease -i osg-tested-internal
</pre>

All tests should pass. If any tests fail, discuss with the OSG Release Coordinator.

%IF{"defined 'upcoming'"
then='---+++ Step 4b: Test fresh installs of upcoming

You will do a fresh installation.  Note: you should do this for each distribution.
The =osg-test= command below will enable the =osg-upcoming-prerelease= repository, and the =osg-upcoming= repository will already be enabled.
So packages will be taken from the =osg-upcoming= repository unless there is a newer version in the =osg-upcoming-prerelease= repository.
Note, due to some oddities in the tests, you\'ll need to be in a directory that the vdttest user has access to before running osg-test.
=/tmp= should suffice for this.
The bestman tests will break if you do not do this.

<pre class="screen">
wget --quiet http://vdt.cs.wisc.edu/native/bootstrap-osg-test
chmod 0755 bootstrap-osg-test
./bootstrap-osg-test %MAJORVERSION% testing
cd /tmp
osg-test -va -r osg-upcoming -r osg-upcoming-prerelease -i osg-tested-internal
</pre>

All tests should pass. If any tests fail, discuss with the OSG Release Coordinator.'}%

---+++ Step 5: Test updates of %VERSION%

Now you will do an installation just from the =osg= repository, then update it from the =osg-prerelease= repository.
Note: you should do this for each distribution.
This is an important double-check, because we want to know that updates work smoothly.
Note, due to some oddities in the tests, you'll need to be in a directory that the vdttest user has access to before running osg-test.
=/tmp= should suffice for this.
The bestman tests will break if you do not do this.

<pre class="screen">
wget --quiet http://vdt.cs.wisc.edu/native/bootstrap-osg-test
chmod 0755 bootstrap-osg-test
./bootstrap-osg-test %MAJORVERSION% testing
cd /tmp
osg-test -va -i osg-tested-internal -g osg-prerelease
</pre>

All tests should pass. If any tests fail, discuss with the OSG Release Coordinator.

%IF{"defined 'upcoming'"
then='---++ Step 5b: Test updates of upcoming

Now you will do an installation just from the =osg-upcoming= repository, then update it from the =osg-upcoming-prerelease= repository.
Note: you should do this for each distribution.
This is an important double-check, because we want to know that updates work smoothly.
Note, due to some oddities in the tests, you\'ll need to be in a directory that the vdttest user has access to before running osg-test.
=/tmp= should suffice for this.
The bestman tests will break if you do not do this.

<pre class="screen">
wget --quiet http://vdt.cs.wisc.edu/native/bootstrap-osg-test
chmod 0755 bootstrap-osg-test
./bootstrap-osg-test %MAJORVERSION% testing
cd /tmp
osg-test -va -r osg-upcoming -i osg-tested-internal -g osg-upcoming-prerelease
</pre>

All tests should pass. If any tests fail, discuss with the OSG Release Coordinator.'}%

---+++ Step 6: Create the client tarballs

Create the client tarballs using the scripts in software/tarball-client/trunk from our SVN, and then copy them into the UW's AFS.
Do this as root on an EL6 fermicloud machine.
Change the username and machine name as appropriate.
<pre class="rootscreen">
ruser=%RED%matyas%ENDCOLOR%
rmachine=%RED%library.cs.wisc.edu%ENDCOLOR%
</pre><pre class="rootscreen">
mkdir -p /tmp/tarball-client
cd /tmp/tarball-client
svn export https://vdt.cs.wisc.edu/svn/software/tarball-client/trunk
trunk/make-client-tarball --osgver=%MAJORVERSION% --prerelease --all
scp *.tar.gz $ruser@$rmachine:/p/vdt/public/html/tarball-client/
</pre>
You should get 8 tarballs, 20-45 megs each.
They should all have %VERSION% in the name.

---+++ Step 7: Briefly test the client tarballs

As an *unprivileged user*, extract each tarball into a separate directory.
Make sure osg-post-install works. Make sure 'osgrun osg-version' works.

<pre class="screen">
for client in osg-client osg-wn-client; do
    for rhel in el5 el6; do
        for arch in i386 x86_64; do
            file=$client-%VERSION%-1.$rhel.$arch.tar.gz
            mkdir $rhel-$arch
            pushd $rhel-$arch
            tar xzf ../$file
            $client/osg/osg-post-install
            $client/osgrun osg-version
            popd
        done
    done
done
</pre>

If you have time, try some of the binaries, such as grid-proxy-init.

*NOTE:* We need to automate this and have it run on the proper architectures and version of RHEL.

---+++ Step 8: Update the UW AFS installation of the tarball client

The UW keeps an install of the tarball client in =/p/vdt/workspace/tarball-client= on the UW's AFS.
There is a script to update it called =afs-install-tarball-client=. Run it as follows:
<pre class="screen">
/p/vdt/workspace/tarball-client/afs-install-tarball-client %VERSION%
</pre>

---+++ Step 9: Wait

Wait for clearance. The OSG Release Coordinator (in consultation with the Software Team and any testers) need to sign off on the update before it is released.  If you are releasing things over two days, this is a good place to stop for the day.

------

---++ Day 2: Pushing the Release

%RED% *NOTE:* For the second phase of the release, try to complete it earlier in the day rather than later. The GOC would like to send out the release announcement prior to 3 p.m. their time (Eastern time zone), which means that our procedure needs to be completed before then.%ENDCOLOR%

---++ Step 1: Push from pre-release to release

This script moves the packages into release, clones release into a new %VERSION% specific release repo, locks the new repo and regenerates it. Afterwards, it produces *release-note* files that should be given to whomever's writing the release notes. 

<pre class="screen">
%IF{"defined 'upcoming'"
then='./2-create-release -u %VERSION%'
else='./2-create-release %VERSION%'}%
</pre>

*.txt files are also created and it should be verified that they've been moved to /p/vdt/public/html/release-info/ on UW's AFS.

---+++ Step 2: Upload the client tarballs

Ask Mat or someone with privileges on the grid.iu.edu repo servers to upload the tarballs with the following procedure:

---+++ On a CS machine
<pre class="screen">
cd /p/vdt/public/html/tarball-client
ssh jump.grid.iu.edu mkdir %VERSION%/
scp *%VERSION%*gz jump.grid.iu.edu:%VERSION%/
</pre>

---+++ On jump.grid.iu.edu
<pre class="screen">
scp -r %VERSION% repo1:/tmp/
scp -r %VERSION% repo2:/tmp/
rm -rf %VERSION%
</pre>

---+++ On repo1/repo2 (as root)
You can ssh to repo1 and repo2 from jump.grid.iu.edu; you will need to do this procedure on both systems.
<pre class="screen">sudo su -</pre>
<pre class="rootscreen">
mv /tmp/%VERSION% /usr/local/repo/tarball-install/%MAJORVERSION%/
rm /usr/local/repo/tarball-install/%MAJORVERSION%/*latest*
/root/mk-sims.sh
ls -l /usr/local/repo/tarball-install/%MAJORVERSION%/*latest* # verify the symlinks are correct
</pre>

---+++ Step 3: Install the tarballs into OASIS

%RED%You must be an OASIS manager of the 'mis' VO to do these steps.%ENDCOLOR%
Known managers as of 2013-08-13: Mat, Tim C, Tim T.
Get the uploader script from SVN and run it with osgrun from the UW AFS install of the tarball client you made earlier.
On a UW CSL machine:
<pre class="screen">svn cat file:///p/vdt/workspace/svn/software/tarball-client/trunk/upload-tarballs-to-oasis &gt; /tmp/upload-tarballs-to-oasis
chmod +x /tmp/upload-tarballs-to-oasis
/p/vdt/workspace/tarball-client/current/sys/osgrun /tmp/upload-tarballs-to-oasis %VERSION%
</pre>
The script will automatically ssh you to oasis-login.opensciencegrid.org and give you instructions to complete the process.

---+++ Step 4: Announce the release

<ol>
<li>Write an announcement. Here is a sample you can edit:

<div style="background: #E0F0E0; border: 1px solid gray; padding-right: 2px; padding-left: 2px; padding-top: .5em; padding-bottom: .5em; margin-bottom: 1ex;">
<strong>Subject:</strong> Announcing OSG Software version %VERSION%
</div>

<div style="background: #E0F0E0; border: 1px solid gray; padding-right: 2px; padding-left: 2px; padding-top: .5em; padding-bottom: .5em; margin-bottom: 1ex;">
We are pleased to announce OSG Software version %VERSION%!

This is the new OSG Software distributed via RPMs for:

* Scientific Linux 5 and 6%BR%
* !CentOS 5 and 6%BR%
* Red Hat Enterprise Linux 5 and 6

This release affects the %RED%SET-OF-METAPACKAGES (client, compute element, etc...)%ENDCOLOR%. Changes include:

* Major change 1%BR%
* Major change 2%BR%
* Major change 3

Release notes and pointers to more documentation can be found at:

https://www.opensciencegrid.org/bin/view/Documentation/Release3/Release%SHORTVERSION%

Need help? Let us know:

https://www.opensciencegrid.org/bin/view/Documentation/Release3/HelpProcedure

We welcome feedback on this release!</div>
<li>Email the announcement to <code>vdt-discuss@opensciencegrid.org</code></li>
<li>Ask the GOC to distribute the announcement by [[https://ticket.grid.iu.edu/goc/other][opening a ticket]]</li>
</ol>

---++ Step 5: Mark the release in the pre-release notes page

Go to PreReleaseNotes and add an entry marking the release. The code should look like:
<pre>
| %DISPLAYTIME{"$year-$mo-$day"}% | &#37;RED&#37;OSG %VERSION% Release&#37;ENDCOLOR&#37; |
</pre>

<!-- vim:ft=twiki
-->