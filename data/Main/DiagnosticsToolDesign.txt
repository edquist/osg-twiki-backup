%META:TOPICINFO{author="TedHesselroth" date="1242073660" format="1.1" reprev="1.1" version="1.1"}%
<font size="4">Design Document</font>

<font size="4">OSG Storage Diagnostics Tool</font>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"><strong>Revision History</strong></div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"><table width="650" bordercolor="#000000" cellspacing="0" style="font-size: 1em; line-height: inherit; border-collapse: collapse" cellpadding="3" id="v_tz" border="1"><tbody><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><strong>Name</strong></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><strong>Change</strong></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><strong>Date</strong></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><strong>Version</strong></td></tr><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><font size="1">Ted Hesselroth</font></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><font size="1">Initial Draft</font></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><font size="1">May 11, 2009</font></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><font size="1">1.0-Draft-1</font></td></tr><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif">

</td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td></tr><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif">

</td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td></tr><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif">

</td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td></tr></tbody></table>

*Concurrence*
<table width="650" bordercolor="#000000" cellspacing="0" style="font-size: 1em; line-height: inherit; border-collapse: collapse" cellpadding="3" id="v_tz" border="1"><tbody><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><strong>Name</strong></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><strong>Organization</strong></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><strong>Date</strong></td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"><strong>Version</strong></td></tr><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif">

</td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td></tr><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif">

</td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td></tr><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif">

</td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td></tr><tr style="text-align: left"><td style="font-family: Verdana, Arial, Helvetica, sans-serif">

</td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td><td style="font-family: Verdana, Arial, Helvetica, sans-serif"> </td></tr></tbody></table>

</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">

---++ <font size="4">I</font>ntroduction
 This is the design specification for the OSG Storage Diagnostics Tools capability. It is written to define how the requirements described in the companion requirements document (see References) shall be implemented. 
---++ System Overview
 <div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">The software described here creates in real time a model of the target computational system in the form of an abstract representation of its state, as described by a schema. When populated with values obtained from probes running on the system, the model has sufficient information to allow determination of whether various operating conditions are met. Conditions are described in a query language which can be evaluated on the state, and the result of the evaluation determines whether certain actions can be done, such as starting a service or performing an upgrade. The state can also be used for troubleshooting capability, through the use of queries which conditions for the successful steady-state operation of the service.</div> 
---++ Design Considerations
 <div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">As an information service, the software is similar to a monitoring system in that it collects and stores information on the state of a system. There are actually several operational segments which can be managed by the use of information services. They are:</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">
   * Monitoring
   * Deployment
   * Troubleshooting
   * Security
   * Performance
</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">The sofware considered here has mainly to do with the second and third from that list. One resulting difference is that the represenation of state is designed to be queried more so than displayed. This allows the building of complex condition expressions that could not easily be placed in a visual format. The scope of the data collection is also larger, creating a model not so much of the service itself, but of the environment in which it runs. As such, many of the datum are rather static in nature, i.e, the operating system on which the service runs. In some cases the diagnosis of a system will be done once to support a single action, such as a service start, in which case the operation of the software would not be in the monitoring realm.</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">As a tool which is supposed to ease the administration of services, it almost goes without saying that application of the tool itself must be significantly simpler in use and more robust than the services for which it operates. Some upfront complexity in configuration is tolerable if the result is an oveall savings of effort through repeated applications of the tool.</div>
 
---+++ Relation to other Software
---++++ Standards
 <div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">The purpose of this software being to address very common issues in system operations, there exist numerous relationships to other efforts. A survey of Industry standardization has found that, of many proposals, only <u>[[http://www.snmptools.net/][Simple Network Management Protocol]]</u> and <u>[[http://www.dmtf.org/standards/wbem/][Web Based Enterprise Management]]</u> gained widespread acceptance. Both are almost wholly in the realm of hardware management, but the WBEM <u>[[http://www.dmtf.org/standards/cim/][Common Information Model]]</u> does have a schema for diagnostics that is complementary to the <u>[[http://glueschema.forge.cnaf.infn.it/][Glue Schema]]</u> already in use in the Open Science Grid. The <u>[[http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsrf][Web Services Resource Framework]]</u> is a standard in the grid world, but is an entirely web-service oriented standard and so at this point can only be used in a relatively narrow context.</div>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">Our conclusion is that, besides the Glue Schema, WBEM and CIM are the most appropriate external standards for this software. Their use here is described in the "Software Architecture" section.</div>

---++++ Other OSG Software
 <div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">Integration with other OSG software is an important goal. The Open Science Grid makes use of an Information Services stack, see figure 1. The components were, however, built independently of one another, so these services are not as integrated as the figure may make them appear. Where complete integration cannot be achieved, the design should be such as to facilitate future integration assuming sensible changes to the Information Services architecture. The buildout to this point has focussed on resource selection, accounting, and monitoring. In terms of resue, it may be possible to build upon some of the existing software such as RSV and Gratia for display, probes, etc in the current project. The issue remains open in this draft. Please see the "Software Architecture" section for a more detailed discussion.</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="cymm"><img alt="" src="http://docs.google.com/File?id=dfqq5htv_10fqtj7cvv_b" style="width: 648px; height: 507px; vertical-align: text-bottom" /></div></div>

---++++ figure 1
---++++ <font size="2">O</font>ther Software

Fermilab's <u>[[http://www.fnal.gov/docs/products/mcas/docs/CHEPMcas.pptx][Metric Correlation and Analysis Service]]</u> (MCAS) is under development and is similar to RSV. MCAS is at this point solely concerned with monitoring, but has some architectural components that are similar to those in the Diagnostic Tool.
---+++ Architectural Strategies
 <div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">To the degree possible, use should be made of third-party packages which have attained a degree of maturity and community acceptance. Advantages to this approach lie in the stability achieved through a large number of use/refinement cycles, and the tendency of products with a large following to have an extended knowledge base in the form of documentation and recorded user experience. There is also a greater chance, that, should further expertise be needed, it could be found in the OSG staff or participating institutions. Furthermore, favoring commonly-used methods in the design makes the software more easily understandable by those unfamiliar with it, and thus, more maintainable in the long run. The only real drawback in this approach is the inherent lag between what is in popular use and what may be a better, but less well-known solution. </div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">Therefore, a thorough survey of existing methodologies has been carried out, touching on some of the approaches mentioned above, as well as many others. We believe that the components described herein are at an ideal state of having been vetted for effectiveness without having become dated by being bypassed in a rapidly changing field. The design presented here represents the best balance between proven treatments and the state of the art.</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">Some of the strategies inherited from the imported solutions are as follows. Most of them are enabled by the adoption of XML as a data format.</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">

   1 Generic format for data decouples of the handling of data from its source.
   1 Schema for organizing data binds semantics to content, simplifying information flow.
   1 System model as an abstraction layer enables adaptability of software to a variety of systems.
   1 Computational engines invoked using runtime configurations supports powerful processing without the need for extensive coding.
   1 Complexity/Risk moved to focus points increases overall robustness of software.
   1 Modularity allows extensibility of code without modification of base.
   1 Component-driven service oriented architecture provides for more effective coding and test. See the next paragraph for details.

</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">The process is best divided into a small number of components which act as services to each other via a messaging mechanism. This approach has several advantages. First of all, the various components can be developed independently. This simplifies the development process because each component only implements a limited, well-defined functionality. Secondly, testing is also streamlined, because components can be tested for their own functionality. When each component passes it's functional tests, the more difficult integrated tests are more likely to go smoothly. Division of the capabilities makes each service more generic, which has two ramifications. One is that it becomes easier is easier to locate external packages to support the implementation, as these are more likely to be targeted to a generic utility. Another is that the possibility of code reuse in increased, as a generic service is more likely to support other kinds of processing that are beyond the scope of the current software. Disadvantages of the component approach are that the design is more complex and coding will generally take longer than with the monolithic approach. However, the increased value in terms of robustness and extensibility more than makes up for the difference in cost. </div> 

---++ System Architecture

 The overall concept of the information processing is described in the System Overview. The architecture is diagrammed in figure 2. In terms of the architecture, a full workflow for a diagnostic application is as follows (capitalization is used to identify system components).</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">A Schema is devised by which individual properties of the system can be described. Though the schema is hierarchical for organizational purposes, the properties are ultimately expressed as name-value pairs. The Schema serves two purposes; it creates a destination into which properties of the system may be placed, and it is used as a foundation for modeling the system. In the latter a Modeling Grammar is employed to abstractly compose parts of the system, as represented by schema and its structure, into an entity which reflects sufficient information on properties and their interrelations to support conclusions on that state of the system within the context of the application. In practice the model may be viewed as a guide for the formation of Trigger Expressions. A Trigger Expression is a query or combination thereof which describes in precise language the conditions of the system that meet a requirement.</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">Expressions must be evaluated against real data, so at this point we turn to the Data Collection component of the architecture. This component has access to the resources and/or an information service supported by the resource. The probes will rely on their own architectural stack, which in this draft is not fully described. The Data Collection feeds its information to the Messaging Protocols component, which shall convert it into a format suitable for transport and forward it to the Data Operations component. The Data Operations component shall aware of the chosen schema and will organize the incoming data accordingly. The other purpose of Data Operations will be to update the State Representation with the new data. The State Representation holds the data on the state of the system. Options are for it to persist the information, and to act as an aggregator if more than one instance of Data Operations is deployed.</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">The Data Operations component will service queries on the data. These queries will come from the Condition Evaluation component, which will accept Trigger Expressions as described above. The Condition Evaluation compares the data from the State Representation to the requirements from the Trigger expression to determine whether the requirements are met. If so the Condition Evaluation will report that an event may be triggered. </div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">In terms of distributed deployment, the software should be written in such a way as to allow greatest flexibility. Ideally, configuration possibilities should go from all components running on one node to all running on separate nodes. There are a few sensible constraints, however. The Data Collection and Messaging Protocols components should run on the same node; otherwise, there would need to be messaging between the two, which would be a redundant design. State Representation and Condition Evaluation should also run together, to avoid potentially large transfers of state information. This would possibly not hold if Condition Evaluation included some sort of caching, but that is not envisioned here. One deployment feature which should be realized is the capability deployment on one node. In cases where the entire process will be run only once, to answer a single query, such as "May service X be upgraded under the current conditions?", it must be possible to invoke it end-to-end on a single command line. It should also be possible for software providers to bundle the Diagnostics Tools as part of an installation or built-in troubleshooting process, so a programmatic invocation should also be supported.</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">

---++ Software Architecture
 <div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">This section outlines the implementation approach for the components as described above.</div> 
---+++ Data Collection
 This component obtains values for properties which are ultimately placed in the State Representation. Because this software is being built for systems that have already been developed, it cannot be assumed that the values are conveniently provided by the resources. In many cases, ad hoc methods of obtaining the values must be implemented. Values can be obtained in a variety of ways, </div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">

   * Unix commands: direct invocation of utility providing information, result parsed from stdout.
   * Query of service: resources already participating in information infrastructure, properties can be accessed indirectly. Examples are 
      * BDII
      * ReSS
      * Service built in to resource
      * XAware-based aggregator
   * Probes: interact with resource in the same way that production components would, result is parsed from the nominal response.
   * Parsing configuration files/databases: direct read of files/tables used by the resource for its operation. Very fragile method unless explicitly supported by the software provider.
   * Logfile scraping: parsing of log files produced by the resource. Fragile unless explicitly supported.
   * Web page scraping: adapter for information services provided for resource that do not an API. Since software providers assume that the format of human-readable information may be changed without consequence, this method is fragile.
<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div>In summary, many of the methods envisioned are fragile, so efforts should be made to use information services or providers' APIs when possible. It may be necessary to work with providers to obtain robust methods of Data Collection.</div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"> </div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">It is seen that a variety of data collection modules will be needed, though they may be unified by a common architecture. Ideally, such an architecture can be imported. Candidates are OSG's RSV and Gratia products, the OSG Operations Toolkit, Teragrid's Inca, and Nagios. It is beyond the scope of this draft to decide on this issue; the choice will be explained in a future revision.</div> 
---+++ Message Protocols
 The features of this component are wholly within the present architecture, so there is more freedom of choice here. The main constraint is ease of integration with 3rd party software used as the starting point. Best practice for this capability is to encode the information from Data Collection into XML and send it using http POST commands. For security, https may be used. The XML need not at this point satisfy a schema designed for system modeling, but should instead be optimized for convenient transport, assuming reception by a RESTful web service that is designed for the structures to be transmitted. Conversion from the native format of Data Collection to XML may be necessary, depending on the details of the Data Collection architecture chosen. 
---+++ Data Operations
 On the Message Protocols side a RESTful web service will be exposed which can handle the data structures expected in the POST messages. The Schema is an input to Data Operations. The data should be converted as needed to XML which satisfies the Schema. At that point, the component acts as a client to State Representation, doing a create or update operation into the XML database. 
---+++ Schema
 <font size="3">A</font> combination of schemas will be necessary to cover all the properties needed to describe the required conditions of the system. The Glue schema will go a long way towards the Grid aspects of the system, and the Common Interface Model covers many aspects of the operating system and hardware. Some resources will have their own schema, such as the dCache Information Provider model. It is assumed that some elements of a customized schema will usually be necessary to complete the description. These should be maintained in such a way as to encourage integration with any future schema development efforts. 
---+++ Modeling Grammar
 <font size="3">T</font>he CIM Meta schema has been established and is suitable for this purpose. The use of a system model is optional. It's purpose is to guide the creation of Trigger Expressions. In many cases, the Trigger Expressions are simple enough so that they can be written directly from a knowledge of the Schema. Only in very complex configuration will a system model be necessary. Therefore, initial versions of the software might not support this component. 
---+++ State Representation
 <font size="3">T</font>he State Representation will be an XML database. It should take updates in the form of XPath, and queries in the form of XPath or XSL. XMLDB has been found to be a good performer as a database when persistence is desired. If persistence is not desired (the command line mode), and XMLDB is found to be not suitable for that scenario, then Hibernate with XML shall be used. 
---+++ Trigger Expression
 Schematron is an ISO standard for forming complex expressions based on XML and XPath. It is suitable for defining a set of conditions which may contain many properties. It has the convenient feature of the ability to define custom messages to report when specific conditions are not met. The software has a long history is thought to be quite stable. In principle, Trigger Expressions could be written directly in XSL, but this would entail exceedingly complex writing. In fact, Schematron works by providing XSL converts own format into XSL transforms, so one has the best of both worlds here. 
---+++ Condition Evaluation
 The Schematron converts a Trigger Expression into XSL, which is then evaluated against the XML database. Thus, any XSL evaluation engine may be used. Xalan is a proven evaluation engine, and is the choice for this software. Since the conversion from a Trigger Expression to XSL is also via XSL, that coversion will be done by the Condition Evaluation component. It's input will be a Trigger Expression in Schematron markup. 
---+++ Risk
 The main risk is the potential difficulty in Data Collection from resources that are not designed to support it. Another risk is in the complexity of the design as compared to a simple approach of, say, writing python scripts which report to stdout. This risk is front-loaded, however; once that stack is created it should be relatively easy to add capability. Risk is not really reduced in the script-based approach. It is effectively shifted to other areas due to the need for effort to compensate for the limitations of the simpler approach. 
---++ References
 <u style="color: blue"><u><u>[[DiagnosticsToolRequirements][OSG Storage Diagnostics Tool Requirements]]</u></u></u>

Project Process

Document Process

<font size="2">OSG Information Services Domain design document.</font>

<div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0"><img alt="" src="http://docs.google.com/File?id=dfqq5htv_6gnkb5cg7_b" style="width: 648px; height: 351px; vertical-align: text-bottom" /></div><div style="text-align: left; margin-top: 0px; margin-bottom: 0px" id="y4d0">figure 2</div>
