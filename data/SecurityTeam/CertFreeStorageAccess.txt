%META:TOPICINFO{author="MineAltunay" date="1414705829" format="1.1" version="1.3"}%
---++Accessing Data Storage and Transfer Services 

Currently, an end user needs an X.509 certificate to access storage and data transfer elements, such as gridftp, dcache, xrootd, etc.  We research alternative access control models, where the user does not have to directly use or own a certificate, to access storage and transfer elements. Concealing the certificate use or completely eliminating it significantly improves the user's grid experience. For brevity, from now on we call data storage and transfer elements as data delivery services.  


---+++Eliminating User Certificates Completely

Our goal is to research whether we can find a method of accessing  the data delivery services without any end user certificates. We are inspired by our success in finding a way to submit jobs without end user certificates. In our work with job submission systems, we focused on glideinWMS workflow system and observed that the glideinWMS system keeps detailed information about the user and his/her job throughout the job life cycle. As a result, at any given moment, we could trace a job back to its owner. This observation allowed us to forgo the certificates because we could trace the jobs back to users even without a certificate. In order to make sure that only authorized users submit jobs, we asked VO job submission nodes to implement sound access control methods based on username passwords or RSA keys. Once only authorized users access the job submission system, it was pretty easy to track their activities via the GlideinWMS system. 

Our goal was to build a system for accessing data delivery services similar to the one we designed for our job submission system. However, our findings turned out to be different. First of all, glideinWMS system provides a uniform way of accessing several different resource managers, Condor, PBS, Globus, etc. The GlideinWMS handles sending jobs to all these different systems; so we never need to learn about these different job managers. Moreover, glexec handles authenticating and authorizing the user certificate. As a result, just turning off this functionality in glexec allowed us to stop checking user certificates. Unfortunately, we do not have a common workflow management tool like GlideinWMS for data delivery services. A user accesses each data delivery service by using a specific client tool. Furthermore, there is no common software module like glexec that handles user authentication and authorization for all the services. What this means is that if we want to turn off user certificates, we would have to do this by examining the every single service and making code changes to it. Due to the amount of work and complexity involved with that, we decided not to pursue this path. 

---+++Using Certificates Transparently

In this model, the user still owns a user certificate and uses this certificate to access the data delivery services, but the mechanics of creating the certificate, sending it along with the request and etc are completely hidden from the user. In other words, certificate-related activities are automated and they happen without any intervention from the user. 

To achieve this, we will need a central repository service to store user certificates. MyProxy server is an excellent candidate for this. 

We list the workflow steps that needs to be tank by the system and the user to access the data. 


   1 User generates a certificate with OSG. (This step can be changed into that OSG generates the certificate on behalf of the user when the user registers with OIM)
   2 OSG assigns a MyProxy username and password to the user.
   2 OSG generates a proxy and puts this in MyProxy server (This step can also be changed into that user may generate a proxy and puts this into the repo)
   3 When user is ready to access data delivery services, it first initiates MyProxy client with his password and downloads a copy of user proxy on the disk. 
   4 When the data delivery service clients is invoked, it finds the downloaded certificate on disk and uses that for accessing the data. 

If we desire to completely shield the user from handling any certificate-related activities, we can also have the system perform steps 1 through 3.
 
   1 User registers with OIM and creates a profile for itself, filling out his contact info etc. OSG requests a certificate for the user
   2 OSG uploads the certificate to MyPxoy
   3 OSG issues a my proxy username and password to the user. 
   4 When user is ready to access data delivery services, it first initiates MyProxy client with his password and downloads a copy of user proxy on the disk. 
   5 When the data delivery service clients is invoked, it finds the downloaded certificate on disk and uses that for accessing the data. 

-- Main.MineAltunay - 28 Oct 2014
