%META:TOPICINFO{author="AlainRoy" date="1222382429" format="1.1" reprev="1.7" version="1.7"}%
%META:TOPICPARENT{name="SecurityTeamWorkingArea"}%
---++ COMMAND LINE SECURITY TOOLS MANAGEMENT PLAN

%TOC%

This is the plan for implementing a CA management tool. The tool interface is copied below:
Purpose: This script shall show the accepted CAs, check and renew the CRLs, add and remove CAs from the list of accepted CAs.

%BLUE% From -- Main.DougOlson - 17 Sep 2008

Maybe listing a few design goals is useful. Such as:
   * It would be good to minimize or eliminate dependencies on other middleware
   * installation and management of the trusted CAs (or we could say Trust Fabric) should be the same process for any subsequent software
   * since there are many use cases of having multiple instances of some $VDT_LOCATION installed on a host we should consider making installation of the Trust Fabric a separate step and prerequisite to other software installations
   * this tool should be coordinated with the automated procedures for maintaining CA files, vdt-update-certs, yum (obvious, I know but ... )
%ENDCOLOR%
 

---+++ ca_manage Options:

   * --dir <path of the CA repository> This takes the CA directory path as an input. Default: $X509_CERT_DIR, resp. 
/etc/grid-security/certificates

--showDir, complements the above option. It shows whatever the CA directory is set to.  

   * --distribution <URL>: sets location from where the CA files will be downloaded from. 
showDistribution. This will print out which ever location is being used in the config file

   * --listCA <pattern>: lists all currently accepted CAs, whose DN (CA’s own DN, or end user DN patterns?) match the pattern. All CAs are listed if no pattern is given. 
The outputs are: Which CA distribution service is used to install this CA list, when it is installed, The CAs’ name, their hash value, whether a CA is IGTF or TeraGrid accredited. The format of the pattern needs to be defined (regex?). –verbose 

Note if the configuration file is changed after the installation, no longer you will know which CA distribution service was used to download. You can create a log file for the ca_mgmt tool such that when it runs the vdt-cert-update script to install a new package, it writes an entry into the log file. 

Can we use vdt-status-update script for this option?

   * --checkCRL <CAhash or pattern>: prints out the last time the CRLs was updated. I added the CA name option because you should be able to see for a particular CA if you have updated its CRL or not. Imagine if a CA revoked bunch of people due to an incident, you like to ensure that CRL for that CA is updated. 
Prints out two dates: one CA created the CRL and the date the CRL is actually downloaded. 

We decided to get rid of this  and combine with verifyCA below. 

   * --fetchCRL <CAhash or pattern>: When no input specified, it retrieves CRL files for all CA within the directory. The crl_url file should have the CRL location to be fetched. When input is defined, it only retrieves the CRL for that CA.

   * --fetchCRL <CA hash or pattern> --force: it forces to download the CRL file from the CA. Normally if there is no update in CRL, fetchCRL would not download it. This command forces the download.   

   * --refreshCAPackage: It updates the CA directory: checks the new package, if there is anew distribution, it retrieves the CA certificates, CRL location files, signing policies. This command replaces the old files with newly retrieved files. When a file cannot be retrieved, the old one (if existing) is not updated. A warning message is printed. Currently, this command should go to VDT caches and download the CA package. 

   * refreshCAPackage –force. It downloads the CA package whether or not there is a new CA package distribution

   * --add <XYZ>: add the CA. XYZ are the filenames of the corresponding CAs/CRLs or the URL from where the CA files are being fetched. If more files are added, then the command –add is given multiple times. 

It will take two arguments: add <CA hash or pattern> <filePath to CA files>

We agreed to have XYZ as the file location on the disk. XYZ is not a URL because we are not sure if all CAs publish their files in a uniform format over the www. We will assume the site admin copied CA files on disk . 

   * --remove <CAhash or patterns>: It removes all files associated the specified CA. The files should be moved into a dedicated directory, from where they can easily be restored again. By default this should also remove all descendent certificates or the removed certificate. 

First give a warning. We decided not to remove subordinate CAs when removing a root CA. So the last line above is no longer valid. 

Explicit warning. This should give explicit warnings. When a root CA is removed, warning should list any subordinate CAs in the CA directory. Because subordinate CAs may be kept in the directory, they do not have to be removed as well. Imagine the case root CA is removed and updated with different files. We will still need subordinate CAs. 

   * --refreshCA <CAName><URL>: this command updates the CA files: CA certificates, signing policy, info and CRL location files. Unlike refreshCAPackage, this command only refreshes a specific CA. The second input URL tells where to pick up the files for that CA. When a root CA is updated, the effects on the subordinate CAs must also be evaluated. The output should list which subordinate CAs became invalid and needed updates. If possible, the subordinate CAs must also be updated with this command. 

Do not know how to implement because  ca does not distr .
At the meeting we decided not to implement this. However, it is possible to implement this against the GOC or VDT CA distribution service. Instead of installoing the entire CA tarball, only the specified CA files are copied from the GOC or VDT service (based on the second input to the command. ) 

   * --show <CAcert>: outputs detailed about the certificate, similar or identical to the ‘openssl x509’ command. 

   * --showChain <CA cert>: outputs the trust chain of the certificate; used together with show. I think it would be useful if we can pass end user certs as input to this command. 

   * --verifyCAs: this command will verify all CAs presented in the directory of “--dir”  and their corresponding CRL files. This command checks if a CA cert is expired; and whether CRL is expired. 

Verbose output can include the numbers of verified CAs and list of CAs.

We decided to combine checkCRL and verify CA and turn this into a checkCA option

checkCA <CA hash or pattern> when no input is given the command runs for all CAs. 
It prints out: whether the CA cert is expired, the date the CA cert is downloaded, the date CA cert will be expired. whether CRL is expired. The date the CRL is downloaded and the date the CRL file actually created (by the CA), the date the CRL file will be expired. 

We can implement this with verbose option. In that case, without verbose we can print out whether CA file and CRL file is expired or not. The remaining outputs are printed when –verbose is set.   

   * diffCAPackage. This command checks the distribution package from GOC or VDT against the CA directory on disk. It lists all differences between the CAs on disk and the CAs included in the distribution at GOC or VDT (the config file tells us which distribution service is used by the user; therefore it runs diff against only one of these services.) 
By difference we mean, the CA files different on the CA package and on file. 

   * Rpm –q whatprovides
 it would be good if the script did  rpm -qf  first to check if the files are owned by an RPM and issue a warning. People looking at systems with YUM set up to fetch new CA files automatically should be fixing that if it goes wrong, rather than doing stuff manually.

Installed on: all hosts, where the CA repository is installed. 
Note: 

   1.	A newly added/removed CA must be handled properly when updating the CA repository.
   2.	Race conditions during updates must be handled properly.
  

---+++ CA MANAGEMENT  TOOL SPECIFICATION (Anand 9/23)

---++++ Syntax:
<verbatim>
ca_manage [global_options] command 
</verbatim>
%GREEN%(AR) Since we ship this with the VDT, should it be vdt-ca-manage?%ENDCOLOR%
<verbatim>
global_options =
 [--vdt-location <location>]
 [--verbose]
 [--force]
 [--certDir <location>]
</verbatim>
%GREEN%(AR) We need a --help option. Probably a --version option as well.%ENDCOLOR%
<verbatim>
command = [manage_command | status_command]  [<command_options>]

status_command = [
 showDistributionURL |
 listCA [--dir <local_dir>] [--pattern <pattern>] |
 verify [--hash <CA_hash>] |
 diffCAPackage |
 show [--certfile <cert_file> | --hash <CA_hash>] |
 showChain [--certfile <cert_file> | --hash <CA_hash>]
]

manage_command = [
 refreshCAPackage |
 fetchCRL |
 setDistributionURL [--url <URL_location>] |
 add [--dir <local_dir>] --hash <CA_hash> |
 remove --hash <CA_hash>
]


</verbatim>
---++++ Explanation of global options

Zero or more of these options may be used during an execution of ca_manage. 

   1.	<verbatim>--vdt-location <location></verbatim> The location the VDT was installed in. This option overrides the $VDT_LOCATION environment variable if it exists. This option is not needed if $VDT_LOCATION is set to the correct location. 
   2. <verbatim>--verbose</verbatim> Provides you with more information depending on the command context.
   3.	<verbatim>--force</verbatim> Forces the command to run ignoring any checks/warnings. The actual effect is context depended, and this behavior is noted in the command details below.
   4.	<verbatim>--certDir <location></verbatim> This location specifies the path CA directory. If this option is not specified then the command will look for $X509_CERT_DIR, $VDT_LOCATION/globus/TRUSTED_CA, and /etc/grid-security/certificates, respectively. If none of these directories can be found, the command will exit with an error.
 *NOTE:* I don't agree with the –showDir option in original specification, since providing a --showDir will require the ca_manage command to to tied with a single directory, thereby restricting the flexibility for the tool (for e.g. Managing the CE and the WN cert directories). 

%BLUE%(MA) Agreed%ENDCOLOR%
---++++ Explanation of commands

Exactly one command is to be specified during an execution of ca_manage

---+++++ Status_commands
   1.	<verbatim>showDistributionURL</verbatim> This will print out the distribution location specified in the config file. This command will read  vdt-update-certs.conf and output cacerts_url.%GREEN%(AR) This is a really long name to remember. Can we make it shorter??%ENDCOLOR%
   2.	<verbatim>listCA [--dir <local_dir>] [--pattern <pattern>]</verbatim> This command will use openssl x509 command on the files in the --dir to provide hash, the subject and whether a CA is IGTF or TeraGrid accredited (finding accreditation might require referring to some sort of static list). %BLUE%(MA)I would really like to output which method and distribution package are used to download CAs into the directory. This is not too easy but very useful for management %ENDCOLOR%  --verbose option will provide additional information like issuer %BLUE% (MA) issuer of the CA? %ENDCOLOR% and associated dates. If left unspecified --dir is is assumed to be same as --certDir. %BLUE%(MA) I thought --certDir is just an option, it does not set a environment variable , does it? %ENDCOLOR% The \<pattern\> specified in the option will be matched, using perl regex, against the subject field of the certificate (but we can also expand it include issuer if needed) and all CAs are listed if no pattern is given.
%GREEN%(AR) Since we ship this with the VDT, should it be vdt-ca-manage?%ENDCOLOR%
   3.	<verbatim>verify [--hash <CA_hash>]</verbatim>  The verify command will check all CAs (or if specified only the \<CA_hash\>) in the \<certDir\> directory, to see if any CA/CRL have expired or are about to do so. If any expired CA/CRL are found an error is issued along with the hash, date when CA cert/CRL expired. A warning is issued if either the CA cert or CRL is about the expire within the next 24 Hrs. The --verbose option provides a date the CA certs and CRL files are created (by the CA), downloaded (by VDT), and will expire. This will require a change in the vdt-update-certs to record the last time when the certs were downloaded.
%GREEN%(AR) Can we also print the CA's name?%ENDCOLOR%
   4.	<verbatim>diffCAPackage</verbatim> The specification says that this command checks the distribution package from GOC or VDT against the CA directory on disk. I am currently taking it to mean that we will check the files in the directory against what VDT downloaded during the last update. This will involve updating vdt-update-certs to record the certs it downloaded during the last update along with the md5 sums of the certs. If any new certs are found or any of the existing are found to be different, these will be identified and a warning will be issues. *NOTE:* If this command  was intended to download a new copy from VDT/OSG cache to check it against the local copy,  why not just replace old copy with the new one, since the copy coming from the cache is authoritative.  
   5.	<verbatim>show [--certfile <cert_file> | --hash <CA_hash>]</verbatim> This command will essentially provide a condensed output of openssl x509 command. --verbose option will provide the full output. If --hash option is used we will look for the \<CA_hash\>.o file in the \<certDir\>. 
   6.	<verbatim>showChain [--certfile <cert_file> | --hash <CA_hash>]</verbatim> This command will output the trust chain of the certificate. \<certDir\> will be used as the directory in which search for ancestor certs will be conducted. 

---+++++ Manage_commands
   1.	<verbatim>refreshCAPackage</verbatim> This command will refresh the CA package. It checks to see if a newer CA package is available and if so downloads it. If it is unsuccessfully in retrieving the newer package the existing one is left in place. This option will use the existing vdt-update-certs –force to force a check for new CA package. The refreshCAPackage command can also be itself executed with a --force option. This would not only force a check but it will force a new download of certs irrespective of whether a new distribution package is available. This will require implementing a new option to vdt-update-certs to force downloads. (NOTE: I have some reservation providing an option that would ignore checks in vdt-update-certs) %GREEN%(AR) Does it update CRLs? Or should this go into vdt-update-certs? %ENDCOLOR%
   2.	<verbatim>fetchCRL</verbatim> It retrieves CRLs for all CAs within the directory. This will involve invoking fetch-crl, with appropriate arguments. *NOTE:*
      a.  The original document had an argument of  <CA hash or pattern>, but I am unclear about the reason for such an argument. What is the argument against downloading all the new CRLs, is it not better to have all new CRLs. Also we decided against providing option to refresh a singleCA, is there an advantage to have refresh for a single CRL.  If there is a good reason to support this argument we will need to add code in the fetch-crl to achieve this.
      b. The original specification has a --force option for fetchCRL. After going through the current fetch-crl code, I am concerned about the wisdom of providing the --force option. What exactly are we forcing by this option? We might end up replacing the current with a older CRL (i.e. LastUpdateOfDownloadedCRL  <  LastUpdateOfCurrentCRL ). Adding this functionality into fetch-crl is not difficult but do we really want to support this?
   3.	<verbatim>setDistributionURL [--url <URL_location>]</verbatim> This command sets the location from where the CA files.  This command will modify vdt-update-certs.conf and set the cacerts_url as <URL_location>. Finally it will automatically invoke refreshCAPackage and fetchCRL commands to download updated CAs and the corresponding CRLs. (Should these commands be invoked with a –force option). The distribution  \<URL_location\> will be required to conform to the format similar to http://vdt.cs.wisc.edu/software/certificates/ca-certs-version (I believe this is VDT specific format,  standardized IGTF format, correct?). If the \<URL_location\> cannot be reached or does not conform to the format requirements a warning will be issues and no changes will be made. The --force option can be used to force a change ignoring the warning . If URL location is left unspecified the \<URL_location\> will be set to OSG default. As a lower priority we can define keywords for OSG, VDT, VDT-IGTF, etc to indicate well-known CA URL_locations.
   4.	<verbatim>add [--dir <local_dir>] --hash <CA_hash></verbatim> The --hash argument is required.  If --dir is not specified we will assume that the user wants to include a CA he has previously excluded and will remove the corresponding exclude lines from the config. If \<CA_hash\> is not known to us or it is already included we will provide appropriate error/warning information.  In the common case this command will add include lines for \<local_dir\>/\<CA_hash\>.*, into the vdt-update-certs.conf file. Lastly the command will invoke functions refresh the CAs and fetch CRLs. This command will also do some preliminary error checks, e.g. make sure that “.0”, “.crl_url”, “.signing_policy” files exist and that --dir is different than --certDir. NOTE: I am avoiding <pattern> option for add and remove since, I believe it is necessary for the site admin to unambiguity understand what CA he is adding or removing, patterns can lead to unintended consequences. He can always search for pattern using the listCA command.
   5.	<verbatim>remove --hash <CA_hash></verbatim> This command will be complementary to add and would either add an exclude or remove an include depending on the scenario. This command will also refresh CA and CRLs.

---++++ Notes:
   1.	Find and decide which openssl to use, either the one in $VDT_LOCATION/globus/bin or the one in /usr/bin or equivalent %GREEN%(AR) The VDT uses the system OpenSSL, so you should too. The one in globus/bin just points at the system one. %ENDCOLOR%
   2.	Check using rpm -q -whatprovides to see if the package has been installed using RPM. %GREEN%(AR) Be careful--we install on platforms that don't use RPM, so only do this if rpm exists. %ENDCOLOR%
   3.	What kind of logging should this script provide and where should these logs be stored? vdt-install.log? %GREEN%(AR) No, not vdt-install.log. It's not clear to me that we need a log at all, but you can put it into $VDT_LOCATION/var/log if you need it %ENDCOLOR%
   4.	All options/commands will be case insensitive.
   5.	\<pattern\> will follow perl regular expression


---+++ TIMELINE AND MANAGEMENT PLAN  

__Please update your assigned tasks below__

|*DueDate*|*Person Responsible*|*Involved People (either helping or approving)*|*Task Description*|*Logs/Comments/Updates*|
| 9/12| Mine and Alain|None|Understand OSG sites’ needs: whether they use RPMs or not. If OSG sites do not need RPM installations for CA distributions, then implement the above tool only for Pacman repository|We will not consider RPM implementation for now. Decided on 9/15| 
|9/22|Alain|None|Code repository. VDT's SVN will be used for repository. Alain provide access to Anand| | 
|9/22|Anand|Alain helps|A list of all security scripts in VDT will be documented: how they work currently and they the scripts interact. How how the existing code will be reused in any of the above options| |
|9/22|Alain|None|The recent changes to the vdt-update-certs and vdt-update-certs.conf files will be documented and examined.|http://vdt.cs.wisc.edu/releases/1.10.1/man/vdt-update-certs.html | 
|9/29|Anand|Alain, Jim, Mine|A detailed document stating how the tool will work. This document will describe the execution steps for each capability above and describe the choices made. | |
|10/20|Anand|Alain, Mine, Jim|Implementation of the code| |
|11/17|ITB, Alain, Suchandra| Anand, Mine, Jim|Testing of the new code| | 




-- Main.MineAltunay - 16 Sep 2008
