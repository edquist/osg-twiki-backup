%META:TOPICINFO{author="JimBasney" date="1209765340" format="1.1" reprev="1.14" version="1.14"}%
%META:TOPICPARENT{name="SecurityTeamWorkingArea"}%
%TOC%

---+ Proxy Cleanup

Proxy credentials typically have short (12 hour) lifetimes to minimize exposure to compromise.
However, to further limit exposure, proxy credentials should be destroyed before they expire if they are no longer needed.
This can be particularly important when users create proxy credentials with long lifetimes (for example, for long-running jobs).
In some cases, users must take an explicit action to destroy a proxy; in other cases, proxies will be destroyed automatically by grid software.
We document the different cases below.

Note that we specifically focus on the cleanup of proxy credentials before they expire, because expired proxy credentials do not pose a security risk due to the fact that they can not be used by an attacker.
System administrators may use cron jobs or other automated means to remove files containing expired proxy credentials to maintain tidy filesystems, but this is not a required practice from a security point of view.

---++ Proxy File Creation

The following diagram shows the relationships between the programs that create, delegate, and use proxy credentials in OSG, along with the associated proxy file paths: <br />
     <img src="%ATTACHURLPATH%/ProxyCreation.png" alt="ProxyCreation.png" width='720' height='540' />

---++ Proxy File Paths

In some cases, the file path of a proxy credential can identify how it was created:

| *Path* | *Source* |
| =/tmp/x509up_u${UID}= | =grid-proxy-init= and =voms-proxy-init= |
| =/tmp/x509up_p*= | Globus GSI GSSAPI delegation (GRAM2, GSI-OpenSSH) |
| =$HOME/.globus/job/${HOSTNAME}/*/x509_up= | GRAM2 |
| =$HOME/.globus/gram_job_proxy_*= | GRAM4 |
| =$VDT_LOCATION/vdt-app-data/globus/persisted/{ipaddr}/DelegationResource= | Delegation Service (GRAM4) |
| =$CONDOR_LOCATION/local.*/spool/cluster*.proc*.subproc*/x509up*= | Condor-G |

---++ Limited Proxy Certificates

Limited proxy certificates provide a mechanism to limit the damage if a proxy certificate is compromised.
Unlike a full proxy certificate, a limited proxy certificate can not be used to launch a GRAM job or login via GSI-OpenSSH.
A limited proxy certificate can be created via the =grid-proxy-init -limited= and =voms-proxy-init -limited= options.
Also, =globusrun=, =globusrun-ws=, and Condor-G (with GRAM2) will by default delegate limited proxy credentials with submitted jobs, allowing the jobs to access GridFTP servers (for example) but not allowing the jobs to submit other GRAM jobs or use =gsissh=.
More information about different types of proxy certificates is available at http://dev.globus.org/wiki/Security/ProxyCertTypes.
Note also the Open Issues below related to limited proxies.

---++ Proxy Delegation

In the following table, we summarize the proxy delegation behavior of different OSG clients:

| *Program* | *Type of Proxy Delegated* | *Lifetime of Delegated Proxy* | *Proxy Cleanup Behavior* |
| Condor-G | limited proxy for GRAM2, full proxy for GRAM4 | lifetime of the source proxy for GRAM2, maximum 12 hours for GRAM4 | cleanup at job completion for GRAM2, cleanup after 12 hour timeout for GRAM4 |
| =gsissh= | full proxy | lifetime of the source proxy | cleanup on exit |
| =globusrun= | limited proxy | lifetime of the source proxy | cleanup at job completion |
| =globusrun-ws= | limited proxy | lifetime of the source proxy | cleanup at job completion (but see Open Issues below) |
| =globus-credential-delegate | full proxy by default, limited if =-d= option is specified | lifetime defaults to 12 hours if =-l= option is not specified | cleanup when proxy expires or when manually removed by =wsrf-destroy= |

Additional details are provided below.

---++ Client-Side Proxy Credentials

Client-side proxy credentials are those credentials created by the user at the start of a grid session via commands such as =grid-proxy-init= and =voms-proxy-init=.
These credentials are typically written to =/tmp= with a filename prefix of =x509up_u=.
Users then submit jobs via =globusrun= or =condor_submit=, transfer files via =globus-url-copy= or =uberftp=, or perform other tasks on the grid using the client-side proxy credentials to authenticate to grid services.
These proxy credentials may also be delegated to the grid services so the services can act on the user's behalf.
We deal with delegated proxy credentials in later sections.

There is no automated mechanism to destroy these client-side proxy credentials.
It is difficult to develop such as mechanism, because there is no reliable way to detect when the user's "grid session" has ended.
The user may have multiple shells, background processes, etc., that are using the credentials.
For example, putting =grid-proxy-destroy= in the user's =~/.bash_logout= may delete proxy credentials that are still needed, creating a usability problem when the user gets unexpected "no credentials found" errors.
Therefore, we must rely on users to manually run =grid-proxy-destroy= at the end of their grid session; otherwise, the proxy credentials will remain on the system and will be valid until their expiration time.
We should also encourage users to create proxies with short lifetimes to limit exposure.

---++ Condor-G

Before submitting a job via the [[http://www.cs.wisc.edu/condor/condorg/][Condor-G]] =condor_submit= command, users must first create a proxy credential using =grid-proxy-init= and =voms-proxy-init=.
Users may specify the location of the proxy file to be used for their jobs via the =x509userproxy= command in the =condor_submit= job description file.
If the =x509userproxy= command is not included, Condor-G will use the value of the =$X509_USER_PROXY= environment variable if present to locate the proxy and otherwise will look for the proxy file in =/tmp/x509up_u${UID}=.

Condor-G handles proxy files like other job input files.
If the =-remote= or =-spool= argument is given, =condor_submit= will delegate the proxy over the network to the =condor_schedd=, which will store it in the Condor spool directory, allowing the user to run =grid-proxy-destroy= after job submission to cleanup the proxy credential created earlier.
When the associated job completes, Condor-G will delete the associated proxy credential in the spool directory. 
%RED%(This does not appear to be true.)%ENDCOLOR%
If the =-r= or =-s= argument is not given, Condor-G will directly read the proxy file found by =condor_submit=, in which case, the user must not run =grid-proxy-destroy= or Condor-G will lose access to the proxy credential while the job is running.
Furthermore, Condor-G will not delete the proxy file, since it has no way to know if the proxy is being used for other purposes.
In this case, we must rely on the user to manually run =grid-proxy-destroy= when the proxy is no longer needed.

The Condor spool directory can be located by the command =condor_config_val spool=.

Condor-G will watch the proxy file, checking for updates. When it detects an update, it forwards it to the next hop in the job submission chain. This could be GRAM, a Condor starter, or a Condor schedd. If the job's input files were spooled by =condor_submit=, then the copy in the spool directory is watched. Otherwise, the original proxy file is watched. 

%RED% Can we please explain how the delegation and cleanup works when condor job manager is stopped and restarted. 

Can we also add Jaime's test results which he agreed to do for us here %ENDCOLOR%

---++ GRAM2

[[http://www.globus.org/toolkit/docs/4.0/execution/prewsgram/][GRAM2]] clients can optionally delegate a proxy credential as part of job submission.
The GRAM2 =globusrun= command always delegates a proxy credential.
The delegated proxy credential allows the job to access other grid services such as !GridFTP servers.
GRAM2 implements delegation in the GSI GSSAPI protocol, writing the proxy credential to a file in =/tmp= owned by the user and readable only by the user, named with a prefix of =x509up_p=.
In GSSAPI, delegation is performed only after successful mutual authentication and authorization of the server by the client but before authorization of the client by the server.
As part of job initialization, the GRAM2 jobmanager moves the proxy file from =/tmp= to a subdirectory of =$HOME/.globus=
and sets the =$X509_USER_PROXY= variable in the job's environment to the proxy file location.
Thus, the proxy file is in =/tmp= for only a short time.
When the job completes, the GRAM2 jobmanager removes the proxy file from the =$HOME/.globus= subdirectory.
 
---++ GRAM4

[[http://www.globus.org/toolkit/docs/4.0/execution/wsgram/][GRAM4]] (WS-GRAM) clients may optionally use the Globus [[http://www.globus.org/toolkit/docs/4.0/security/delegation/][Delegation Service]] to delegate a proxy credential as part of job submission.
The Delegation Service is located in the same GT container as WS-GRAM.
The Delegation Service performs an authorization check before accepting delegated credentials from clients.
%RED% can we explain this more %ENDCOLOR%
After delegation, an !EndPointReference (EPR), which is a handle to the delegated proxy, is returned to the client.
The client can then include the EPR for the proxy in the job description when submitting WS-GRAM jobs.
The client can use the same proxy EPR in the submission of multiple WS-GRAM jobs.
Thus, clients can delegate to the Delegation Service before any interaction with the WS-GRAM service (i.e., delegation requires authorization to access the Delegation Service, which is separate from authorization to use the WS-GRAM service).
%RED% is GRAM authorization the gridmap-files or something else here ? %ENDCOLOR%
The Delegation Service stores credentials as serialized Java objects in the container persistence directory.
By default in GT, this directory is located at =~globus/.globus/persisted/{ipaddr}/DelegationResource= but in VDT it is located at =$VDT_LOCATION/vdt-app-data/globus/persisted/{ipaddr}/DelegationResource=.
At job submission time, GRAM4 creates a proxy for the job in =$HOME/.globus/gram_job_proxy_*= from the proxy stored in the Delegation Service using the =globus-gram-local-proxy-tool= run via =sudo= and sets the =$X509_USER_PROXY= variable in the job's environment to the proxy file location.

GRAM4 clients can register for job state notifications and cleanup delegated credentials when the job completes; however, not all GRAM4 clients do so.
The =globusrun-ws= command does it; Condor-G does not.
The credentials in the Delegation Service and the job credentials in the user's =$HOME= each have an associated termination time after which they are both cleaned up.
In some cases, the termination time is equal to the lifetime of the credential.
In other cases, the termination time is set by the client to a default value such as 12 or 24 hours.
Whenever a credential in the Delegation Service is removed, either explicitly by a GRAM4 client or because of a timeout, both the copy of the credential in the Delegation Service and the copy in =$HOME/.globus/gram_job_proxy_*= are cleaned up.
GRAM4 registers with the Delegation Service for a callback when jobs are removed; when it receives the callback, GRAM4 runs =globus-gram-local-proxy-tool -delete= via sudo to remove the =$HOME/.globus/gram_job_proxy_*= file.

Condor-G maintains a proxy credential in the Delegation Service for each user who has jobs in the queue.
It does not explicitly destroy the credentials, because it reuses them across multiple jobs/workflows.
Instead, Condor-G uses the termination time as a "lease", typically setting the termination time to 12 hours in the future.
Condor-G then renews this 12-hour lease ever 1 hour as long as the user has jobs in the queue.
Once Condor-G no longer has jobs for that user, it no longer renews the lease, so the Delegation Service will delete the proxy if the user does not submit more jobs within 12 hours.
Condor-G will refresh the proxy in the Delegation Service if needed.
GRAM4 receives a callback when proxies are refreshed in the Delegation Service and updates the proxy files for any active jobs.

---++ GSI-OpenSSH

By default, [[http://grid.ncsa.uiuc.edu/ssh][GSI-OpenSSH]] delegates proxy credentials with remote sessions and removes the delegated proxy file when the user ends the session.
GSI-OpenSSH implements delegation in the GSI GSSAPI protocol, writing the proxy credential to a file in =/tmp= owned by the user and readable only by the user, named with a prefix of =x509up_p=.
Users can disable delegation via the =GSSAPIDelegateCredentials= option on the =gsissh= command-line or in the =ssh_config= file.
Administrators can disable credential cleanup via the =GSSAPICleanupCredentials= option in the =sshd_config= file.

---++ !GridFTP

When performing a third-party file transfer via [[http://www.globus.org/toolkit/docs/4.0/data/gridftp/][GridFTP]], the client delegates credentials to the !GridFTP servers so they can perform mutual authentication on the data channel on the user's behalf.
The delegated credentials are held in the memory of the !GridFTP server instances and are never written to disk, so they are destroyed when the transfer completes and the server instances exit.
Thus, there is no issue with proxy cleanup for !GridFTP.

---++ Open Issues

Here we list the issues that are not yet resolved.

   * WS-GRAM fails to cleanup proxies in =$HOME/.globus/gram_job_proxy_*= if the =globus= user does not have permission to access that directory. See [[http://bugzilla.globus.org/bugzilla/show_bug.cgi?id=5992][Globus Bug 5992]]. Fixed in GT 4.0.8 and 4.2.0.
   * Condor-G should remove the user's proxy from the Delegation Service when all the user's jobs have completed. Instead, it relies solely on the lease mechanism described above to remove unused credentials.
   * Does the Delegation Service cleanup credentials that expired when the container was down? See [[http://bugzilla.globus.org/bugzilla/show_bug.cgi?id=3145][Globus Bug 3145]]. As discussed above, the cleanup of expired credentials is not a security concern, due to the fact that expired credentials can not be used for authentication. It is possible for the Delegation Resource lifetime to be shorter than the proxy lifetime; though this rarely occurs in practice, due to this bug it could result in still-valid credentials not being cleaned up when expected.
   * For jobs that complete while the jobmanager is down, does the GRAM2 jobmanager cleanup credentials when it starts back up?
   * Condor-G delegates a full proxy to GRAM4 rather than a limited proxy. [[Main.JimBasney][Jim Basney]] has reported this to the Condor team.
   * GRAM4 accepts a limited proxy for job submission. See [[http://bugzilla.globus.org/bugzilla/show_bug.cgi?id=6055][Bug 6055]].

---++ Useful Commands

The following examples show useful commands for investigating proxy cleanup behavior:

<verbatim>
grid-proxy-init -hours 96
globusrun -o -r vdt-test.ncsa.uiuc.edu/jobmanager '&(executable=$(GLOBUS_LOCATION)/bin/grid-proxy-info)'
globusrun-ws -J -F vdt-test.ncsa.uiuc.edu:9443 -submit -streaming -c /opt/vdt-1.8.1/globus/bin/grid-proxy-info
grid-proxy-info -file ~/.globus/gram_job_proxy_a02dc200-1206-11dd-9914-e6d67486a6f8
globus-credential-delegate -h vdt-test.ncsa.uiuc.edu -p 9443 ~/epr
globusrun-ws -Jf ~/epr -F vdt-test.ncsa.uiuc.edu:9443 -submit -streaming -c /opt/vdt-1.8.1/globus/bin/grid-proxy-info
wsrf-destroy -e ~/epr -d
grid-proxy-init -limited -hours 96
</verbatim>

%META:FILEATTACHMENT{name="ProxyCreation.png" attr="" autoattached="1" comment="diagram of proxy credential creation in OSG showing processes and file locations" date="1209740715" path="ProxyCreation.png" size="130956" user="Main.JimBasney" version="1"}%
%META:FILEATTACHMENT{name="ProxyCreation.ppt" attr="" autoattached="1" comment="diagram of proxy credential creation in OSG showing processes and file locations" date="1209741072" path="ProxyCreation.ppt" size="216064" user="Main.JimBasney" version="1"}%
