%META:TOPICINFO{author="MineAltunay" date="1272580086" format="1.1" reprev="1.3" version="1.3"}%
%META:TOPICPARENT{name="SecurityTeamWorkingArea"}%
---++ Authentication Infrastructure: Challenges and Possible Solutions
---+++The Problem
User management of access credentials. Users complain the difficulty of managing credentials on desktop applications, most importantly in browsers and email clients.
   1. exporting/importing the certificates from/into the browsers and email clients
   1. inserting roots of trust into the browser CA certs. Although this is a general problem with the web environment, grid world makes a bit harder on the user because our CAs certificate do not get distributed by default in the browsers. 
   1. moving certificates into the file system that can be accessed by grid application /.globus directory. This is a problem of moving certificates from web domain to grid domain. 

For the rest of this text, when we say grid domain, we mean software that is included in VDT and uses GSI and certificates natively; whereas when we say web/desktop domain, we mean all other software. We call the latter group web because browser based applications are the most prominent in this group. Web apps include wikis, svn repositories, email lists, ldap access and so on. Credentials mean any collection of attributes necessary for access control. 

%RED%Constraints, Requirements%ENDCOLOR%
   *  Any solution should be feasible with changes in the PKI infrastructure. Federation-based CAs are becoming more prevalent. So far they obtain certificates via browsers. 
    
---+++Proposed Solutions
---++++Separate Web and Grid applications and use non-certificate based access control in Web domain
Access control for web applications will be based on non-certificate based access credentials. The credentials can be username/password, or SAML tokens generated by openID or Shibboleth. 

%RED%*Pros*%ENDCOLOR%
   * Ease of use with well-known credentials such as username/password. 
   * Industry support of the widely-adopted credentials. Out-of-the-box support built into the web clients.
   
%RED%*Cons*%ENDCOLOR%
   * Less security: certificates are two-factor authentication methods. (something you know (passphrase) and something you have (private key)). the password based schemes are one-factor. Federation based solutions are dependent on whichever authentication method used by the home organization
   * Existing web applications that use certificates need to be modified. Some web pages already require certificates for authentication. These should be modified to use selected credentials.  
   * Some users will still use certificates for sensitive web applications. Some web applications with sensitive security needs, such as Pakiti and ticket viewers, will still be accessed by certificates because of higher security standards.    
   * Less-known technologies such as those based on federations may initially be hard to use and learn for the users. Also, forwarding used in federation based solutions is bad security practice.  
 
---++++Use two separate certificates: one for web domain and one for the grid job submissions
Use two separate  certificates; one for web and one for the grid job submissions. 

%RED%Pros%ENDCOLOR%
   * The user never have to transfer certificates between web and grid domains. Each domain has their own certificates. 

%RED%Cons%ENDCOLOR%
   * Does not fully solve the certificate management problem for the browser. 
   * The user has to obtain two certificates. 
   * Does not fully solve the certificate management problem for the browser. The user still has to manage it on the browser. 
   * Applications other than browsers such as email clients, svn repositories and so on, that need secure access would still be a problem. The user has to export/import certificates from the browser and feed into these tools. 

---++++Use a single certificate per user for all applications by using MyProxy Server to transfer certificates from web domain to grid domain

Disadvantage of the previous option (two certificates) can be eliminated by using only one certificate and moving it between the domains. A central Myproxy server provides the movement across the domains. The user obtains a certificate through the browser interface and stores this in his/her browser. Somehow, this certificate and the private key file are transferred to Myproxy server. The user uses the command line MyProxy client to retrieve a proxy to use grid domain (Because browsers would not recognize proxies, the proxy certificates would be used for grid domain. 

 
%RED%Pros%ENDCOLOR%
   * The user does not transfer certificates between the domains.
   * The user has only a single certificate
   * The user does not have to install any special client 
   * The user can use multiple machines for grid jobs. S/he does not need to transfer credentials from laptop to laptop. 

%RED%Cons%ENDCOLOR%
   * Does not fully solve the certificate management problem for the browser. The user still has to manage it on the browser. 
   * Applications other than browsers such as email clients, svn repositories and so on, that need secure access would still be a problem. The user has to export/import certificates from the browser and feed into these tools.  
   * There needs to be a mechanism to initially store user certificate and the private key (or a fully delegated proxy) in the MyProxy server. 
   * Higher risk in terms of attacks. Single point of attack. 
   * Having Myproxy server down is not a severe operational problem because the user can manually export certificate from the browser and use it for job submission although it is a hard process.
 


---++++Use certificates with all applications (web and grid) by implementing a certificate management software on user desktop
Implement a desktop certificate management software and install on user's machine. The tool would oversee complete certificate management for both web and grid domains. The tool is very similar to a NetIDManager, which only works on windows. It is integrated with well-known applications that are used by the scientists, such as browsers, email client, svn repositories and so on. It configures the applications to use the single certificate. 

%RED%Pros%ENDCOLOR%
   * Provides higher security by enabling certificate usage
   * Solves the web domain management problems; fully integrated with browsers, email clients, svn repositories and such to manage certificates for all these applications  
   * NetIDMngr, a certificate solution developed for Fermilab windows domain, is already open source and available. For Linux domain, there are already tools existing to import/export into/from a browser. 

%RED%Cons%ENDCOLOR%
   * very significant amount of development effort
   * It is useless for the applications that has no built-in certificate support
   * Maintenance is a major problem. Constant update is needed for newer versions of applications. For browsers, this is not a huge undertaking, which has established interfaces to use Windows certificate stores. Changes in Windows code means, we have to modify this tool. But on the positive side , the changes in browser code does not affect this tool as long as it is compliant to windows certificate store. Applications that do not have established certificate stores would require an update to this tool each time such applications modify. 
     
%RED%Questions and TODO%ENDCOLOR%
   * What other access control mechanisms and credentials could be useful for our users? 
   * Which web applications are used currently? Are they mostly browser based? Keep in mind applications will change in future, but it is useful to understand what is used today. (is this possibly in the ID Mgmt workshop survey reports?)
   * What certificate management functions are needed in the browser? Export/import/remove certificates? what else?
   * is the certificate management easy in the grid domain? are there any problems with grid applications? 
      * Moving from laptop to laptop is very difficult even within the grid domain. the user needs to copy/paste the certificate files and each time s/he utilizes a different computer. 

-- Main.MineAltunay - 29 Apr 2010
