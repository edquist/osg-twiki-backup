%META:TOPICINFO{author="MineAltunay" date="1274823755" format="1.1" reprev="1.7" version="1.7"}%
%META:TOPICPARENT{name="SecurityTeamWorkingArea"}%
---++ Authentication Infrastructure: Challenges and Possible Solutions
---+++The Problem
User management of access credentials. Users complain the difficulty of managing credentials on desktop applications, most importantly in browsers and email clients. This includes: 
   1. exporting/importing the certificates from/into the browsers and email clients
   1. inserting roots of trust (CA certs) into the browser. Although this is a general problem with the web environment, grid world makes a bit harder on the user because grid CAs' certificates do not get distributed by default in the browsers. 
   1 converting the p12 files (used by browsers) into pem formats. 
   1 copying the certificate files into the correct .globus directories for grid job submissions  

For the rest of this text, when we say grid domain, we mean software that is included in VDT and uses GSI and certificates natively; whereas when we say web/desktop domain, we mean all other software. We call the latter group web because browser based applications are the most prominent in this group. Web apps include wikis, svn repositories, email lists, ldap access and so on. Credentials mean any collection of attributes necessary for access control. Whenever I refer to web tokens, SAML tokens or web attributes, it means non-certificate based security assertions. 

*%RED%Constraints, Requirements%ENDCOLOR%*
   *  Any solution should be feasible with changes in the PKI infrastructure. Federation-based CAs are becoming more prevalent. So far they obtain certificates via browsers. Any solution we come up with should be compatible with the changes in the authentication world.   
    
---+++Proposed Solutions
---++++ 1. Separate Web and Grid applications: eliminate certificates from the Web domain
Access control for web applications will be based on non-certificate SAML-like access credentials. The credentials can be username/password, or SAML/openID tokens. These credentials have to be recognized by the VO and stored in a user membership database to authenticate the user. Or alternatively, the VO must be able to issue such credentials for their members if the user's home organization does not generate such attributes. 

The users can get certificates for the grid apps in a number of ways. The certificates can be generated automatically upon joining the VO. For example, PURSE system from ESG generates the private/public key in the portal and issues a certificate and stores in Myproxy with no user intervention. When user submits a job, job authenticates to the Myproxy server with users attribute tokens or uname/passwords, and retrieves a proxy on his/her behalf. The PURSE system requires no user intervention at all to generate the certificates. This scheme is also accredited by IGTF under new usage guidelines. 

Alternatively, the user can get certificates in the regular fashion by making a request to the CA. The certificate issuing CA (e.g a shib-CA) can associate which attribute tokens are generated by a VO, or even be tied into the VOMS server database, so that CA can generate instantaneous certificates for the VO members with no additional vetting. If no federated CA exists, users can continue to obtaining certificates with existing command-line tools. 

*%RED%Pros%ENDCOLOR%*
   * Ease of use with well-known credentials such as username/password. 
   * Industry support of the widely-adopted credentials. Out-of-the-box support built into the web clients. OSG does not need to support any solutions 
   * Complete elimination of certificates from the user desktop. 
   
*%RED%Cons%ENDCOLOR%*
   * Less security: certificates are two-factor authentication methods. (something you know (passphrase) and something you have (private key)). the password based schemes are one-factor. Federation based solutions are dependent on whichever authentication method used by the home organization. However, one can claim that certificates are not truly two-factor authentication either. User may not encrypt their private keys. OR one can argue that private keys are part of the user's laptop and is not truly a separate token ownership of which shows the identity.  
   * Essentially we end up with two separate identity tokens : one for the web domain and one for the grid domain. A VO may have to keep two separate membership lists or at least should keep an association between a person's web id and grid id. The VO membership can easily run out of synch if one id is updated but the other one is not. We can generate the grid certificates from the saml tokens, e.g. federated CAs, so that both ids are tied together. The format of the certificates can be predicted by the VO; therefore, the association between web and grid identities maintained much easily. Even easier approach is to use the VOMS database to determine who should get the certificates. 
   * Existing web applications that use certificates need to be modified. Some web pages already require certificates for authentication. These should be modified to use selected credentials.  
   * Some users will still use certificates for sensitive web applications. Most likely these will be security contacts, site admins and so on. Some web applications with sensitive security needs, such as Pakiti and ticket viewers, will still be accessed by certificates because of higher security standards.    
   * Less-known technologies such as those based on federations may initially be hard to use and learn for the users. Also, forwarding mechanism used in federation based solutions is bad security practice.  
   * Myproxy is a single point of attack. 
   * if certificate are issued in the back-end without any web interface for outputting the certificates, when the user needs a certificate for his desktop it could be quite hard to import it. Although this solution assumes certificates will not be used for web- and desktop-based apps, the VOs will always be a hybrid of apps, some apps that could not make the transition to SAML and need certificates. So it is useful to have both options implemented. 
 

*%RED%Issues for Investigation%ENDCOLOR%*

   * How users will obtain SAML/OpenID attributes? If their home organization does not issue such attributes, then should the VO issue them? Can VOMS issue such attributes? Do we need to bring in a new attribute IdP for each VO other than VOMS? 
   * If VOs cannot issue SAML/openID attributes, what alternatives are there? for example, can the VO use uname/password mechanism and if so how? 
   * How easy for VOs to consume the tokens in the web domain. Would their existing web pages and apps work with the new tokens, if not how much of work is needed to make the change. What are the access control over VO web pages currently? is it certificate based, or uname/psswd based or both? 
   * Would existing CAs be compatible with the attributes generated by the VOs so that CA can issue instantaneous certificates? 
   * Can this solution help the VOs with a hybrid of apps, some web apps that still use certificates and some web apps that use the new tokens? this solution may be flawed in its assumption that all VO apps will be working without certificates. If thsi does not hold out to be true, what other solutions can be used to help? 

---++++2. Use two separate certificates: one for web domain and one for the grid job submissions
Use two separate  certificates; one for web and one for the grid job submissions. Use the web tools to get a certificate in the browser and use the command line tools to get a certificate in the file system or the submit node. 

*%RED%Pros%ENDCOLOR%*
   * The user never have to transfer certificates between web and grid domains. Each domain has its own certificates. 

*%RED%Cons%ENDCOLOR%*
   * The user has to obtain two certificates. 
   * The user still has to manage the certificate in the browser although it is significantly easier. The user still has to import root CA certificates.. 
   * Applications other than browsers such as email clients, svn repositories and so on, that need secure access would still be a problem. The user has to export/import certificates from the browser and feed into these tools. 

---++++3. Use a single certificate everywhere, use Myproxy to transfer certificates from web domain to grid domain

Disadvantage of the previous option (two certificates) can be eliminated by using only one certificate and moving it between the domains. A central Myproxy server provides the movement across the domains. The user obtains a certificate through the browser interface and stores this in his/her browser. Somehow, this certificate and the private key file are transferred to Myproxy server. The CA wizard from UK e-science CA for example has a java application to upload p12 files into a Myproxy server. Without such a wizard, this solution really adds no benefit to the user. The user uses the command line MyProxy client to retrieve a proxy to use with grid applications (Because browsers would not recognize proxies, the proxy certificates would be used for grid domain.) 

 
*%RED%Pros%ENDCOLOR%*
   * The user does not transfer certificates between the domains.
   * The user has only a single certificate
   * The user does not have to install any special client. The wizard is a java web start application.  
   * The UK e-science cert wizard can work natively with p12 files. Although user still need to export the certificate. It is somewhat easier that user does not need convert p12 to pem files.
   * The user can access its credentials from multiple machines. S/he does not need to transfer credentials from laptop to laptop. 

*%RED%Cons%ENDCOLOR%*
   * How user will be able to move the certificate from the browser to the MyProxy server. if user has to export and then manually insert, then this solution makes life harder, rather than easier.
   * Configuration of the cert wizard tool should be very easy. Currently, it comes with no configuration, and configuring the tool is a non-negligible task. 
   * Applications other than browsers such as email clients, svn repositories and so on, that need secure access would still be a problem. The user has to export/import certificates from the browser and feed into these tools.  
   * Higher risk in terms of attacks. Single point of attack. 
   * Having Myproxy server down is a problem, although not very severe because the user can manually export certificate from the browser and use it for job submission.
 
---++++ 4. Use a single certificate everywhere, transfer certificates from grid domain to web domain

This solution is almost identical to the solution #3. Except that it generates certificates using the command line tools and then transfers them to the web domain. The transfer can  even happen with no tools or with a sendmail command if the certificates are generated on a different machine than the user's desktop. the importing of the certificates are handled by a specialized script or by the user. 

*%RED%Pros%ENDCOLOR%*
   * much simpler than solution #3. almost requires no tools. However, import of the certificates still require a tool or manual effort. 
*%RED%Cons%ENDCOLOR%*
   * assumes that user have access to the command line scripts. The users who only need certificates for web-based access would get no benefit from this method. The portal based VO users may be one of these. But such users (e.g. nanoHub users) do not even use certificates at all. They lgin via username password base means.  


---++++ 6. Use certificates with all applications (web and grid) by implementing a certificate management software on user desktop
Implement a desktop certificate management software and install on user's machine. The tool would oversee complete certificate management for both web and grid domains. The tool is very similar to a NetIDManager, which only works on windows. It is integrated with well-known applications that are used by the scientists, such as browsers, email client, svn repositories and so on. It configures the applications to use the single certificate. 

*%RED%Pros%ENDCOLOR%*
   * Provides higher security by enabling certificate usage
   * Solves the web domain management problems; fully integrated with browsers, email clients, svn repositories and such to manage certificates for all these applications  
   * NetIDMngr, a certificate solution developed for Fermilab windows domain, is already open source and available. For Linux domain, there are already tools existing to import/export into/from a browser. 

*%RED%Cons%ENDCOLOR%*
   * very significant amount of development effort
   * It is useless for the applications that has no built-in certificate support
   * Maintenance is a major problem. Constant update is needed for newer versions of applications. For browsers, this is not a huge undertaking, which has established interfaces to use Windows certificate stores. Changes in Windows code means, we have to modify this tool. But on the positive side , the changes in browser code does not affect this tool as long as it is compliant to windows certificate store. Applications that do not have established certificate stores would require an update to this tool each time such applications modify. 
     

*%RED%Questions and TODO%ENDCOLOR%*
   * What other access control mechanisms and credentials could be useful for our users? 
   * Which web applications are used currently? Are they mostly browser based? Keep in mind applications will change in future, but it is useful to understand what is used today. (is this possibly in the ID Mgmt workshop survey reports?)
   * What certificate management functions are needed in the browser? Export/import/remove certificates? what else?
   * is the certificate management easy in the grid domain? are there any problems with grid applications? 
      * Moving from laptop to laptop is very difficult even within the grid domain. the user needs to copy/paste the certificate files each time s/he utilizes a different computer. 
   * if we go along with MyProxy based solution, does it work only with command line or does it have a web interface? 
   * how will federation based ca be useful for us? they will work through browser interface and will suffer from all the problems that browsers are suffering right now. can we interface them through our command line scripts. 
   * if we choose to implement command line scripts, importing certificates into the browser will still be a problem. MyProxyy web interface may be a solution.
   * if we go with solution #1, saml and certificates, how will a VO will associate two separate user identities with one another. Will they have to use a different authorization service for the web based applications. When someone leaves teh VOMS server, web applications shouldalso remove the users authorization. how will this happen if voms does nto work in the web domain? if so how two separate authz tools will be synchronized with one another.   
   * how voms can be used as an idp. after itb testing, we can test this.  
   * can we use the tool from the ogce Cog kit to move teh certs from teh browser into the myproxy. 
   * what is the myproxy output format if we input a p12 file 
   * are there any users who need certificate only for the web-based and desktop based applications? the solution #4 would not work for them.  
   * can you check out a real certificate not proxy out of MyProxy? 
-- Main.MineAltunay - 29 Apr 2010
