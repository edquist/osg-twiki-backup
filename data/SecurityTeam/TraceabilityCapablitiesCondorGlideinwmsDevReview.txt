%META:TOPICINFO{author="MineAltunay" date="1364849429" format="1.1" reprev="1.1" version="1.1"}%
---++ User Traceability Capabilities of Glideinwms and Condor for Jobs without End User certificates

---+++Goal
The goal is to understand the exsiting traceability capability in glideinwms and condor systems. In particular we are asking the following question: 
   * Assuming no end users have user certificates and consequently sites do not run glexec, if a site admin find a troublesome (malicious or not) process running on their worker node, can the site admin trace this process back to a user who owns this process? 

We asked this question to glideinwms and condor developers. Their answers and analysis are documented below. 


---+++ Technical Background

Here are the important facts about glideinwms system that will help us guide through the tracing process

   * A worker node can run multiple glideins
   * A glidein only starts a single job, waits until the jobs finishes and then starts another job. In other words, a glidein will never run two user jobs concurrently. 
   * All condor logs associated with the glidein is transferred back to the Factory. 

---+++ Tracing Process
   * Scenario: In the absence of user certificates and glexec, a site admin finds a problematic process running on a worker node. The goal is to find out which end user owns this process. 

   1 Identify the worker node (IP address) that has the problem process.
   1 Identify the process ID of the problem process. Establish the timeframe when this process ran.
   1 Identify the condor job id that spawned this process. 
      * To do this, find the condor starter logs and search for the process ID. If the job spawned multiple processes, first search the process tree and find out the process id that initiated the problem process. When you find the process id in condor starter log, compare it against the timeframe of the process. 
      * If the worker node has multiple glideins running, there will be multiple condor starter logs. Each glidein will have its own starter. Repeat the step 3 for each starter log until a condor job id for the problematic process is identified. 
   1 Identify the glidein who started the problem condor job. 
      * The condor starter log that has the problem process id will also tells us which glidein started this job. 
   1 Identify the VO that owns the glidein and the problem job. 
      * Glideins each have their own certificates and are assigned to a unique VO. it is easy to find which VO frontend started this glidein. 
   1 Identify the end user account. 
       * The fronted job queue will have the same condor job ID that we found in the starter log. Ask Frontend operator to find out which user account submitted this condor job to the front end queue
   1 Identify the end user. 
       * From the user account on the Frontend node, the frontend admin will find out which users logged into this account and identify the end user. 
        

---+++ Important details
   * Condor starter logs are crucial to find out the condor job id. These logs are sent back to the factory and stored for a short amount of time. We should exmaine what is the default archival length for these logs. 
   * Knowing the timeframe of the problem process is very important for traceability. The pid may be recycled after the process finishes. 
   * The worker node admin must have a way of storing system level information about his/her system. This should be sufficient that when she/he observes a problem behaviro she/he can find out the pid and the timeframe of the process (when it ran). this has nothing to do with glideinwms or condor systems, and we assume all systems will have the basic security setup to store such information. 

---+++ Conclusion

   The glideinwms and condor has sufficient information to uniquely trace a process back to the owner of that process. 



-- Main.MineAltunay - 01 Apr 2013

   * TraceabilityGlideinwms.png: <br />
     <img src="%ATTACHURLPATH%/TraceabilityGlideinwms.png" alt="TraceabilityGlideinwms.png" width='200' height='400' />    

%META:FILEATTACHMENT{name="TraceabilityGlideinwms.png" attachment="TraceabilityGlideinwms.png" attr="" comment="" date="1364849313" path="TraceabilityGlideinwms.png" size="44922" stream="TraceabilityGlideinwms.png" tmpFilename="/usr/tmp/CGItemp53023" user="MineAltunay" version="2"}%
