%META:TOPICINFO{author="JimBasney" date="1241648613" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="WebHome"}%
%TOC%
---+ Secure Hash Algorithms

Cryptographic hash functions, also known as secure hash algorithms, take an arbitrary length string and return a fixed-length hash value.
Strong cryptographic hash functions make it easy to compute the hash value from an input string but very difficult to find a message that results in a particular hash value, modify a message without changing its hash value, or find two messages that hash to the same value.
Digital signature algorithms rely on cryptographic hash functions.
To sign a message, the signer first computes the hash value of the message, then encrypts the hash value with his or her private key.
To verify a message, the verifier decrypts the signature with the signer's public key and verifies that the decrypted value matches the message hash.
A Public Key Infrastructure (PKI) uses digital signatures when creating and verifying certificates.

OSG's authentication and authorization infrastructure is PKI-based.
Thus, cryptographic hash functions play an important role in OSG security.
The OSG Security Team encourages the use of strong cryptographic hash functions
and supports the migration away from cryptographic hash functions with known weaknesses.

---++ MD5

In December 2008, researchers demonstrated an attack against MD5-based signatures in X.509 certificates
(see http://www.win.tue.nl/hashclash/rogue-ca/ for details).
Weaknesses in the MD5 hash algorithm allowed the researchers to modify a valid certificate, changing the certificate's subject, serial number, validity period, and other fields, without changing the certificate's hash value, so the CA's signature on the certificate was still valid.
The [[http://www.igtf.net/][IGTF]] issued a statement regarding the impact of this attack on IGTF CAs (http://www.eugridpma.org/newsletter/eugridpma-newsletter-20090102.txt).
IGTF CAs began migrating from the MD5 hash algorithm to SHA-1 when MD5 weaknesses were published in 2004.
No CAs accredited by IGTF currently issue new certificates using MD5.
The IGTF is also phasing out the use of MD5 in CA certificates and CRLs in 2009.

The FNAL KCA is migrating from MD5 to SHA-1 as part of its transition to IGTF-compliant operation in 2009.

Globus Toolkit 4.2.1, 4.0.8, and earlier use MD5-based signatures in proxy certificates.
In later versions, Globus software will create proxy certificates using the hash algorithm found in the
signer's certificate, thereby automatically transitioning to new hash algorithms as they are adopted by CAs.
See [[http://bugzilla.globus.org/globus/show_bug.cgi?id=6613][Bug 6613]] for details.

---++ SHA-1

Currently, all IGTF CAs issue certificates using the SHA-1 hash function.
In 2005, researchers began to demonstrate weaknesses in SHA-1.
According to [[http://csrc.nist.gov/groups/ST/hash/policy.html][NIST's Policy on Hash Functions]],
"Federal agencies should stop using SHA-1 for digital signatures, digital time stamping and other applications that require collision resistance as soon as practical, and must use the SHA-2 family of hash functions for these applications after 2010."
Researchers are actively searching for SHA-1 hash collisions
(see http://www.iaik.tugraz.at/content/research/krypto/sha1/)
that would enable attacks against SHA-1 signatures in X.509 certificates.
Therefore, it is prudent for OSG and the wider grid community to begin migrating to SHA-2.

---++ SHA-2

Before CAs begin issuing certificates using the SHA-2 hash function,
it is necessary for our software and systems to support it.
We track our progress below.

---+++ !OpenSSL

!OpenSSL added support for SHA-2 starting in version 0.9.8.

---+++ Globus Toolkit

Versions 4.0.8 and earlier of the Globus Toolkit contain !OpenSSL 0.9.7 (or earlier), which does not support SHA-2.
Later Globus Toolkit versions (such as 4.0.9 and 4.2) use the !OpenSSL version provided by the operating system.
[[http://vdt.cs.wisc.edu/releases/1.10.0/release.html][VDT 1.10.0]] was the first version to configure Globus to use the operating system's version of !OpenSSL.

When configured to use !OpenSSL 0.9.8 or later, Globus Toolkit C components support SHA-2.
This has been confirmed for !MyProxy, GSI-OpenSSH, and grid-proxy-init so far.

Globus Toolkit Java components use the !BouncyCastle library for certificate validation.
According to the [[http://www.bouncycastle.org/releasenotes.html][release notes]],
!BouncyCastle has supported the SHA-2 algorithms since version 1.27.
Globus Toolkit 4.0.8 contains !BouncyCastle 1.25.
Globus Toolkit 4.2.0 contains !BouncyCastle 1.31.
Further investigation is needed.

---+++ Scientific Linux

Scientific Linux 4 contains !OpenSSL 0.9.7 (which does not support SHA-2).
Scientific Linux 5 contains !OpenSSL 0.9.8 (which supports SHA-2).

---++ References

   * Wikipedia links:
      * [[http://en.wikipedia.org/wiki/Cryptographic_hash_function][Cryptographic hash function]]
      * [[http://en.wikipedia.org/wiki/Digital_signature][Digital signature]]
      * [[http://en.wikipedia.org/wiki/SHA_hash_functions][SHA hash functions]]
