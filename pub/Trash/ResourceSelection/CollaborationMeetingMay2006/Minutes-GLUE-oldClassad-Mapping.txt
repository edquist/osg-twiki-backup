 Meeting: GLUE schema v1.2 mapping to old classad format.
Date: May 31, 2006
Present: Gabriele Garzoglio, Tanya Levshina, Rohit Mathur, Marco Mambelli,
         Shaowen Wang

Goal: discuss the draft of the GLUE to old classad mapping document. We want
to circulate a final version of the document in a few days. Comments will be
accepted for two weeks (mid June).

* General Comments on the document
- The scope for the mapping document should be more specific. In general, the
mapping could be used for (1) resource selection, (2) monitoring, (3) enhancing
the job description with site attributes (not necessarily useful for resource
selection e.g. the path to a software distribution).
We should point out that the mapping focuses on (1) only. (3) is possible with
the ReSS technology for the attributes that are already available. However, we
do not want to include in the mapping attributes that are NOT useful for (1),
in order to keep the complexity low.
- In the GIP, only the configuration of the IDs of the main GLUE entities is
mandatory. All of our considerations for resource selection must keep in mind
that there may be UNDEFINED GLUE attributes. This should be kept in mind in
particular when implementing condor call-out functions.

* Questions from Gabriele's talk
- Do we want to include the LocationPath attribute in the mapping? This may
result in very long classad values and increase complexity. On the other hand,
ut can be useful to enhance the job description at the time of matching
(point 3 from above, rather than point 1).
DZero does not need this information. ATLAS plans to interact with the
information system to get this information after the job is running.
For now, we will NOT include the LocationPath in the mapping.

The Location entity has 3 attributes: name, version, path. The id is a
combination of name + version. For Resource Selection in ATLAS they need both
name and version. In principle they could use the id. However, if the wanted to
use only one or the other, it would be difficult to extract it from id using
classad string operators. We have to be sure that both name and version get
mapped to old classad, if they are present, so that they can be matched
independently.

- What should be the syntax of the function that maps ordered values in lists?
A site may have more than one location entity. The attributes are mapped to old
classad in the following way. Each attribute appears once. Its value is the
list (comma separated string) of all the values from the different location
entities for that attribute. For any attribute, the position of each value in
the list is the same for a given location entity. In  other words, if Location
X has position 3 in the list of the Name attribute, it will have position 3 in
the list for the Version attribute.
In principle, a user might want to select on an ntuple of values. For example,
"select the classad that has location entity with attributes
(name=MyName, version=MyVersion)".
How should the function look like?

If the user wants to match on a pair of value, it could be
matchOrderedPair(AttributeName1, AttrbuteName1, Value1, Value2)
In general it could be
matchOrderedNTuple( NumberOfAttributes, AttributeName1, AttributeName2, ... , 
                                        Value1, Value2, ...)
The ReSS project will provide an implementation for matchOrderedPair first and
work on the more general matchOrderedNTuple at a later time.

- Do we want to define a mapping for the Site entity?
Most site attributes involve geographic location, name, contact info, "sponsor"
(VO) of the site (who pays for it). The sponsor might be useful in resource
selection, in principle (we cannot find a use case). Site name might be useful
for job logs or monitoring. However, one could in principle use GlueCEName as
a similar attribute that is there already for resource selection.
We will NOT probive a mapping for the Site entity for now

- Do we want to list the condor-specific rules (definition of MyTarget, MyType,
Name) as part of the mapping?
It is useful to have them in the document, to provide a reference for the
implementation of the mapping e.g. to define how to construct the Name
attribute. However, these rules are specific to the match making technology.
We will keep the rules in the document in a separate subparagraph.





