GLUE schema mapping to old classad format.

*Date: March 14, 2006

*Attendees:
Gabriele Garzoglio (GG), Shaowen Wang (SW), Marco Mambelli (MM), 
Sergio Andreozzi (SA), Sudhamsh Reddy (SR)

*Summary and relevant observations:

- Outcome: At the meeting we agreed to write a document to describe the mapping
  between the GLUE description of computing resources and old classad. The 
  document will contain an example with all the attributes from the GLUE schema
  and a description section to clarify the example (as some mapping choices are
  driven by the technologies that use the classad). The document could contain
  also the GLUE LDIF representation to old classad algorithm. We should focus
  on GLUE v1.2, so that the VO view element (see next point) is also considered
  (the element was not present in v1.1).

- It is important to introduce the notion of VO roles in the mapping (expressed
  in the VO view element in GLUE v1.2), as ATLAS and other VOs (e.g. CMS) are 
  interested in selecting resources based on the policies for a given VO role at
  the site. This is particularly relevant, as in OSG we are moving to a model 
  where there is a single CE (batch system queue) per cluster (as opposed to
  LCG, where there is a CE per VO) and VO/role policies are implemented with
  appropriate DN to UID mappings. Expressing VO roles in old classad should not
  have a big impact in the classad multiplicity (in average, the number of
  classad increases only by the average number of VO roles supported)

- No VO is currently interested in exploring the mapping for the storage 
  element schema.

- Mapping GLUE v1.2 presents problems not faced in the v1.1 mapping (currently
  implemented by ReSS). In particular, v1.2 contains the "location" attribute,
  which expresses the triplet (name, version, path) of an application. It is
  not clear how to handle the triplet (ignore it? Fully stringify it?
  Stringify only part of it?). In principle, only name and version are
  interesting for resource selection, but in this case, v1.1 has already some
  similar attributes (are they the same or not?).

*Minutes:
(Note: comments in [...] represent elaborations on the subject after the
meeting)

GG: presents his talk.

MM:
Comments on the talk.
ATLAS is mostly interested in the mapping for computing resources (as DZero).
Storage Elements are managed by the atlas data handling system. [Torre confirms
this during the 2nd part of the meeting]

A problem noticed in the configuration of computing resources is that
subclusters are not properly defined i.e. GIP are configured to publish
information about one subcluster only, but the subcluster is heterogeneous
(against the definition of subcluster). For example, I've seen this at BNL and
OU.

The description of the resources (e.g. resource availability at the level of
the subcluster) may depend on the role of the person. More in detail, ATLAS
identifies 4 roles, which affect the priority on the batch system: production,
general user, debugging/maintenance , non-usatlas user.  The direction of ATLAS
institutions is reserving part of the cluster to production, therefore the
ability to access this subcluster depends on the role of the user. In GLUE v1.2
there is the concept of VO view, which can describe cases such as this. This
was not available in GLUE v1.1.

[ReSS is has been concentrating on v1.1 . Currently OSG is almost completely
moved to GLUE v1.2 . GLUE v1.2 is backward compatible with v1.1: the mapping
developed for v1.1 (e.g. involving CE, cluster, and subcluster) will work on
v1.2, even if it will not take advantage of the new constructs, such as VO
view.]

GG: Are role policies implemented submitting jobs to a different queue for
every VO [like LCG does]? Or policies are implemented using user mapping ?

MM:
Currently, users submit to a single atlas CE (i.e. queue), then the local
DN->UID mapping determines the policy.
In GLUE v1.2, the VO view element contains most of the policy information about
priorities.

GG:
For resource selection, it would be responsibility of the user to declare the
person role in the job description, so that the resource with the appropriate
role-based policies can be selected.

Introducing a VO View would be dealing with a 4th element to characterize the
site (in addition to CE, cluster, subcluster). This may increase the
multiplicity of the old classads published by each site considerably: is this
going to be a scalability problem. [Probably not. In fact, as emerged by the
discussion, the multiplicity is not increased drastically, as in this model
there is one CE per site (instead of one CE per VO) and different roles per
VO: the multiplicity is the number of VO times the number of roles only.
Currently it is, in practice, the number of CE (one per VO).]

MM:
from the point of view of the match making, match should be fast, because VO
and role is a boolean requirement condition.

MM:
Using comma as a separator in the list string may lead to problems: if a value
has a comma AND the value belongs to an attribute that is converted to an old
classad list (comma-separated string), then this is a problem. In practive, I
don't think comma is very used in strings

GG:
We can also think of using a different separator (e.g. multiple character
separators)

SW: currently in OSG we have v1.2, which should be compatible with v1.1
On the subcluster heterogeneity problem, today cluster and subcluster are not
differenciated (even if they are present individually in the GIP
configuration). It is not ReSS responsibiliy to worry about this: it is the
site responsibility to enforce homogeneity within a subcluster in the GIP
configuration.
To define a subcluster, we copy info from cluster to subcluster.

SA: what does it mean? Info in cluster and subcluster are different.

SW: we fill in the information that we have available from the cluster.

All: Looking at ldap server at rsgrid3.its.uiowa.edu (OSG ITB at Uiowa)

SA: it is similar to the way it is configured in LCG

SA: on the old classad multiplicity: the many to many relationship between CE
and cluster was an initial requirement: it is de facto never used. The many to
one CE->cluster relationship is formalized in glue v1.2. We should all use GLUE
v1.2.

SA: in GLUE v1.2 there is the new attribute "location": it is a list of
triplets: local id (name), version, path (e.g. atlas software...). The
attribute is part of the subcluster (defines the execution environment).
Problem: there may be multiple locations attributes in a subcluster: how do we
map such triplet to an old classad?

MM: currently we have an alternative way to make the "location" known to the
job: we can use the environment initialized by the job manager. There isn't
therefore a stringent need to have the information on the "location" in the
information system now.

GG: I see 2 solutions:
- ignore the attribute (as MM argues)
- stringify the triplet with some convention and comma-separate multiple
  locations for lists (as we do today).

MM: Knowing that one version of the software is installed is most important
for resource selection i.e. we only need the name and version fields of the
location. The path field can be figured out later using the environment.

GG: [GLUE currently supports application name and version as the
GlueHostApplicationSoftwareRunTimeEnvironment attribute: it is not clear that
this is really equivalent to the concept of location.name and
location.version]. If we stringify the triplet, we could put all the info in
the classad (name, version, path). For resource selection, we could investigate
matching on only the name/version part of the substring using call outs. This
would be matching a substring (name/version) of a substring (comma-separated
list expressed as a string), which may be inefficient.
Otherwise it may turn out that we we need to change the way we manage lists.
UIowa proposed other two mechanisms [documented in the email thread at
http://osg.ivdgl.org/twiki/bin/view/ResourceSelection/CEMonCollaboration]

SW: to understand the relative efficiency of the various methods, it turns out
that we need to do a large scale test. Erik succeeded in configuring our local
condor pool to use call out and the other list handling mechanisms in the same
environment. There was no significant difference in performance, but the test
was small scale.
GG: it would be interesting to see the results you have.
SW: we still need to finalize our results. We'll also need to come up with a
better test environment.

MM: we can have a direct GLUE mapping to old classad: we do not need to pass
through LDIF.
SA: we can publish the solution in the GLUE web site, without LDIF translation
rules. GG: we can write initial document with the translation then show it to
the people in this group
MM: in reality, the doc can describe both the mapping algorithm from LDIF and
the abstract mapping.
SA: for the abstract mapping, since classad does not have a schema, a complete
example that includes all the glue schema attributes is the way to go. In
addition, there should be some descriptive part of how the mapping was done.
You can take inspiration from the other mapping docs, which are in the glue
schema web site:
http://infnforge.cnaf.infn.it/glueinfomodel/

SA: we have already worked on the mapping of the vo view element (GLUE v1.2) to
new classad:  this can help the mapping to old classad. The VO view is
considered a specialization of the CE attributes. For each VO view, we create a
virtual CE, whose attributes are filled in with VO-specific values expressed in
the VO view element. The we put the new classad together with the
cluser/subcluster info + the virtual CE info. This will be supported in WMS
gLite 3.1. Currently it is not well documented yet.
GG: can you send us the docs that you have and some example?
Sergio: OK

GG: we will start writing the doc, then go back to people with open problems
(e.g. locations) and questions (e.g. mapping to VO view from glue v1.2)


