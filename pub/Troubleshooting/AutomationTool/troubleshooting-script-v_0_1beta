#!/bin/bash
#### This troubleshooting script has been written by Eric Shook and Anand Padmanabhan of the GROW team. 
#### Draft Version: 0.1 Beta
#### Release Notes:
#### 	This software provides a relatively simple test suite, that would automate the process of the steps identified in the current troubleshooting guides.
#### 	It is trageted towards the user community mainly to help (novice) users to self troubleshoot issues they may encounter to run jobs on OSG.
#### 	Currently this code performs the following simple tests: checking versions of client tools, checking user proxy, runs authntication check and fork and batch system job.  

#### The numbering system (1.1, 1.21 etc) is just so that we can seperate tests to sections and write a corresponding user guide. This is currently adhoc and is likely to change.
function output_info()
{
	[ -z "$3" ] && echo "ERROR CALLING output_error() function"
	if [ $1 != 0 ]; then
		echo " [ ERROR ] Error Detected in Test: $2";
		echo " [ ERROR ] Error Details         : $3";
		exit $1;
	else
		echo " [ PASS  ]  Info: \"$2\"         ";
#		echo "[ PASS  ] Test Details          : $3";
	fi
	echo
}

##### Check Usage Errors ######
#echo "#####  Checking Usage #####"
#ERR=0
#[ -z "$0" ] && ERR=1
#output_info $ERR "Usage" "Correct Usage: \$0 hostname jobmanager"
#host=$1
#jobmanager=$2

host=`hostname`
echo ""
echo -n "Please enter a CE host name [$host]: "
read in
test -n "$in" && host=${in}
echo ""


##### Check if Valid Host #####
echo "##### 1.1 Checking if hostname can be resolved #####"
validHost=`host $host | grep 'not found'`
[ "$validHost" != "" ] && ERR=1
output_info $ERR "Checking Host" 'Host cannot be resolved. Please check your hostname'

###### environment errors #######

##### Check for client tools #####
echo "##### 1.20 Checking for client tools #####"
which=`which grid-proxy-info 2>1`
output_info $? 'Searching for grid-proxy-info' "Check to make sure that client tools are in path. If using OSG/VDT client tools package, please source \$VDT_LOCATION/setup.sh."

#### Get VDT/OSG/globus/condor version #####
which=`which condor_version 2>1`
if [ $? == 0 ]; then
	echo "##### 1.21 Checking condor version #####"
	condorv=`condor_version 2>1 | grep 'CondorVersion' | gawk '{print $2}'` 
        output_info $? "Condor Version $condorv" "Condor version failed to return successfully"
fi

which=`which vdt-version 2>1`
if [ $? == 0 ]; then
	echo "##### 1.22 Checking vdt version #####"
	vdtv=`vdt-version 2>1` 
        ERR=$?
        output_info $ERR "VDT Version" "VDT version failed to return successfully"
        if [ $ERR == 0 ]; then 
		echo "$vdtv"
		echo
	fi
fi

which=`which globus-version 2>1`
if [ $? == 0 ]; then
	echo "##### 1.23 Checking Globus version #####"
	globusv=`globus-version 2>1` 
        output_info $? "Globus Version $globusv" "Globus version failed to return successfully"
fi

if [ "$VDT_LOCATION" != "" ]; then
	echo "##### 1.24 Checking OSG version #####"
	osgv=`$VDT_LOCATION/osg-version 2>1` 
        output_info $? "OSG Version: $osgv" "OSG version failed to return successfully"
fi

##### Check for valid proxy #####
echo "##### 1.3 Checking Proxy #####"
proxy=`grid-proxy-info 2>1`
ERR=$?
if [ $ERR != 0 ]; then
	info="does not exist"
else
	info="exists"
fi
output_info $ERR "Proxy $info" "Proxy not setup. Please run grid-proxy-init (or voms-proxy-init) to generate your proxy"


ERR=0
proxy=`grid-proxy-info | grep ^timeleft | awk '{print $3}'`
[ "$proxy" == "0:00:00" ] && ERR=1
if [ $ERR != 0 ]; then
	info="expired"
else
	info="valid"
fi
output_info $ERR "Proxy $info" "Proxy expired. Please run grid-proxy-init (or voms-proxy-init) to generate your proxy"



##### Checking Globus jobs ######

echo "##### 2.1 Checking Authentication #####"
globusrun -a -r $host 2>1 > /dev/null
output_info $? "Authentication Tests" "Could not authenticate to $host"

echo "##### 2.2 Checking Simple Fork Job #####"
globus-job-run $host /bin/date 2>1 > /dev/null
output_info $? "Simple fork jobs" "Could not run a simple fork job at $host. Globus error code $?."

echo "##### 2.3 Checking Simple Jobmanager Job #####"
jobmanager='condor'
echo ""
echo -n "Please enter a CE host name [$jobmanager]: "
read in
test -n "$in" && jobmanager=${in}
echo ""
globus-job-run $host/jobmanager-$jobmanager /bin/date 2>1 > /dev/null
output_info $? "Simple $jobmanager test" "Could not run $jobmanager job at $host. Globus error code: $?."

##### job execution tests using rsl ######
cat > test.rsl << EOF
&(executable=/bin/echo)
(arguments=TestSuccess)
(stdout=/tmp/stdout.1234321)
(stderr=/tmp/stderr.1234321)
EOF

echo "##### 2.4 Checking Simple RSL Job Submission #####"
globusrun -r $host -f test.rsl 2>1 > /dev/null
output_info $? "Simple rsl job submission" "Could not run a simple RSL job. Globus error code: $?."

###### data tests #####

### TODO: Should we include this. What if there is no gsiftp server on the SE. Should we get information from GIP?
gsiftphost=${host}
echo "##### 3.0 Checking simple data transfers #####"
echo ""
echo -n "Please enter a gsiftp server name [$gsiftphost]: "
read in
test -n "$in" && gsiftphost=${in}
echo ""
##### Check if Valid Host #####
echo "##### 3.1 Checking if hostname can be resolved #####"
validHost=`host $gsiftphost | grep 'not found'`
[ "$validHost" != "" ] && ERR=1
output_info $ERR "Checking gsiftpserver hostname" 'Hostname of gsiftpserver cannot be resolved. Please check your hostname'


echo "test" > `pwd`/stdout.123454321
echo "##### 3.2 Checking file transfer from local -> remote #####"
globus-url-copy file://`pwd`/stdout.123454321 gsiftp://$gsiftphost/tmp/stdout.1234321 >/dev/null
#echo "globus-url-copy file://`pwd`/stdout.123454321 gsiftp://$gsiftphost/tmp/stdout.1234321 2>1 >/dev/null"
output_info $? 'Simple data transfer (local -> remote)' "Failed to transfer file from file://`pwd`/stdout.123454321 to gsiftp://$gsiftphost/tmp/stdout.1234321."

echo "##### 3.3 Checking file transfer from remote -> local #####"
globus-url-copy gsiftp://$gsiftphost/tmp/stdout.1234321 file://`pwd`/stdout.1234321 >/dev/null
output_info $? 'Simple data transfer (remote->local)' "Failed to transfer file from  gsiftp://$gsiftphost/tmp/stdout.1234321 to file://`pwd`/stdout.1234321. "

ERR=0
echo "##### 3.4 Checking data sanity after transfers #####"
[ "test" != "`cat stdout.1234321`" ] && ERR=1
output_info $ERR 'Simple data sanity' "Failed to maintain sanity of data during transfer."

echo "" > `pwd`/stdout.123454321
echo "##### 3.5 Checking overwrite capability for data transfer #####"
globus-url-copy file://`pwd`/stdout.123454321 gsiftp://$host/tmp/stdout.1234321 > /dev/null
globus-url-copy gsiftp://$host/tmp/stdout.1234321 file://`pwd`/stdout.1234321 > /dev/null
ERR=0
[ "" != "`cat stdout.1234321`" ] && ERR=1
output_info $ERR "Checking overwrite capability" "Could not overwrite data. "

###### cleanup ####

echo "##### 4.0 Cleanup #####"
rm -f test.rsl stdout.1234321 stdout.123454321 #stdout.123 stdlog.123 stderr.123 condor.submit
output_info $? 'Cleanup' 'Cleanup of local files failed'

echo "[ SUCCESSFUL! ]"

exit 0
### Temporary end of program


#############################################################################################################



### Below we are continuing to develop the script to add new functionality, but it is untested

##### job execution tests ####

cat > test.rsl << EOF
&(executable=/bin/cat)
(arguments=/tmp/1234321)
(stdout=/tmp/stdout.123454321)
(stderr=/tmp/stderr.123454321)
EOF

echo "##### 2.5 Checking Simple RSL Job Submission with Data Transfer #####"
globusrun -r $host -f test.rsl 2>1 > /dev/null
#output_info $? 'Checking Simple rsl with data transfer' "Could not run simple RSL jobs with data transfer. Globus error code: $?."


###### data tests #####
#### TODO: Does this add value??

globus-url-copy gsiftp://$host/tmp/stdout.1234321 file://`pwd`/stdout.1234321
#output_info $? 'simple data copy from failed' 504

ERR=0
echo > stdout.123454321
echo "TestSuccess" >> stdout.123454321
[ "`cat stdout.123454321`" != "`cat stdout.1234321`" ] && ERR=1
#output_info $ERR 'simple data copy not correct' 505


###### data tests #####

globus-url-copy gsiftp://$host/tmp/stdout.1234321 file://`pwd`/stdout.1234321

ERR=0
[ "`cat stdout.123454321`" != "`cat stdout.1234321`" ] && ERR=1
output_info $ERR 'data rsl job data not correct' 506


####### CONDOR #########
cat > condor.submit << EOF
globusscheduler = $host/jobmanager-$jobmanager
executable = /usr/bin/cal
transfer_executable = false
should_transfer_files = NO
universe = globus
output = stdout.123
log = stdlog.123
error = stderr.123
queue
EOF

# FIXME: Skipped, waiting for job submitter
#condor_submit condor.submit
#output_info $? 'simple condor submit failed' 105







